; Listing generated by Microsoft (R) Optimizing Compiler Version 19.40.33813.0 

	TITLE	D:\pw152\Common\SpeedTreeRT\RT_DynamicLib\Debug VC 6.0\IdvSpline.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
?piecewise_construct@std@@3Upiecewise_construct_t@1@B	ORG $+1 ; std::piecewise_construct
	ORG $+7
?g_fIdvACosTable@@3QBMB DD 040490fdbr		; 3.14159 ; g_fIdvACosTable
	DD	040470fd5r			; 3.11034
	DD	040463bb8r			; 3.09739
	DD	0404598f0r			; 3.08746
	DD	040450fb0r			; 3.07908
	DD	0404496c1r			; 3.0717
	DD	040442969r			; 3.06503
	DD	04043c4d8r			; 3.05889
	DD	04043673ar			; 3.05318
	DD	040430f4ar			; 3.04781
	DD	04042bc1cr			; 3.04273
	DD	040426cfbr			; 3.0379
	DD	04042215er			; 3.03329
	DD	04041d8d5r			; 3.02886
	DD	040419308r			; 3.0246
	DD	040414fadr			; 3.02049
	DD	040410e85r			; 3.01651
	DD	04040cf5cr			; 3.01266
	DD	040409207r			; 3.00891
	DD	04040565er			; 3.00527
	DD	040401c41r			; 3.00172
	DD	0403fe391r			; 2.99826
	DD	0403fac35r			; 2.99489
	DD	0403f7616r			; 2.99158
	DD	0403f411fr			; 2.98835
	DD	0403f0d3er			; 2.98518
	DD	0403eda63r			; 2.98208
	DD	0403ea87er			; 2.97903
	DD	0403e7782r			; 2.97604
	DD	0403e4763r			; 2.97311
	DD	0403e1814r			; 2.97022
	DD	0403de98dr			; 2.96738
	DD	0403dbbc3r			; 2.96459
	DD	0403d8eadr			; 2.96183
	DD	0403d6243r			; 2.95912
	DD	0403d367er			; 2.95645
	DD	0403d0b56r			; 2.95382
	DD	0403ce0c6r			; 2.95122
	DD	0403cb6c6r			; 2.94866
	DD	0403c8d52r			; 2.94613
	DD	0403c6463r			; 2.94363
	DD	0403c3bf6r			; 2.94116
	DD	0403c1405r			; 2.93872
	DD	0403bec8br			; 2.93631
	DD	0403bc585r			; 2.93393
	DD	0403b9eefr			; 2.93158
	DD	0403b78c5r			; 2.92925
	DD	0403b5303r			; 2.92694
	DD	0403b2da6r			; 2.92466
	DD	0403b08abr			; 2.9224
	DD	0403ae410r			; 2.92017
	DD	0403abfd0r			; 2.91796
	DD	0403a9bear			; 2.91577
	DD	0403a785ar			; 2.9136
	DD	0403a551fr			; 2.91145
	DD	0403a3236r			; 2.90931
	DD	0403a0f9dr			; 2.9072
	DD	04039ed51r			; 2.90511
	DD	04039cb51r			; 2.90303
	DD	04039a99br			; 2.90098
	DD	04039882cr			; 2.89894
	DD	040396703r			; 2.89691
	DD	04039461fr			; 2.8949
	DD	04039257dr			; 2.89291
	DD	04039051dr			; 2.89094
	DD	04038e4fbr			; 2.88898
	DD	04038c518r			; 2.88703
	DD	04038a571r			; 2.8851
	DD	040388606r			; 2.88318
	DD	0403866d5r			; 2.88128
	DD	0403847dcr			; 2.87939
	DD	04038291ar			; 2.87751
	DD	040380a8fr			; 2.87564
	DD	04037ec3ar			; 2.87379
	DD	04037ce18r			; 2.87195
	DD	04037b029r			; 2.87013
	DD	04037926cr			; 2.86831
	DD	0403774e0r			; 2.86651
	DD	040375784r			; 2.86472
	DD	040373a57r			; 2.86294
	DD	040371d59r			; 2.86117
	DD	040370088r			; 2.85941
	DD	04036e3e3r			; 2.85766
	DD	04036c76ar			; 2.85592
	DD	04036ab1cr			; 2.85419
	DD	040368ef7r			; 2.85248
	DD	0403672fdr			; 2.85077
	DD	04036572br			; 2.84907
	DD	040363b80r			; 2.84738
	DD	040361ffer			; 2.8457
	DD	0403604a1r			; 2.84403
	DD	04035e96br			; 2.84237
	DD	04035ce5ar			; 2.84072
	DD	04035b36dr			; 2.83908
	DD	0403598a5r			; 2.83744
	DD	040357e00r			; 2.83582
	DD	04035637er			; 2.8342
	DD	04035491fr			; 2.83259
	DD	040352ee1r			; 2.83099
	DD	0403514c5r			; 2.82939
	DD	04034facar			; 2.82781
	DD	04034e0efr			; 2.82623
	DD	04034c734r			; 2.82466
	DD	04034ad98r			; 2.8231
	DD	04034941br			; 2.82154
	DD	040347abdr			; 2.81999
	DD	04034617cr			; 2.81845
	DD	04034485ar			; 2.81692
	DD	040342f54r			; 2.81539
	DD	04034166cr			; 2.81387
	DD	04033fd9fr			; 2.81235
	DD	04033e4efr			; 2.81085
	DD	04033cc5ar			; 2.80935
	DD	04033b3e1r			; 2.80785
	DD	040339b82r			; 2.80637
	DD	04033833er			; 2.80489
	DD	040336b14r			; 2.80341
	DD	040335304r			; 2.80194
	DD	040333b0er			; 2.80048
	DD	040332330r			; 2.79902
	DD	040330b6cr			; 2.79757
	DD	04032f3c0r			; 2.79613
	DD	04032dc2cr			; 2.79469
	DD	04032c4b0r			; 2.79325
	DD	04032ad4cr			; 2.79183
	DD	0403295ffr			; 2.79041
	DD	040327ecar			; 2.78899
	DD	0403267abr			; 2.78758
	DD	0403250a2r			; 2.78617
	DD	0403239b0r			; 2.78477
	DD	0403222d4r			; 2.78338
	DD	040320c0dr			; 2.78199
	DD	04031f55cr			; 2.7806
	DD	04031dec0r			; 2.77922
	DD	04031c839r			; 2.77785
	DD	04031b1c7r			; 2.77648
	DD	040319b6ar			; 2.77511
	DD	040318521r			; 2.77375
	DD	040316eebr			; 2.77239
	DD	0403158car			; 2.77104
	DD	0403142bcr			; 2.7697
	DD	040312cc2r			; 2.76836
	DD	0403116dbr			; 2.76702
	DD	040310107r			; 2.76569
	DD	04030eb46r			; 2.76436
	DD	04030d597r			; 2.76304
	DD	04030bffbr			; 2.76172
	DD	04030aa71r			; 2.7604
	DD	0403094f9r			; 2.75909
	DD	040307f93r			; 2.75779
	DD	040306a3er			; 2.75648
	DD	0403054fbr			; 2.75519
	DD	040303fc9r			; 2.75389
	DD	040302aa9r			; 2.7526
	DD	040301599r			; 2.75132
	DD	04030009ar			; 2.75004
	DD	0402febacr			; 2.74876
	DD	0402fd6cer			; 2.74749
	DD	0402fc201r			; 2.74622
	DD	0402fad44r			; 2.74495
	DD	0402f9896r			; 2.74369
	DD	0402f83f9r			; 2.74243
	DD	0402f6f6br			; 2.74118
	DD	0402f5aedr			; 2.73992
	DD	0402f467er			; 2.73868
	DD	0402f321fr			; 2.73743
	DD	0402f1dcer			; 2.73619
	DD	0402f098dr			; 2.73496
	DD	0402ef55ar			; 2.73373
	DD	0402ee136r			; 2.7325
	DD	0402ecd21r			; 2.73127
	DD	0402eb91ar			; 2.73005
	DD	0402ea522r			; 2.72883
	DD	0402e9137r			; 2.72761
	DD	0402e7d5br			; 2.7264
	DD	0402e698dr			; 2.72519
	DD	0402e55ccr			; 2.72399
	DD	0402e4219r			; 2.72278
	DD	0402e2e74r			; 2.72159
	DD	0402e1adcr			; 2.72039
	DD	0402e0752r			; 2.7192
	DD	0402df3d5r			; 2.71801
	DD	0402de065r			; 2.71682
	DD	0402dcd02r			; 2.71564
	DD	0402db9acr			; 2.71446
	DD	0402da662r			; 2.71328
	DD	0402d9326r			; 2.71211
	DD	0402d7ff6r			; 2.71094
	DD	0402d6cd2r			; 2.70977
	DD	0402d59bbr			; 2.7086
	DD	0402d46b0r			; 2.70744
	DD	0402d33b1r			; 2.70628
	DD	0402d20bfr			; 2.70512
	DD	0402d0dd8r			; 2.70397
	DD	0402cfafer			; 2.70282
	DD	0402ce82fr			; 2.70167
	DD	0402cd56cr			; 2.70053
	DD	0402cc2b4r			; 2.69938
	DD	0402cb008r			; 2.69824
	DD	0402c9d67r			; 2.69711
	DD	0402c8ad2r			; 2.69597
	DD	0402c7848r			; 2.69484
	DD	0402c65car			; 2.69371
	DD	0402c5356r			; 2.69259
	DD	0402c40edr			; 2.69146
	DD	0402c2e90r			; 2.69034
	DD	0402c1c3dr			; 2.68922
	DD	0402c09f5r			; 2.68811
	DD	0402bf7b7r			; 2.68699
	DD	0402be585r			; 2.68588
	DD	0402bd35cr			; 2.68478
	DD	0402bc13er			; 2.68367
	DD	0402baf2br			; 2.68257
	DD	0402b9d22r			; 2.68147
	DD	0402b8b23r			; 2.68037
	DD	0402b792er			; 2.67927
	DD	0402b6744r			; 2.67818
	DD	0402b5563r			; 2.67709
	DD	0402b438dr			; 2.676
	DD	0402b31c0r			; 2.67491
	DD	0402b1ffdr			; 2.67383
	DD	0402b0e44r			; 2.67275
	DD	0402afc94r			; 2.67167
	DD	0402aeaeer			; 2.67059
	DD	0402ad952r			; 2.66951
	DD	0402ac7bfr			; 2.66844
	DD	0402ab635r			; 2.66737
	DD	0402aa4b5r			; 2.6663
	DD	0402a933er			; 2.66524
	DD	0402a81d0r			; 2.66417
	DD	0402a706cr			; 2.66311
	DD	0402a5f10r			; 2.66205
	DD	0402a4dber			; 2.661
	DD	0402a3c74r			; 2.65994
	DD	0402a2b34r			; 2.65889
	DD	0402a19fcr			; 2.65784
	DD	0402a08cdr			; 2.65679
	DD	04029f7a7r			; 2.65574
	DD	04029e68ar			; 2.6547
	DD	04029d575r			; 2.65365
	DD	04029c468r			; 2.65261
	DD	04029b365r			; 2.65157
	DD	04029a269r			; 2.65054
	DD	040299177r			; 2.6495
	DD	04029808cr			; 2.64847
	DD	040296faar			; 2.64744
	DD	040295ed0r			; 2.64641
	DD	040294dfer			; 2.64539
	DD	040293d34r			; 2.64436
	DD	040292c73r			; 2.64334
	DD	040291bbar			; 2.64232
	DD	040290b08r			; 2.6413
	DD	04028fa5fr			; 2.64028
	DD	04028e9bdr			; 2.63927
	DD	04028d923r			; 2.63825
	DD	04028c891r			; 2.63724
	DD	04028b807r			; 2.63623
	DD	04028a785r			; 2.63522
	DD	04028970ar			; 2.63422
	DD	040288697r			; 2.63321
	DD	04028762br			; 2.63221
	DD	0402865c7r			; 2.63121
	DD	04028556ar			; 2.63021
	DD	040284515r			; 2.62922
	DD	0402834c7r			; 2.62822
	DD	040282481r			; 2.62723
	DD	040281442r			; 2.62624
	DD	04028040ar			; 2.62525
	DD	04027f3d9r			; 2.62426
	DD	04027e3b0r			; 2.62327
	DD	04027d38er			; 2.62229
	DD	04027c372r			; 2.6213
	DD	04027b35er			; 2.62032
	DD	04027a351r			; 2.61934
	DD	04027934br			; 2.61837
	DD	04027834cr			; 2.61739
	DD	040277354r			; 2.61641
	DD	040276362r			; 2.61544
	DD	040275378r			; 2.61447
	DD	040274394r			; 2.6135
	DD	0402733b7r			; 2.61253
	DD	0402723e1r			; 2.61156
	DD	040271411r			; 2.6106
	DD	040270448r			; 2.60964
	DD	04026f485r			; 2.60867
	DD	04026e4car			; 2.60771
	DD	04026d514r			; 2.60676
	DD	04026c566r			; 2.6058
	DD	04026b5bdr			; 2.60484
	DD	04026a61br			; 2.60389
	DD	040269680r			; 2.60294
	DD	0402686ebr			; 2.60198
	DD	04026775cr			; 2.60104
	DD	0402667d3r			; 2.60009
	DD	040265851r			; 2.59914
	DD	0402648d5r			; 2.5982
	DD	04026395fr			; 2.59725
	DD	0402629efr			; 2.59631
	DD	040261a86r			; 2.59537
	DD	040260b22r			; 2.59443
	DD	04025fbc5r			; 2.59349
	DD	04025ec6dr			; 2.59256
	DD	04025dd1cr			; 2.59162
	DD	04025cdd1r			; 2.59069
	DD	04025be8br			; 2.58975
	DD	04025af4cr			; 2.58882
	DD	04025a012r			; 2.58789
	DD	0402590der			; 2.58697
	DD	0402581b0r			; 2.58604
	DD	040257288r			; 2.58512
	DD	040256365r			; 2.58419
	DD	040255449r			; 2.58327
	DD	040254532r			; 2.58235
	DD	040253620r			; 2.58143
	DD	040252715r			; 2.58051
	DD	04025180fr			; 2.57959
	DD	04025090er			; 2.57868
	DD	04024fa13r			; 2.57776
	DD	04024eb1er			; 2.57685
	DD	04024dc2er			; 2.57594
	DD	04024cd44r			; 2.57503
	DD	04024be5fr			; 2.57412
	DD	04024af7fr			; 2.57321
	DD	04024a0a5r			; 2.5723
	DD	0402491d0r			; 2.5714
	DD	040248301r			; 2.5705
	DD	040247437r			; 2.56959
	DD	040246572r			; 2.56869
	DD	0402456b3r			; 2.56779
	DD	0402447f9r			; 2.56689
	DD	040243944r			; 2.566
	DD	040242a94r			; 2.5651
	DD	040241be9r			; 2.5642
	DD	040240d44r			; 2.56331
	DD	04023fea3r			; 2.56242
	DD	04023f008r			; 2.56153
	DD	04023e172r			; 2.56064
	DD	04023d2e1r			; 2.55975
	DD	04023c455r			; 2.55886
	DD	04023b5cer			; 2.55797
	DD	04023a74cr			; 2.55709
	DD	0402398cfr			; 2.5562
	DD	040238a57r			; 2.55532
	DD	040237be3r			; 2.55444
	DD	040236d75r			; 2.55356
	DD	040235f0cr			; 2.55268
	DD	0402350a7r			; 2.5518
	DD	040234247r			; 2.55092
	DD	0402333ecr			; 2.55004
	DD	040232596r			; 2.54917
	DD	040231745r			; 2.5483
	DD	0402308f8r			; 2.54742
	DD	04022fab0r			; 2.54655
	DD	04022ec6dr			; 2.54568
	DD	04022de2er			; 2.54481
	DD	04022cff4r			; 2.54394
	DD	04022c1bfr			; 2.54308
	DD	04022b38er			; 2.54221
	DD	04022a562r			; 2.54134
	DD	04022973br			; 2.54048
	DD	040228918r			; 2.53962
	DD	040227af9r			; 2.53876
	DD	040226ce0r			; 2.5379
	DD	040225ecar			; 2.53704
	DD	0402250b9r			; 2.53618
	DD	0402242adr			; 2.53532
	DD	0402234a5r			; 2.53446
	DD	0402226a1r			; 2.53361
	DD	0402218a2r			; 2.53275
	DD	040220aa8r			; 2.5319
	DD	04021fcb1r			; 2.53105
	DD	04021eebfr			; 2.5302
	DD	04021e0d1r			; 2.52935
	DD	04021d2e8r			; 2.5285
	DD	04021c503r			; 2.52765
	DD	04021b722r			; 2.5268
	DD	04021a945r			; 2.52596
	DD	040219b6dr			; 2.52511
	DD	040218d99r			; 2.52427
	DD	040217fc9r			; 2.52342
	DD	0402171fdr			; 2.52258
	DD	040216436r			; 2.52174
	DD	040215672r			; 2.5209
	DD	0402148b3r			; 2.52006
	DD	040213af8r			; 2.51922
	DD	040212d41r			; 2.51839
	DD	040211f8er			; 2.51755
	DD	0402111dfr			; 2.51672
	DD	040210434r			; 2.51588
	DD	04020f68dr			; 2.51505
	DD	04020e8ebr			; 2.51422
	DD	04020db4cr			; 2.51338
	DD	04020cdb1r			; 2.51255
	DD	04020c01ar			; 2.51172
	DD	04020b287r			; 2.5109
	DD	04020a4f8r			; 2.51007
	DD	04020976dr			; 2.50924
	DD	0402089e6r			; 2.50842
	DD	040207c63r			; 2.50759
	DD	040206ee4r			; 2.50677
	DD	040206168r			; 2.50595
	DD	0402053f1r			; 2.50512
	DD	04020467dr			; 2.5043
	DD	04020390dr			; 2.50348
	DD	040202ba1r			; 2.50266
	DD	040201e38r			; 2.50184
	DD	0402010d3r			; 2.50103
	DD	040200373r			; 2.50021
	DD	0401ff615r			; 2.49939
	DD	0401fe8bcr			; 2.49858
	DD	0401fdb66r			; 2.49777
	DD	0401fce14r			; 2.49695
	DD	0401fc0c6r			; 2.49614
	DD	0401fb37br			; 2.49533
	DD	0401fa634r			; 2.49452
	DD	0401f98f1r			; 2.49371
	DD	0401f8bb1r			; 2.4929
	DD	0401f7e75r			; 2.49209
	DD	0401f713dr			; 2.49129
	DD	0401f6408r			; 2.49048
	DD	0401f56d6r			; 2.48968
	DD	0401f49a9r			; 2.48887
	DD	0401f3c7er			; 2.48807
	DD	0401f2f58r			; 2.48726
	DD	0401f2234r			; 2.48646
	DD	0401f1515r			; 2.48566
	DD	0401f07f8r			; 2.48486
	DD	0401efae0r			; 2.48406
	DD	0401eedcbr			; 2.48326
	DD	0401ee0b9r			; 2.48247
	DD	0401ed3aar			; 2.48167
	DD	0401ec69fr			; 2.48087
	DD	0401eb998r			; 2.48008
	DD	0401eac94r			; 2.47928
	DD	0401e9f93r			; 2.47849
	DD	0401e9296r			; 2.4777
	DD	0401e859cr			; 2.4769
	DD	0401e78a5r			; 2.47611
	DD	0401e6bb2r			; 2.47532
	DD	0401e5ec2r			; 2.47453
	DD	0401e51d5r			; 2.47374
	DD	0401e44ecr			; 2.47296
	DD	0401e3806r			; 2.47217
	DD	0401e2b23r			; 2.47138
	DD	0401e1e44r			; 2.4706
	DD	0401e1168r			; 2.46981
	DD	0401e048fr			; 2.46903
	DD	0401df7b9r			; 2.46824
	DD	0401deae6r			; 2.46746
	DD	0401dde17r			; 2.46668
	DD	0401dd14br			; 2.4659
	DD	0401dc482r			; 2.46512
	DD	0401db7bcr			; 2.46434
	DD	0401daafar			; 2.46356
	DD	0401d9e3ar			; 2.46278
	DD	0401d917er			; 2.46201
	DD	0401d84c5r			; 2.46123
	DD	0401d780fr			; 2.46045
	DD	0401d6b5cr			; 2.45968
	DD	0401d5eacr			; 2.4589
	DD	0401d5200r			; 2.45813
	DD	0401d4556r			; 2.45736
	DD	0401d38afr			; 2.45658
	DD	0401d2c0cr			; 2.45581
	DD	0401d1f6br			; 2.45504
	DD	0401d12cer			; 2.45427
	DD	0401d0634r			; 2.4535
	DD	0401cf99cr			; 2.45273
	DD	0401ced08r			; 2.45197
	DD	0401ce076r			; 2.4512
	DD	0401cd3e8r			; 2.45043
	DD	0401cc75dr			; 2.44967
	DD	0401cbad4r			; 2.4489
	DD	0401cae4fr			; 2.44814
	DD	0401ca1ccr			; 2.44738
	DD	0401c954dr			; 2.44661
	DD	0401c88d0r			; 2.44585
	DD	0401c7c56r			; 2.44509
	DD	0401c6fdfr			; 2.44433
	DD	0401c636br			; 2.44357
	DD	0401c56far			; 2.44281
	DD	0401c4a8cr			; 2.44205
	DD	0401c3e21r			; 2.44129
	DD	0401c31b8r			; 2.44053
	DD	0401c2552r			; 2.43978
	DD	0401c18f0r			; 2.43902
	DD	0401c0c90r			; 2.43827
	DD	0401c0033r			; 2.43751
	DD	0401bf3d8r			; 2.43676
	DD	0401be781r			; 2.436
	DD	0401bdb2cr			; 2.43525
	DD	0401bcedar			; 2.4345
	DD	0401bc28br			; 2.43375
	DD	0401bb63er			; 2.433
	DD	0401ba9f5r			; 2.43225
	DD	0401b9daer			; 2.4315
	DD	0401b9169r			; 2.43075
	DD	0401b8528r			; 2.43
	DD	0401b78e9r			; 2.42925
	DD	0401b6cadr			; 2.42851
	DD	0401b6074r			; 2.42776
	DD	0401b543dr			; 2.42702
	DD	0401b4809r			; 2.42627
	DD	0401b3bd8r			; 2.42553
	DD	0401b2fa9r			; 2.42478
	DD	0401b237dr			; 2.42404
	DD	0401b1754r			; 2.4233
	DD	0401b0b2dr			; 2.42256
	DD	0401aff09r			; 2.42182
	DD	0401af2e8r			; 2.42108
	DD	0401ae6c9r			; 2.42034
	DD	0401adaadr			; 2.4196
	DD	0401ace93r			; 2.41886
	DD	0401ac27cr			; 2.41812
	DD	0401ab668r			; 2.41738
	DD	0401aaa56r			; 2.41665
	DD	0401a9e47r			; 2.41591
	DD	0401a923ar			; 2.41517
	DD	0401a8630r			; 2.41444
	DD	0401a7a29r			; 2.41371
	DD	0401a6e23r			; 2.41297
	DD	0401a6221r			; 2.41224
	DD	0401a5621r			; 2.41151
	DD	0401a4a23r			; 2.41077
	DD	0401a3e28r			; 2.41004
	DD	0401a3230r			; 2.40931
	DD	0401a263ar			; 2.40858
	DD	0401a1a46r			; 2.40785
	DD	0401a0e55r			; 2.40712
	DD	0401a0267r			; 2.4064
	DD	04019f67ar			; 2.40567
	DD	04019ea91r			; 2.40494
	DD	04019dea9r			; 2.40422
	DD	04019d2c5r			; 2.40349
	DD	04019c6e2r			; 2.40276
	DD	04019bb02r			; 2.40204
	DD	04019af25r			; 2.40131
	DD	04019a34ar			; 2.40059
	DD	040199771r			; 2.39987
	DD	040198b9ar			; 2.39915
	DD	040197fc6r			; 2.39842
	DD	0401973f5r			; 2.3977
	DD	040196826r			; 2.39698
	DD	040195c59r			; 2.39626
	DD	04019508er			; 2.39554
	DD	0401944c6r			; 2.39482
	DD	040193900r			; 2.3941
	DD	040192d3dr			; 2.39339
	DD	04019217cr			; 2.39267
	DD	0401915bdr			; 2.39195
	DD	040190a00r			; 2.39124
	DD	04018fe46r			; 2.39052
	DD	04018f28er			; 2.3898
	DD	04018e6d8r			; 2.38909
	DD	04018db25r			; 2.38838
	DD	04018cf74r			; 2.38766
	DD	04018c3c5r			; 2.38695
	DD	04018b819r			; 2.38624
	DD	04018ac6fr			; 2.38552
	DD	04018a0c7r			; 2.38481
	DD	040189521r			; 2.3841
	DD	04018897dr			; 2.38339
	DD	040187ddcr			; 2.38268
	DD	04018723dr			; 2.38197
	DD	0401866a0r			; 2.38126
	DD	040185b05r			; 2.38056
	DD	040184f6dr			; 2.37985
	DD	0401843d7r			; 2.37914
	DD	040183843r			; 2.37843
	DD	040182cb1r			; 2.37773
	DD	040182121r			; 2.37702
	DD	040181594r			; 2.37632
	DD	040180a08r			; 2.37561
	DD	04017fe7fr			; 2.37491
	DD	04017f2f8r			; 2.3742
	DD	04017e773r			; 2.3735
	DD	04017dbf1r			; 2.3728
	DD	04017d070r			; 2.3721
	DD	04017c4f2r			; 2.3714
	DD	04017b975r			; 2.37069
	DD	04017adfbr			; 2.36999
	DD	04017a283r			; 2.36929
	DD	04017970dr			; 2.36859
	DD	040178b99r			; 2.3679
	DD	040178028r			; 2.3672
	DD	0401774b8r			; 2.3665
	DD	04017694ar			; 2.3658
	DD	040175ddfr			; 2.3651
	DD	040175276r			; 2.36441
	DD	04017470er			; 2.36371
	DD	040173ba9r			; 2.36302
	DD	040173046r			; 2.36232
	DD	0401724e4r			; 2.36163
	DD	040171985r			; 2.36093
	DD	040170e28r			; 2.36024
	DD	0401702cdr			; 2.35955
	DD	04016f774r			; 2.35885
	DD	04016ec1dr			; 2.35816
	DD	04016e0c8r			; 2.35747
	DD	04016d575r			; 2.35678
	DD	04016ca24r			; 2.35609
	DD	04016bed5r			; 2.3554
	DD	04016b388r			; 2.35471
	DD	04016a83dr			; 2.35402
	DD	040169cf4r			; 2.35333
	DD	0401691adr			; 2.35264
	DD	040168668r			; 2.35195
	DD	040167b25r			; 2.35127
	DD	040166fe3r			; 2.35058
	DD	0401664a4r			; 2.34989
	DD	040165967r			; 2.34921
	DD	040164e2cr			; 2.34852
	DD	0401642f2r			; 2.34784
	DD	0401637bbr			; 2.34715
	DD	040162c85r			; 2.34647
	DD	040162152r			; 2.34578
	DD	040161620r			; 2.3451
	DD	040160af0r			; 2.34442
	DD	04015ffc3r			; 2.34374
	DD	04015f497r			; 2.34305
	DD	04015e96dr			; 2.34237
	DD	04015de44r			; 2.34169
	DD	04015d31er			; 2.34101
	DD	04015c7far			; 2.34033
	DD	04015bcd7r			; 2.33965
	DD	04015b1b7r			; 2.33897
	DD	04015a698r			; 2.33829
	DD	040159b7br			; 2.33761
	DD	040159060r			; 2.33694
	DD	040158547r			; 2.33626
	DD	040157a2fr			; 2.33558
	DD	040156f1ar			; 2.33491
	DD	040156406r			; 2.33423
	DD	0401558f5r			; 2.33355
	DD	040154de5r			; 2.33288
	DD	0401542d6r			; 2.3322
	DD	0401537car			; 2.33153
	DD	040152cbfr			; 2.33086
	DD	0401521b7r			; 2.33018
	DD	0401516b0r			; 2.32951
	DD	040150babr			; 2.32884
	DD	0401500a7r			; 2.32816
	DD	04014f5a6r			; 2.32749
	DD	04014eaa6r			; 2.32682
	DD	04014dfa8r			; 2.32615
	DD	04014d4acr			; 2.32548
	DD	04014c9b2r			; 2.32481
	DD	04014beb9r			; 2.32414
	DD	04014b3c2r			; 2.32347
	DD	04014a8cdr			; 2.3228
	DD	040149ddar			; 2.32213
	DD	0401492e8r			; 2.32147
	DD	0401487f8r			; 2.3208
	DD	040147d0ar			; 2.32013
	DD	04014721dr			; 2.31946
	DD	040146733r			; 2.3188
	DD	040145c4ar			; 2.31813
	DD	040145163r			; 2.31747
	DD	04014467dr			; 2.3168
	DD	040143b99r			; 2.31614
	DD	0401430b7r			; 2.31547
	DD	0401425d7r			; 2.31481
	DD	040141af8r			; 2.31415
	DD	04014101br			; 2.31348
	DD	040140540r			; 2.31282
	DD	04013fa66r			; 2.31216
	DD	04013ef8er			; 2.3115
	DD	04013e4b8r			; 2.31083
	DD	04013d9e4r			; 2.31017
	DD	04013cf11r			; 2.30951
	DD	04013c43fr			; 2.30885
	DD	04013b970r			; 2.30819
	DD	04013aea2r			; 2.30753
	DD	04013a3d6r			; 2.30687
	DD	04013990br			; 2.30622
	DD	040138e42r			; 2.30556
	DD	04013837br			; 2.3049
	DD	0401378b5r			; 2.30424
	DD	040136df1r			; 2.30359
	DD	04013632fr			; 2.30293
	DD	04013586er			; 2.30227
	DD	040134dafr			; 2.30162
	DD	0401342f1r			; 2.30096
	DD	040133835r			; 2.30031
	DD	040132d7br			; 2.29965
	DD	0401322c2r			; 2.299
	DD	04013180br			; 2.29834
	DD	040130d55r			; 2.29769
	DD	0401302a1r			; 2.29704
	DD	04012f7efr			; 2.29638
	DD	04012ed3er			; 2.29573
	DD	04012e28fr			; 2.29508
	DD	04012d7e2r			; 2.29443
	DD	04012cd35r			; 2.29377
	DD	04012c28br			; 2.29312
	DD	04012b7e2r			; 2.29247
	DD	04012ad3br			; 2.29182
	DD	04012a295r			; 2.29117
	DD	0401297f1r			; 2.29052
	DD	040128d4er			; 2.28987
	DD	0401282adr			; 2.28923
	DD	04012780dr			; 2.28858
	DD	040126d6fr			; 2.28793
	DD	0401262d3r			; 2.28728
	DD	040125838r			; 2.28663
	DD	040124d9er			; 2.28599
	DD	040124306r			; 2.28534
	DD	040123870r			; 2.28469
	DD	040122ddbr			; 2.28405
	DD	040122348r			; 2.2834
	DD	0401218b6r			; 2.28276
	DD	040120e25r			; 2.28211
	DD	040120397r			; 2.28147
	DD	04011f909r			; 2.28082
	DD	04011ee7dr			; 2.28018
	DD	04011e3f3r			; 2.27954
	DD	04011d96ar			; 2.27889
	DD	04011cee3r			; 2.27825
	DD	04011c45dr			; 2.27761
	DD	04011b9d8r			; 2.27697
	DD	04011af55r			; 2.27633
	DD	04011a4d4r			; 2.27569
	DD	040119a54r			; 2.27504
	DD	040118fd5r			; 2.2744
	DD	040118558r			; 2.27376
	DD	040117adcr			; 2.27312
	DD	040117062r			; 2.27248
	DD	0401165e9r			; 2.27185
	DD	040115b72r			; 2.27121
	DD	0401150fcr			; 2.27057
	DD	040114688r			; 2.26993
	DD	040113c15r			; 2.26929
	DD	0401131a3r			; 2.26865
	DD	040112733r			; 2.26802
	DD	040111cc4r			; 2.26738
	DD	040111257r			; 2.26674
	DD	0401107ebr			; 2.26611
	DD	04010fd81r			; 2.26547
	DD	04010f317r			; 2.26484
	DD	04010e8b0r			; 2.2642
	DD	04010de4ar			; 2.26357
	DD	04010d3e5r			; 2.26293
	DD	04010c981r			; 2.2623
	DD	04010bf1fr			; 2.26167
	DD	04010b4bfr			; 2.26103
	DD	04010aa5fr			; 2.2604
	DD	04010a001r			; 2.25977
	DD	0401095a5r			; 2.25913
	DD	040108b4ar			; 2.2585
	DD	0401080f0r			; 2.25787
	DD	040107698r			; 2.25724
	DD	040106c41r			; 2.25661
	DD	0401061ebr			; 2.25598
	DD	040105797r			; 2.25535
	DD	040104d44r			; 2.25472
	DD	0401042f2r			; 2.25409
	DD	0401038a2r			; 2.25346
	DD	040102e53r			; 2.25283
	DD	040102406r			; 2.2522
	DD	0401019bar			; 2.25157
	DD	040100f6fr			; 2.25094
	DD	040100525r			; 2.25031
	DD	0400ffaddr			; 2.24969
	DD	0400ff096r			; 2.24906
	DD	0400fe651r			; 2.24843
	DD	0400fdc0dr			; 2.24781
	DD	0400fd1car			; 2.24718
	DD	0400fc788r			; 2.24655
	DD	0400fbd48r			; 2.24593
	DD	0400fb309r			; 2.2453
	DD	0400fa8ccr			; 2.24468
	DD	0400f9e8fr			; 2.24405
	DD	0400f9455r			; 2.24343
	DD	0400f8a1br			; 2.2428
	DD	0400f7fe3r			; 2.24218
	DD	0400f75abr			; 2.24156
	DD	0400f6b76r			; 2.24093
	DD	0400f6141r			; 2.24031
	DD	0400f570er			; 2.23969
	DD	0400f4cdcr			; 2.23907
	DD	0400f42abr			; 2.23844
	DD	0400f387cr			; 2.23782
	DD	0400f2e4er			; 2.2372
	DD	0400f2421r			; 2.23658
	DD	0400f19f6r			; 2.23596
	DD	0400f0fcbr			; 2.23534
	DD	0400f05a2r			; 2.23472
	DD	0400efb7br			; 2.2341
	DD	0400ef154r			; 2.23348
	DD	0400ee72fr			; 2.23286
	DD	0400edd0br			; 2.23224
	DD	0400ed2e8r			; 2.23162
	DD	0400ec8c7r			; 2.231
	DD	0400ebea7r			; 2.23039
	DD	0400eb488r			; 2.22977
	DD	0400eaa6ar			; 2.22915
	DD	0400ea04dr			; 2.22853
	DD	0400e9632r			; 2.22792
	DD	0400e8c18r			; 2.2273
	DD	0400e81ffr			; 2.22668
	DD	0400e77e8r			; 2.22607
	DD	0400e6dd1r			; 2.22545
	DD	0400e63bcr			; 2.22484
	DD	0400e59a8r			; 2.22422
	DD	0400e4f95r			; 2.22361
	DD	0400e4584r			; 2.22299
	DD	0400e3b74r			; 2.22238
	DD	0400e3165r			; 2.22176
	DD	0400e2757r			; 2.22115
	DD	0400e1d4ar			; 2.22054
	DD	0400e133fr			; 2.21992
	DD	0400e0934r			; 2.21931
	DD	0400dff2br			; 2.2187
	DD	0400df523r			; 2.21809
	DD	0400deb1cr			; 2.21747
	DD	0400de117r			; 2.21686
	DD	0400dd713r			; 2.21625
	DD	0400dcd0fr			; 2.21564
	DD	0400dc30dr			; 2.21503
	DD	0400db90dr			; 2.21442
	DD	0400daf0dr			; 2.21381
	DD	0400da50er			; 2.2132
	DD	0400d9b11r			; 2.21259
	DD	0400d9115r			; 2.21198
	DD	0400d871ar			; 2.21137
	DD	0400d7d20r			; 2.21076
	DD	0400d7328r			; 2.21015
	DD	0400d6930r			; 2.20955
	DD	0400d5f3ar			; 2.20894
	DD	0400d5544r			; 2.20833
	DD	0400d4b50r			; 2.20772
	DD	0400d415dr			; 2.20711
	DD	0400d376cr			; 2.20651
	DD	0400d2d7br			; 2.2059
	DD	0400d238cr			; 2.20529
	DD	0400d199dr			; 2.20469
	DD	0400d0fb0r			; 2.20408
	DD	0400d05c4r			; 2.20348
	DD	0400cfbd9r			; 2.20287
	DD	0400cf1efr			; 2.20227
	DD	0400ce806r			; 2.20166
	DD	0400cde1fr			; 2.20106
	DD	0400cd438r			; 2.20045
	DD	0400cca53r			; 2.19985
	DD	0400cc06fr			; 2.19925
	DD	0400cb68br			; 2.19864
	DD	0400caca9r			; 2.19804
	DD	0400ca2c8r			; 2.19744
	DD	0400c98e9r			; 2.19683
	DD	0400c8f0ar			; 2.19623
	DD	0400c852cr			; 2.19563
	DD	0400c7b50r			; 2.19503
	DD	0400c7174r			; 2.19442
	DD	0400c679ar			; 2.19382
	DD	0400c5dc1r			; 2.19322
	DD	0400c53e8r			; 2.19262
	DD	0400c4a11r			; 2.19202
	DD	0400c403br			; 2.19142
	DD	0400c3666r			; 2.19082
	DD	0400c2c93r			; 2.19022
	DD	0400c22c0r			; 2.18962
	DD	0400c18eer			; 2.18902
	DD	0400c0f1dr			; 2.18842
	DD	0400c054er			; 2.18782
	DD	0400bfb7fr			; 2.18723
	DD	0400bf1b2r			; 2.18663
	DD	0400be7e6r			; 2.18603
	DD	0400bde1ar			; 2.18543
	DD	0400bd450r			; 2.18483
	DD	0400bca87r			; 2.18424
	DD	0400bc0bfr			; 2.18364
	DD	0400bb6f8r			; 2.18304
	DD	0400bad32r			; 2.18245
	DD	0400ba36dr			; 2.18185
	DD	0400b99a9r			; 2.18125
	DD	0400b8fe6r			; 2.18066
	DD	0400b8624r			; 2.18006
	DD	0400b7c63r			; 2.17947
	DD	0400b72a3r			; 2.17887
	DD	0400b68e4r			; 2.17828
	DD	0400b5f27r			; 2.17768
	DD	0400b556ar			; 2.17709
	DD	0400b4baer			; 2.17649
	DD	0400b41f4r			; 2.1759
	DD	0400b383ar			; 2.17531
	DD	0400b2e81r			; 2.17471
	DD	0400b24car			; 2.17412
	DD	0400b1b13r			; 2.17353
	DD	0400b115er			; 2.17294
	DD	0400b07a9r			; 2.17234
	DD	0400afdf6r			; 2.17175
	DD	0400af443r			; 2.17116
	DD	0400aea92r			; 2.17057
	DD	0400ae0e1r			; 2.16998
	DD	0400ad731r			; 2.16938
	DD	0400acd83r			; 2.16879
	DD	0400ac3d5r			; 2.1682
	DD	0400aba29r			; 2.16761
	DD	0400ab07dr			; 2.16702
	DD	0400aa6d3r			; 2.16643
	DD	0400a9d29r			; 2.16584
	DD	0400a9381r			; 2.16525
	DD	0400a89d9r			; 2.16466
	DD	0400a8033r			; 2.16407
	DD	0400a768dr			; 2.16349
	DD	0400a6ce8r			; 2.1629
	DD	0400a6345r			; 2.16231
	DD	0400a59a2r			; 2.16172
	DD	0400a5000r			; 2.16113
	DD	0400a465fr			; 2.16055
	DD	0400a3cc0r			; 2.15996
	DD	0400a3321r			; 2.15937
	DD	0400a2983r			; 2.15878
	DD	0400a1fe6r			; 2.1582
	DD	0400a164ar			; 2.15761
	DD	0400a0cafr			; 2.15702
	DD	0400a0315r			; 2.15644
	DD	04009f97cr			; 2.15585
	DD	04009efe4r			; 2.15527
	DD	04009e64dr			; 2.15468
	DD	04009dcb7r			; 2.1541
	DD	04009d321r			; 2.15351
	DD	04009c98dr			; 2.15293
	DD	04009bffar			; 2.15234
	DD	04009b667r			; 2.15176
	DD	04009acd6r			; 2.15117
	DD	04009a345r			; 2.15059
	DD	0400999b6r			; 2.15001
	DD	040099027r			; 2.14942
	DD	040098699r			; 2.14884
	DD	040097d0dr			; 2.14826
	DD	040097381r			; 2.14767
	DD	0400969f6r			; 2.14709
	DD	04009606cr			; 2.14651
	DD	0400956e3r			; 2.14593
	DD	040094d5ar			; 2.14535
	DD	0400943d3r			; 2.14476
	DD	040093a4dr			; 2.14418
	DD	0400930c7r			; 2.1436
	DD	040092743r			; 2.14302
	DD	040091dbfr			; 2.14244
	DD	04009143cr			; 2.14186
	DD	040090abbr			; 2.14128
	DD	04009013ar			; 2.1407
	DD	04008f7bar			; 2.14012
	DD	04008ee3br			; 2.13954
	DD	04008e4bcr			; 2.13896
	DD	04008db3fr			; 2.13838
	DD	04008d1c3r			; 2.1378
	DD	04008c847r			; 2.13722
	DD	04008becdr			; 2.13665
	DD	04008b553r			; 2.13607
	DD	04008abdar			; 2.13549
	DD	04008a262r			; 2.13491
	DD	0400898ebr			; 2.13433
	DD	040088f75r			; 2.13376
	DD	040088600r			; 2.13318
	DD	040087c8br			; 2.1326
	DD	040087318r			; 2.13202
	DD	0400869a5r			; 2.13145
	DD	040086033r			; 2.13087
	DD	0400856c3r			; 2.1303
	DD	040084d52r			; 2.12972
	DD	0400843e3r			; 2.12914
	DD	040083a75r			; 2.12857
	DD	040083108r			; 2.12799
	DD	04008279br			; 2.12742
	DD	040081e2fr			; 2.12684
	DD	0400814c5r			; 2.12627
	DD	040080b5br			; 2.12569
	DD	0400801f1r			; 2.12512
	DD	04007f889r			; 2.12454
	DD	04007ef22r			; 2.12397
	DD	04007e5bbr			; 2.1234
	DD	04007dc56r			; 2.12282
	DD	04007d2f1r			; 2.12225
	DD	04007c98dr			; 2.12168
	DD	04007c02ar			; 2.1211
	DD	04007b6c7r			; 2.12053
	DD	04007ad66r			; 2.11996
	DD	04007a405r			; 2.11939
	DD	040079aa5r			; 2.11881
	DD	040079146r			; 2.11824
	DD	0400787e8r			; 2.11767
	DD	040077e8br			; 2.1171
	DD	04007752fr			; 2.11653
	DD	040076bd3r			; 2.11596
	DD	040076278r			; 2.11539
	DD	04007591er			; 2.11481
	DD	040074fc5r			; 2.11424
	DD	04007466dr			; 2.11367
	DD	040073d15r			; 2.1131
	DD	0400733bfr			; 2.11253
	DD	040072a69r			; 2.11196
	DD	040072114r			; 2.11139
	DD	0400717c0r			; 2.11082
	DD	040070e6cr			; 2.11026
	DD	04007051ar			; 2.10969
	DD	04006fbc8r			; 2.10912
	DD	04006f277r			; 2.10855
	DD	04006e927r			; 2.10798
	DD	04006dfd7r			; 2.10741
	DD	04006d689r			; 2.10684
	DD	04006cd3br			; 2.10628
	DD	04006c3eer			; 2.10571
	DD	04006baa2r			; 2.10514
	DD	04006b157r			; 2.10457
	DD	04006a80cr			; 2.10401
	DD	040069ec3r			; 2.10344
	DD	04006957ar			; 2.10287
	DD	040068c31r			; 2.10231
	DD	0400682ear			; 2.10174
	DD	0400679a4r			; 2.10117
	DD	04006705er			; 2.10061
	DD	040066719r			; 2.10004
	DD	040065dd5r			; 2.09948
	DD	040065491r			; 2.09891
	DD	040064b4er			; 2.09835
	DD	04006420dr			; 2.09778
	DD	0400638ccr			; 2.09722
	DD	040062f8br			; 2.09665
	DD	04006264cr			; 2.09609
	DD	040061d0dr			; 2.09552
	DD	0400613cfr			; 2.09496
	DD	040060a92r			; 2.0944
	DD	040060155r			; 2.09383
	DD	04005f81ar			; 2.09327
	DD	04005eedfr			; 2.0927
	DD	04005e5a5r			; 2.09214
	DD	04005dc6br			; 2.09158
	DD	04005d333r			; 2.09102
	DD	04005c9fbr			; 2.09045
	DD	04005c0c4r			; 2.08989
	DD	04005b78dr			; 2.08933
	DD	04005ae58r			; 2.08877
	DD	04005a523r			; 2.0882
	DD	040059befr			; 2.08764
	DD	0400592bcr			; 2.08708
	DD	040058989r			; 2.08652
	DD	040058057r			; 2.08596
	DD	040057726r			; 2.0854
	DD	040056df6r			; 2.08484
	DD	0400564c6r			; 2.08428
	DD	040055b97r			; 2.08372
	DD	040055269r			; 2.08315
	DD	04005493cr			; 2.08259
	DD	04005400fr			; 2.08203
	DD	0400536e3r			; 2.08148
	DD	040052db8r			; 2.08092
	DD	04005248er			; 2.08036
	DD	040051b64r			; 2.0798
	DD	04005123br			; 2.07924
	DD	040050913r			; 2.07868
	DD	04004ffebr			; 2.07812
	DD	04004f6c5r			; 2.07756
	DD	04004ed9fr			; 2.077
	DD	04004e479r			; 2.07644
	DD	04004db55r			; 2.07589
	DD	04004d231r			; 2.07533
	DD	04004c90er			; 2.07477
	DD	04004bfebr			; 2.07421
	DD	04004b6car			; 2.07366
	DD	04004ada9r			; 2.0731
	DD	04004a488r			; 2.07254
	DD	040049b69r			; 2.07199
	DD	04004924ar			; 2.07143
	DD	04004892cr			; 2.07087
	DD	04004800er			; 2.07032
	DD	0400476f2r			; 2.06976
	DD	040046dd6r			; 2.0692
	DD	0400464bar			; 2.06865
	DD	040045ba0r			; 2.06809
	DD	040045286r			; 2.06754
	DD	04004496dr			; 2.06698
	DD	040044054r			; 2.06643
	DD	04004373cr			; 2.06587
	DD	040042e25r			; 2.06532
	DD	04004250fr			; 2.06476
	DD	040041bf9r			; 2.06421
	DD	0400412e4r			; 2.06365
	DD	0400409d0r			; 2.0631
	DD	0400400bcr			; 2.06254
	DD	04003f7a9r			; 2.06199
	DD	04003ee97r			; 2.06144
	DD	04003e585r			; 2.06088
	DD	04003dc75r			; 2.06033
	DD	04003d364r			; 2.05978
	DD	04003ca55r			; 2.05922
	DD	04003c146r			; 2.05867
	DD	04003b838r			; 2.05812
	DD	04003af2ar			; 2.05757
	DD	04003a61er			; 2.05701
	DD	040039d11r			; 2.05646
	DD	040039406r			; 2.05591
	DD	040038afbr			; 2.05536
	DD	0400381f1r			; 2.05481
	DD	0400378e8r			; 2.05425
	DD	040036fdfr			; 2.0537
	DD	0400366d7r			; 2.05315
	DD	040035dcfr			; 2.0526
	DD	0400354c9r			; 2.05205
	DD	040034bc3r			; 2.0515
	DD	0400342bdr			; 2.05095
	DD	0400339b8r			; 2.0504
	DD	0400330b4r			; 2.04985
	DD	0400327b1r			; 2.0493
	DD	040031eaer			; 2.04875
	DD	0400315acr			; 2.0482
	DD	040030caar			; 2.04765
	DD	0400303aar			; 2.0471
	DD	04002faa9r			; 2.04655
	DD	04002f1aar			; 2.046
	DD	04002e8abr			; 2.04545
	DD	04002dfadr			; 2.0449
	DD	04002d6afr			; 2.04435
	DD	04002cdb2r			; 2.0438
	DD	04002c4b6r			; 2.04326
	DD	04002bbbar			; 2.04271
	DD	04002b2bfr			; 2.04216
	DD	04002a9c5r			; 2.04161
	DD	04002a0cbr			; 2.04106
	DD	0400297d2r			; 2.04052
	DD	040028edar			; 2.03997
	DD	0400285e2r			; 2.03942
	DD	040027cebr			; 2.03887
	DD	0400273f4r			; 2.03833
	DD	040026afer			; 2.03778
	DD	040026209r			; 2.03723
	DD	040025915r			; 2.03669
	DD	040025021r			; 2.03614
	DD	04002472dr			; 2.03559
	DD	040023e3ar			; 2.03505
	DD	040023548r			; 2.0345
	DD	040022c57r			; 2.03396
	DD	040022366r			; 2.03341
	DD	040021a76r			; 2.03287
	DD	040021186r			; 2.03232
	DD	040020897r			; 2.03177
	DD	04001ffa9r			; 2.03123
	DD	04001f6bbr			; 2.03068
	DD	04001edcer			; 2.03014
	DD	04001e4e1r			; 2.02959
	DD	04001dbf5r			; 2.02905
	DD	04001d30ar			; 2.02851
	DD	04001ca1fr			; 2.02796
	DD	04001c135r			; 2.02742
	DD	04001b84cr			; 2.02687
	DD	04001af63r			; 2.02633
	DD	04001a67br			; 2.02579
	DD	040019d93r			; 2.02524
	DD	0400194acr			; 2.0247
	DD	040018bc6r			; 2.02416
	DD	0400182e0r			; 2.02361
	DD	0400179fbr			; 2.02307
	DD	040017116r			; 2.02253
	DD	040016832r			; 2.02198
	DD	040015f4er			; 2.02144
	DD	04001566cr			; 2.0209
	DD	040014d89r			; 2.02036
	DD	0400144a8r			; 2.01982
	DD	040013bc7r			; 2.01927
	DD	0400132e6r			; 2.01873
	DD	040012a06r			; 2.01819
	DD	040012127r			; 2.01765
	DD	040011848r			; 2.01711
	DD	040010f6ar			; 2.01657
	DD	04001068dr			; 2.01602
	DD	04000fdb0r			; 2.01548
	DD	04000f4d3r			; 2.01494
	DD	04000ebf8r			; 2.0144
	DD	04000e31dr			; 2.01386
	DD	04000da42r			; 2.01332
	DD	04000d168r			; 2.01278
	DD	04000c88er			; 2.01224
	DD	04000bfb6r			; 2.0117
	DD	04000b6ddr			; 2.01116
	DD	04000ae06r			; 2.01062
	DD	04000a52fr			; 2.01008
	DD	040009c58r			; 2.00954
	DD	040009382r			; 2.009
	DD	040008aadr			; 2.00846
	DD	0400081d8r			; 2.00793
	DD	040007903r			; 2.00739
	DD	040007030r			; 2.00685
	DD	04000675dr			; 2.00631
	DD	040005e8ar			; 2.00577
	DD	0400055b8r			; 2.00523
	DD	040004ce7r			; 2.00469
	DD	040004416r			; 2.00416
	DD	040003b45r			; 2.00362
	DD	040003276r			; 2.00308
	DD	0400029a6r			; 2.00254
	DD	0400020d8r			; 2.002
	DD	04000180ar			; 2.00147
	DD	040000f3cr			; 2.00093
	DD	04000066fr			; 2.00039
	DD	03ffffb46r			; 1.99986
	DD	03fffe9aer			; 1.99932
	DD	03fffd817r			; 1.99878
	DD	03fffc682r			; 1.99825
	DD	03fffb4edr			; 1.99771
	DD	03fffa35ar			; 1.99717
	DD	03fff91c8r			; 1.99664
	DD	03fff8037r			; 1.9961
	DD	03fff6ea7r			; 1.99556
	DD	03fff5d18r			; 1.99503
	DD	03fff4b8ar			; 1.99449
	DD	03fff39fdr			; 1.99396
	DD	03fff2871r			; 1.99342
	DD	03fff16e7r			; 1.99289
	DD	03fff055dr			; 1.99235
	DD	03ffef3d5r			; 1.99182
	DD	03ffee24dr			; 1.99128
	DD	03ffed0c7r			; 1.99075
	DD	03ffebf42r			; 1.99021
	DD	03ffeadber			; 1.98968
	DD	03ffe9c3ar			; 1.98914
	DD	03ffe8ab8r			; 1.98861
	DD	03ffe7937r			; 1.98807
	DD	03ffe67b8r			; 1.98754
	DD	03ffe5639r			; 1.98701
	DD	03ffe44bbr			; 1.98647
	DD	03ffe333er			; 1.98594
	DD	03ffe21c2r			; 1.98541
	DD	03ffe1048r			; 1.98487
	DD	03ffdfecer			; 1.98434
	DD	03ffded56r			; 1.98381
	DD	03ffddbder			; 1.98327
	DD	03ffdca68r			; 1.98274
	DD	03ffdb8f2r			; 1.98221
	DD	03ffda77er			; 1.98167
	DD	03ffd960br			; 1.98114
	DD	03ffd8498r			; 1.98061
	DD	03ffd7327r			; 1.98008
	DD	03ffd61b7r			; 1.97954
	DD	03ffd5048r			; 1.97901
	DD	03ffd3ed9r			; 1.97848
	DD	03ffd2d6cr			; 1.97795
	DD	03ffd1c00r			; 1.97742
	DD	03ffd0a95r			; 1.97689
	DD	03ffcf92br			; 1.97635
	DD	03ffce7c2r			; 1.97582
	DD	03ffcd65ar			; 1.97529
	DD	03ffcc4f3r			; 1.97476
	DD	03ffcb38dr			; 1.97423
	DD	03ffca228r			; 1.9737
	DD	03ffc90c4r			; 1.97317
	DD	03ffc7f61r			; 1.97264
	DD	03ffc6dffr			; 1.97211
	DD	03ffc5c9er			; 1.97158
	DD	03ffc4b3er			; 1.97105
	DD	03ffc39dfr			; 1.97052
	DD	03ffc2881r			; 1.96999
	DD	03ffc1723r			; 1.96946
	DD	03ffc05c7r			; 1.96893
	DD	03ffbf46cr			; 1.9684
	DD	03ffbe312r			; 1.96787
	DD	03ffbd1b9r			; 1.96734
	DD	03ffbc061r			; 1.96681
	DD	03ffbaf0ar			; 1.96628
	DD	03ffb9db4r			; 1.96575
	DD	03ffb8c5fr			; 1.96522
	DD	03ffb7b0br			; 1.96469
	DD	03ffb69b7r			; 1.96416
	DD	03ffb5865r			; 1.96364
	DD	03ffb4714r			; 1.96311
	DD	03ffb35c4r			; 1.96258
	DD	03ffb2474r			; 1.96205
	DD	03ffb1326r			; 1.96152
	DD	03ffb01d9r			; 1.96099
	DD	03ffaf08cr			; 1.96047
	DD	03ffadf41r			; 1.95994
	DD	03ffacdf6r			; 1.95941
	DD	03ffabcadr			; 1.95888
	DD	03ffaab64r			; 1.95836
	DD	03ffa9a1cr			; 1.95783
	DD	03ffa88d6r			; 1.9573
	DD	03ffa7790r			; 1.95677
	DD	03ffa664br			; 1.95625
	DD	03ffa5507r			; 1.95572
	DD	03ffa43c4r			; 1.95519
	DD	03ffa3283r			; 1.95467
	DD	03ffa2141r			; 1.95414
	DD	03ffa1001r			; 1.95361
	DD	03ff9fec2r			; 1.95309
	DD	03ff9ed84r			; 1.95256
	DD	03ff9dc47r			; 1.95203
	DD	03ff9cb0ar			; 1.95151
	DD	03ff9b9cfr			; 1.95098
	DD	03ff9a894r			; 1.95046
	DD	03ff9975br			; 1.94993
	DD	03ff98622r			; 1.94941
	DD	03ff974ebr			; 1.94888
	DD	03ff963b4r			; 1.94836
	DD	03ff9527er			; 1.94783
	DD	03ff94149r			; 1.9473
	DD	03ff93015r			; 1.94678
	DD	03ff91ee2r			; 1.94625
	DD	03ff90dafr			; 1.94573
	DD	03ff8fc7er			; 1.94521
	DD	03ff8eb4er			; 1.94468
	DD	03ff8da1er			; 1.94416
	DD	03ff8c8f0r			; 1.94363
	DD	03ff8b7c2r			; 1.94311
	DD	03ff8a695r			; 1.94258
	DD	03ff89569r			; 1.94206
	DD	03ff8843er			; 1.94154
	DD	03ff87314r			; 1.94101
	DD	03ff861ebr			; 1.94049
	DD	03ff850c2r			; 1.93996
	DD	03ff83f9br			; 1.93944
	DD	03ff82e74r			; 1.93892
	DD	03ff81d4fr			; 1.93839
	DD	03ff80c2ar			; 1.93787
	DD	03ff7fb06r			; 1.93735
	DD	03ff7e9e3r			; 1.93683
	DD	03ff7d8c1r			; 1.9363
	DD	03ff7c7a0r			; 1.93578
	DD	03ff7b67fr			; 1.93526
	DD	03ff7a560r			; 1.93473
	DD	03ff79441r			; 1.93421
	DD	03ff78323r			; 1.93369
	DD	03ff77206r			; 1.93317
	DD	03ff760ear			; 1.93265
	DD	03ff74fcfr			; 1.93212
	DD	03ff73eb5r			; 1.9316
	DD	03ff72d9br			; 1.93108
	DD	03ff71c83r			; 1.93056
	DD	03ff70b6br			; 1.93004
	DD	03ff6fa54r			; 1.92951
	DD	03ff6e93er			; 1.92899
	DD	03ff6d829r			; 1.92847
	DD	03ff6c715r			; 1.92795
	DD	03ff6b601r			; 1.92743
	DD	03ff6a4efr			; 1.92691
	DD	03ff693ddr			; 1.92639
	DD	03ff682ccr			; 1.92587
	DD	03ff671bcr			; 1.92535
	DD	03ff660adr			; 1.92483
	DD	03ff64f9er			; 1.9243
	DD	03ff63e91r			; 1.92378
	DD	03ff62d84r			; 1.92326
	DD	03ff61c78r			; 1.92274
	DD	03ff60b6dr			; 1.92222
	DD	03ff5fa63r			; 1.9217
	DD	03ff5e959r			; 1.92118
	DD	03ff5d851r			; 1.92066
	DD	03ff5c749r			; 1.92014
	DD	03ff5b642r			; 1.91962
	DD	03ff5a53cr			; 1.91911
	DD	03ff59437r			; 1.91859
	DD	03ff58332r			; 1.91807
	DD	03ff5722fr			; 1.91755
	DD	03ff5612cr			; 1.91703
	DD	03ff5502ar			; 1.91651
	DD	03ff53f29r			; 1.91599
	DD	03ff52e28r			; 1.91547
	DD	03ff51d29r			; 1.91495
	DD	03ff50c2ar			; 1.91443
	DD	03ff4fb2cr			; 1.91392
	DD	03ff4ea2fr			; 1.9134
	DD	03ff4d933r			; 1.91288
	DD	03ff4c837r			; 1.91236
	DD	03ff4b73dr			; 1.91184
	DD	03ff4a643r			; 1.91132
	DD	03ff49549r			; 1.91081
	DD	03ff48451r			; 1.91029
	DD	03ff4735ar			; 1.90977
	DD	03ff46263r			; 1.90925
	DD	03ff4516dr			; 1.90873
	DD	03ff44078r			; 1.90822
	DD	03ff42f83r			; 1.9077
	DD	03ff41e90r			; 1.90718
	DD	03ff40d9dr			; 1.90667
	DD	03ff3fcabr			; 1.90615
	DD	03ff3ebbar			; 1.90563
	DD	03ff3dac9r			; 1.90511
	DD	03ff3c9dar			; 1.9046
	DD	03ff3b8ebr			; 1.90408
	DD	03ff3a7fdr			; 1.90356
	DD	03ff3970fr			; 1.90305
	DD	03ff38623r			; 1.90253
	DD	03ff37537r			; 1.90201
	DD	03ff3644cr			; 1.9015
	DD	03ff35361r			; 1.90098
	DD	03ff34278r			; 1.90047
	DD	03ff3318fr			; 1.89995
	DD	03ff320a7r			; 1.89943
	DD	03ff30fc0r			; 1.89892
	DD	03ff2fedar			; 1.8984
	DD	03ff2edf4r			; 1.89789
	DD	03ff2dd0fr			; 1.89737
	DD	03ff2cc2br			; 1.89686
	DD	03ff2bb47r			; 1.89634
	DD	03ff2aa65r			; 1.89583
	DD	03ff29983r			; 1.89531
	DD	03ff288a1r			; 1.89479
	DD	03ff277c1r			; 1.89428
	DD	03ff266e1r			; 1.89376
	DD	03ff25602r			; 1.89325
	DD	03ff24524r			; 1.89274
	DD	03ff23447r			; 1.89222
	DD	03ff2236ar			; 1.89171
	DD	03ff2128er			; 1.89119
	DD	03ff201b3r			; 1.89068
	DD	03ff1f0d8r			; 1.89016
	DD	03ff1dffer			; 1.88965
	DD	03ff1cf25r			; 1.88913
	DD	03ff1be4dr			; 1.88862
	DD	03ff1ad76r			; 1.88811
	DD	03ff19c9fr			; 1.88759
	DD	03ff18bc9r			; 1.88708
	DD	03ff17af3r			; 1.88656
	DD	03ff16a1er			; 1.88605
	DD	03ff1594ar			; 1.88554
	DD	03ff14877r			; 1.88502
	DD	03ff137a5r			; 1.88451
	DD	03ff126d3r			; 1.884
	DD	03ff11602r			; 1.88348
	DD	03ff10531r			; 1.88297
	DD	03ff0f462r			; 1.88246
	DD	03ff0e393r			; 1.88195
	DD	03ff0d2c5r			; 1.88143
	DD	03ff0c1f7r			; 1.88092
	DD	03ff0b12ar			; 1.88041
	DD	03ff0a05er			; 1.87989
	DD	03ff08f93r			; 1.87938
	DD	03ff07ec8r			; 1.87887
	DD	03ff06dfer			; 1.87836
	DD	03ff05d35r			; 1.87784
	DD	03ff04c6cr			; 1.87733
	DD	03ff03ba4r			; 1.87682
	DD	03ff02addr			; 1.87631
	DD	03ff01a16r			; 1.8758
	DD	03ff00950r			; 1.87528
	DD	03feff88br			; 1.87477
	DD	03fefe7c7r			; 1.87426
	DD	03fefd703r			; 1.87375
	DD	03fefc640r			; 1.87324
	DD	03fefb57er			; 1.87273
	DD	03fefa4bcr			; 1.87221
	DD	03fef93fbr			; 1.8717
	DD	03fef833ar			; 1.87119
	DD	03fef727br			; 1.87068
	DD	03fef61bcr			; 1.87017
	DD	03fef50fdr			; 1.86966
	DD	03fef4040r			; 1.86915
	DD	03fef2f83r			; 1.86864
	DD	03fef1ec6r			; 1.86813
	DD	03fef0e0br			; 1.86762
	DD	03feefd50r			; 1.86711
	DD	03feeec96r			; 1.8666
	DD	03feedbdcr			; 1.86608
	DD	03feecb23r			; 1.86557
	DD	03feeba6br			; 1.86506
	DD	03feea9b3r			; 1.86455
	DD	03fee98fcr			; 1.86404
	DD	03fee8846r			; 1.86353
	DD	03fee7790r			; 1.86302
	DD	03fee66dbr			; 1.86251
	DD	03fee5627r			; 1.862
	DD	03fee4573r			; 1.86149
	DD	03fee34c0r			; 1.86098
	DD	03fee240dr			; 1.86048
	DD	03fee135cr			; 1.85997
	DD	03fee02abr			; 1.85946
	DD	03fedf1far			; 1.85895
	DD	03fede14ar			; 1.85844
	DD	03fedd09br			; 1.85793
	DD	03fedbfedr			; 1.85742
	DD	03fedaf3fr			; 1.85691
	DD	03fed9e92r			; 1.8564
	DD	03fed8de5r			; 1.85589
	DD	03fed7d39r			; 1.85538
	DD	03fed6c8er			; 1.85488
	DD	03fed5be3r			; 1.85437
	DD	03fed4b39r			; 1.85386
	DD	03fed3a8fr			; 1.85335
	DD	03fed29e7r			; 1.85284
	DD	03fed193er			; 1.85233
	DD	03fed0897r			; 1.85182
	DD	03fecf7f0r			; 1.85132
	DD	03fece74ar			; 1.85081
	DD	03fecd6a4r			; 1.8503
	DD	03fecc5ffr			; 1.84979
	DD	03fecb55ar			; 1.84928
	DD	03feca4b7r			; 1.84878
	DD	03fec9413r			; 1.84827
	DD	03fec8371r			; 1.84776
	DD	03fec72cfr			; 1.84725
	DD	03fec622dr			; 1.84675
	DD	03fec518dr			; 1.84624
	DD	03fec40edr			; 1.84573
	DD	03fec304dr			; 1.84522
	DD	03fec1faer			; 1.84472
	DD	03fec0f10r			; 1.84421
	DD	03febfe72r			; 1.8437
	DD	03febedd5r			; 1.8432
	DD	03febdd38r			; 1.84269
	DD	03febcc9dr			; 1.84218
	DD	03febbc01r			; 1.84167
	DD	03febab67r			; 1.84117
	DD	03feb9accr			; 1.84066
	DD	03feb8a33r			; 1.84016
	DD	03feb799ar			; 1.83965
	DD	03feb6902r			; 1.83914
	DD	03feb586ar			; 1.83864
	DD	03feb47d3r			; 1.83813
	DD	03feb373cr			; 1.83762
	DD	03feb26a6r			; 1.83712
	DD	03feb1611r			; 1.83661
	DD	03feb057cr			; 1.8361
	DD	03feaf4e8r			; 1.8356
	DD	03feae454r			; 1.83509
	DD	03fead3c1r			; 1.83459
	DD	03feac32fr			; 1.83408
	DD	03feab29dr			; 1.83358
	DD	03feaa20br			; 1.83307
	DD	03fea917br			; 1.83256
	DD	03fea80ebr			; 1.83206
	DD	03fea705br			; 1.83155
	DD	03fea5fccr			; 1.83105
	DD	03fea4f3dr			; 1.83054
	DD	03fea3eb0r			; 1.83004
	DD	03fea2e22r			; 1.82953
	DD	03fea1d95r			; 1.82903
	DD	03fea0d09r			; 1.82852
	DD	03fe9fc7er			; 1.82802
	DD	03fe9ebf3r			; 1.82751
	DD	03fe9db68r			; 1.82701
	DD	03fe9cader			; 1.8265
	DD	03fe9ba55r			; 1.826
	DD	03fe9a9ccr			; 1.82549
	DD	03fe99944r			; 1.82499
	DD	03fe988bcr			; 1.82449
	DD	03fe97835r			; 1.82398
	DD	03fe967aer			; 1.82348
	DD	03fe95728r			; 1.82297
	DD	03fe946a3r			; 1.82247
	DD	03fe9361er			; 1.82196
	DD	03fe92599r			; 1.82146
	DD	03fe91515r			; 1.82096
	DD	03fe90492r			; 1.82045
	DD	03fe8f40fr			; 1.81995
	DD	03fe8e38dr			; 1.81944
	DD	03fe8d30br			; 1.81894
	DD	03fe8c28ar			; 1.81844
	DD	03fe8b20ar			; 1.81793
	DD	03fe8a18ar			; 1.81743
	DD	03fe8910ar			; 1.81693
	DD	03fe8808br			; 1.81642
	DD	03fe8700dr			; 1.81592
	DD	03fe85f8fr			; 1.81542
	DD	03fe84f11r			; 1.81491
	DD	03fe83e94r			; 1.81441
	DD	03fe82e18r			; 1.81391
	DD	03fe81d9cr			; 1.8134
	DD	03fe80d21r			; 1.8129
	DD	03fe7fca6r			; 1.8124
	DD	03fe7ec2cr			; 1.81189
	DD	03fe7dbb2r			; 1.81139
	DD	03fe7cb39r			; 1.81089
	DD	03fe7bac0r			; 1.81039
	DD	03fe7aa48r			; 1.80988
	DD	03fe799d0r			; 1.80938
	DD	03fe78959r			; 1.80888
	DD	03fe778e2r			; 1.80838
	DD	03fe7686cr			; 1.80787
	DD	03fe757f7r			; 1.80737
	DD	03fe74782r			; 1.80687
	DD	03fe7370dr			; 1.80637
	DD	03fe72699r			; 1.80587
	DD	03fe71625r			; 1.80536
	DD	03fe705b2r			; 1.80486
	DD	03fe6f540r			; 1.80436
	DD	03fe6e4cer			; 1.80386
	DD	03fe6d45cr			; 1.80336
	DD	03fe6c3ebr			; 1.80285
	DD	03fe6b37ar			; 1.80235
	DD	03fe6a30ar			; 1.80185
	DD	03fe6929br			; 1.80135
	DD	03fe6822cr			; 1.80085
	DD	03fe671bdr			; 1.80035
	DD	03fe6614fr			; 1.79984
	DD	03fe650e1r			; 1.79934
	DD	03fe64074r			; 1.79884
	DD	03fe63008r			; 1.79834
	DD	03fe61f9cr			; 1.79784
	DD	03fe60f30r			; 1.79734
	DD	03fe5fec5r			; 1.79684
	DD	03fe5ee5ar			; 1.79634
	DD	03fe5ddf0r			; 1.79584
	DD	03fe5cd86r			; 1.79533
	DD	03fe5bd1dr			; 1.79483
	DD	03fe5acb4r			; 1.79433
	DD	03fe59c4cr			; 1.79383
	DD	03fe58be4r			; 1.79333
	DD	03fe57b7dr			; 1.79283
	DD	03fe56b16r			; 1.79233
	DD	03fe55ab0r			; 1.79183
	DD	03fe54a4ar			; 1.79133
	DD	03fe539e4r			; 1.79083
	DD	03fe5297fr			; 1.79033
	DD	03fe5191br			; 1.78983
	DD	03fe508b7r			; 1.78933
	DD	03fe4f853r			; 1.78883
	DD	03fe4e7f0r			; 1.78833
	DD	03fe4d78er			; 1.78783
	DD	03fe4c72br			; 1.78733
	DD	03fe4b6car			; 1.78683
	DD	03fe4a668r			; 1.78633
	DD	03fe49608r			; 1.78583
	DD	03fe485a7r			; 1.78533
	DD	03fe47547r			; 1.78483
	DD	03fe464e8r			; 1.78433
	DD	03fe45489r			; 1.78383
	DD	03fe4442br			; 1.78333
	DD	03fe433ccr			; 1.78283
	DD	03fe4236fr			; 1.78233
	DD	03fe41312r			; 1.78183
	DD	03fe402b5r			; 1.78133
	DD	03fe3f259r			; 1.78083
	DD	03fe3e1fdr			; 1.78033
	DD	03fe3d1a2r			; 1.77983
	DD	03fe3c147r			; 1.77934
	DD	03fe3b0ecr			; 1.77884
	DD	03fe3a092r			; 1.77834
	DD	03fe39038r			; 1.77784
	DD	03fe37fdfr			; 1.77734
	DD	03fe36f87r			; 1.77684
	DD	03fe35f2er			; 1.77634
	DD	03fe34ed6r			; 1.77584
	DD	03fe33e7fr			; 1.77534
	DD	03fe32e28r			; 1.77485
	DD	03fe31dd1r			; 1.77435
	DD	03fe30d7br			; 1.77385
	DD	03fe2fd26r			; 1.77335
	DD	03fe2ecd0r			; 1.77285
	DD	03fe2dc7cr			; 1.77235
	DD	03fe2cc27r			; 1.77186
	DD	03fe2bbd3r			; 1.77136
	DD	03fe2ab80r			; 1.77086
	DD	03fe29b2cr			; 1.77036
	DD	03fe28adar			; 1.76986
	DD	03fe27a87r			; 1.76936
	DD	03fe26a35r			; 1.76887
	DD	03fe259e4r			; 1.76837
	DD	03fe24993r			; 1.76787
	DD	03fe23942r			; 1.76737
	DD	03fe228f2r			; 1.76687
	DD	03fe218a2r			; 1.76638
	DD	03fe20853r			; 1.76588
	DD	03fe1f804r			; 1.76538
	DD	03fe1e7b5r			; 1.76488
	DD	03fe1d767r			; 1.76439
	DD	03fe1c719r			; 1.76389
	DD	03fe1b6ccr			; 1.76339
	DD	03fe1a67fr			; 1.76289
	DD	03fe19632r			; 1.7624
	DD	03fe185e6r			; 1.7619
	DD	03fe1759br			; 1.7614
	DD	03fe1654fr			; 1.7609
	DD	03fe15504r			; 1.76041
	DD	03fe144bar			; 1.75991
	DD	03fe13470r			; 1.75941
	DD	03fe12426r			; 1.75892
	DD	03fe113dcr			; 1.75842
	DD	03fe10393r			; 1.75792
	DD	03fe0f34br			; 1.75742
	DD	03fe0e303r			; 1.75693
	DD	03fe0d2bbr			; 1.75643
	DD	03fe0c273r			; 1.75593
	DD	03fe0b22cr			; 1.75544
	DD	03fe0a1e6r			; 1.75494
	DD	03fe091a0r			; 1.75444
	DD	03fe0815ar			; 1.75395
	DD	03fe07114r			; 1.75345
	DD	03fe060cfr			; 1.75295
	DD	03fe0508ar			; 1.75246
	DD	03fe04046r			; 1.75196
	DD	03fe03002r			; 1.75147
	DD	03fe01fbfr			; 1.75097
	DD	03fe00f7br			; 1.75047
	DD	03fdfff39r			; 1.74998
	DD	03fdfeef6r			; 1.74948
	DD	03fdfdeb4r			; 1.74898
	DD	03fdfce72r			; 1.74849
	DD	03fdfbe31r			; 1.74799
	DD	03fdfadf0r			; 1.7475
	DD	03fdf9dafr			; 1.747
	DD	03fdf8d6fr			; 1.7465
	DD	03fdf7d2fr			; 1.74601
	DD	03fdf6cf0r			; 1.74551
	DD	03fdf5cb1r			; 1.74502
	DD	03fdf4c72r			; 1.74452
	DD	03fdf3c33r			; 1.74402
	DD	03fdf2bf5r			; 1.74353
	DD	03fdf1bb8r			; 1.74303
	DD	03fdf0b7ar			; 1.74254
	DD	03fdefb3dr			; 1.74204
	DD	03fdeeb01r			; 1.74155
	DD	03fdedac4r			; 1.74105
	DD	03fdeca89r			; 1.74056
	DD	03fdeba4dr			; 1.74006
	DD	03fdeaa12r			; 1.73957
	DD	03fde99d7r			; 1.73907
	DD	03fde899cr			; 1.73857
	DD	03fde7962r			; 1.73808
	DD	03fde6928r			; 1.73758
	DD	03fde58efr			; 1.73709
	DD	03fde48b6r			; 1.73659
	DD	03fde387dr			; 1.7361
	DD	03fde2845r			; 1.7356
	DD	03fde180dr			; 1.73511
	DD	03fde07d5r			; 1.73461
	DD	03fddf79dr			; 1.73412
	DD	03fdde766r			; 1.73362
	DD	03fddd730r			; 1.73313
	DD	03fddc6f9r			; 1.73263
	DD	03fddb6c3r			; 1.73214
	DD	03fdda68dr			; 1.73165
	DD	03fdd9658r			; 1.73115
	DD	03fdd8623r			; 1.73066
	DD	03fdd75eer			; 1.73016
	DD	03fdd65bar			; 1.72967
	DD	03fdd5586r			; 1.72917
	DD	03fdd4552r			; 1.72868
	DD	03fdd351fr			; 1.72818
	DD	03fdd24ebr			; 1.72769
	DD	03fdd14b9r			; 1.72719
	DD	03fdd0486r			; 1.7267
	DD	03fdcf454r			; 1.72621
	DD	03fdce422r			; 1.72571
	DD	03fdcd3f1r			; 1.72522
	DD	03fdcc3c0r			; 1.72472
	DD	03fdcb38fr			; 1.72423
	DD	03fdca35er			; 1.72374
	DD	03fdc932er			; 1.72324
	DD	03fdc82fer			; 1.72275
	DD	03fdc72cfr			; 1.72225
	DD	03fdc629fr			; 1.72176
	DD	03fdc5270r			; 1.72127
	DD	03fdc4242r			; 1.72077
	DD	03fdc3213r			; 1.72028
	DD	03fdc21e5r			; 1.71978
	DD	03fdc11b8r			; 1.71929
	DD	03fdc018ar			; 1.7188
	DD	03fdbf15dr			; 1.7183
	DD	03fdbe130r			; 1.71781
	DD	03fdbd104r			; 1.71732
	DD	03fdbc0d7r			; 1.71682
	DD	03fdbb0acr			; 1.71633
	DD	03fdba080r			; 1.71584
	DD	03fdb9055r			; 1.71534
	DD	03fdb802ar			; 1.71485
	DD	03fdb6fffr			; 1.71436
	DD	03fdb5fd4r			; 1.71386
	DD	03fdb4faar			; 1.71337
	DD	03fdb3f80r			; 1.71288
	DD	03fdb2f57r			; 1.71238
	DD	03fdb1f2er			; 1.71189
	DD	03fdb0f05r			; 1.7114
	DD	03fdafedcr			; 1.7109
	DD	03fdaeeb4r			; 1.71041
	DD	03fdade8cr			; 1.70992
	DD	03fdace64r			; 1.70942
	DD	03fdabe3cr			; 1.70893
	DD	03fdaae15r			; 1.70844
	DD	03fda9deer			; 1.70794
	DD	03fda8dc7r			; 1.70745
	DD	03fda7da1r			; 1.70696
	DD	03fda6d7br			; 1.70647
	DD	03fda5d55r			; 1.70597
	DD	03fda4d2fr			; 1.70548
	DD	03fda3d0ar			; 1.70499
	DD	03fda2ce5r			; 1.7045
	DD	03fda1cc0r			; 1.704
	DD	03fda0c9cr			; 1.70351
	DD	03fd9fc78r			; 1.70302
	DD	03fd9ec54r			; 1.70252
	DD	03fd9dc30r			; 1.70203
	DD	03fd9cc0dr			; 1.70154
	DD	03fd9bbe9r			; 1.70105
	DD	03fd9abc7r			; 1.70055
	DD	03fd99ba4r			; 1.70006
	DD	03fd98b82r			; 1.69957
	DD	03fd97b60r			; 1.69908
	DD	03fd96b3er			; 1.69859
	DD	03fd95b1cr			; 1.69809
	DD	03fd94afbr			; 1.6976
	DD	03fd93adar			; 1.69711
	DD	03fd92ab9r			; 1.69662
	DD	03fd91a99r			; 1.69612
	DD	03fd90a78r			; 1.69563
	DD	03fd8fa58r			; 1.69514
	DD	03fd8ea39r			; 1.69465
	DD	03fd8da19r			; 1.69416
	DD	03fd8c9far			; 1.69366
	DD	03fd8b9dbr			; 1.69317
	DD	03fd8a9bcr			; 1.69268
	DD	03fd8999er			; 1.69219
	DD	03fd88980r			; 1.6917
	DD	03fd87962r			; 1.6912
	DD	03fd86944r			; 1.69071
	DD	03fd85926r			; 1.69022
	DD	03fd84909r			; 1.68973
	DD	03fd838ecr			; 1.68924
	DD	03fd828cfr			; 1.68875
	DD	03fd818b3r			; 1.68825
	DD	03fd80896r			; 1.68776
	DD	03fd7f87ar			; 1.68727
	DD	03fd7e85er			; 1.68678
	DD	03fd7d843r			; 1.68629
	DD	03fd7c828r			; 1.6858
	DD	03fd7b80cr			; 1.6853
	DD	03fd7a7f2r			; 1.68481
	DD	03fd797d7r			; 1.68432
	DD	03fd787bcr			; 1.68383
	DD	03fd777a2r			; 1.68334
	DD	03fd76788r			; 1.68285
	DD	03fd7576fr			; 1.68236
	DD	03fd74755r			; 1.68186
	DD	03fd7373cr			; 1.68137
	DD	03fd72723r			; 1.68088
	DD	03fd7170ar			; 1.68039
	DD	03fd706f1r			; 1.6799
	DD	03fd6f6d9r			; 1.67941
	DD	03fd6e6c1r			; 1.67892
	DD	03fd6d6a9r			; 1.67843
	DD	03fd6c691r			; 1.67793
	DD	03fd6b67ar			; 1.67744
	DD	03fd6a662r			; 1.67695
	DD	03fd6964br			; 1.67646
	DD	03fd68634r			; 1.67597
	DD	03fd6761er			; 1.67548
	DD	03fd66607r			; 1.67499
	DD	03fd655f1r			; 1.6745
	DD	03fd645dbr			; 1.67401
	DD	03fd635c5r			; 1.67352
	DD	03fd625b0r			; 1.67303
	DD	03fd6159ar			; 1.67253
	DD	03fd60585r			; 1.67204
	DD	03fd5f570r			; 1.67155
	DD	03fd5e55br			; 1.67106
	DD	03fd5d547r			; 1.67057
	DD	03fd5c532r			; 1.67008
	DD	03fd5b51er			; 1.66959
	DD	03fd5a50ar			; 1.6691
	DD	03fd594f6r			; 1.66861
	DD	03fd584e3r			; 1.66812
	DD	03fd574cfr			; 1.66763
	DD	03fd564bcr			; 1.66714
	DD	03fd554a9r			; 1.66665
	DD	03fd54496r			; 1.66616
	DD	03fd53484r			; 1.66567
	DD	03fd52471r			; 1.66517
	DD	03fd5145fr			; 1.66468
	DD	03fd5044dr			; 1.66419
	DD	03fd4f43br			; 1.6637
	DD	03fd4e42ar			; 1.66321
	DD	03fd4d418r			; 1.66272
	DD	03fd4c407r			; 1.66223
	DD	03fd4b3f6r			; 1.66174
	DD	03fd4a3e5r			; 1.66125
	DD	03fd493d4r			; 1.66076
	DD	03fd483c4r			; 1.66027
	DD	03fd473b3r			; 1.65978
	DD	03fd463a3r			; 1.65929
	DD	03fd45393r			; 1.6588
	DD	03fd44383r			; 1.65831
	DD	03fd43374r			; 1.65782
	DD	03fd42364r			; 1.65733
	DD	03fd41355r			; 1.65684
	DD	03fd40346r			; 1.65635
	DD	03fd3f337r			; 1.65586
	DD	03fd3e328r			; 1.65537
	DD	03fd3d319r			; 1.65488
	DD	03fd3c30br			; 1.65439
	DD	03fd3b2fdr			; 1.6539
	DD	03fd3a2efr			; 1.65341
	DD	03fd392e1r			; 1.65292
	DD	03fd382d3r			; 1.65243
	DD	03fd372c5r			; 1.65194
	DD	03fd362b8r			; 1.65145
	DD	03fd352abr			; 1.65096
	DD	03fd3429er			; 1.65047
	DD	03fd33291r			; 1.64998
	DD	03fd32284r			; 1.64949
	DD	03fd31277r			; 1.649
	DD	03fd3026br			; 1.64851
	DD	03fd2f25er			; 1.64802
	DD	03fd2e252r			; 1.64753
	DD	03fd2d246r			; 1.64704
	DD	03fd2c23ar			; 1.64655
	DD	03fd2b22fr			; 1.64606
	DD	03fd2a223r			; 1.64557
	DD	03fd29218r			; 1.64508
	DD	03fd2820cr			; 1.64459
	DD	03fd27201r			; 1.6441
	DD	03fd261f6r			; 1.64361
	DD	03fd251ecr			; 1.64313
	DD	03fd241e1r			; 1.64264
	DD	03fd231d6r			; 1.64215
	DD	03fd221ccr			; 1.64166
	DD	03fd211c2r			; 1.64117
	DD	03fd201b8r			; 1.64068
	DD	03fd1f1aer			; 1.64019
	DD	03fd1e1a4r			; 1.6397
	DD	03fd1d19ar			; 1.63921
	DD	03fd1c191r			; 1.63872
	DD	03fd1b187r			; 1.63823
	DD	03fd1a17er			; 1.63774
	DD	03fd19175r			; 1.63725
	DD	03fd1816cr			; 1.63676
	DD	03fd17163r			; 1.63627
	DD	03fd1615ar			; 1.63578
	DD	03fd15152r			; 1.63529
	DD	03fd14149r			; 1.6348
	DD	03fd13141r			; 1.63432
	DD	03fd12139r			; 1.63383
	DD	03fd11131r			; 1.63334
	DD	03fd10129r			; 1.63285
	DD	03fd0f121r			; 1.63236
	DD	03fd0e119r			; 1.63187
	DD	03fd0d111r			; 1.63138
	DD	03fd0c10ar			; 1.63089
	DD	03fd0b103r			; 1.6304
	DD	03fd0a0fbr			; 1.62991
	DD	03fd090f4r			; 1.62942
	DD	03fd080edr			; 1.62893
	DD	03fd070e6r			; 1.62845
	DD	03fd060e0r			; 1.62796
	DD	03fd050d9r			; 1.62747
	DD	03fd040d3r			; 1.62698
	DD	03fd030ccr			; 1.62649
	DD	03fd020c6r			; 1.626
	DD	03fd010c0r			; 1.62551
	DD	03fd000bar			; 1.62502
	DD	03fcff0b4r			; 1.62453
	DD	03fcfe0aer			; 1.62404
	DD	03fcfd0a8r			; 1.62356
	DD	03fcfc0a2r			; 1.62307
	DD	03fcfb09dr			; 1.62258
	DD	03fcfa097r			; 1.62209
	DD	03fcf9092r			; 1.6216
	DD	03fcf808dr			; 1.62111
	DD	03fcf7088r			; 1.62062
	DD	03fcf6083r			; 1.62013
	DD	03fcf507er			; 1.61964
	DD	03fcf4079r			; 1.61916
	DD	03fcf3074r			; 1.61867
	DD	03fcf206fr			; 1.61818
	DD	03fcf106br			; 1.61769
	DD	03fcf0066r			; 1.6172
	DD	03fcef062r			; 1.61671
	DD	03fcee05er			; 1.61622
	DD	03fced059r			; 1.61573
	DD	03fcec055r			; 1.61524
	DD	03fceb051r			; 1.61476
	DD	03fcea04dr			; 1.61427
	DD	03fce904ar			; 1.61378
	DD	03fce8046r			; 1.61329
	DD	03fce7042r			; 1.6128
	DD	03fce603fr			; 1.61231
	DD	03fce503br			; 1.61182
	DD	03fce4038r			; 1.61133
	DD	03fce3034r			; 1.61085
	DD	03fce2031r			; 1.61036
	DD	03fce102er			; 1.60987
	DD	03fce002br			; 1.60938
	DD	03fcdf028r			; 1.60889
	DD	03fcde025r			; 1.6084
	DD	03fcdd022r			; 1.60791
	DD	03fcdc01fr			; 1.60743
	DD	03fcdb01dr			; 1.60694
	DD	03fcda01ar			; 1.60645
	DD	03fcd9017r			; 1.60596
	DD	03fcd8015r			; 1.60547
	DD	03fcd7012r			; 1.60498
	DD	03fcd6010r			; 1.60449
	DD	03fcd500er			; 1.60401
	DD	03fcd400cr			; 1.60352
	DD	03fcd3009r			; 1.60303
	DD	03fcd2007r			; 1.60254
	DD	03fcd1005r			; 1.60205
	DD	03fcd0003r			; 1.60156
	DD	03fccf001r			; 1.60107
	DD	03fcce000r			; 1.60059
	DD	03fcccffer			; 1.6001
	DD	03fccbffcr			; 1.59961
	DD	03fccaffar			; 1.59912
	DD	03fcc9ff9r			; 1.59863
	DD	03fcc8ff7r			; 1.59814
	DD	03fcc7ff6r			; 1.59766
	DD	03fcc6ff4r			; 1.59717
	DD	03fcc5ff3r			; 1.59668
	DD	03fcc4ff2r			; 1.59619
	DD	03fcc3ff0r			; 1.5957
	DD	03fcc2fefr			; 1.59521
	DD	03fcc1feer			; 1.59472
	DD	03fcc0fedr			; 1.59424
	DD	03fcbffecr			; 1.59375
	DD	03fcbefear			; 1.59326
	DD	03fcbdfe9r			; 1.59277
	DD	03fcbcfe9r			; 1.59228
	DD	03fcbbfe8r			; 1.59179
	DD	03fcbafe7r			; 1.59131
	DD	03fcb9fe6r			; 1.59082
	DD	03fcb8fe5r			; 1.59033
	DD	03fcb7fe4r			; 1.58984
	DD	03fcb6fe4r			; 1.58935
	DD	03fcb5fe3r			; 1.58886
	DD	03fcb4fe2r			; 1.58838
	DD	03fcb3fe2r			; 1.58789
	DD	03fcb2fe1r			; 1.5874
	DD	03fcb1fe0r			; 1.58691
	DD	03fcb0fe0r			; 1.58642
	DD	03fcaffdfr			; 1.58593
	DD	03fcaefdfr			; 1.58545
	DD	03fcadfdfr			; 1.58496
	DD	03fcacfder			; 1.58447
	DD	03fcabfder			; 1.58398
	DD	03fcaafddr			; 1.58349
	DD	03fca9fddr			; 1.583
	DD	03fca8fddr			; 1.58252
	DD	03fca7fddr			; 1.58203
	DD	03fca6fdcr			; 1.58154
	DD	03fca5fdcr			; 1.58105
	DD	03fca4fdcr			; 1.58056
	DD	03fca3fdcr			; 1.58007
	DD	03fca2fdcr			; 1.57959
	DD	03fca1fdbr			; 1.5791
	DD	03fca0fdbr			; 1.57861
	DD	03fc9ffdbr			; 1.57812
	DD	03fc9efdbr			; 1.57763
	DD	03fc9dfdbr			; 1.57714
	DD	03fc9cfdbr			; 1.57666
	DD	03fc9bfdbr			; 1.57617
	DD	03fc9afdbr			; 1.57568
	DD	03fc99fdbr			; 1.57519
	DD	03fc98fdbr			; 1.5747
	DD	03fc97fdbr			; 1.57421
	DD	03fc96fdbr			; 1.57373
	DD	03fc95fdbr			; 1.57324
	DD	03fc94fdbr			; 1.57275
	DD	03fc93fdbr			; 1.57226
	DD	03fc92fdbr			; 1.57177
	DD	03fc91fdbr			; 1.57128
	DD	03fc90fdbr			; 1.5708
	DD	03fc8ffdbr			; 1.57031
	DD	03fc8efdbr			; 1.56982
	DD	03fc8dfdbr			; 1.56933
	DD	03fc8cfdbr			; 1.56884
	DD	03fc8bfdbr			; 1.56835
	DD	03fc8afdbr			; 1.56787
	DD	03fc89fdbr			; 1.56738
	DD	03fc88fdbr			; 1.56689
	DD	03fc87fdbr			; 1.5664
	DD	03fc86fdar			; 1.56591
	DD	03fc85fdar			; 1.56543
	DD	03fc84fdar			; 1.56494
	DD	03fc83fdar			; 1.56445
	DD	03fc82fdar			; 1.56396
	DD	03fc81fdar			; 1.56347
	DD	03fc80fdar			; 1.56298
	DD	03fc7ffdar			; 1.5625
	DD	03fc7efdar			; 1.56201
	DD	03fc7dfdar			; 1.56152
	DD	03fc7cfd9r			; 1.56103
	DD	03fc7bfd9r			; 1.56054
	DD	03fc7afd9r			; 1.56005
	DD	03fc79fd9r			; 1.55957
	DD	03fc78fd8r			; 1.55908
	DD	03fc77fd8r			; 1.55859
	DD	03fc76fd8r			; 1.5581
	DD	03fc75fd7r			; 1.55761
	DD	03fc74fd7r			; 1.55712
	DD	03fc73fd7r			; 1.55664
	DD	03fc72fd6r			; 1.55615
	DD	03fc71fd6r			; 1.55566
	DD	03fc70fd5r			; 1.55517
	DD	03fc6ffd5r			; 1.55468
	DD	03fc6efd4r			; 1.55419
	DD	03fc6dfd4r			; 1.55371
	DD	03fc6cfd3r			; 1.55322
	DD	03fc6bfd2r			; 1.55273
	DD	03fc6afd2r			; 1.55224
	DD	03fc69fd1r			; 1.55175
	DD	03fc68fd0r			; 1.55126
	DD	03fc67fcfr			; 1.55078
	DD	03fc66fcfr			; 1.55029
	DD	03fc65fcer			; 1.5498
	DD	03fc64fcdr			; 1.54931
	DD	03fc63fccr			; 1.54882
	DD	03fc62fcbr			; 1.54833
	DD	03fc61fcar			; 1.54785
	DD	03fc60fc9r			; 1.54736
	DD	03fc5ffc7r			; 1.54687
	DD	03fc5efc6r			; 1.54638
	DD	03fc5dfc5r			; 1.54589
	DD	03fc5cfc4r			; 1.5454
	DD	03fc5bfc2r			; 1.54491
	DD	03fc5afc1r			; 1.54443
	DD	03fc59fc0r			; 1.54394
	DD	03fc58fber			; 1.54345
	DD	03fc57fbcr			; 1.54296
	DD	03fc56fbbr			; 1.54247
	DD	03fc55fb9r			; 1.54198
	DD	03fc54fb7r			; 1.5415
	DD	03fc53fb6r			; 1.54101
	DD	03fc52fb4r			; 1.54052
	DD	03fc51fb2r			; 1.54003
	DD	03fc50fb0r			; 1.53954
	DD	03fc4ffaer			; 1.53905
	DD	03fc4efacr			; 1.53856
	DD	03fc4dfaar			; 1.53808
	DD	03fc4cfa7r			; 1.53759
	DD	03fc4bfa5r			; 1.5371
	DD	03fc4afa3r			; 1.53661
	DD	03fc49fa0r			; 1.53612
	DD	03fc48f9er			; 1.53563
	DD	03fc47f9br			; 1.53514
	DD	03fc46f99r			; 1.53466
	DD	03fc45f96r			; 1.53417
	DD	03fc44f93r			; 1.53368
	DD	03fc43f90r			; 1.53319
	DD	03fc42f8dr			; 1.5327
	DD	03fc41f8ar			; 1.53221
	DD	03fc40f87r			; 1.53172
	DD	03fc3ff84r			; 1.53124
	DD	03fc3ef81r			; 1.53075
	DD	03fc3df7er			; 1.53026
	DD	03fc3cf7ar			; 1.52977
	DD	03fc3bf77r			; 1.52928
	DD	03fc3af73r			; 1.52879
	DD	03fc39f6fr			; 1.5283
	DD	03fc38f6cr			; 1.52781
	DD	03fc37f68r			; 1.52733
	DD	03fc36f64r			; 1.52684
	DD	03fc35f60r			; 1.52635
	DD	03fc34f5cr			; 1.52586
	DD	03fc33f58r			; 1.52537
	DD	03fc32f53r			; 1.52488
	DD	03fc31f4fr			; 1.52439
	DD	03fc30f4ar			; 1.5239
	DD	03fc2ff46r			; 1.52342
	DD	03fc2ef41r			; 1.52293
	DD	03fc2df3dr			; 1.52244
	DD	03fc2cf38r			; 1.52195
	DD	03fc2bf33r			; 1.52146
	DD	03fc2af2er			; 1.52097
	DD	03fc29f29r			; 1.52048
	DD	03fc28f23r			; 1.51999
	DD	03fc27f1er			; 1.5195
	DD	03fc26f19r			; 1.51902
	DD	03fc25f13r			; 1.51853
	DD	03fc24f0dr			; 1.51804
	DD	03fc23f08r			; 1.51755
	DD	03fc22f02r			; 1.51706
	DD	03fc21efcr			; 1.51657
	DD	03fc20ef6r			; 1.51608
	DD	03fc1feefr			; 1.51559
	DD	03fc1eee9r			; 1.5151
	DD	03fc1dee3r			; 1.51461
	DD	03fc1cedcr			; 1.51413
	DD	03fc1bed6r			; 1.51364
	DD	03fc1aecfr			; 1.51315
	DD	03fc19ec8r			; 1.51266
	DD	03fc18ec1r			; 1.51217
	DD	03fc17ebar			; 1.51168
	DD	03fc16eb3r			; 1.51119
	DD	03fc15eabr			; 1.5107
	DD	03fc14ea4r			; 1.51021
	DD	03fc13e9cr			; 1.50972
	DD	03fc12e94r			; 1.50923
	DD	03fc11e8dr			; 1.50874
	DD	03fc10e85r			; 1.50826
	DD	03fc0fe7dr			; 1.50777
	DD	03fc0ee74r			; 1.50728
	DD	03fc0de6cr			; 1.50679
	DD	03fc0ce64r			; 1.5063
	DD	03fc0be5br			; 1.50581
	DD	03fc0ae52r			; 1.50532
	DD	03fc09e49r			; 1.50483
	DD	03fc08e40r			; 1.50434
	DD	03fc07e37r			; 1.50385
	DD	03fc06e2er			; 1.50336
	DD	03fc05e25r			; 1.50287
	DD	03fc04e1br			; 1.50238
	DD	03fc03e11r			; 1.50189
	DD	03fc02e08r			; 1.5014
	DD	03fc01dfer			; 1.50092
	DD	03fc00df4r			; 1.50043
	DD	03fbffde9r			; 1.49994
	DD	03fbfeddfr			; 1.49945
	DD	03fbfddd4r			; 1.49896
	DD	03fbfcdcar			; 1.49847
	DD	03fbfbdbfr			; 1.49798
	DD	03fbfadb4r			; 1.49749
	DD	03fbf9da9r			; 1.497
	DD	03fbf8d9er			; 1.49651
	DD	03fbf7d92r			; 1.49602
	DD	03fbf6d87r			; 1.49553
	DD	03fbf5d7br			; 1.49504
	DD	03fbf4d6fr			; 1.49455
	DD	03fbf3d63r			; 1.49406
	DD	03fbf2d57r			; 1.49357
	DD	03fbf1d4br			; 1.49308
	DD	03fbf0d3er			; 1.49259
	DD	03fbefd31r			; 1.4921
	DD	03fbeed25r			; 1.49161
	DD	03fbedd18r			; 1.49112
	DD	03fbecd0br			; 1.49063
	DD	03fbebcfdr			; 1.49014
	DD	03fbeacf0r			; 1.48965
	DD	03fbe9ce2r			; 1.48916
	DD	03fbe8cd5r			; 1.48867
	DD	03fbe7cc7r			; 1.48818
	DD	03fbe6cb9r			; 1.48769
	DD	03fbe5caar			; 1.4872
	DD	03fbe4c9cr			; 1.48671
	DD	03fbe3c8dr			; 1.48622
	DD	03fbe2c7er			; 1.48573
	DD	03fbe1c6fr			; 1.48524
	DD	03fbe0c60r			; 1.48475
	DD	03fbdfc51r			; 1.48426
	DD	03fbdec42r			; 1.48377
	DD	03fbddc32r			; 1.48328
	DD	03fbdcc22r			; 1.48279
	DD	03fbdbc12r			; 1.4823
	DD	03fbdac02r			; 1.48181
	DD	03fbd9bf2r			; 1.48132
	DD	03fbd8be1r			; 1.48083
	DD	03fbd7bd0r			; 1.48034
	DD	03fbd6bbfr			; 1.47985
	DD	03fbd5baer			; 1.47936
	DD	03fbd4b9dr			; 1.47887
	DD	03fbd3b8cr			; 1.47838
	DD	03fbd2b7ar			; 1.47789
	DD	03fbd1b68r			; 1.4774
	DD	03fbd0b56r			; 1.47691
	DD	03fbcfb44r			; 1.47642
	DD	03fbceb31r			; 1.47593
	DD	03fbcdb1fr			; 1.47544
	DD	03fbccb0cr			; 1.47495
	DD	03fbcbaf9r			; 1.47446
	DD	03fbcaae6r			; 1.47397
	DD	03fbc9ad3r			; 1.47347
	DD	03fbc8abfr			; 1.47298
	DD	03fbc7aabr			; 1.47249
	DD	03fbc6a97r			; 1.472
	DD	03fbc5a83r			; 1.47151
	DD	03fbc4a6fr			; 1.47102
	DD	03fbc3a5ar			; 1.47053
	DD	03fbc2a45r			; 1.47004
	DD	03fbc1a30r			; 1.46955
	DD	03fbc0a1br			; 1.46906
	DD	03fbbfa06r			; 1.46857
	DD	03fbbe9f0r			; 1.46808
	DD	03fbbd9dar			; 1.46759
	DD	03fbbc9c4r			; 1.46709
	DD	03fbbb9aer			; 1.4666
	DD	03fbba998r			; 1.46611
	DD	03fbb9981r			; 1.46562
	DD	03fbb896ar			; 1.46513
	DD	03fbb7953r			; 1.46464
	DD	03fbb693cr			; 1.46415
	DD	03fbb5924r			; 1.46366
	DD	03fbb490cr			; 1.46317
	DD	03fbb38f5r			; 1.46268
	DD	03fbb28dcr			; 1.46218
	DD	03fbb18c4r			; 1.46169
	DD	03fbb08abr			; 1.4612
	DD	03fbaf893r			; 1.46071
	DD	03fbae879r			; 1.46022
	DD	03fbad860r			; 1.45973
	DD	03fbac847r			; 1.45924
	DD	03fbab82dr			; 1.45875
	DD	03fbaa813r			; 1.45825
	DD	03fba97f9r			; 1.45776
	DD	03fba87der			; 1.45727
	DD	03fba77c4r			; 1.45678
	DD	03fba67a9r			; 1.45629
	DD	03fba578er			; 1.4558
	DD	03fba4772r			; 1.45531
	DD	03fba3757r			; 1.45481
	DD	03fba273br			; 1.45432
	DD	03fba171fr			; 1.45383
	DD	03fba0703r			; 1.45334
	DD	03fb9f6e6r			; 1.45285
	DD	03fb9e6c9r			; 1.45236
	DD	03fb9d6acr			; 1.45186
	DD	03fb9c68fr			; 1.45137
	DD	03fb9b672r			; 1.45088
	DD	03fb9a654r			; 1.45039
	DD	03fb99636r			; 1.4499
	DD	03fb98618r			; 1.4494
	DD	03fb975f9r			; 1.44891
	DD	03fb965dar			; 1.44842
	DD	03fb955bbr			; 1.44793
	DD	03fb9459cr			; 1.44744
	DD	03fb9357dr			; 1.44694
	DD	03fb9255dr			; 1.44645
	DD	03fb9153dr			; 1.44596
	DD	03fb9051dr			; 1.44547
	DD	03fb8f4fcr			; 1.44498
	DD	03fb8e4dbr			; 1.44448
	DD	03fb8d4bar			; 1.44399
	DD	03fb8c499r			; 1.4435
	DD	03fb8b477r			; 1.44301
	DD	03fb8a456r			; 1.44252
	DD	03fb89434r			; 1.44202
	DD	03fb88411r			; 1.44153
	DD	03fb873efr			; 1.44104
	DD	03fb863ccr			; 1.44055
	DD	03fb853a9r			; 1.44005
	DD	03fb84385r			; 1.43956
	DD	03fb83362r			; 1.43907
	DD	03fb8233er			; 1.43858
	DD	03fb81319r			; 1.43808
	DD	03fb802f5r			; 1.43759
	DD	03fb7f2d0r			; 1.4371
	DD	03fb7e2abr			; 1.4366
	DD	03fb7d286r			; 1.43611
	DD	03fb7c260r			; 1.43562
	DD	03fb7b23br			; 1.43513
	DD	03fb7a214r			; 1.43463
	DD	03fb791eer			; 1.43414
	DD	03fb781c7r			; 1.43365
	DD	03fb771a0r			; 1.43316
	DD	03fb76179r			; 1.43266
	DD	03fb75152r			; 1.43217
	DD	03fb7412ar			; 1.43168
	DD	03fb73102r			; 1.43118
	DD	03fb720d9r			; 1.43069
	DD	03fb710b1r			; 1.4302
	DD	03fb70088r			; 1.4297
	DD	03fb6f05er			; 1.42921
	DD	03fb6e035r			; 1.42872
	DD	03fb6d00br			; 1.42822
	DD	03fb6bfe1r			; 1.42773
	DD	03fb6afb6r			; 1.42724
	DD	03fb69f8cr			; 1.42674
	DD	03fb68f61r			; 1.42625
	DD	03fb67f35r			; 1.42576
	DD	03fb66f0ar			; 1.42526
	DD	03fb65eder			; 1.42477
	DD	03fb64eb2r			; 1.42428
	DD	03fb63e85r			; 1.42378
	DD	03fb62e58r			; 1.42329
	DD	03fb61e2br			; 1.4228
	DD	03fb60dfer			; 1.4223
	DD	03fb5fdd0r			; 1.42181
	DD	03fb5eda2r			; 1.42131
	DD	03fb5dd74r			; 1.42082
	DD	03fb5cd45r			; 1.42033
	DD	03fb5bd16r			; 1.41983
	DD	03fb5ace7r			; 1.41934
	DD	03fb59cb7r			; 1.41885
	DD	03fb58c87r			; 1.41835
	DD	03fb57c57r			; 1.41786
	DD	03fb56c26r			; 1.41736
	DD	03fb55bf6r			; 1.41687
	DD	03fb54bc4r			; 1.41637
	DD	03fb53b93r			; 1.41588
	DD	03fb52b61r			; 1.41539
	DD	03fb51b2fr			; 1.41489
	DD	03fb50afdr			; 1.4144
	DD	03fb4facar			; 1.4139
	DD	03fb4ea97r			; 1.41341
	DD	03fb4da63r			; 1.41291
	DD	03fb4ca30r			; 1.41242
	DD	03fb4b9fbr			; 1.41193
	DD	03fb4a9c7r			; 1.41143
	DD	03fb49992r			; 1.41094
	DD	03fb4895dr			; 1.41044
	DD	03fb47928r			; 1.40995
	DD	03fb468f2r			; 1.40945
	DD	03fb458bcr			; 1.40896
	DD	03fb44886r			; 1.40846
	DD	03fb4384fr			; 1.40797
	DD	03fb42818r			; 1.40747
	DD	03fb417e0r			; 1.40698
	DD	03fb407a9r			; 1.40648
	DD	03fb3f771r			; 1.40599
	DD	03fb3e738r			; 1.40549
	DD	03fb3d6ffr			; 1.405
	DD	03fb3c6c6r			; 1.4045
	DD	03fb3b68dr			; 1.40401
	DD	03fb3a653r			; 1.40351
	DD	03fb39619r			; 1.40302
	DD	03fb385der			; 1.40252
	DD	03fb375a3r			; 1.40203
	DD	03fb36568r			; 1.40153
	DD	03fb3552dr			; 1.40104
	DD	03fb344f1r			; 1.40054
	DD	03fb334b5r			; 1.40005
	DD	03fb32478r			; 1.39955
	DD	03fb3143br			; 1.39905
	DD	03fb303fer			; 1.39856
	DD	03fb2f3c0r			; 1.39806
	DD	03fb2e382r			; 1.39757
	DD	03fb2d343r			; 1.39707
	DD	03fb2c305r			; 1.39658
	DD	03fb2b2c6r			; 1.39608
	DD	03fb2a286r			; 1.39558
	DD	03fb29246r			; 1.39509
	DD	03fb28206r			; 1.39459
	DD	03fb271c5r			; 1.3941
	DD	03fb26184r			; 1.3936
	DD	03fb25143r			; 1.3931
	DD	03fb24101r			; 1.39261
	DD	03fb230bfr			; 1.39211
	DD	03fb2207dr			; 1.39162
	DD	03fb2103ar			; 1.39112
	DD	03fb1fff7r			; 1.39062
	DD	03fb1efb3r			; 1.39013
	DD	03fb1df6fr			; 1.38963
	DD	03fb1cf2br			; 1.38913
	DD	03fb1bee6r			; 1.38864
	DD	03fb1aea1r			; 1.38814
	DD	03fb19e5cr			; 1.38765
	DD	03fb18e16r			; 1.38715
	DD	03fb17dcfr			; 1.38665
	DD	03fb16d89r			; 1.38616
	DD	03fb15d42r			; 1.38566
	DD	03fb14cfar			; 1.38516
	DD	03fb13cb3r			; 1.38466
	DD	03fb12c6ar			; 1.38417
	DD	03fb11c22r			; 1.38367
	DD	03fb10bd9r			; 1.38317
	DD	03fb0fb8fr			; 1.38268
	DD	03fb0eb46r			; 1.38218
	DD	03fb0dafcr			; 1.38168
	DD	03fb0cab1r			; 1.38119
	DD	03fb0ba66r			; 1.38069
	DD	03fb0aa1br			; 1.38019
	DD	03fb099cfr			; 1.37969
	DD	03fb08983r			; 1.3792
	DD	03fb07936r			; 1.3787
	DD	03fb068e9r			; 1.3782
	DD	03fb0589cr			; 1.3777
	DD	03fb0484er			; 1.37721
	DD	03fb03800r			; 1.37671
	DD	03fb027b1r			; 1.37621
	DD	03fb01762r			; 1.37571
	DD	03fb00713r			; 1.37522
	DD	03faff6c3r			; 1.37472
	DD	03fafe673r			; 1.37422
	DD	03fafd622r			; 1.37372
	DD	03fafc5d1r			; 1.37322
	DD	03fafb580r			; 1.37273
	DD	03fafa52er			; 1.37223
	DD	03faf94dcr			; 1.37173
	DD	03faf8489r			; 1.37123
	DD	03faf7436r			; 1.37073
	DD	03faf63e2r			; 1.37024
	DD	03faf538er			; 1.36974
	DD	03faf433ar			; 1.36924
	DD	03faf32e5r			; 1.36874
	DD	03faf2290r			; 1.36824
	DD	03faf123ar			; 1.36774
	DD	03faf01e4r			; 1.36725
	DD	03faef18dr			; 1.36675
	DD	03faee136r			; 1.36625
	DD	03faed0dfr			; 1.36575
	DD	03faec087r			; 1.36525
	DD	03faeb02fr			; 1.36475
	DD	03fae9fd6r			; 1.36425
	DD	03fae8f7dr			; 1.36375
	DD	03fae7f23r			; 1.36325
	DD	03fae6ec9r			; 1.36276
	DD	03fae5e6fr			; 1.36226
	DD	03fae4e14r			; 1.36176
	DD	03fae3db8r			; 1.36126
	DD	03fae2d5dr			; 1.36076
	DD	03fae1d00r			; 1.36026
	DD	03fae0ca4r			; 1.35976
	DD	03fadfc46r			; 1.35926
	DD	03fadebe9r			; 1.35876
	DD	03faddb8br			; 1.35826
	DD	03fadcb2cr			; 1.35776
	DD	03fadbacdr			; 1.35726
	DD	03fadaa6er			; 1.35676
	DD	03fad9a0er			; 1.35626
	DD	03fad89aer			; 1.35576
	DD	03fad794dr			; 1.35526
	DD	03fad68ecr			; 1.35476
	DD	03fad588ar			; 1.35426
	DD	03fad4828r			; 1.35376
	DD	03fad37c5r			; 1.35326
	DD	03fad2762r			; 1.35276
	DD	03fad16fer			; 1.35226
	DD	03fad069ar			; 1.35176
	DD	03facf636r			; 1.35126
	DD	03face5d1r			; 1.35076
	DD	03facd56cr			; 1.35026
	DD	03facc506r			; 1.34976
	DD	03facb49fr			; 1.34926
	DD	03faca438r			; 1.34876
	DD	03fac93d1r			; 1.34826
	DD	03fac8369r			; 1.34776
	DD	03fac7301r			; 1.34726
	DD	03fac6298r			; 1.34676
	DD	03fac522fr			; 1.34626
	DD	03fac41c5r			; 1.34576
	DD	03fac315br			; 1.34526
	DD	03fac20f1r			; 1.34476
	DD	03fac1085r			; 1.34425
	DD	03fac001ar			; 1.34375
	DD	03fabefaer			; 1.34325
	DD	03fabdf41r			; 1.34275
	DD	03fabced4r			; 1.34225
	DD	03fabbe66r			; 1.34175
	DD	03fabadf8r			; 1.34125
	DD	03fab9d8ar			; 1.34075
	DD	03fab8d1ar			; 1.34024
	DD	03fab7cabr			; 1.33974
	DD	03fab6c3br			; 1.33924
	DD	03fab5bcar			; 1.33874
	DD	03fab4b59r			; 1.33824
	DD	03fab3ae8r			; 1.33774
	DD	03fab2a76r			; 1.33723
	DD	03fab1a03r			; 1.33673
	DD	03fab0990r			; 1.33623
	DD	03faaf91cr			; 1.33573
	DD	03faae8a8r			; 1.33523
	DD	03faad834r			; 1.33472
	DD	03faac7bfr			; 1.33422
	DD	03faab749r			; 1.33372
	DD	03faaa6d3r			; 1.33322
	DD	03faa965cr			; 1.33271
	DD	03faa85e5r			; 1.33221
	DD	03faa756dr			; 1.33171
	DD	03faa64f5r			; 1.33121
	DD	03faa547cr			; 1.3307
	DD	03faa4403r			; 1.3302
	DD	03faa338ar			; 1.3297
	DD	03faa230fr			; 1.32919
	DD	03faa1294r			; 1.32869
	DD	03faa0219r			; 1.32819
	DD	03fa9f19dr			; 1.32769
	DD	03fa9e121r			; 1.32718
	DD	03fa9d0a4r			; 1.32668
	DD	03fa9c027r			; 1.32618
	DD	03fa9afa9r			; 1.32567
	DD	03fa99f2ar			; 1.32517
	DD	03fa98eabr			; 1.32467
	DD	03fa97e2cr			; 1.32416
	DD	03fa96dacr			; 1.32366
	DD	03fa95d2br			; 1.32316
	DD	03fa94caar			; 1.32265
	DD	03fa93c28r			; 1.32215
	DD	03fa92ba6r			; 1.32164
	DD	03fa91b23r			; 1.32114
	DD	03fa90aa0r			; 1.32064
	DD	03fa8fa1cr			; 1.32013
	DD	03fa8e998r			; 1.31963
	DD	03fa8d913r			; 1.31912
	DD	03fa8c88dr			; 1.31862
	DD	03fa8b807r			; 1.31812
	DD	03fa8a780r			; 1.31761
	DD	03fa896f9r			; 1.31711
	DD	03fa88672r			; 1.3166
	DD	03fa875e9r			; 1.3161
	DD	03fa86560r			; 1.31559
	DD	03fa854d7r			; 1.31509
	DD	03fa8444dr			; 1.31458
	DD	03fa833c3r			; 1.31408
	DD	03fa82338r			; 1.31357
	DD	03fa812acr			; 1.31307
	DD	03fa80220r			; 1.31256
	DD	03fa7f193r			; 1.31206
	DD	03fa7e106r			; 1.31155
	DD	03fa7d078r			; 1.31105
	DD	03fa7bfe9r			; 1.31054
	DD	03fa7af5ar			; 1.31004
	DD	03fa79ecbr			; 1.30953
	DD	03fa78e3br			; 1.30903
	DD	03fa77daar			; 1.30852
	DD	03fa76d19r			; 1.30802
	DD	03fa75c87r			; 1.30751
	DD	03fa74bf4r			; 1.30701
	DD	03fa73b61r			; 1.3065
	DD	03fa72acdr			; 1.30599
	DD	03fa71a39r			; 1.30549
	DD	03fa709a4r			; 1.30498
	DD	03fa6f90fr			; 1.30448
	DD	03fa6e879r			; 1.30397
	DD	03fa6d7e3r			; 1.30346
	DD	03fa6c74br			; 1.30296
	DD	03fa6b6b4r			; 1.30245
	DD	03fa6a61br			; 1.30194
	DD	03fa69582r			; 1.30144
	DD	03fa684e9r			; 1.30093
	DD	03fa6744fr			; 1.30042
	DD	03fa663b4r			; 1.29992
	DD	03fa65319r			; 1.29941
	DD	03fa6427dr			; 1.2989
	DD	03fa631e0r			; 1.2984
	DD	03fa62143r			; 1.29789
	DD	03fa610a6r			; 1.29738
	DD	03fa60007r			; 1.29688
	DD	03fa5ef68r			; 1.29637
	DD	03fa5dec9r			; 1.29586
	DD	03fa5ce29r			; 1.29535
	DD	03fa5bd88r			; 1.29485
	DD	03fa5ace6r			; 1.29434
	DD	03fa59c44r			; 1.29383
	DD	03fa58ba2r			; 1.29332
	DD	03fa57affr			; 1.29282
	DD	03fa56a5br			; 1.29231
	DD	03fa559b6r			; 1.2918
	DD	03fa54911r			; 1.29129
	DD	03fa5386cr			; 1.29078
	DD	03fa527c5r			; 1.29028
	DD	03fa5171er			; 1.28977
	DD	03fa50677r			; 1.28926
	DD	03fa4f5cfr			; 1.28875
	DD	03fa4e526r			; 1.28824
	DD	03fa4d47cr			; 1.28773
	DD	03fa4c3d2r			; 1.28723
	DD	03fa4b328r			; 1.28672
	DD	03fa4a27cr			; 1.28621
	DD	03fa491d0r			; 1.2857
	DD	03fa48124r			; 1.28519
	DD	03fa47076r			; 1.28468
	DD	03fa45fc9r			; 1.28417
	DD	03fa44f1ar			; 1.28366
	DD	03fa43e6br			; 1.28315
	DD	03fa42dbbr			; 1.28265
	DD	03fa41d0br			; 1.28214
	DD	03fa40c5ar			; 1.28163
	DD	03fa3fba8r			; 1.28112
	DD	03fa3eaf5r			; 1.28061
	DD	03fa3da42r			; 1.2801
	DD	03fa3c98fr			; 1.27959
	DD	03fa3b8dar			; 1.27908
	DD	03fa3a825r			; 1.27857
	DD	03fa39770r			; 1.27806
	DD	03fa386b9r			; 1.27755
	DD	03fa37602r			; 1.27704
	DD	03fa3654br			; 1.27653
	DD	03fa35492r			; 1.27602
	DD	03fa343d9r			; 1.27551
	DD	03fa33320r			; 1.275
	DD	03fa32265r			; 1.27449
	DD	03fa311aar			; 1.27398
	DD	03fa300efr			; 1.27347
	DD	03fa2f033r			; 1.27296
	DD	03fa2df76r			; 1.27244
	DD	03fa2ceb8r			; 1.27193
	DD	03fa2bdfar			; 1.27142
	DD	03fa2ad3br			; 1.27091
	DD	03fa29c7br			; 1.2704
	DD	03fa28bbbr			; 1.26989
	DD	03fa27af9r			; 1.26938
	DD	03fa26a38r			; 1.26887
	DD	03fa25975r			; 1.26836
	DD	03fa248b2r			; 1.26784
	DD	03fa237eer			; 1.26733
	DD	03fa2272ar			; 1.26682
	DD	03fa21665r			; 1.26631
	DD	03fa2059fr			; 1.2658
	DD	03fa1f4d8r			; 1.26528
	DD	03fa1e411r			; 1.26477
	DD	03fa1d349r			; 1.26426
	DD	03fa1c281r			; 1.26375
	DD	03fa1b1b7r			; 1.26324
	DD	03fa1a0edr			; 1.26272
	DD	03fa19023r			; 1.26221
	DD	03fa17f57r			; 1.2617
	DD	03fa16e8br			; 1.26119
	DD	03fa15dber			; 1.26067
	DD	03fa14cf1r			; 1.26016
	DD	03fa13c22r			; 1.25965
	DD	03fa12b54r			; 1.25913
	DD	03fa11a84r			; 1.25862
	DD	03fa109b3r			; 1.25811
	DD	03fa0f8e2r			; 1.2576
	DD	03fa0e811r			; 1.25708
	DD	03fa0d73er			; 1.25657
	DD	03fa0c66br			; 1.25606
	DD	03fa0b597r			; 1.25554
	DD	03fa0a4c2r			; 1.25503
	DD	03fa093edr			; 1.25451
	DD	03fa08317r			; 1.254
	DD	03fa07240r			; 1.25349
	DD	03fa06168r			; 1.25297
	DD	03fa05090r			; 1.25246
	DD	03fa03fb7r			; 1.25194
	DD	03fa02eddr			; 1.25143
	DD	03fa01e03r			; 1.25092
	DD	03fa00d27r			; 1.2504
	DD	03f9ffc4br			; 1.24989
	DD	03f9feb6fr			; 1.24937
	DD	03f9fda91r			; 1.24886
	DD	03f9fc9b3r			; 1.24834
	DD	03f9fb8d4r			; 1.24783
	DD	03f9fa7f4r			; 1.24731
	DD	03f9f9714r			; 1.2468
	DD	03f9f8633r			; 1.24628
	DD	03f9f7551r			; 1.24577
	DD	03f9f646er			; 1.24525
	DD	03f9f538br			; 1.24474
	DD	03f9f42a6r			; 1.24422
	DD	03f9f31c1r			; 1.24371
	DD	03f9f20dcr			; 1.24319
	DD	03f9f0ff5r			; 1.24267
	DD	03f9eff0er			; 1.24216
	DD	03f9eee26r			; 1.24164
	DD	03f9edd3dr			; 1.24113
	DD	03f9ecc54r			; 1.24061
	DD	03f9ebb6ar			; 1.24009
	DD	03f9eaa7er			; 1.23958
	DD	03f9e9993r			; 1.23906
	DD	03f9e88a6r			; 1.23855
	DD	03f9e77b9r			; 1.23803
	DD	03f9e66cbr			; 1.23751
	DD	03f9e55dcr			; 1.237
	DD	03f9e44ecr			; 1.23648
	DD	03f9e33fcr			; 1.23596
	DD	03f9e230ar			; 1.23544
	DD	03f9e1218r			; 1.23493
	DD	03f9e0126r			; 1.23441
	DD	03f9df032r			; 1.23389
	DD	03f9ddf3er			; 1.23338
	DD	03f9dce48r			; 1.23286
	DD	03f9dbd52r			; 1.23234
	DD	03f9dac5cr			; 1.23182
	DD	03f9d9b64r			; 1.2313
	DD	03f9d8a6cr			; 1.23079
	DD	03f9d7973r			; 1.23027
	DD	03f9d6879r			; 1.22975
	DD	03f9d577er			; 1.22923
	DD	03f9d4683r			; 1.22871
	DD	03f9d3586r			; 1.2282
	DD	03f9d2489r			; 1.22768
	DD	03f9d138br			; 1.22716
	DD	03f9d028cr			; 1.22664
	DD	03f9cf18dr			; 1.22612
	DD	03f9ce08cr			; 1.2256
	DD	03f9ccf8br			; 1.22508
	DD	03f9cbe89r			; 1.22456
	DD	03f9cad86r			; 1.22405
	DD	03f9c9c83r			; 1.22353
	DD	03f9c8b7er			; 1.22301
	DD	03f9c7a79r			; 1.22249
	DD	03f9c6973r			; 1.22197
	DD	03f9c586cr			; 1.22145
	DD	03f9c4764r			; 1.22093
	DD	03f9c365cr			; 1.22041
	DD	03f9c2552r			; 1.21989
	DD	03f9c1448r			; 1.21937
	DD	03f9c033dr			; 1.21885
	DD	03f9bf231r			; 1.21833
	DD	03f9be125r			; 1.21781
	DD	03f9bd017r			; 1.21729
	DD	03f9bbf09r			; 1.21677
	DD	03f9badf9r			; 1.21625
	DD	03f9b9ce9r			; 1.21573
	DD	03f9b8bd8r			; 1.21521
	DD	03f9b7ac7r			; 1.21468
	DD	03f9b69b4r			; 1.21416
	DD	03f9b58a1r			; 1.21364
	DD	03f9b478cr			; 1.21312
	DD	03f9b3677r			; 1.2126
	DD	03f9b2561r			; 1.21208
	DD	03f9b144ar			; 1.21156
	DD	03f9b0333r			; 1.21104
	DD	03f9af21ar			; 1.21051
	DD	03f9ae100r			; 1.20999
	DD	03f9acfe6r			; 1.20947
	DD	03f9abecbr			; 1.20895
	DD	03f9aadafr			; 1.20843
	DD	03f9a9c92r			; 1.2079
	DD	03f9a8b74r			; 1.20738
	DD	03f9a7a56r			; 1.20686
	DD	03f9a6936r			; 1.20634
	DD	03f9a5816r			; 1.20581
	DD	03f9a46f4r			; 1.20529
	DD	03f9a35d2r			; 1.20477
	DD	03f9a24afr			; 1.20424
	DD	03f9a138br			; 1.20372
	DD	03f9a0267r			; 1.2032
	DD	03f99f141r			; 1.20267
	DD	03f99e01ar			; 1.20215
	DD	03f99cef3r			; 1.20163
	DD	03f99bdcbr			; 1.2011
	DD	03f99aca1r			; 1.20058
	DD	03f999b77r			; 1.20006
	DD	03f998a4cr			; 1.19953
	DD	03f997920r			; 1.19901
	DD	03f9967f3r			; 1.19848
	DD	03f9956c6r			; 1.19796
	DD	03f994597r			; 1.19744
	DD	03f993468r			; 1.19691
	DD	03f992337r			; 1.19639
	DD	03f991206r			; 1.19586
	DD	03f9900d4r			; 1.19534
	DD	03f98efa0r			; 1.19481
	DD	03f98de6cr			; 1.19429
	DD	03f98cd37r			; 1.19376
	DD	03f98bc02r			; 1.19324
	DD	03f98aacbr			; 1.19271
	DD	03f989993r			; 1.19219
	DD	03f98885ar			; 1.19166
	DD	03f987721r			; 1.19114
	DD	03f9865e6r			; 1.19061
	DD	03f9854abr			; 1.19008
	DD	03f98436fr			; 1.18956
	DD	03f983231r			; 1.18903
	DD	03f9820f3r			; 1.18851
	DD	03f980fb4r			; 1.18798
	DD	03f97fe74r			; 1.18745
	DD	03f97ed33r			; 1.18693
	DD	03f97dbf1r			; 1.1864
	DD	03f97caaer			; 1.18587
	DD	03f97b96ar			; 1.18535
	DD	03f97a825r			; 1.18482
	DD	03f9796dfr			; 1.18429
	DD	03f978599r			; 1.18376
	DD	03f977451r			; 1.18324
	DD	03f976309r			; 1.18271
	DD	03f9751bfr			; 1.18218
	DD	03f974074r			; 1.18165
	DD	03f972f29r			; 1.18113
	DD	03f971dddr			; 1.1806
	DD	03f970c8fr			; 1.18007
	DD	03f96fb41r			; 1.17954
	DD	03f96e9f2r			; 1.17901
	DD	03f96d8a1r			; 1.17849
	DD	03f96c750r			; 1.17796
	DD	03f96b5fer			; 1.17743
	DD	03f96a4abr			; 1.1769
	DD	03f969356r			; 1.17637
	DD	03f968201r			; 1.17584
	DD	03f9670abr			; 1.17531
	DD	03f965f54r			; 1.17478
	DD	03f964dfcr			; 1.17425
	DD	03f963ca3r			; 1.17373
	DD	03f962b49r			; 1.1732
	DD	03f9619eer			; 1.17267
	DD	03f960892r			; 1.17214
	DD	03f95f735r			; 1.17161
	DD	03f95e5d7r			; 1.17108
	DD	03f95d478r			; 1.17055
	DD	03f95c318r			; 1.17002
	DD	03f95b1b7r			; 1.16949
	DD	03f95a055r			; 1.16896
	DD	03f958ef2r			; 1.16842
	DD	03f957d8er			; 1.16789
	DD	03f956c29r			; 1.16736
	DD	03f955ac3r			; 1.16683
	DD	03f95495cr			; 1.1663
	DD	03f9537f3r			; 1.16577
	DD	03f95268ar			; 1.16524
	DD	03f951520r			; 1.16471
	DD	03f9503b5r			; 1.16418
	DD	03f94f249r			; 1.16364
	DD	03f94e0dcr			; 1.16311
	DD	03f94cf6er			; 1.16258
	DD	03f94bdfer			; 1.16205
	DD	03f94ac8er			; 1.16152
	DD	03f949b1dr			; 1.16098
	DD	03f9489abr			; 1.16045
	DD	03f947837r			; 1.15992
	DD	03f9466c3r			; 1.15939
	DD	03f94554er			; 1.15885
	DD	03f9443d7r			; 1.15832
	DD	03f943260r			; 1.15779
	DD	03f9420e7r			; 1.15725
	DD	03f940f6dr			; 1.15672
	DD	03f93fdf3r			; 1.15619
	DD	03f93ec77r			; 1.15565
	DD	03f93dafar			; 1.15512
	DD	03f93c97dr			; 1.15459
	DD	03f93b7fer			; 1.15405
	DD	03f93a67er			; 1.15352
	DD	03f9394fdr			; 1.15298
	DD	03f93837br			; 1.15245
	DD	03f9371f8r			; 1.15192
	DD	03f936074r			; 1.15138
	DD	03f934eeer			; 1.15085
	DD	03f933d68r			; 1.15031
	DD	03f932be1r			; 1.14978
	DD	03f931a58r			; 1.14924
	DD	03f9308cfr			; 1.14871
	DD	03f92f744r			; 1.14817
	DD	03f92e5b8r			; 1.14764
	DD	03f92d42cr			; 1.1471
	DD	03f92c29er			; 1.14656
	DD	03f92b10fr			; 1.14603
	DD	03f929f7fr			; 1.14549
	DD	03f928deer			; 1.14496
	DD	03f927c5br			; 1.14442
	DD	03f926ac8r			; 1.14388
	DD	03f925934r			; 1.14335
	DD	03f92479er			; 1.14281
	DD	03f923607r			; 1.14227
	DD	03f922470r			; 1.14174
	DD	03f9212d7r			; 1.1412
	DD	03f92013dr			; 1.14066
	DD	03f91efa2r			; 1.14013
	DD	03f91de06r			; 1.13959
	DD	03f91cc68r			; 1.13905
	DD	03f91bacar			; 1.13851
	DD	03f91a92br			; 1.13798
	DD	03f91978ar			; 1.13744
	DD	03f9185e8r			; 1.1369
	DD	03f917445r			; 1.13636
	DD	03f9162a1r			; 1.13582
	DD	03f9150fcr			; 1.13528
	DD	03f913f56r			; 1.13475
	DD	03f912daer			; 1.13421
	DD	03f911c06r			; 1.13367
	DD	03f910a5cr			; 1.13313
	DD	03f90f8b1r			; 1.13259
	DD	03f90e705r			; 1.13205
	DD	03f90d558r			; 1.13151
	DD	03f90c3aar			; 1.13097
	DD	03f90b1fbr			; 1.13043
	DD	03f90a04ar			; 1.12989
	DD	03f908e98r			; 1.12935
	DD	03f907ce5r			; 1.12881
	DD	03f906b31r			; 1.12827
	DD	03f90597cr			; 1.12773
	DD	03f9047c6r			; 1.12719
	DD	03f90360er			; 1.12665
	DD	03f902456r			; 1.12611
	DD	03f90129cr			; 1.12557
	DD	03f9000e1r			; 1.12503
	DD	03f8fef25r			; 1.12449
	DD	03f8fdd67r			; 1.12394
	DD	03f8fcba9r			; 1.1234
	DD	03f8fb9e9r			; 1.12286
	DD	03f8fa828r			; 1.12232
	DD	03f8f9666r			; 1.12178
	DD	03f8f84a3r			; 1.12124
	DD	03f8f72der			; 1.12069
	DD	03f8f6118r			; 1.12015
	DD	03f8f4f52r			; 1.11961
	DD	03f8f3d89r			; 1.11907
	DD	03f8f2bc0r			; 1.11852
	DD	03f8f19f6r			; 1.11798
	DD	03f8f082ar			; 1.11744
	DD	03f8ef65dr			; 1.11689
	DD	03f8ee48fr			; 1.11635
	DD	03f8ed2c0r			; 1.11581
	DD	03f8ec0efr			; 1.11526
	DD	03f8eaf1er			; 1.11472
	DD	03f8e9d4br			; 1.11418
	DD	03f8e8b76r			; 1.11363
	DD	03f8e79a1r			; 1.11309
	DD	03f8e67cbr			; 1.11254
	DD	03f8e55f3r			; 1.112
	DD	03f8e441ar			; 1.11145
	DD	03f8e323fr			; 1.11091
	DD	03f8e2064r			; 1.11036
	DD	03f8e0e87r			; 1.10982
	DD	03f8dfca9r			; 1.10927
	DD	03f8deacar			; 1.10873
	DD	03f8dd8e9r			; 1.10818
	DD	03f8dc708r			; 1.10764
	DD	03f8db525r			; 1.10709
	DD	03f8da340r			; 1.10654
	DD	03f8d915br			; 1.106
	DD	03f8d7f74r			; 1.10545
	DD	03f8d6d8cr			; 1.10491
	DD	03f8d5ba3r			; 1.10436
	DD	03f8d49b8r			; 1.10381
	DD	03f8d37cdr			; 1.10327
	DD	03f8d25e0r			; 1.10272
	DD	03f8d13f1r			; 1.10217
	DD	03f8d0202r			; 1.10162
	DD	03f8cf011r			; 1.10108
	DD	03f8cde1fr			; 1.10053
	DD	03f8ccc2br			; 1.09998
	DD	03f8cba37r			; 1.09943
	DD	03f8ca841r			; 1.09888
	DD	03f8c9649r			; 1.09834
	DD	03f8c8451r			; 1.09779
	DD	03f8c7257r			; 1.09724
	DD	03f8c605cr			; 1.09669
	DD	03f8c4e5fr			; 1.09614
	DD	03f8c3c62r			; 1.09559
	DD	03f8c2a63r			; 1.09504
	DD	03f8c1862r			; 1.09449
	DD	03f8c0661r			; 1.09394
	DD	03f8bf45er			; 1.09339
	DD	03f8be259r			; 1.09285
	DD	03f8bd054r			; 1.0923
	DD	03f8bbe4dr			; 1.09175
	DD	03f8bac45r			; 1.09119
	DD	03f8b9a3br			; 1.09064
	DD	03f8b8830r			; 1.09009
	DD	03f8b7624r			; 1.08954
	DD	03f8b6416r			; 1.08899
	DD	03f8b5208r			; 1.08844
	DD	03f8b3ff7r			; 1.08789
	DD	03f8b2de6r			; 1.08734
	DD	03f8b1bd3r			; 1.08679
	DD	03f8b09bfr			; 1.08623
	DD	03f8af7a9r			; 1.08568
	DD	03f8ae592r			; 1.08513
	DD	03f8ad37ar			; 1.08458
	DD	03f8ac161r			; 1.08403
	DD	03f8aaf46r			; 1.08347
	DD	03f8a9d29r			; 1.08292
	DD	03f8a8b0cr			; 1.08237
	DD	03f8a78edr			; 1.08182
	DD	03f8a66ccr			; 1.08126
	DD	03f8a54aar			; 1.08071
	DD	03f8a4287r			; 1.08016
	DD	03f8a3063r			; 1.0796
	DD	03f8a1e3dr			; 1.07905
	DD	03f8a0c16r			; 1.07849
	DD	03f89f9edr			; 1.07794
	DD	03f89e7c3r			; 1.07739
	DD	03f89d597r			; 1.07683
	DD	03f89c36br			; 1.07628
	DD	03f89b13cr			; 1.07572
	DD	03f899f0dr			; 1.07517
	DD	03f898cdcr			; 1.07461
	DD	03f897aa9r			; 1.07406
	DD	03f896876r			; 1.0735
	DD	03f895640r			; 1.07294
	DD	03f89440ar			; 1.07239
	DD	03f8931d2r			; 1.07183
	DD	03f891f98r			; 1.07128
	DD	03f890d5er			; 1.07072
	DD	03f88fb21r			; 1.07016
	DD	03f88e8e4r			; 1.06961
	DD	03f88d6a4r			; 1.06905
	DD	03f88c464r			; 1.06849
	DD	03f88b222r			; 1.06794
	DD	03f889fdfr			; 1.06738
	DD	03f888d9ar			; 1.06682
	DD	03f887b53r			; 1.06626
	DD	03f88690cr			; 1.06571
	DD	03f8856c3r			; 1.06515
	DD	03f884478r			; 1.06459
	DD	03f88322cr			; 1.06403
	DD	03f881fder			; 1.06347
	DD	03f880d8fr			; 1.06291
	DD	03f87fb3fr			; 1.06235
	DD	03f87e8edr			; 1.0618
	DD	03f87d69ar			; 1.06124
	DD	03f87c445r			; 1.06068
	DD	03f87b1efr			; 1.06012
	DD	03f879f97r			; 1.05956
	DD	03f878d3er			; 1.059
	DD	03f877ae3r			; 1.05844
	DD	03f876887r			; 1.05788
	DD	03f875629r			; 1.05732
	DD	03f8743car			; 1.05676
	DD	03f873169r			; 1.0562
	DD	03f871f07r			; 1.05563
	DD	03f870ca3r			; 1.05507
	DD	03f86fa3er			; 1.05451
	DD	03f86e7d8r			; 1.05395
	DD	03f86d56fr			; 1.05339
	DD	03f86c306r			; 1.05283
	DD	03f86b09br			; 1.05226
	DD	03f869e2er			; 1.0517
	DD	03f868bc0r			; 1.05114
	DD	03f867950r			; 1.05058
	DD	03f8666dfr			; 1.05001
	DD	03f86546cr			; 1.04945
	DD	03f8641f8r			; 1.04889
	DD	03f862f82r			; 1.04832
	DD	03f861d0br			; 1.04776
	DD	03f860a92r			; 1.0472
	DD	03f85f817r			; 1.04663
	DD	03f85e59br			; 1.04607
	DD	03f85d31er			; 1.04551
	DD	03f85c09fr			; 1.04494
	DD	03f85ae1er			; 1.04438
	DD	03f859b9cr			; 1.04381
	DD	03f858918r			; 1.04325
	DD	03f857693r			; 1.04268
	DD	03f85640cr			; 1.04212
	DD	03f855184r			; 1.04155
	DD	03f853efar			; 1.04098
	DD	03f852c6er			; 1.04042
	DD	03f8519e1r			; 1.03985
	DD	03f850752r			; 1.03929
	DD	03f84f4c2r			; 1.03872
	DD	03f84e230r			; 1.03815
	DD	03f84cf9dr			; 1.03759
	DD	03f84bd08r			; 1.03702
	DD	03f84aa71r			; 1.03645
	DD	03f8497d9r			; 1.03588
	DD	03f84853fr			; 1.03532
	DD	03f8472a3r			; 1.03475
	DD	03f846006r			; 1.03418
	DD	03f844d68r			; 1.03361
	DD	03f843ac7r			; 1.03304
	DD	03f842825r			; 1.03248
	DD	03f841582r			; 1.03191
	DD	03f8402ddr			; 1.03134
	DD	03f83f036r			; 1.03077
	DD	03f83dd8er			; 1.0302
	DD	03f83cae4r			; 1.02963
	DD	03f83b838r			; 1.02906
	DD	03f83a58br			; 1.02849
	DD	03f8392dcr			; 1.02792
	DD	03f83802br			; 1.02735
	DD	03f836d79r			; 1.02678
	DD	03f835ac5r			; 1.02621
	DD	03f83480fr			; 1.02564
	DD	03f833558r			; 1.02507
	DD	03f83229fr			; 1.02449
	DD	03f830fe5r			; 1.02392
	DD	03f82fd28r			; 1.02335
	DD	03f82ea6ar			; 1.02278
	DD	03f82d7abr			; 1.02221
	DD	03f82c4ear			; 1.02163
	DD	03f82b227r			; 1.02106
	DD	03f829f62r			; 1.02049
	DD	03f828c9cr			; 1.01992
	DD	03f8279d4r			; 1.01934
	DD	03f82670ar			; 1.01877
	DD	03f82543fr			; 1.0182
	DD	03f824172r			; 1.01762
	DD	03f822ea3r			; 1.01705
	DD	03f821bd2r			; 1.01647
	DD	03f820900r			; 1.0159
	DD	03f81f62cr			; 1.01533
	DD	03f81e356r			; 1.01475
	DD	03f81d07fr			; 1.01418
	DD	03f81bda6r			; 1.0136
	DD	03f81aacbr			; 1.01302
	DD	03f8197efr			; 1.01245
	DD	03f818510r			; 1.01187
	DD	03f817230r			; 1.0113
	DD	03f815f4er			; 1.01072
	DD	03f814c6br			; 1.01014
	DD	03f813986r			; 1.00957
	DD	03f81269fr			; 1.00899
	DD	03f8113b6r			; 1.00841
	DD	03f8100cbr			; 1.00784
	DD	03f80eddfr			; 1.00726
	DD	03f80daf1r			; 1.00668
	DD	03f80c801r			; 1.0061
	DD	03f80b50fr			; 1.00553
	DD	03f80a21cr			; 1.00495
	DD	03f808f27r			; 1.00437
	DD	03f807c30r			; 1.00379
	DD	03f806937r			; 1.00321
	DD	03f80563cr			; 1.00263
	DD	03f804340r			; 1.00205
	DD	03f803042r			; 1.00147
	DD	03f801d42r			; 1.00089
	DD	03f800a40r			; 1.00031
	DD	03f7fee79r			; 0.999733
	DD	03f7fc86er			; 0.999152
	DD	03f7fa260r			; 0.998571
	DD	03f7f7c4dr			; 0.99799
	DD	03f7f5638r			; 0.997409
	DD	03f7f301er			; 0.996828
	DD	03f7f0a01r			; 0.996246
	DD	03f7ee3e0r			; 0.995665
	DD	03f7ebdbcr			; 0.995083
	DD	03f7e9794r			; 0.9945
	DD	03f7e7168r			; 0.993918
	DD	03f7e4b38r			; 0.993335
	DD	03f7e2505r			; 0.992752
	DD	03f7dfecer			; 0.992169
	DD	03f7dd894r			; 0.991586
	DD	03f7db255r			; 0.991002
	DD	03f7d8c13r			; 0.990419
	DD	03f7d65cdr			; 0.989835
	DD	03f7d3f83r			; 0.98925
	DD	03f7d1936r			; 0.988666
	DD	03f7cf2e5r			; 0.988081
	DD	03f7ccc90r			; 0.987496
	DD	03f7ca637r			; 0.986911
	DD	03f7c7fdar			; 0.986326
	DD	03f7c597ar			; 0.98574
	DD	03f7c3316r			; 0.985155
	DD	03f7c0caer			; 0.984568
	DD	03f7be642r			; 0.983982
	DD	03f7bbfd2r			; 0.983396
	DD	03f7b995fr			; 0.982809
	DD	03f7b72e7r			; 0.982222
	DD	03f7b4c6cr			; 0.981635
	DD	03f7b25edr			; 0.981047
	DD	03f7aff6ar			; 0.98046
	DD	03f7ad8e3r			; 0.979872
	DD	03f7ab258r			; 0.979284
	DD	03f7a8bcar			; 0.978696
	DD	03f7a6537r			; 0.978107
	DD	03f7a3ea0r			; 0.977518
	DD	03f7a1806r			; 0.976929
	DD	03f79f168r			; 0.97634
	DD	03f79cac5r			; 0.97575
	DD	03f79a41fr			; 0.975161
	DD	03f797d75r			; 0.974571
	DD	03f7956c7r			; 0.97398
	DD	03f793015r			; 0.97339
	DD	03f79095fr			; 0.972799
	DD	03f78e2a5r			; 0.972208
	DD	03f78bbe6r			; 0.971617
	DD	03f789524r			; 0.971026
	DD	03f786e5er			; 0.970434
	DD	03f784794r			; 0.969842
	DD	03f7820c6r			; 0.96925
	DD	03f77f9f4r			; 0.968658
	DD	03f77d31er			; 0.968065
	DD	03f77ac43r			; 0.967472
	DD	03f778565r			; 0.966879
	DD	03f775e82r			; 0.966286
	DD	03f77379cr			; 0.965692
	DD	03f7710b1r			; 0.965098
	DD	03f76e9c3r			; 0.964504
	DD	03f76c2d0r			; 0.96391
	DD	03f769bd9r			; 0.963316
	DD	03f7674der			; 0.962721
	DD	03f764ddfr			; 0.962126
	DD	03f7626dbr			; 0.96153
	DD	03f75ffd4r			; 0.960935
	DD	03f75d8c8r			; 0.960339
	DD	03f75b1b8r			; 0.959743
	DD	03f758aa4r			; 0.959147
	DD	03f75638cr			; 0.95855
	DD	03f753c70r			; 0.957953
	DD	03f75154fr			; 0.957356
	DD	03f74ee2ar			; 0.956759
	DD	03f74c701r			; 0.956162
	DD	03f749fd4r			; 0.955564
	DD	03f7478a3r			; 0.954966
	DD	03f74516dr			; 0.954367
	DD	03f742a33r			; 0.953769
	DD	03f7402f5r			; 0.95317
	DD	03f73dbb2r			; 0.952571
	DD	03f73b46br			; 0.951972
	DD	03f738d20r			; 0.951372
	DD	03f7365d1r			; 0.950772
	DD	03f733e7dr			; 0.950172
	DD	03f731725r			; 0.949572
	DD	03f72efc9r			; 0.948971
	DD	03f72c868r			; 0.94837
	DD	03f72a103r			; 0.947769
	DD	03f72799ar			; 0.947168
	DD	03f72522cr			; 0.946566
	DD	03f722abar			; 0.945964
	DD	03f720343r			; 0.945362
	DD	03f71dbc8r			; 0.94476
	DD	03f71b449r			; 0.944157
	DD	03f718cc5r			; 0.943554
	DD	03f71653dr			; 0.942951
	DD	03f713db0r			; 0.942348
	DD	03f71161fr			; 0.941744
	DD	03f70ee8ar			; 0.94114
	DD	03f70c6f0r			; 0.940536
	DD	03f709f51r			; 0.939931
	DD	03f7077aer			; 0.939326
	DD	03f705007r			; 0.938721
	DD	03f70285br			; 0.938116
	DD	03f7000abr			; 0.93751
	DD	03f6fd8f6r			; 0.936904
	DD	03f6fb13cr			; 0.936298
	DD	03f6f897er			; 0.935692
	DD	03f6f61bcr			; 0.935085
	DD	03f6f39f5r			; 0.934478
	DD	03f6f1229r			; 0.933871
	DD	03f6eea59r			; 0.933263
	DD	03f6ec284r			; 0.932656
	DD	03f6e9aaar			; 0.932047
	DD	03f6e72ccr			; 0.931439
	DD	03f6e4aear			; 0.930831
	DD	03f6e2302r			; 0.930222
	DD	03f6dfb16r			; 0.929613
	DD	03f6dd326r			; 0.929003
	DD	03f6dab31r			; 0.928393
	DD	03f6d8337r			; 0.927783
	DD	03f6d5b38r			; 0.927173
	DD	03f6d3335r			; 0.926563
	DD	03f6d0b2dr			; 0.925952
	DD	03f6ce320r			; 0.925341
	DD	03f6cbb0fr			; 0.924729
	DD	03f6c92f9r			; 0.924118
	DD	03f6c6ader			; 0.923506
	DD	03f6c42ber			; 0.922893
	DD	03f6c1a9ar			; 0.922281
	DD	03f6bf270r			; 0.921668
	DD	03f6bca42r			; 0.921055
	DD	03f6ba210r			; 0.920442
	DD	03f6b79d8r			; 0.919828
	DD	03f6b519cr			; 0.919214
	DD	03f6b295br			; 0.9186
	DD	03f6b0115r			; 0.917985
	DD	03f6ad8car			; 0.91737
	DD	03f6ab07ar			; 0.916755
	DD	03f6a8825r			; 0.91614
	DD	03f6a5fccr			; 0.915524
	DD	03f6a376er			; 0.914908
	DD	03f6a0f0ar			; 0.914292
	DD	03f69e6a2r			; 0.913675
	DD	03f69be35r			; 0.913059
	DD	03f6995c3r			; 0.912441
	DD	03f696d4cr			; 0.911824
	DD	03f6944d0r			; 0.911206
	DD	03f691c4fr			; 0.910588
	DD	03f68f3c9r			; 0.90997
	DD	03f68cb3er			; 0.909351
	DD	03f68a2aer			; 0.908732
	DD	03f687a1ar			; 0.908113
	DD	03f685180r			; 0.907494
	DD	03f6828e1r			; 0.906874
	DD	03f68003dr			; 0.906254
	DD	03f67d794r			; 0.905633
	DD	03f67aee6r			; 0.905012
	DD	03f678632r			; 0.904391
	DD	03f675d7ar			; 0.90377
	DD	03f6734bdr			; 0.903148
	DD	03f670bfar			; 0.902526
	DD	03f66e333r			; 0.901904
	DD	03f66ba66r			; 0.901282
	DD	03f669194r			; 0.900659
	DD	03f6668bdr			; 0.900036
	DD	03f663fe0r			; 0.899412
	DD	03f6616ffr			; 0.898788
	DD	03f65ee18r			; 0.898164
	DD	03f65c52dr			; 0.89754
	DD	03f659c3cr			; 0.896915
	DD	03f657345r			; 0.89629
	DD	03f654a4ar			; 0.895665
	DD	03f652149r			; 0.895039
	DD	03f64f843r			; 0.894413
	DD	03f64cf38r			; 0.893787
	DD	03f64a627r			; 0.89316
	DD	03f647d11r			; 0.892533
	DD	03f6453f6r			; 0.891906
	DD	03f642ad5r			; 0.891279
	DD	03f6401afr			; 0.890651
	DD	03f63d884r			; 0.890023
	DD	03f63af53r			; 0.889394
	DD	03f63861dr			; 0.888765
	DD	03f635ce2r			; 0.888136
	DD	03f6333a1r			; 0.887507
	DD	03f630a5br			; 0.886877
	DD	03f62e10fr			; 0.886247
	DD	03f62b7ber			; 0.885616
	DD	03f628e68r			; 0.884985
	DD	03f62650cr			; 0.884354
	DD	03f623baar			; 0.883723
	DD	03f621243r			; 0.883091
	DD	03f61e8d7r			; 0.882459
	DD	03f61bf65r			; 0.881827
	DD	03f6195edr			; 0.881194
	DD	03f616c70r			; 0.880561
	DD	03f6142eer			; 0.879928
	DD	03f611965r			; 0.879294
	DD	03f60efd8r			; 0.87866
	DD	03f60c644r			; 0.878025
	DD	03f609cabr			; 0.877391
	DD	03f60730dr			; 0.876756
	DD	03f604968r			; 0.87612
	DD	03f601fbfr			; 0.875484
	DD	03f5ff60fr			; 0.874848
	DD	03f5fcc5ar			; 0.874212
	DD	03f5fa29fr			; 0.873575
	DD	03f5f78der			; 0.872938
	DD	03f5f4f18r			; 0.872301
	DD	03f5f254cr			; 0.871663
	DD	03f5efb7ar			; 0.871025
	DD	03f5ed1a3r			; 0.870386
	DD	03f5ea7c5r			; 0.869747
	DD	03f5e7de2r			; 0.869108
	DD	03f5e53f9r			; 0.868469
	DD	03f5e2a0br			; 0.867829
	DD	03f5e0016r			; 0.867189
	DD	03f5dd61cr			; 0.866548
	DD	03f5dac1cr			; 0.865907
	DD	03f5d8216r			; 0.865266
	DD	03f5d580ar			; 0.864625
	DD	03f5d2df8r			; 0.863983
	DD	03f5d03e0r			; 0.86334
	DD	03f5cd9c3r			; 0.862698
	DD	03f5caf9fr			; 0.862055
	DD	03f5c8575r			; 0.861411
	DD	03f5c5b46r			; 0.860768
	DD	03f5c3110r			; 0.860124
	DD	03f5c06d5r			; 0.859479
	DD	03f5bdc93r			; 0.858834
	DD	03f5bb24cr			; 0.858189
	DD	03f5b87fer			; 0.857544
	DD	03f5b5dabr			; 0.856898
	DD	03f5b3351r			; 0.856252
	DD	03f5b08f1r			; 0.855605
	DD	03f5ade8cr			; 0.854958
	DD	03f5ab420r			; 0.854311
	DD	03f5a89adr			; 0.853663
	DD	03f5a5f35r			; 0.853015
	DD	03f5a34b7r			; 0.852367
	DD	03f5a0a32r			; 0.851718
	DD	03f59dfa8r			; 0.851069
	DD	03f59b517r			; 0.850419
	DD	03f598a80r			; 0.84977
	DD	03f595fe2r			; 0.849119
	DD	03f59353fr			; 0.848469
	DD	03f590a95r			; 0.847818
	DD	03f58dfe4r			; 0.847166
	DD	03f58b52er			; 0.846515
	DD	03f588a71r			; 0.845862
	DD	03f585faer			; 0.84521
	DD	03f5834e5r			; 0.844557
	DD	03f580a15r			; 0.843904
	DD	03f57df3fr			; 0.84325
	DD	03f57b462r			; 0.842596
	DD	03f57897fr			; 0.841942
	DD	03f575e96r			; 0.841287
	DD	03f5733a6r			; 0.840632
	DD	03f5708b0r			; 0.839976
	DD	03f56ddb3r			; 0.83932
	DD	03f56b2b0r			; 0.838664
	DD	03f5687a6r			; 0.838007
	DD	03f565c96r			; 0.83735
	DD	03f56317fr			; 0.836693
	DD	03f560662r			; 0.836035
	DD	03f55db3er			; 0.835377
	DD	03f55b014r			; 0.834718
	DD	03f5584e3r			; 0.834059
	DD	03f5559abr			; 0.833399
	DD	03f552e6dr			; 0.83274
	DD	03f550328r			; 0.832079
	DD	03f54d7dcr			; 0.831419
	DD	03f54ac8ar			; 0.830758
	DD	03f548131r			; 0.830096
	DD	03f5455d1r			; 0.829434
	DD	03f542a6br			; 0.828772
	DD	03f53fefer			; 0.82811
	DD	03f53d38ar			; 0.827447
	DD	03f53a80fr			; 0.826783
	DD	03f537c8er			; 0.826119
	DD	03f535105r			; 0.825455
	DD	03f532576r			; 0.82479
	DD	03f52f9e0r			; 0.824125
	DD	03f52ce43r			; 0.82346
	DD	03f52a29fr			; 0.822794
	DD	03f5276f5r			; 0.822128
	DD	03f524b43r			; 0.821461
	DD	03f521f8br			; 0.820794
	DD	03f51f3cbr			; 0.820126
	DD	03f51c804r			; 0.819458
	DD	03f519c37r			; 0.81879
	DD	03f517062r			; 0.818121
	DD	03f514487r			; 0.817452
	DD	03f5118a4r			; 0.816782
	DD	03f50ecbbr			; 0.816112
	DD	03f50c0car			; 0.815442
	DD	03f5094d2r			; 0.814771
	DD	03f5068d3r			; 0.814099
	DD	03f503ccdr			; 0.813428
	DD	03f5010c0r			; 0.812756
	DD	03f4fe4abr			; 0.812083
	DD	03f4fb88fr			; 0.81141
	DD	03f4f8c6dr			; 0.810736
	DD	03f4f6042r			; 0.810063
	DD	03f4f3411r			; 0.809388
	DD	03f4f07d8r			; 0.808713
	DD	03f4edb98r			; 0.808038
	DD	03f4eaf51r			; 0.807363
	DD	03f4e8303r			; 0.806687
	DD	03f4e56adr			; 0.80601
	DD	03f4e2a4fr			; 0.805333
	DD	03f4dfdebr			; 0.804656
	DD	03f4dd17er			; 0.803978
	DD	03f4da50br			; 0.8033
	DD	03f4d7890r			; 0.802621
	DD	03f4d4c0dr			; 0.801942
	DD	03f4d1f83r			; 0.801262
	DD	03f4cf2f2r			; 0.800582
	DD	03f4cc659r			; 0.799902
	DD	03f4c99b8r			; 0.799221
	DD	03f4c6d10r			; 0.798539
	DD	03f4c4060r			; 0.797857
	DD	03f4c13a9r			; 0.797175
	DD	03f4be6ear			; 0.796492
	DD	03f4bba23r			; 0.795809
	DD	03f4b8d55r			; 0.795125
	DD	03f4b607fr			; 0.794441
	DD	03f4b33a1r			; 0.793757
	DD	03f4b06bcr			; 0.793072
	DD	03f4ad9cer			; 0.792386
	DD	03f4aacd9r			; 0.7917
	DD	03f4a7fddr			; 0.791014
	DD	03f4a52d8r			; 0.790327
	DD	03f4a25cbr			; 0.789639
	DD	03f49f8b7r			; 0.788951
	DD	03f49cb9br			; 0.788263
	DD	03f499e77r			; 0.787574
	DD	03f49714br			; 0.786885
	DD	03f494417r			; 0.786195
	DD	03f4916dbr			; 0.785505
	DD	03f48e997r			; 0.784814
	DD	03f48bc4br			; 0.784123
	DD	03f488ef7r			; 0.783431
	DD	03f48619ar			; 0.782739
	DD	03f483436r			; 0.782047
	DD	03f4806car			; 0.781354
	DD	03f47d955r			; 0.78066
	DD	03f47abd9r			; 0.779966
	DD	03f477e54r			; 0.779271
	DD	03f4750c7r			; 0.778576
	DD	03f472332r			; 0.777881
	DD	03f46f594r			; 0.777185
	DD	03f46c7efr			; 0.776488
	DD	03f469a41r			; 0.775791
	DD	03f466c8ar			; 0.775094
	DD	03f463eccr			; 0.774396
	DD	03f461105r			; 0.773697
	DD	03f45e335r			; 0.772998
	DD	03f45b55dr			; 0.772299
	DD	03f45877dr			; 0.771599
	DD	03f455995r			; 0.770898
	DD	03f452ba3r			; 0.770197
	DD	03f44fdaar			; 0.769496
	DD	03f44cfa7r			; 0.768794
	DD	03f44a19dr			; 0.768091
	DD	03f447389r			; 0.767388
	DD	03f44456dr			; 0.766684
	DD	03f441749r			; 0.76598
	DD	03f43e91cr			; 0.765276
	DD	03f43bae6r			; 0.764571
	DD	03f438ca7r			; 0.763865
	DD	03f435e60r			; 0.763159
	DD	03f433010r			; 0.762452
	DD	03f4301b7r			; 0.761745
	DD	03f42d355r			; 0.761037
	DD	03f42a4ear			; 0.760329
	DD	03f427677r			; 0.75962
	DD	03f4247fbr			; 0.758911
	DD	03f421976r			; 0.758201
	DD	03f41eae8r			; 0.757491
	DD	03f41bc51r			; 0.75678
	DD	03f418db0r			; 0.756068
	DD	03f415f07r			; 0.755356
	DD	03f413055r			; 0.754644
	DD	03f41019ar			; 0.753931
	DD	03f40d2d6r			; 0.753217
	DD	03f40a409r			; 0.752503
	DD	03f407532r			; 0.751788
	DD	03f404652r			; 0.751073
	DD	03f40176ar			; 0.750357
	DD	03f3fe877r			; 0.749641
	DD	03f3fb97cr			; 0.748924
	DD	03f3f8a77r			; 0.748207
	DD	03f3f5b69r			; 0.747489
	DD	03f3f2c52r			; 0.74677
	DD	03f3efd31r			; 0.746051
	DD	03f3ece07r			; 0.745331
	DD	03f3e9ed4r			; 0.744611
	DD	03f3e6f97r			; 0.74389
	DD	03f3e4051r			; 0.743169
	DD	03f3e1101r			; 0.742447
	DD	03f3de1a7r			; 0.741724
	DD	03f3db244r			; 0.741001
	DD	03f3d82d8r			; 0.740278
	DD	03f3d5361r			; 0.739554
	DD	03f3d23e2r			; 0.738829
	DD	03f3cf458r			; 0.738103
	DD	03f3cc4c5r			; 0.737377
	DD	03f3c9528r			; 0.736651
	DD	03f3c6581r			; 0.735924
	DD	03f3c35d0r			; 0.735196
	DD	03f3c0616r			; 0.734468
	DD	03f3bd652r			; 0.733739
	DD	03f3ba683r			; 0.73301
	DD	03f3b76abr			; 0.732279
	DD	03f3b46c9r			; 0.731549
	DD	03f3b16ddr			; 0.730818
	DD	03f3ae6e7r			; 0.730086
	DD	03f3ab6e7r			; 0.729353
	DD	03f3a86ddr			; 0.72862
	DD	03f3a56c8r			; 0.727887
	DD	03f3a26aar			; 0.727152
	DD	03f39f681r			; 0.726418
	DD	03f39c64fr			; 0.725682
	DD	03f399612r			; 0.724946
	DD	03f3965car			; 0.724209
	DD	03f393579r			; 0.723472
	DD	03f39051dr			; 0.722734
	DD	03f38d4b6r			; 0.721996
	DD	03f38a446r			; 0.721257
	DD	03f3873car			; 0.720517
	DD	03f384345r			; 0.719776
	DD	03f3812b5r			; 0.719035
	DD	03f37e21ar			; 0.718294
	DD	03f37b175r			; 0.717552
	DD	03f3780c5r			; 0.716809
	DD	03f37500ar			; 0.716065
	DD	03f371f45r			; 0.715321
	DD	03f36ee75r			; 0.714576
	DD	03f36bd9br			; 0.713831
	DD	03f368cb6r			; 0.713085
	DD	03f365bc5r			; 0.712338
	DD	03f362acar			; 0.71159
	DD	03f35f9c5r			; 0.710842
	DD	03f35c8b4r			; 0.710094
	DD	03f359798r			; 0.709344
	DD	03f356671r			; 0.708594
	DD	03f353540r			; 0.707844
	DD	03f350403r			; 0.707092
	DD	03f34d2bbr			; 0.70634
	DD	03f34a168r			; 0.705588
	DD	03f34700ar			; 0.704835
	DD	03f343ea0r			; 0.704081
	DD	03f340d2cr			; 0.703326
	DD	03f33dbacr			; 0.702571
	DD	03f33aa21r			; 0.701815
	DD	03f33788ar			; 0.701058
	DD	03f3346e8r			; 0.700301
	DD	03f33153br			; 0.699543
	DD	03f32e382r			; 0.698784
	DD	03f32b1ber			; 0.698025
	DD	03f327feer			; 0.697265
	DD	03f324e12r			; 0.696504
	DD	03f321c2br			; 0.695742
	DD	03f31ea38r			; 0.69498
	DD	03f31b83ar			; 0.694217
	DD	03f318630r			; 0.693454
	DD	03f31541ar			; 0.69269
	DD	03f3121f8r			; 0.691925
	DD	03f30efcar			; 0.691159
	DD	03f30bd91r			; 0.690393
	DD	03f308b4br			; 0.689625
	DD	03f3058far			; 0.688858
	DD	03f30269cr			; 0.688089
	DD	03f2ff433r			; 0.68732
	DD	03f2fc1bdr			; 0.68655
	DD	03f2f8f3br			; 0.685779
	DD	03f2f5cadr			; 0.685008
	DD	03f2f2a13r			; 0.684236
	DD	03f2ef76cr			; 0.683463
	DD	03f2ec4bar			; 0.682689
	DD	03f2e91far			; 0.681915
	DD	03f2e5f2fr			; 0.68114
	DD	03f2e2c57r			; 0.680364
	DD	03f2df972r			; 0.679587
	DD	03f2dc681r			; 0.67881
	DD	03f2d9384r			; 0.678032
	DD	03f2d6079r			; 0.677253
	DD	03f2d2d62r			; 0.676474
	DD	03f2cfa3fr			; 0.675693
	DD	03f2cc70er			; 0.674912
	DD	03f2c93d1r			; 0.67413
	DD	03f2c6087r			; 0.673348
	DD	03f2c2d30r			; 0.672565
	DD	03f2bf9ccr			; 0.67178
	DD	03f2bc65br			; 0.670995
	DD	03f2b92ddr			; 0.67021
	DD	03f2b5f53r			; 0.669423
	DD	03f2b2bbar			; 0.668636
	DD	03f2af815r			; 0.667848
	DD	03f2ac463r			; 0.667059
	DD	03f2a90a3r			; 0.666269
	DD	03f2a5cd6r			; 0.665479
	DD	03f2a28fbr			; 0.664688
	DD	03f29f513r			; 0.663896
	DD	03f29c11er			; 0.663103
	DD	03f298d1br			; 0.662309
	DD	03f29590br			; 0.661515
	DD	03f2924edr			; 0.66072
	DD	03f28f0c1r			; 0.659924
	DD	03f28bc88r			; 0.659127
	DD	03f288840r			; 0.658329
	DD	03f2853ebr			; 0.65753
	DD	03f281f89r			; 0.656731
	DD	03f27eb18r			; 0.655931
	DD	03f27b699r			; 0.65513
	DD	03f27820cr			; 0.654328
	DD	03f274d71r			; 0.653525
	DD	03f2718c8r			; 0.652722
	DD	03f26e411r			; 0.651918
	DD	03f26af4cr			; 0.651112
	DD	03f267a78r			; 0.650306
	DD	03f264596r			; 0.649499
	DD	03f2610a6r			; 0.648692
	DD	03f25dba7r			; 0.647883
	DD	03f25a699r			; 0.647073
	DD	03f25717dr			; 0.646263
	DD	03f253c53r			; 0.645452
	DD	03f250719r			; 0.64464
	DD	03f24d1d1r			; 0.643827
	DD	03f249c7ar			; 0.643013
	DD	03f246715r			; 0.642198
	DD	03f2431a0r			; 0.641382
	DD	03f23fc1dr			; 0.640566
	DD	03f23c68ar			; 0.639748
	DD	03f2390e8r			; 0.63893
	DD	03f235b38r			; 0.638111
	DD	03f232578r			; 0.63729
	DD	03f22efa8r			; 0.636469
	DD	03f22b9car			; 0.635647
	DD	03f2283dcr			; 0.634825
	DD	03f224ddfr			; 0.634001
	DD	03f2217d2r			; 0.633176
	DD	03f21e1b5r			; 0.63235
	DD	03f21ab89r			; 0.631524
	DD	03f21754dr			; 0.630696
	DD	03f213f02r			; 0.629868
	DD	03f2108a6r			; 0.629038
	DD	03f20d23br			; 0.628208
	DD	03f209bc0r			; 0.627377
	DD	03f206535r			; 0.626544
	DD	03f202e9ar			; 0.625711
	DD	03f1ff7eer			; 0.624877
	DD	03f1fc133r			; 0.624042
	DD	03f1f8a67r			; 0.623206
	DD	03f1f538br			; 0.622369
	DD	03f1f1c9er			; 0.62153
	DD	03f1ee5a1r			; 0.620691
	DD	03f1eae93r			; 0.619851
	DD	03f1e7775r			; 0.61901
	DD	03f1e4046r			; 0.618168
	DD	03f1e0906r			; 0.617325
	DD	03f1dd1b6r			; 0.616481
	DD	03f1d9a55r			; 0.615636
	DD	03f1d62e2r			; 0.61479
	DD	03f1d2b5fr			; 0.613943
	DD	03f1cf3cbr			; 0.613095
	DD	03f1cbc25r			; 0.612246
	DD	03f1c846er			; 0.611396
	DD	03f1c4ca6r			; 0.610545
	DD	03f1c14ccr			; 0.609692
	DD	03f1bdce1r			; 0.608839
	DD	03f1ba4e5r			; 0.607985
	DD	03f1b6cd7r			; 0.60713
	DD	03f1b34b7r			; 0.606273
	DD	03f1afc85r			; 0.605416
	DD	03f1ac442r			; 0.604557
	DD	03f1a8becr			; 0.603698
	DD	03f1a5385r			; 0.602837
	DD	03f1a1b0br			; 0.601975
	DD	03f19e280r			; 0.601112
	DD	03f19a9e2r			; 0.600248
	DD	03f197131r			; 0.599383
	DD	03f19386fr			; 0.598517
	DD	03f18ff9ar			; 0.59765
	DD	03f18c6b2r			; 0.596782
	DD	03f188db8r			; 0.595912
	DD	03f1854abr			; 0.595042
	DD	03f181b8br			; 0.59417
	DD	03f17e258r			; 0.593297
	DD	03f17a913r			; 0.592424
	DD	03f176fbar			; 0.591549
	DD	03f17364er			; 0.590672
	DD	03f16fccfr			; 0.589795
	DD	03f16c33dr			; 0.588917
	DD	03f168997r			; 0.588037
	DD	03f164fddr			; 0.587156
	DD	03f161610r			; 0.586274
	DD	03f15dc30r			; 0.585391
	DD	03f15a23br			; 0.584507
	DD	03f156833r			; 0.583621
	DD	03f152e17r			; 0.582735
	DD	03f14f3e7r			; 0.581847
	DD	03f14b9a2r			; 0.580958
	DD	03f147f4ar			; 0.580067
	DD	03f1444ddr			; 0.579176
	DD	03f140a5cr			; 0.578283
	DD	03f13cfc6r			; 0.577389
	DD	03f13951br			; 0.576494
	DD	03f135a5cr			; 0.575598
	DD	03f131f88r			; 0.5747
	DD	03f12e4a0r			; 0.573801
	DD	03f12a9a2r			; 0.572901
	DD	03f126e8fr			; 0.571999
	DD	03f123367r			; 0.571097
	DD	03f11f829r			; 0.570193
	DD	03f11bcd6r			; 0.569288
	DD	03f11816er			; 0.568381
	DD	03f1145f0r			; 0.567473
	DD	03f110a5cr			; 0.566564
	DD	03f10ceb3r			; 0.565654
	DD	03f1092f3r			; 0.564742
	DD	03f10571er			; 0.563829
	DD	03f101b32r			; 0.562915
	DD	03f0fdf30r			; 0.561999
	DD	03f0fa318r			; 0.561082
	DD	03f0f66e9r			; 0.560164
	DD	03f0f2aa4r			; 0.559244
	DD	03f0eee47r			; 0.558323
	DD	03f0eb1d5r			; 0.557401
	DD	03f0e754br			; 0.556477
	DD	03f0e38aar			; 0.555552
	DD	03f0dfbf2r			; 0.554626
	DD	03f0dbf23r			; 0.553698
	DD	03f0d823cr			; 0.552768
	DD	03f0d453er			; 0.551838
	DD	03f0d0828r			; 0.550906
	DD	03f0ccafar			; 0.549972
	DD	03f0c8db5r			; 0.549037
	DD	03f0c5057r			; 0.548101
	DD	03f0c12e1r			; 0.547163
	DD	03f0bd553r			; 0.546224
	DD	03f0b97adr			; 0.545283
	DD	03f0b59eer			; 0.544341
	DD	03f0b1c17r			; 0.543397
	DD	03f0ade27r			; 0.542452
	DD	03f0aa01dr			; 0.541506
	DD	03f0a61fbr			; 0.540558
	DD	03f0a23c0r			; 0.539608
	DD	03f09e56br			; 0.538657
	DD	03f09a6fdr			; 0.537704
	DD	03f096876r			; 0.53675
	DD	03f0929d4r			; 0.535794
	DD	03f08eb19r			; 0.534837
	DD	03f08ac44r			; 0.533879
	DD	03f086d55r			; 0.532918
	DD	03f082e4br			; 0.531956
	DD	03f07ef27r			; 0.530993
	DD	03f07afe8r			; 0.530028
	DD	03f07708fr			; 0.529061
	DD	03f07311br			; 0.528093
	DD	03f06f18cr			; 0.527123
	DD	03f06b1e2r			; 0.526152
	DD	03f06721cr			; 0.525179
	DD	03f06323br			; 0.524204
	DD	03f05f23er			; 0.523228
	DD	03f05b226r			; 0.52225
	DD	03f0571f1r			; 0.52127
	DD	03f0531a1r			; 0.520289
	DD	03f04f134r			; 0.519305
	DD	03f04b0abr			; 0.518321
	DD	03f047005r			; 0.517334
	DD	03f042f43r			; 0.516346
	DD	03f03ee64r			; 0.515356
	DD	03f03ad67r			; 0.514365
	DD	03f036c4er			; 0.513371
	DD	03f032b16r			; 0.512376
	DD	03f02e9c2r			; 0.511379
	DD	03f02a84fr			; 0.510381
	DD	03f0266bfr			; 0.50938
	DD	03f022510r			; 0.508378
	DD	03f01e344r			; 0.507374
	DD	03f01a158r			; 0.506368
	DD	03f015f4er			; 0.50536
	DD	03f011d26r			; 0.504351
	DD	03f00dader			; 0.50334
	DD	03f009877r			; 0.502326
	DD	03f0055f0r			; 0.501311
	DD	03f00134ar			; 0.500294
	DD	03effa109r			; 0.499275
	DD	03eff1b3dr			; 0.498255
	DD	03efe9531r			; 0.497232
	DD	03efe0ee4r			; 0.496207
	DD	03efd8856r			; 0.495181
	DD	03efd0187r			; 0.494152
	DD	03efc7a75r			; 0.493122
	DD	03efbf321r			; 0.492089
	DD	03efb6b8ar			; 0.491055
	DD	03efae3b0r			; 0.490018
	DD	03efa5b92r			; 0.48898
	DD	03ef9d330r			; 0.487939
	DD	03ef94a89r			; 0.486897
	DD	03ef8c19dr			; 0.485852
	DD	03ef8386cr			; 0.484805
	DD	03ef7aef5r			; 0.483757
	DD	03ef72537r			; 0.482706
	DD	03ef69b33r			; 0.481653
	DD	03ef610e7r			; 0.480598
	DD	03ef58654r			; 0.47954
	DD	03ef4fb78r			; 0.478481
	DD	03ef47054r			; 0.477419
	DD	03ef3e4e6r			; 0.476356
	DD	03ef3592fr			; 0.47529
	DD	03ef2cd2dr			; 0.474222
	DD	03ef240e0r			; 0.473151
	DD	03ef1b449r			; 0.472079
	DD	03ef12765r			; 0.471004
	DD	03ef09a36r			; 0.469927
	DD	03ef00cb9r			; 0.468847
	DD	03eef7eefr			; 0.467765
	DD	03eeef0d7r			; 0.466681
	DD	03eee6271r			; 0.465595
	DD	03eedd3bcr			; 0.464506
	DD	03eed44b7r			; 0.463415
	DD	03eecb562r			; 0.462321
	DD	03eec25bcr			; 0.461225
	DD	03eeb95c5r			; 0.460127
	DD	03eeb057cr			; 0.459026
	DD	03eea74e1r			; 0.457923
	DD	03ee9e3f3r			; 0.456817
	DD	03ee952b1r			; 0.455709
	DD	03ee8c11br			; 0.454598
	DD	03ee82f30r			; 0.453485
	DD	03ee79cefr			; 0.452369
	DD	03ee70a58r			; 0.451251
	DD	03ee6776br			; 0.45013
	DD	03ee5e426r			; 0.449006
	DD	03ee55088r			; 0.44788
	DD	03ee4bc92r			; 0.446751
	DD	03ee42843r			; 0.44562
	DD	03ee39399r			; 0.444485
	DD	03ee2fe95r			; 0.443349
	DD	03ee26935r			; 0.442209
	DD	03ee1d379r			; 0.441067
	DD	03ee13d5fr			; 0.439921
	DD	03ee0a6e8r			; 0.438773
	DD	03ee01013r			; 0.437623
	DD	03edf78der			; 0.436469
	DD	03edee14ar			; 0.435313
	DD	03ede4954r			; 0.434153
	DD	03eddb0fer			; 0.432991
	DD	03edd1844r			; 0.431826
	DD	03edc7f28r			; 0.430658
	DD	03edbe5a8r			; 0.429487
	DD	03edb4bc3r			; 0.428312
	DD	03edab179r			; 0.427135
	DD	03eda16c8r			; 0.425955
	DD	03ed97bb0r			; 0.424772
	DD	03ed8e02fr			; 0.423585
	DD	03ed84446r			; 0.422396
	DD	03ed7a7f3r			; 0.421203
	DD	03ed70b35r			; 0.420007
	DD	03ed66e0br			; 0.418808
	DD	03ed5d074r			; 0.417606
	DD	03ed53270r			; 0.4164
	DD	03ed493fdr			; 0.415192
	DD	03ed3f51br			; 0.413979
	DD	03ed355c9r			; 0.412764
	DD	03ed2b604r			; 0.411545
	DD	03ed215cdr			; 0.410323
	DD	03ed17523r			; 0.409097
	DD	03ed0d404r			; 0.407868
	DD	03ed0326fr			; 0.406635
	DD	03ecf9064r			; 0.405398
	DD	03eceede1r			; 0.404159
	DD	03ece4ae4r			; 0.402915
	DD	03ecda76er			; 0.401668
	DD	03ecd037dr			; 0.400417
	DD	03ecc5f0fr			; 0.399163
	DD	03ecbba23r			; 0.397904
	DD	03ecb14b9r			; 0.396642
	DD	03eca6ecfr			; 0.395377
	DD	03ec9c863r			; 0.394107
	DD	03ec92175r			; 0.392833
	DD	03ec87a04r			; 0.391556
	DD	03ec7d20dr			; 0.390274
	DD	03ec72990r			; 0.388989
	DD	03ec6808br			; 0.387699
	DD	03ec5d6fdr			; 0.386406
	DD	03ec52ce5r			; 0.385108
	DD	03ec48241r			; 0.383806
	DD	03ec3d70fr			; 0.3825
	DD	03ec32b4fr			; 0.38119
	DD	03ec27effr			; 0.379875
	DD	03ec1d21dr			; 0.378556
	DD	03ec124a7r			; 0.377233
	DD	03ec0769dr			; 0.375905
	DD	03ebfc7fdr			; 0.374573
	DD	03ebf18c4r			; 0.373236
	DD	03ebe68f2r			; 0.371894
	DD	03ebdb884r			; 0.370548
	DD	03ebd0779r			; 0.369198
	DD	03ebc55d0r			; 0.367842
	DD	03ebba386r			; 0.366482
	DD	03ebaf09ar			; 0.365117
	DD	03eba3d09r			; 0.363747
	DD	03eb988d3r			; 0.362372
	DD	03eb8d3f5r			; 0.360992
	DD	03eb81e6cr			; 0.359607
	DD	03eb76838r			; 0.358217
	DD	03eb6b156r			; 0.356822
	DD	03eb5f9c5r			; 0.355421
	DD	03eb54181r			; 0.354015
	DD	03eb48889r			; 0.352604
	DD	03eb3cedbr			; 0.351188
	DD	03eb31474r			; 0.349765
	DD	03eb25952r			; 0.348338
	DD	03eb19d74r			; 0.346904
	DD	03eb0e0d6r			; 0.345465
	DD	03eb02376r			; 0.344021
	DD	03eaf6552r			; 0.34257
	DD	03eaea667r			; 0.341113
	DD	03eade6b2r			; 0.339651
	DD	03ead2632r			; 0.338182
	DD	03eac64e3r			; 0.336707
	DD	03eaba2c3r			; 0.335226
	DD	03eaadfcer			; 0.333739
	DD	03eaa1c03r			; 0.332245
	DD	03ea9575dr			; 0.330745
	DD	03ea891dbr			; 0.329238
	DD	03ea7cb78r			; 0.327724
	DD	03ea70432r			; 0.326204
	DD	03ea63c07r			; 0.324677
	DD	03ea572f1r			; 0.323143
	DD	03ea4a8efr			; 0.321601
	DD	03ea3ddfcr			; 0.320053
	DD	03ea31216r			; 0.318497
	DD	03ea24538r			; 0.316934
	DD	03ea1775er			; 0.315364
	DD	03ea0a886r			; 0.313786
	DD	03e9fd8acr			; 0.3122
	DD	03e9f07car			; 0.310606
	DD	03e9e35der			; 0.309005
	DD	03e9d62e2r			; 0.307395
	DD	03e9c8ed4r			; 0.305777
	DD	03e9bb9aer			; 0.304151
	DD	03e9ae36br			; 0.302516
	DD	03e9a0c08r			; 0.300873
	DD	03e99337fr			; 0.299221
	DD	03e9859ccr			; 0.29756
	DD	03e977ee9r			; 0.29589
	DD	03e96a2d2r			; 0.294211
	DD	03e95c580r			; 0.292522
	DD	03e94e6efr			; 0.290824
	DD	03e940719r			; 0.289117
	DD	03e9325f9r			; 0.287399
	DD	03e924387r			; 0.285671
	DD	03e915fber			; 0.283934
	DD	03e907a98r			; 0.282185
	DD	03e8f940er			; 0.280426
	DD	03e8eac1ar			; 0.278657
	DD	03e8dc2b3r			; 0.276876
	DD	03e8cd7d4r			; 0.275084
	DD	03e8beb75r			; 0.273281
	DD	03e8afd8er			; 0.271466
	DD	03e8a0e17r			; 0.269639
	DD	03e891d09r			; 0.2678
	DD	03e882a5ar			; 0.265948
	DD	03e873601r			; 0.264084
	DD	03e863ff7r			; 0.262207
	DD	03e854830r			; 0.260316
	DD	03e844ea5r			; 0.258413
	DD	03e83534ar			; 0.256495
	DD	03e825614r			; 0.254563
	DD	03e8156fbr			; 0.252617
	DD	03e8055f0r			; 0.250656
	DD	03e7ea5d5r			; 0.248679
	DD	03e7c9bb8r			; 0.246688
	DD	03e7a8d73r			; 0.24468
	DD	03e787ae9r			; 0.242656
	DD	03e7663ffr			; 0.240616
	DD	03e744899r			; 0.238558
	DD	03e722899r			; 0.236483
	DD	03e7003dfr			; 0.23439
	DD	03e6dda4ar			; 0.232278
	DD	03e6babb9r			; 0.230147
	DD	03e697808r			; 0.227997
	DD	03e673f10r			; 0.225827
	DD	03e6500acr			; 0.223635
	DD	03e62bcb1r			; 0.221423
	DD	03e6072f4r			; 0.219189
	DD	03e5e2348r			; 0.216931
	DD	03e5bcd7cr			; 0.214651
	DD	03e59715fr			; 0.212347
	DD	03e570ebbr			; 0.210017
	DD	03e54a557r			; 0.207662
	DD	03e5234f9r			; 0.20528
	DD	03e4fbd61r			; 0.202871
	DD	03e4d3e4dr			; 0.200433
	DD	03e4ab775r			; 0.197965
	DD	03e48288fr			; 0.195467
	DD	03e45914ar			; 0.192937
	DD	03e42f151r			; 0.190374
	DD	03e404849r			; 0.187776
	DD	03e3d95d0r			; 0.185142
	DD	03e3ad97dr			; 0.18247
	DD	03e3812e1r			; 0.17976
	DD	03e354181r			; 0.177008
	DD	03e3264dbr			; 0.174213
	DD	03e2f7c63r			; 0.171373
	DD	03e2c877er			; 0.168486
	DD	03e298588r			; 0.165548
	DD	03e2675c9r			; 0.162559
	DD	03e23577cr			; 0.159513
	DD	03e2029c8r			; 0.156409
	DD	03e1cebbcr			; 0.153243
	DD	03e199c50r			; 0.15001
	DD	03e163a5er			; 0.146707
	DD	03e12c49dr			; 0.143328
	DD	03e0f399er			; 0.139868
	DD	03e0b97c4r			; 0.136321
	DD	03e07dd38r			; 0.13268
	DD	03e0407e4r			; 0.128936
	DD	03e00155fr			; 0.125082
	DD	03df805c1r			; 0.121105
	DD	03def9a4ar			; 0.116994
	DD	03de6e0a5r			; 0.112733
	DD	03dddcf97r			; 0.108306
	DD	03dd45befr			; 0.103691
	DD	03dca77ddr			; 0.0988614
	DD	03dc01205r			; 0.0937844
	DD	03db5140cr			; 0.0884171
	DD	03da96059r			; 0.0827033
	DD	03d9cce3fr			; 0.0765653
	DD	03d8f2332r			; 0.0698913
	DD	03d800556r			; 0.0625102
	DD	03d5dbac5r			; 0.0541332
	DD	03d3508b9r			; 0.0441978
	DD	03d000155r			; 0.0312513
	DD	000000000r			; 0
	ORG $+4
?g_fIdvCosTable@@3QBMB DD 03f800000r		; 1	; g_fIdvCosTable
	DD	03f7fffecr			; 0.999999
	DD	03f7fffb1r			; 0.999995
	DD	03f7fff4er			; 0.999989
	DD	03f7ffec4r			; 0.999981
	DD	03f7ffe13r			; 0.999971
	DD	03f7ffd39r			; 0.999958
	DD	03f7ffc39r			; 0.999942
	DD	03f7ffb11r			; 0.999925
	DD	03f7ff9c1r			; 0.999905
	DD	03f7ff84ar			; 0.999882
	DD	03f7ff6acr			; 0.999858
	DD	03f7ff4e6r			; 0.999831
	DD	03f7ff2f8r			; 0.999801
	DD	03f7ff0e3r			; 0.999769
	DD	03f7feea7r			; 0.999735
	DD	03f7fec43r			; 0.999699
	DD	03f7fe9b8r			; 0.99966
	DD	03f7fe705r			; 0.999619
	DD	03f7fe42br			; 0.999575
	DD	03f7fe129r			; 0.999529
	DD	03f7fde00r			; 0.999481
	DD	03f7fdaafr			; 0.999431
	DD	03f7fd737r			; 0.999378
	DD	03f7fd397r			; 0.999322
	DD	03f7fcfd1r			; 0.999265
	DD	03f7fcbe2r			; 0.999205
	DD	03f7fc7ccr			; 0.999142
	DD	03f7fc38fr			; 0.999078
	DD	03f7fbf2ar			; 0.999011
	DD	03f7fba9er			; 0.998941
	DD	03f7fb5ear			; 0.99887
	DD	03f7fb10fr			; 0.998795
	DD	03f7fac0dr			; 0.998719
	DD	03f7fa6e3r			; 0.99864
	DD	03f7fa191r			; 0.998559
	DD	03f7f9c18r			; 0.998476
	DD	03f7f9678r			; 0.99839
	DD	03f7f90b1r			; 0.998302
	DD	03f7f8ac2r			; 0.998211
	DD	03f7f84abr			; 0.998118
	DD	03f7f7e6dr			; 0.998023
	DD	03f7f7808r			; 0.997925
	DD	03f7f717br			; 0.997825
	DD	03f7f6ac7r			; 0.997723
	DD	03f7f63ecr			; 0.997618
	DD	03f7f5ce9r			; 0.997511
	DD	03f7f55bfr			; 0.997402
	DD	03f7f4e6dr			; 0.99729
	DD	03f7f46f4r			; 0.997176
	DD	03f7f3f54r			; 0.99706
	DD	03f7f378cr			; 0.996941
	DD	03f7f2f9dr			; 0.99682
	DD	03f7f2787r			; 0.996697
	DD	03f7f1f49r			; 0.996571
	DD	03f7f16e4r			; 0.996443
	DD	03f7f0e58r			; 0.996313
	DD	03f7f05a4r			; 0.99618
	DD	03f7efcc9r			; 0.996045
	DD	03f7ef3c7r			; 0.995907
	DD	03f7eea9dr			; 0.995767
	DD	03f7ee14cr			; 0.995625
	DD	03f7ed7d4r			; 0.995481
	DD	03f7ece34r			; 0.995334
	DD	03f7ec46dr			; 0.995185
	DD	03f7eba7fr			; 0.995033
	DD	03f7eb069r			; 0.994879
	DD	03f7ea62dr			; 0.994723
	DD	03f7e9bc9r			; 0.994565
	DD	03f7e913dr			; 0.994404
	DD	03f7e868br			; 0.99424
	DD	03f7e7bb1r			; 0.994075
	DD	03f7e70b0r			; 0.993907
	DD	03f7e6588r			; 0.993737
	DD	03f7e5a38r			; 0.993564
	DD	03f7e4ec1r			; 0.993389
	DD	03f7e4323r			; 0.993212
	DD	03f7e375er			; 0.993032
	DD	03f7e2b72r			; 0.99285
	DD	03f7e1f5er			; 0.992666
	DD	03f7e1324r			; 0.99248
	DD	03f7e06c2r			; 0.992291
	DD	03f7dfa38r			; 0.992099
	DD	03f7ded88r			; 0.991906
	DD	03f7de0b1r			; 0.99171
	DD	03f7dd3b2r			; 0.991511
	DD	03f7dc68cr			; 0.991311
	DD	03f7db940r			; 0.991108
	DD	03f7dabccr			; 0.990903
	DD	03f7d9e30r			; 0.990695
	DD	03f7d906er			; 0.990485
	DD	03f7d8285r			; 0.990273
	DD	03f7d7474r			; 0.990058
	DD	03f7d663dr			; 0.989841
	DD	03f7d57der			; 0.989622
	DD	03f7d4959r			; 0.9894
	DD	03f7d3aacr			; 0.989177
	DD	03f7d2bd8r			; 0.98895
	DD	03f7d1cddr			; 0.988722
	DD	03f7d0dbcr			; 0.988491
	DD	03f7cfe73r			; 0.988258
	DD	03f7cef03r			; 0.988022
	DD	03f7cdf6cr			; 0.987784
	DD	03f7ccfaer			; 0.987544
	DD	03f7cbfc9r			; 0.987301
	DD	03f7cafbdr			; 0.987057
	DD	03f7c9f8ar			; 0.986809
	DD	03f7c8f31r			; 0.98656
	DD	03f7c7eb0r			; 0.986308
	DD	03f7c6e08r			; 0.986054
	DD	03f7c5d3ar			; 0.985798
	DD	03f7c4c44r			; 0.985539
	DD	03f7c3b28r			; 0.985278
	DD	03f7c29e5r			; 0.985014
	DD	03f7c187ar			; 0.984748
	DD	03f7c06e9r			; 0.98448
	DD	03f7bf531r			; 0.98421
	DD	03f7be353r			; 0.983937
	DD	03f7bd14dr			; 0.983662
	DD	03f7bbf20r			; 0.983385
	DD	03f7baccdr			; 0.983105
	DD	03f7b9a53r			; 0.982824
	DD	03f7b87b2r			; 0.982539
	DD	03f7b74ear			; 0.982253
	DD	03f7b61fcr			; 0.981964
	DD	03f7b4ee7r			; 0.981673
	DD	03f7b3babr			; 0.981379
	DD	03f7b2848r			; 0.981083
	DD	03f7b14ber			; 0.980785
	DD	03f7b010er			; 0.980485
	DD	03f7aed37r			; 0.980182
	DD	03f7ad93ar			; 0.979877
	DD	03f7ac516r			; 0.97957
	DD	03f7ab0cbr			; 0.97926
	DD	03f7a9c59r			; 0.978948
	DD	03f7a87c1r			; 0.978634
	DD	03f7a7302r			; 0.978317
	DD	03f7a5e1cr			; 0.977998
	DD	03f7a4910r			; 0.977677
	DD	03f7a33ddr			; 0.977354
	DD	03f7a1e84r			; 0.977028
	DD	03f7a0904r			; 0.9767
	DD	03f79f35er			; 0.97637
	DD	03f79dd91r			; 0.976037
	DD	03f79c79dr			; 0.975702
	DD	03f79b183r			; 0.975365
	DD	03f799b43r			; 0.975025
	DD	03f7984dcr			; 0.974684
	DD	03f796e4er			; 0.974339
	DD	03f79579ar			; 0.973993
	DD	03f7940c0r			; 0.973644
	DD	03f7929bfr			; 0.973293
	DD	03f791298r			; 0.97294
	DD	03f78fb4ar			; 0.972584
	DD	03f78e3d6r			; 0.972227
	DD	03f78cc3br			; 0.971866
	DD	03f78b47br			; 0.971504
	DD	03f789c93r			; 0.971139
	DD	03f788486r			; 0.970772
	DD	03f786c52r			; 0.970403
	DD	03f7853f8r			; 0.970031
	DD	03f783b77r			; 0.969657
	DD	03f7822d1r			; 0.969281
	DD	03f780a04r			; 0.968903
	DD	03f77f110r			; 0.968522
	DD	03f77d7f7r			; 0.968139
	DD	03f77beb7r			; 0.967754
	DD	03f77a551r			; 0.967366
	DD	03f778bc5r			; 0.966976
	DD	03f777213r			; 0.966584
	DD	03f77583ar			; 0.96619
	DD	03f773e3cr			; 0.965793
	DD	03f772417r			; 0.965394
	DD	03f7709ccr			; 0.964993
	DD	03f76ef5br			; 0.96459
	DD	03f76d4c4r			; 0.964184
	DD	03f76ba07r			; 0.963776
	DD	03f769f24r			; 0.963366
	DD	03f76841br			; 0.962953
	DD	03f7668ecr			; 0.962538
	DD	03f764d97r			; 0.962121
	DD	03f76321br			; 0.961702
	DD	03f76167ar			; 0.96128
	DD	03f75fab3r			; 0.960857
	DD	03f75dec6r			; 0.960431
	DD	03f75c2b3r			; 0.960002
	DD	03f75a67br			; 0.959572
	DD	03f758a1cr			; 0.959139
	DD	03f756d97r			; 0.958703
	DD	03f7550edr			; 0.958266
	DD	03f75341dr			; 0.957826
	DD	03f751727r			; 0.957385
	DD	03f74fa0br			; 0.95694
	DD	03f74dcc9r			; 0.956494
	DD	03f74bf62r			; 0.956045
	DD	03f74a1d5r			; 0.955594
	DD	03f748422r			; 0.955141
	DD	03f746649r			; 0.954686
	DD	03f74484br			; 0.954228
	DD	03f742a27r			; 0.953768
	DD	03f740bddr			; 0.953306
	DD	03f73ed6er			; 0.952842
	DD	03f73ced9r			; 0.952375
	DD	03f73b01fr			; 0.951906
	DD	03f73913fr			; 0.951435
	DD	03f737239r			; 0.950962
	DD	03f73530er			; 0.950486
	DD	03f7333ber			; 0.950008
	DD	03f731447r			; 0.949528
	DD	03f72f4acr			; 0.949046
	DD	03f72d4ebr			; 0.948561
	DD	03f72b504r			; 0.948075
	DD	03f7294f8r			; 0.947586
	DD	03f7274c7r			; 0.947094
	DD	03f725470r			; 0.946601
	DD	03f7233f4r			; 0.946105
	DD	03f721352r			; 0.945607
	DD	03f71f28cr			; 0.945107
	DD	03f71d19fr			; 0.944605
	DD	03f71b08er			; 0.9441
	DD	03f718f57r			; 0.943593
	DD	03f716dfbr			; 0.943084
	DD	03f714c7ar			; 0.942573
	DD	03f712ad4r			; 0.94206
	DD	03f710908r			; 0.941544
	DD	03f70e717r			; 0.941026
	DD	03f70c501r			; 0.940506
	DD	03f70a2c6r			; 0.939984
	DD	03f708066r			; 0.939459
	DD	03f705de1r			; 0.938932
	DD	03f703b37r			; 0.938404
	DD	03f701867r			; 0.937872
	DD	03f6ff573r			; 0.937339
	DD	03f6fd25ar			; 0.936803
	DD	03f6faf1br			; 0.936266
	DD	03f6f8bb8r			; 0.935726
	DD	03f6f6830r			; 0.935184
	DD	03f6f4483r			; 0.934639
	DD	03f6f20b0r			; 0.934093
	DD	03f6efcbar			; 0.933544
	DD	03f6ed89er			; 0.932993
	DD	03f6eb45dr			; 0.93244
	DD	03f6e8ff8r			; 0.931884
	DD	03f6e6b6dr			; 0.931327
	DD	03f6e46ber			; 0.930767
	DD	03f6e21ebr			; 0.930205
	DD	03f6dfcf2r			; 0.929641
	DD	03f6dd7d5r			; 0.929075
	DD	03f6db293r			; 0.928506
	DD	03f6d8d2dr			; 0.927935
	DD	03f6d67a1r			; 0.927363
	DD	03f6d41f2r			; 0.926787
	DD	03f6d1c1dr			; 0.92621
	DD	03f6cf624r			; 0.925631
	DD	03f6cd007r			; 0.925049
	DD	03f6ca9c5r			; 0.924465
	DD	03f6c835er			; 0.92388
	DD	03f6c5cd4r			; 0.923291
	DD	03f6c3624r			; 0.922701
	DD	03f6c0f50r			; 0.922109
	DD	03f6be858r			; 0.921514
	DD	03f6bc13br			; 0.920917
	DD	03f6b99fbr			; 0.920318
	DD	03f6b7295r			; 0.919717
	DD	03f6b4b0cr			; 0.919114
	DD	03f6b235er			; 0.918508
	DD	03f6afb8cr			; 0.917901
	DD	03f6ad395r			; 0.917291
	DD	03f6aab7br			; 0.916679
	DD	03f6a833cr			; 0.916065
	DD	03f6a5ad9r			; 0.915449
	DD	03f6a3252r			; 0.91483
	DD	03f6a09a7r			; 0.91421
	DD	03f69e0d7r			; 0.913587
	DD	03f69b7e4r			; 0.912962
	DD	03f698eccr			; 0.912335
	DD	03f696591r			; 0.911706
	DD	03f693c32r			; 0.911075
	DD	03f6912aer			; 0.910441
	DD	03f68e907r			; 0.909806
	DD	03f68bf3cr			; 0.909168
	DD	03f68954cr			; 0.908528
	DD	03f686b39r			; 0.907886
	DD	03f684103r			; 0.907242
	DD	03f6816a8r			; 0.906596
	DD	03f67ec29r			; 0.905947
	DD	03f67c187r			; 0.905297
	DD	03f6796c1r			; 0.904644
	DD	03f676bd8r			; 0.903989
	DD	03f6740car			; 0.903332
	DD	03f671599r			; 0.902673
	DD	03f66ea45r			; 0.902012
	DD	03f66beccr			; 0.901349
	DD	03f669330r			; 0.900683
	DD	03f666771r			; 0.900016
	DD	03f663b8er			; 0.899346
	DD	03f660f88r			; 0.898674
	DD	03f65e35er			; 0.898001
	DD	03f65b710r			; 0.897325
	DD	03f658aa0r			; 0.896646
	DD	03f655e0br			; 0.895966
	DD	03f653154r			; 0.895284
	DD	03f650479r			; 0.894599
	DD	03f64d77br			; 0.893913
	DD	03f64aa59r			; 0.893224
	DD	03f647d14r			; 0.892534
	DD	03f644facr			; 0.891841
	DD	03f642221r			; 0.891146
	DD	03f63f473r			; 0.890449
	DD	03f63c6a1r			; 0.88975
	DD	03f6398acr			; 0.889048
	DD	03f636a95r			; 0.888345
	DD	03f633c5ar			; 0.88764
	DD	03f630dfcr			; 0.886932
	DD	03f62df7br			; 0.886223
	DD	03f62b0d7r			; 0.885511
	DD	03f628210r			; 0.884797
	DD	03f625326r			; 0.884081
	DD	03f62241ar			; 0.883363
	DD	03f61f4ear			; 0.882643
	DD	03f61c598r			; 0.881921
	DD	03f619622r			; 0.881197
	DD	03f61668ar			; 0.880471
	DD	03f6136d0r			; 0.879743
	DD	03f6106f2r			; 0.879012
	DD	03f60d6f2r			; 0.87828
	DD	03f60a6cfr			; 0.877545
	DD	03f607689r			; 0.876809
	DD	03f604621r			; 0.87607
	DD	03f601596r			; 0.875329
	DD	03f5fe4e9r			; 0.874587
	DD	03f5fb419r			; 0.873842
	DD	03f5f8327r			; 0.873095
	DD	03f5f5212r			; 0.872346
	DD	03f5f20dbr			; 0.871595
	DD	03f5eef81r			; 0.870842
	DD	03f5ebe05r			; 0.870087
	DD	03f5e8c67r			; 0.86933
	DD	03f5e5aa6r			; 0.868571
	DD	03f5e28c3r			; 0.867809
	DD	03f5df6ber			; 0.867046
	DD	03f5dc497r			; 0.866281
	DD	03f5d924dr			; 0.865514
	DD	03f5d5fe1r			; 0.864744
	DD	03f5d2d53r			; 0.863973
	DD	03f5cfaa3r			; 0.863199
	DD	03f5cc7d1r			; 0.862424
	DD	03f5c94ddr			; 0.861646
	DD	03f5c61c7r			; 0.860867
	DD	03f5c2e8er			; 0.860085
	DD	03f5bfb34r			; 0.859302
	DD	03f5bc7b8r			; 0.858516
	DD	03f5b941ar			; 0.857729
	DD	03f5b605ar			; 0.856939
	DD	03f5b2c79r			; 0.856147
	DD	03f5af875r			; 0.855354
	DD	03f5ac450r			; 0.854558
	DD	03f5a9009r			; 0.85376
	DD	03f5a5ba0r			; 0.852961
	DD	03f5a2716r			; 0.852159
	DD	03f59f26ar			; 0.851355
	DD	03f59bd9cr			; 0.850549
	DD	03f5988adr			; 0.849742
	DD	03f59539cr			; 0.848932
	DD	03f591e6ar			; 0.84812
	DD	03f58e916r			; 0.847307
	DD	03f58b3a1r			; 0.846491
	DD	03f587e0br			; 0.845673
	DD	03f584853r			; 0.844854
	DD	03f581279r			; 0.844032
	DD	03f57dc7fr			; 0.843208
	DD	03f57a663r			; 0.842383
	DD	03f577026r			; 0.841555
	DD	03f5739c7r			; 0.840725
	DD	03f570348r			; 0.839894
	DD	03f56cca7r			; 0.83906
	DD	03f5695e5r			; 0.838225
	DD	03f565f02r			; 0.837387
	DD	03f5627fer			; 0.836548
	DD	03f55f0d9r			; 0.835706
	DD	03f55b993r			; 0.834863
	DD	03f55822cr			; 0.834018
	DD	03f554aa4r			; 0.83317
	DD	03f5512fbr			; 0.832321
	DD	03f54db31r			; 0.83147
	DD	03f54a347r			; 0.830616
	DD	03f546b3br			; 0.829761
	DD	03f54330fr			; 0.828904
	DD	03f53fac3r			; 0.828045
	DD	03f53c255r			; 0.827184
	DD	03f5389c7r			; 0.826321
	DD	03f535118r			; 0.825456
	DD	03f531849r			; 0.824589
	DD	03f52df59r			; 0.823721
	DD	03f52a649r			; 0.82285
	DD	03f526d18r			; 0.821977
	DD	03f5233c6r			; 0.821102
	DD	03f51fa54r			; 0.820226
	DD	03f51c0c2r			; 0.819348
	DD	03f518710r			; 0.818467
	DD	03f514d3dr			; 0.817585
	DD	03f51134ar			; 0.816701
	DD	03f50d937r			; 0.815814
	DD	03f509f03r			; 0.814926
	DD	03f5064afr			; 0.814036
	DD	03f502a3br			; 0.813144
	DD	03f4fefa8r			; 0.812251
	DD	03f4fb4f4r			; 0.811355
	DD	03f4f7a1fr			; 0.810457
	DD	03f4f3f2br			; 0.809558
	DD	03f4f0417r			; 0.808656
	DD	03f4ec8e4r			; 0.807753
	DD	03f4e8d90r			; 0.806848
	DD	03f4e521cr			; 0.80594
	DD	03f4e1689r			; 0.805031
	DD	03f4ddad5r			; 0.80412
	DD	03f4d9f02r			; 0.803208
	DD	03f4d6310r			; 0.802293
	DD	03f4d26fdr			; 0.801376
	DD	03f4ceacbr			; 0.800458
	DD	03f4cae79r			; 0.799537
	DD	03f4c7208r			; 0.798615
	DD	03f4c3578r			; 0.797691
	DD	03f4bf8c7r			; 0.796765
	DD	03f4bbbf8r			; 0.795837
	DD	03f4b7f09r			; 0.794907
	DD	03f4b41far			; 0.793975
	DD	03f4b04ccr			; 0.793042
	DD	03f4ac77fr			; 0.792107
	DD	03f4a8a13r			; 0.791169
	DD	03f4a4c87r			; 0.79023
	DD	03f4a0edcr			; 0.789289
	DD	03f49d112r			; 0.788346
	DD	03f499329r			; 0.787402
	DD	03f495521r			; 0.786455
	DD	03f4916far			; 0.785507
	DD	03f48d8b3r			; 0.784557
	DD	03f489a4er			; 0.783605
	DD	03f485bcar			; 0.782651
	DD	03f481d27r			; 0.781695
	DD	03f47de65r			; 0.780737
	DD	03f479f84r			; 0.779778
	DD	03f476085r			; 0.778817
	DD	03f472167r			; 0.777853
	DD	03f46e22ar			; 0.776888
	DD	03f46a2cer			; 0.775922
	DD	03f466354r			; 0.774953
	DD	03f4623bbr			; 0.773983
	DD	03f45e403r			; 0.77301
	DD	03f45a42dr			; 0.772036
	DD	03f456439r			; 0.771061
	DD	03f452426r			; 0.770083
	DD	03f44e3f5r			; 0.769103
	DD	03f44a3a5r			; 0.768122
	DD	03f446337r			; 0.767139
	DD	03f4422abr			; 0.766154
	DD	03f43e200r			; 0.765167
	DD	03f43a138r			; 0.764179
	DD	03f436051r			; 0.763188
	DD	03f431f4cr			; 0.762196
	DD	03f42de29r			; 0.761202
	DD	03f429ce8r			; 0.760207
	DD	03f425b89r			; 0.759209
	DD	03f421a0br			; 0.75821
	DD	03f41d870r			; 0.757209
	DD	03f4196b7r			; 0.756206
	DD	03f4154e1r			; 0.755201
	DD	03f4112ecr			; 0.754195
	DD	03f40d0dar			; 0.753187
	DD	03f408ea9r			; 0.752177
	DD	03f404c5cr			; 0.751165
	DD	03f4009f0r			; 0.750152
	DD	03f3fc767r			; 0.749136
	DD	03f3f84c0r			; 0.748119
	DD	03f3f41fcr			; 0.747101
	DD	03f3eff1br			; 0.74608
	DD	03f3ebc1br			; 0.745058
	DD	03f3e78ffr			; 0.744034
	DD	03f3e35c5r			; 0.743008
	DD	03f3df26er			; 0.74198
	DD	03f3daef9r			; 0.740951
	DD	03f3d6b67r			; 0.73992
	DD	03f3d27b8r			; 0.738887
	DD	03f3ce3ecr			; 0.737853
	DD	03f3ca003r			; 0.736817
	DD	03f3c5bfcr			; 0.735779
	DD	03f3c17d9r			; 0.734739
	DD	03f3bd398r			; 0.733697
	DD	03f3b8f3br			; 0.732654
	DD	03f3b4ac1r			; 0.731609
	DD	03f3b0629r			; 0.730563
	DD	03f3ac175r			; 0.729514
	DD	03f3a7ca4r			; 0.728464
	DD	03f3a37b7r			; 0.727413
	DD	03f39f2acr			; 0.726359
	DD	03f39ad85r			; 0.725304
	DD	03f396842r			; 0.724247
	DD	03f3922e1r			; 0.723188
	DD	03f38dd65r			; 0.722128
	DD	03f3897cbr			; 0.721066
	DD	03f385216r			; 0.720003
	DD	03f380c43r			; 0.718937
	DD	03f37c655r			; 0.71787
	DD	03f37804ar			; 0.716801
	DD	03f373a23r			; 0.715731
	DD	03f36f3dfr			; 0.714659
	DD	03f36ad7fr			; 0.713585
	DD	03f366704r			; 0.712509
	DD	03f36206cr			; 0.711432
	DD	03f35d9b8r			; 0.710353
	DD	03f3592e7r			; 0.709273
	DD	03f354bfbr			; 0.708191
	DD	03f3504f3r			; 0.707107
	DD	03f34bdcfr			; 0.706021
	DD	03f34768fr			; 0.704934
	DD	03f342f34r			; 0.703845
	DD	03f33e7bcr			; 0.702755
	DD	03f33a029r			; 0.701663
	DD	03f33587ar			; 0.700569
	DD	03f3310afr			; 0.699473
	DD	03f32c8c9r			; 0.698376
	DD	03f3280c7r			; 0.697277
	DD	03f3238aar			; 0.696177
	DD	03f31f071r			; 0.695075
	DD	03f31a81dr			; 0.693971
	DD	03f315fadr			; 0.692866
	DD	03f311722r			; 0.691759
	DD	03f30ce7cr			; 0.690651
	DD	03f3085bbr			; 0.689541
	DD	03f303cder			; 0.688429
	DD	03f2ff3e6r			; 0.687315
	DD	03f2faad3r			; 0.6862
	DD	03f2f61a5r			; 0.685084
	DD	03f2f185br			; 0.683965
	DD	03f2ecef7r			; 0.682846
	DD	03f2e8578r			; 0.681724
	DD	03f2e3bder			; 0.680601
	DD	03f2df229r			; 0.679476
	DD	03f2da859r			; 0.67835
	DD	03f2d5e6fr			; 0.677222
	DD	03f2d1469r			; 0.676093
	DD	03f2cca49r			; 0.674962
	DD	03f2c800fr			; 0.673829
	DD	03f2c35b9r			; 0.672695
	DD	03f2beb4ar			; 0.671559
	DD	03f2ba0bfr			; 0.670422
	DD	03f2b561br			; 0.669283
	DD	03f2b0b5br			; 0.668142
	DD	03f2ac082r			; 0.667
	DD	03f2a758er			; 0.665856
	DD	03f2a2a80r			; 0.664711
	DD	03f29df57r			; 0.663564
	DD	03f299415r			; 0.662416
	DD	03f2948b8r			; 0.661266
	DD	03f28fd41r			; 0.660114
	DD	03f28b1b0r			; 0.658961
	DD	03f286605r			; 0.657807
	DD	03f281a40r			; 0.656651
	DD	03f27ce61r			; 0.655493
	DD	03f278268r			; 0.654334
	DD	03f273656r			; 0.653173
	DD	03f26ea2ar			; 0.652011
	DD	03f269de3r			; 0.650847
	DD	03f265184r			; 0.649681
	DD	03f26050ar			; 0.648514
	DD	03f25b877r			; 0.647346
	DD	03f256bcbr			; 0.646176
	DD	03f251f04r			; 0.645005
	DD	03f24d225r			; 0.643832
	DD	03f24852cr			; 0.642657
	DD	03f24381ar			; 0.641481
	DD	03f23eaeer			; 0.640303
	DD	03f239da9r			; 0.639124
	DD	03f23504br			; 0.637944
	DD	03f2302d3r			; 0.636762
	DD	03f22b543r			; 0.635578
	DD	03f226799r			; 0.634393
	DD	03f2219d7r			; 0.633207
	DD	03f21cbfbr			; 0.632019
	DD	03f217e06r			; 0.630829
	DD	03f212ff9r			; 0.629638
	DD	03f20e1d2r			; 0.628446
	DD	03f209393r			; 0.627252
	DD	03f20453br			; 0.626056
	DD	03f1ff6cbr			; 0.62486
	DD	03f1fa841r			; 0.623661
	DD	03f1f599fr			; 0.622461
	DD	03f1f0ae5r			; 0.62126
	DD	03f1ebc12r			; 0.620057
	DD	03f1e6d26r			; 0.618853
	DD	03f1e1e22r			; 0.617647
	DD	03f1dcf06r			; 0.61644
	DD	03f1d7fd1r			; 0.615232
	DD	03f1d3084r			; 0.614022
	DD	03f1ce11fr			; 0.61281
	DD	03f1c91a2r			; 0.611597
	DD	03f1c420cr			; 0.610383
	DD	03f1bf25fr			; 0.609167
	DD	03f1ba299r			; 0.60795
	DD	03f1b52bbr			; 0.606731
	DD	03f1b02c6r			; 0.605511
	DD	03f1ab2b8r			; 0.60429
	DD	03f1a6293r			; 0.603067
	DD	03f1a1255r			; 0.601842
	DD	03f19c200r			; 0.600616
	DD	03f197194r			; 0.599389
	DD	03f19210fr			; 0.598161
	DD	03f18d073r			; 0.596931
	DD	03f187fc0r			; 0.595699
	DD	03f182ef5r			; 0.594467
	DD	03f17de12r			; 0.593232
	DD	03f178d18r			; 0.591997
	DD	03f173c07r			; 0.59076
	DD	03f16eader			; 0.589521
	DD	03f16999fr			; 0.588282
	DD	03f164847r			; 0.58704
	DD	03f15f6d9r			; 0.585798
	DD	03f15a554r			; 0.584554
	DD	03f1553b7r			; 0.583309
	DD	03f150204r			; 0.582062
	DD	03f14b039r			; 0.580814
	DD	03f145e58r			; 0.579565
	DD	03f140c5fr			; 0.578314
	DD	03f13ba50r			; 0.577062
	DD	03f13682ar			; 0.575808
	DD	03f1315eer			; 0.574553
	DD	03f12c39ar			; 0.573297
	DD	03f127130r			; 0.57204
	DD	03f121eb0r			; 0.570781
	DD	03f11cc19r			; 0.569521
	DD	03f11796br			; 0.568259
	DD	03f1126a7r			; 0.566996
	DD	03f10d3cdr			; 0.565732
	DD	03f1080dcr			; 0.564466
	DD	03f102dd5r			; 0.563199
	DD	03f0fdab8r			; 0.561931
	DD	03f0f8784r			; 0.560662
	DD	03f0f343br			; 0.559391
	DD	03f0ee0dbr			; 0.558119
	DD	03f0e8d65r			; 0.556845
	DD	03f0e39dar			; 0.55557
	DD	03f0de638r			; 0.554294
	DD	03f0d9281r			; 0.553017
	DD	03f0d3eb3r			; 0.551738
	DD	03f0cead0r			; 0.550458
	DD	03f0c96d7r			; 0.549177
	DD	03f0c42c9r			; 0.547894
	DD	03f0beea5r			; 0.54661
	DD	03f0b9a6br			; 0.545325
	DD	03f0b461cr			; 0.544039
	DD	03f0af1b7r			; 0.542751
	DD	03f0a9d3dr			; 0.541462
	DD	03f0a48adr			; 0.540171
	DD	03f09f409r			; 0.53888
	DD	03f099f4er			; 0.537587
	DD	03f094a7fr			; 0.536293
	DD	03f08f59br			; 0.534998
	DD	03f08a0a1r			; 0.533701
	DD	03f084b92r			; 0.532403
	DD	03f07f66fr			; 0.531104
	DD	03f07a136r			; 0.529804
	DD	03f074be8r			; 0.528502
	DD	03f06f686r			; 0.527199
	DD	03f06a10er			; 0.525895
	DD	03f064b82r			; 0.52459
	DD	03f05f5e2r			; 0.523283
	DD	03f05a02cr			; 0.521975
	DD	03f054a62r			; 0.520666
	DD	03f04f484r			; 0.519356
	DD	03f049e91r			; 0.518045
	DD	03f044889r			; 0.516732
	DD	03f03f26dr			; 0.515418
	DD	03f039c3dr			; 0.514103
	DD	03f0345f8r			; 0.512786
	DD	03f02ef9fr			; 0.511469
	DD	03f029932r			; 0.51015
	DD	03f0242b1r			; 0.50883
	DD	03f01ec1cr			; 0.507509
	DD	03f019573r			; 0.506187
	DD	03f013eb5r			; 0.504863
	DD	03f00e7e4r			; 0.503538
	DD	03f0090ffr			; 0.502212
	DD	03f003a06r			; 0.500885
	DD	03effc5f3r			; 0.499557
	DD	03eff17b2r			; 0.498228
	DD	03efe694ar			; 0.496897
	DD	03efdbabbr			; 0.495565
	DD	03efd0c04r			; 0.494232
	DD	03efc5d27r			; 0.492898
	DD	03efbae22r			; 0.491563
	DD	03efafef7r			; 0.490226
	DD	03efa4fa5r			; 0.488889
	DD	03ef9a02dr			; 0.48755
	DD	03ef8f08er			; 0.48621
	DD	03ef840c8r			; 0.484869
	DD	03ef790dcr			; 0.483527
	DD	03ef6e0cbr			; 0.482184
	DD	03ef63093r			; 0.480839
	DD	03ef58035r			; 0.479494
	DD	03ef4cfb1r			; 0.478147
	DD	03ef41f07r			; 0.476799
	DD	03ef36e38r			; 0.47545
	DD	03ef2bd43r			; 0.4741
	DD	03ef20c29r			; 0.472749
	DD	03ef15aear			; 0.471397
	DD	03ef0a985r			; 0.470043
	DD	03eeff7fbr			; 0.468689
	DD	03eef464cr			; 0.467333
	DD	03eee9479r			; 0.465977
	DD	03eede280r			; 0.464619
	DD	03eed3063r			; 0.46326
	DD	03eec7e21r			; 0.4619
	DD	03eebcbbbr			; 0.460539
	DD	03eeb1930r			; 0.459177
	DD	03eea6681r			; 0.457813
	DD	03ee9b3aer			; 0.456449
	DD	03ee900b7r			; 0.455084
	DD	03ee84d9cr			; 0.453717
	DD	03ee79a5dr			; 0.45235
	DD	03ee6e6fbr			; 0.450981
	DD	03ee63375r			; 0.449611
	DD	03ee57fcbr			; 0.448241
	DD	03ee4cbfer			; 0.446869
	DD	03ee4180er			; 0.445496
	DD	03ee363far			; 0.444122
	DD	03ee2afc4r			; 0.442747
	DD	03ee1fb6ar			; 0.441371
	DD	03ee146eer			; 0.439994
	DD	03ee0924fr			; 0.438616
	DD	03edfdd8dr			; 0.437237
	DD	03edf28a9r			; 0.435857
	DD	03ede73a2r			; 0.434476
	DD	03eddbe79r			; 0.433094
	DD	03edd092er			; 0.431711
	DD	03edc53c1r			; 0.430326
	DD	03edb9e31r			; 0.428941
	DD	03edae880r			; 0.427555
	DD	03eda32adr			; 0.426168
	DD	03ed97cb9r			; 0.42478
	DD	03ed8c6a3r			; 0.42339
	DD	03ed8106br			; 0.422
	DD	03ed75a13r			; 0.420609
	DD	03ed6a399r			; 0.419217
	DD	03ed5ecfdr			; 0.417824
	DD	03ed53641r			; 0.41643
	DD	03ed47f64r			; 0.415034
	DD	03ed3c867r			; 0.413638
	DD	03ed31148r			; 0.412241
	DD	03ed25a09r			; 0.410843
	DD	03ed1a2aar			; 0.409444
	DD	03ed0eb2ar			; 0.408044
	DD	03ed0338ar			; 0.406643
	DD	03ecf7bcar			; 0.405241
	DD	03ecec3ear			; 0.403838
	DD	03ece0bear			; 0.402435
	DD	03ecd53car			; 0.40103
	DD	03ecc9b8br			; 0.399624
	DD	03ecbe32cr			; 0.398218
	DD	03ecb2aaer			; 0.39681
	DD	03eca7210r			; 0.395401
	DD	03ec9b953r			; 0.393992
	DD	03ec90077r			; 0.392582
	DD	03ec8477cr			; 0.39117
	DD	03ec78e62r			; 0.389758
	DD	03ec6d529r			; 0.388345
	DD	03ec61bd2r			; 0.386931
	DD	03ec5625cr			; 0.385516
	DD	03ec4a8c8r			; 0.3841
	DD	03ec3ef15r			; 0.382683
	DD	03ec33544r			; 0.381266
	DD	03ec27b55r			; 0.379847
	DD	03ec1c148r			; 0.378428
	DD	03ec1071er			; 0.377007
	DD	03ec04cd5r			; 0.375586
	DD	03ebf926fr			; 0.374164
	DD	03ebed7ebr			; 0.372741
	DD	03ebe1d4ar			; 0.371317
	DD	03ebd628br			; 0.369892
	DD	03ebca7afr			; 0.368467
	DD	03ebbecb6r			; 0.36704
	DD	03ebb31a0r			; 0.365613
	DD	03eba766er			; 0.364185
	DD	03eb9bb1er			; 0.362756
	DD	03eb8ffb2r			; 0.361326
	DD	03eb8442ar			; 0.359895
	DD	03eb78884r			; 0.358463
	DD	03eb6ccc3r			; 0.357031
	DD	03eb610e6r			; 0.355598
	DD	03eb554ecr			; 0.354164
	DD	03eb498d6r			; 0.352729
	DD	03eb3dca5r			; 0.351293
	DD	03eb32058r			; 0.349856
	DD	03eb263efr			; 0.348419
	DD	03eb1a76br			; 0.34698
	DD	03eb0eacbr			; 0.345541
	DD	03eb02e10r			; 0.344101
	DD	03eaf713ar			; 0.342661
	DD	03eaeb449r			; 0.341219
	DD	03eadf73cr			; 0.339777
	DD	03ead3a15r			; 0.338334
	DD	03eac7cd4r			; 0.33689
	DD	03eabbf77r			; 0.335445
	DD	03eab0201r			; 0.334
	DD	03eaa446fr			; 0.332553
	DD	03ea986c4r			; 0.331106
	DD	03ea8c8fer			; 0.329658
	DD	03ea80b1fr			; 0.32821
	DD	03ea74d25r			; 0.32676
	DD	03ea68f12r			; 0.32531
	DD	03ea5d0e5r			; 0.323859
	DD	03ea5129fr			; 0.322408
	DD	03ea4543fr			; 0.320955
	DD	03ea395c5r			; 0.319502
	DD	03ea2d733r			; 0.318048
	DD	03ea21887r			; 0.316593
	DD	03ea159c2r			; 0.315138
	DD	03ea09ae5r			; 0.313682
	DD	03e9fdbeer			; 0.312225
	DD	03e9f1cdfr			; 0.310767
	DD	03e9e5db8r			; 0.309309
	DD	03e9d9e78r			; 0.30785
	DD	03e9cdf20r			; 0.30639
	DD	03e9c1fafr			; 0.304929
	DD	03e9b6027r			; 0.303468
	DD	03e9aa086r			; 0.302006
	DD	03e99e0cer			; 0.300543
	DD	03e9920fer			; 0.29908
	DD	03e986116r			; 0.297616
	DD	03e97a117r			; 0.296151
	DD	03e96e100r			; 0.294685
	DD	03e9620d2r			; 0.293219
	DD	03e95608dr			; 0.291752
	DD	03e94a031r			; 0.290285
	DD	03e93dfbfr			; 0.288816
	DD	03e931f35r			; 0.287347
	DD	03e925e94r			; 0.285878
	DD	03e919dddr			; 0.284408
	DD	03e90dd10r			; 0.282937
	DD	03e901c2cr			; 0.281465
	DD	03e8f5b32r			; 0.279993
	DD	03e8e9a22r			; 0.27852
	DD	03e8dd8fcr			; 0.277046
	DD	03e8d17c0r			; 0.275572
	DD	03e8c566er			; 0.274097
	DD	03e8b9507r			; 0.272621
	DD	03e8ad38ar			; 0.271145
	DD	03e8a11f7r			; 0.269668
	DD	03e895050r			; 0.268191
	DD	03e888e93r			; 0.266713
	DD	03e87ccc1r			; 0.265234
	DD	03e870adar			; 0.263755
	DD	03e8648dfr			; 0.262275
	DD	03e8586cer			; 0.260794
	DD	03e84c4aar			; 0.259313
	DD	03e840270r			; 0.257831
	DD	03e834022r			; 0.256349
	DD	03e827dc0r			; 0.254866
	DD	03e81bb4ar			; 0.253382
	DD	03e80f8c0r			; 0.251898
	DD	03e803622r			; 0.250413
	DD	03e7ee6e1r			; 0.248928
	DD	03e7d6156r			; 0.247442
	DD	03e7bdba4r			; 0.245955
	DD	03e7a55cbr			; 0.244468
	DD	03e78cfccr			; 0.24298
	DD	03e7749a6r			; 0.241492
	DD	03e75c35ar			; 0.240003
	DD	03e743ce8r			; 0.238514
	DD	03e72b651r			; 0.237024
	DD	03e712f94r			; 0.235533
	DD	03e6fa8b2r			; 0.234042
	DD	03e6e21abr			; 0.23255
	DD	03e6c9a7fr			; 0.231058
	DD	03e6b132fr			; 0.229565
	DD	03e698bbar			; 0.228072
	DD	03e680422r			; 0.226578
	DD	03e667c66r			; 0.225084
	DD	03e64f486r			; 0.223589
	DD	03e636c83r			; 0.222094
	DD	03e61e45cr			; 0.220598
	DD	03e605c13r			; 0.219101
	DD	03e5ed3a8r			; 0.217604
	DD	03e5d4b1ar			; 0.216107
	DD	03e5bc26ar			; 0.214609
	DD	03e5a3997r			; 0.21311
	DD	03e58b0a4r			; 0.211611
	DD	03e57278fr			; 0.210112
	DD	03e559e58r			; 0.208612
	DD	03e541501r			; 0.207111
	DD	03e528b89r			; 0.20561
	DD	03e5101f1r			; 0.204109
	DD	03e4f7838r			; 0.202607
	DD	03e4dee60r			; 0.201105
	DD	03e4c6467r			; 0.199602
	DD	03e4ada4fr			; 0.198098
	DD	03e495018r			; 0.196595
	DD	03e47c5c2r			; 0.19509
	DD	03e463b4dr			; 0.193586
	DD	03e44b0b9r			; 0.19208
	DD	03e432607r			; 0.190575
	DD	03e419b37r			; 0.189069
	DD	03e401049r			; 0.187562
	DD	03e3e853er			; 0.186055
	DD	03e3cfa15r			; 0.184548
	DD	03e3b6ecfr			; 0.18304
	DD	03e39e36cr			; 0.181532
	DD	03e3857ecr			; 0.180023
	DD	03e36cc50r			; 0.178514
	DD	03e354098r			; 0.177004
	DD	03e33b4c4r			; 0.175494
	DD	03e3228d4r			; 0.173984
	DD	03e309cc9r			; 0.172473
	DD	03e2f10a2r			; 0.170962
	DD	03e2d8461r			; 0.16945
	DD	03e2bf804r			; 0.167938
	DD	03e2a6b8dr			; 0.166426
	DD	03e28defcr			; 0.164913
	DD	03e275251r			; 0.1634
	DD	03e25c58cr			; 0.161886
	DD	03e2438adr			; 0.160372
	DD	03e22abb6r			; 0.158858
	DD	03e211ea5r			; 0.157343
	DD	03e1f917br			; 0.155828
	DD	03e1e0438r			; 0.154313
	DD	03e1c76der			; 0.152797
	DD	03e1ae96br			; 0.151281
	DD	03e195be0r			; 0.149765
	DD	03e17ce3dr			; 0.148248
	DD	03e164083r			; 0.14673
	DD	03e14b2b2r			; 0.145213
	DD	03e1324car			; 0.143695
	DD	03e1196ccr			; 0.142177
	DD	03e1008b7r			; 0.140658
	DD	03e0e7a8br			; 0.139139
	DD	03e0cec4ar			; 0.13762
	DD	03e0b5df3r			; 0.136101
	DD	03e09cf86r			; 0.134581
	DD	03e084105r			; 0.133061
	DD	03e06b26er			; 0.13154
	DD	03e0523c2r			; 0.130019
	DD	03e039502r			; 0.128498
	DD	03e02062er			; 0.126977
	DD	03e007745r			; 0.125455
	DD	03dfdd092r			; 0.123933
	DD	03dfab273r			; 0.122411
	DD	03df7942cr			; 0.120888
	DD	03df475c0r			; 0.119365
	DD	03df1572er			; 0.117842
	DD	03dee3876r			; 0.116319
	DD	03deb199ar			; 0.114795
	DD	03de7fa9ar			; 0.113271
	DD	03de4db76r			; 0.111747
	DD	03de1bc2er			; 0.110222
	DD	03dde9cc4r			; 0.108697
	DD	03ddb7d37r			; 0.107172
	DD	03dd85d89r			; 0.105647
	DD	03dd53db9r			; 0.104122
	DD	03dd21dc8r			; 0.102596
	DD	03dcefdb7r			; 0.10107
	DD	03dcbdd86r			; 0.0995436
	DD	03dc8bd36r			; 0.0980171
	DD	03dc59cc6r			; 0.0964904
	DD	03dc27c39r			; 0.0949635
	DD	03dbf5b8dr			; 0.0934363
	DD	03dbc3ac3r			; 0.091909
	DD	03db919ddr			; 0.0903814
	DD	03db5f8dar			; 0.0888536
	DD	03db2d7bbr			; 0.0873255
	DD	03dafb680r			; 0.0857973
	DD	03dac952br			; 0.0842689
	DD	03da973bar			; 0.0827403
	DD	03da65230r			; 0.0812114
	DD	03da3308cr			; 0.0796824
	DD	03da00ecfr			; 0.0781532
	DD	03d9cecf9r			; 0.0766239
	DD	03d99cb0ar			; 0.0750943
	DD	03d96a905r			; 0.0735646
	DD	03d9386e7r			; 0.0720346
	DD	03d9064b4r			; 0.0705046
	DD	03d8d426ar			; 0.0689743
	DD	03d8a200ar			; 0.0674439
	DD	03d86fd94r			; 0.0659133
	DD	03d83db0ar			; 0.0643826
	DD	03d80b86cr			; 0.0628518
	DD	03d7b2b74r			; 0.0613207
	DD	03d74e5e9r			; 0.0597896
	DD	03d6ea038r			; 0.0582583
	DD	03d685a62r			; 0.0567268
	DD	03d621469r			; 0.0551952
	DD	03d5bce4cr			; 0.0536635
	DD	03d55880er			; 0.0521317
	DD	03d4f41afr			; 0.0505998
	DD	03d48fb30r			; 0.0490677
	DD	03d42b491r			; 0.0475355
	DD	03d3c6dd5r			; 0.0460032
	DD	03d3626fcr			; 0.0444708
	DD	03d2fe007r			; 0.0429383
	DD	03d2998f6r			; 0.0414056
	DD	03d2351cbr			; 0.0398729
	DD	03d1d0a88r			; 0.0383401
	DD	03d16c32cr			; 0.0368072
	DD	03d107bb8r			; 0.0352742
	DD	03d0a342fr			; 0.0337412
	DD	03d03ec90r			; 0.032208
	DD	03cfb49bar			; 0.0306748
	DD	03ceeba2cr			; 0.0291415
	DD	03ce22a7ar			; 0.0276081
	DD	03cd59aa6r			; 0.0260747
	DD	03cc90ab0r			; 0.0245412
	DD	03cbc7a9br			; 0.0230077
	DD	03cafea69r			; 0.0214741
	DD	03ca35a1cr			; 0.0199404
	DD	03c96c9b6r			; 0.0184067
	DD	03c8a3938r			; 0.016873
	DD	03c7b514br			; 0.0153392
	DD	03c622fffr			; 0.0138054
	DD	03c490e90r			; 0.0122715
	DD	03c2fed02r			; 0.0107377
	DD	03c16cb58r			; 0.00920375
	DD	03bfb5330r			; 0.00766983
	DD	03bc90f88r			; 0.00613588
	DD	03b96cbc1r			; 0.00460193
	DD	03b490fc6r			; 0.00306796
	DD	03ac90fd5r			; 0.00153398
	DD	0248d3000r			; 6.12303e-17
	DD	0bac90fd5r			; -0.00153398
	DD	0bb490fc6r			; -0.00306796
	DD	0bb96cbc1r			; -0.00460193
	DD	0bbc90f88r			; -0.00613588
	DD	0bbfb5330r			; -0.00766983
	DD	0bc16cb58r			; -0.00920375
	DD	0bc2fed02r			; -0.0107377
	DD	0bc490e90r			; -0.0122715
	DD	0bc622fffr			; -0.0138054
	DD	0bc7b514br			; -0.0153392
	DD	0bc8a3938r			; -0.016873
	DD	0bc96c9b6r			; -0.0184067
	DD	0bca35a1cr			; -0.0199404
	DD	0bcafea69r			; -0.0214741
	DD	0bcbc7a9br			; -0.0230077
	DD	0bcc90ab0r			; -0.0245412
	DD	0bcd59aa6r			; -0.0260747
	DD	0bce22a7ar			; -0.0276081
	DD	0bceeba2cr			; -0.0291415
	DD	0bcfb49bar			; -0.0306748
	DD	0bd03ec90r			; -0.032208
	DD	0bd0a342fr			; -0.0337412
	DD	0bd107bb8r			; -0.0352742
	DD	0bd16c32cr			; -0.0368072
	DD	0bd1d0a88r			; -0.0383401
	DD	0bd2351cbr			; -0.0398729
	DD	0bd2998f6r			; -0.0414056
	DD	0bd2fe007r			; -0.0429383
	DD	0bd3626fcr			; -0.0444708
	DD	0bd3c6dd5r			; -0.0460032
	DD	0bd42b491r			; -0.0475355
	DD	0bd48fb30r			; -0.0490677
	DD	0bd4f41afr			; -0.0505998
	DD	0bd55880er			; -0.0521317
	DD	0bd5bce4cr			; -0.0536635
	DD	0bd621469r			; -0.0551952
	DD	0bd685a62r			; -0.0567268
	DD	0bd6ea038r			; -0.0582583
	DD	0bd74e5e9r			; -0.0597896
	DD	0bd7b2b74r			; -0.0613207
	DD	0bd80b86cr			; -0.0628518
	DD	0bd83db0ar			; -0.0643826
	DD	0bd86fd94r			; -0.0659133
	DD	0bd8a200ar			; -0.0674439
	DD	0bd8d426ar			; -0.0689743
	DD	0bd9064b4r			; -0.0705046
	DD	0bd9386e7r			; -0.0720346
	DD	0bd96a905r			; -0.0735646
	DD	0bd99cb0ar			; -0.0750943
	DD	0bd9cecf9r			; -0.0766239
	DD	0bda00ecfr			; -0.0781532
	DD	0bda3308cr			; -0.0796824
	DD	0bda65230r			; -0.0812114
	DD	0bda973bar			; -0.0827403
	DD	0bdac952br			; -0.0842689
	DD	0bdafb680r			; -0.0857973
	DD	0bdb2d7bbr			; -0.0873255
	DD	0bdb5f8dar			; -0.0888536
	DD	0bdb919ddr			; -0.0903814
	DD	0bdbc3ac3r			; -0.091909
	DD	0bdbf5b8dr			; -0.0934363
	DD	0bdc27c39r			; -0.0949635
	DD	0bdc59cc6r			; -0.0964904
	DD	0bdc8bd36r			; -0.0980171
	DD	0bdcbdd86r			; -0.0995436
	DD	0bdcefdb7r			; -0.10107
	DD	0bdd21dc8r			; -0.102596
	DD	0bdd53db9r			; -0.104122
	DD	0bdd85d89r			; -0.105647
	DD	0bddb7d37r			; -0.107172
	DD	0bdde9cc4r			; -0.108697
	DD	0bde1bc2er			; -0.110222
	DD	0bde4db76r			; -0.111747
	DD	0bde7fa9ar			; -0.113271
	DD	0bdeb199ar			; -0.114795
	DD	0bdee3876r			; -0.116319
	DD	0bdf1572er			; -0.117842
	DD	0bdf475c0r			; -0.119365
	DD	0bdf7942cr			; -0.120888
	DD	0bdfab273r			; -0.122411
	DD	0bdfdd092r			; -0.123933
	DD	0be007745r			; -0.125455
	DD	0be02062er			; -0.126977
	DD	0be039502r			; -0.128498
	DD	0be0523c2r			; -0.130019
	DD	0be06b26er			; -0.13154
	DD	0be084105r			; -0.133061
	DD	0be09cf86r			; -0.134581
	DD	0be0b5df3r			; -0.136101
	DD	0be0cec4ar			; -0.13762
	DD	0be0e7a8br			; -0.139139
	DD	0be1008b7r			; -0.140658
	DD	0be1196ccr			; -0.142177
	DD	0be1324car			; -0.143695
	DD	0be14b2b2r			; -0.145213
	DD	0be164083r			; -0.14673
	DD	0be17ce3dr			; -0.148248
	DD	0be195be0r			; -0.149765
	DD	0be1ae96br			; -0.151281
	DD	0be1c76der			; -0.152797
	DD	0be1e0438r			; -0.154313
	DD	0be1f917br			; -0.155828
	DD	0be211ea5r			; -0.157343
	DD	0be22abb6r			; -0.158858
	DD	0be2438adr			; -0.160372
	DD	0be25c58cr			; -0.161886
	DD	0be275251r			; -0.1634
	DD	0be28defcr			; -0.164913
	DD	0be2a6b8dr			; -0.166426
	DD	0be2bf804r			; -0.167938
	DD	0be2d8461r			; -0.16945
	DD	0be2f10a2r			; -0.170962
	DD	0be309cc9r			; -0.172473
	DD	0be3228d4r			; -0.173984
	DD	0be33b4c4r			; -0.175494
	DD	0be354098r			; -0.177004
	DD	0be36cc50r			; -0.178514
	DD	0be3857ecr			; -0.180023
	DD	0be39e36cr			; -0.181532
	DD	0be3b6ecfr			; -0.18304
	DD	0be3cfa15r			; -0.184548
	DD	0be3e853er			; -0.186055
	DD	0be401049r			; -0.187562
	DD	0be419b37r			; -0.189069
	DD	0be432607r			; -0.190575
	DD	0be44b0b9r			; -0.19208
	DD	0be463b4dr			; -0.193586
	DD	0be47c5c2r			; -0.19509
	DD	0be495018r			; -0.196595
	DD	0be4ada4fr			; -0.198098
	DD	0be4c6467r			; -0.199602
	DD	0be4dee60r			; -0.201105
	DD	0be4f7838r			; -0.202607
	DD	0be5101f1r			; -0.204109
	DD	0be528b89r			; -0.20561
	DD	0be541501r			; -0.207111
	DD	0be559e58r			; -0.208612
	DD	0be57278fr			; -0.210112
	DD	0be58b0a4r			; -0.211611
	DD	0be5a3997r			; -0.21311
	DD	0be5bc26ar			; -0.214609
	DD	0be5d4b1ar			; -0.216107
	DD	0be5ed3a8r			; -0.217604
	DD	0be605c13r			; -0.219101
	DD	0be61e45cr			; -0.220598
	DD	0be636c83r			; -0.222094
	DD	0be64f486r			; -0.223589
	DD	0be667c66r			; -0.225084
	DD	0be680422r			; -0.226578
	DD	0be698bbar			; -0.228072
	DD	0be6b132fr			; -0.229565
	DD	0be6c9a7fr			; -0.231058
	DD	0be6e21abr			; -0.23255
	DD	0be6fa8b2r			; -0.234042
	DD	0be712f94r			; -0.235533
	DD	0be72b651r			; -0.237024
	DD	0be743ce8r			; -0.238514
	DD	0be75c35ar			; -0.240003
	DD	0be7749a6r			; -0.241492
	DD	0be78cfccr			; -0.24298
	DD	0be7a55cbr			; -0.244468
	DD	0be7bdba4r			; -0.245955
	DD	0be7d6156r			; -0.247442
	DD	0be7ee6e1r			; -0.248928
	DD	0be803622r			; -0.250413
	DD	0be80f8c0r			; -0.251898
	DD	0be81bb4ar			; -0.253382
	DD	0be827dc0r			; -0.254866
	DD	0be834022r			; -0.256349
	DD	0be840270r			; -0.257831
	DD	0be84c4aar			; -0.259313
	DD	0be8586cer			; -0.260794
	DD	0be8648dfr			; -0.262275
	DD	0be870adar			; -0.263755
	DD	0be87ccc1r			; -0.265234
	DD	0be888e93r			; -0.266713
	DD	0be895050r			; -0.268191
	DD	0be8a11f7r			; -0.269668
	DD	0be8ad38ar			; -0.271145
	DD	0be8b9507r			; -0.272621
	DD	0be8c566er			; -0.274097
	DD	0be8d17c0r			; -0.275572
	DD	0be8dd8fcr			; -0.277046
	DD	0be8e9a22r			; -0.27852
	DD	0be8f5b32r			; -0.279993
	DD	0be901c2cr			; -0.281465
	DD	0be90dd10r			; -0.282937
	DD	0be919dddr			; -0.284408
	DD	0be925e94r			; -0.285878
	DD	0be931f35r			; -0.287347
	DD	0be93dfbfr			; -0.288816
	DD	0be94a031r			; -0.290285
	DD	0be95608dr			; -0.291752
	DD	0be9620d2r			; -0.293219
	DD	0be96e100r			; -0.294685
	DD	0be97a117r			; -0.296151
	DD	0be986116r			; -0.297616
	DD	0be9920fer			; -0.29908
	DD	0be99e0cer			; -0.300543
	DD	0be9aa086r			; -0.302006
	DD	0be9b6027r			; -0.303468
	DD	0be9c1fafr			; -0.304929
	DD	0be9cdf20r			; -0.30639
	DD	0be9d9e78r			; -0.30785
	DD	0be9e5db8r			; -0.309309
	DD	0be9f1cdfr			; -0.310767
	DD	0be9fdbeer			; -0.312225
	DD	0bea09ae5r			; -0.313682
	DD	0bea159c2r			; -0.315138
	DD	0bea21887r			; -0.316593
	DD	0bea2d733r			; -0.318048
	DD	0bea395c5r			; -0.319502
	DD	0bea4543fr			; -0.320955
	DD	0bea5129fr			; -0.322408
	DD	0bea5d0e5r			; -0.323859
	DD	0bea68f12r			; -0.32531
	DD	0bea74d25r			; -0.32676
	DD	0bea80b1fr			; -0.32821
	DD	0bea8c8fer			; -0.329658
	DD	0bea986c4r			; -0.331106
	DD	0beaa446fr			; -0.332553
	DD	0beab0201r			; -0.334
	DD	0beabbf77r			; -0.335445
	DD	0beac7cd4r			; -0.33689
	DD	0bead3a15r			; -0.338334
	DD	0beadf73cr			; -0.339777
	DD	0beaeb449r			; -0.341219
	DD	0beaf713ar			; -0.342661
	DD	0beb02e10r			; -0.344101
	DD	0beb0eacbr			; -0.345541
	DD	0beb1a76br			; -0.34698
	DD	0beb263efr			; -0.348419
	DD	0beb32058r			; -0.349856
	DD	0beb3dca5r			; -0.351293
	DD	0beb498d6r			; -0.352729
	DD	0beb554ecr			; -0.354164
	DD	0beb610e6r			; -0.355598
	DD	0beb6ccc3r			; -0.357031
	DD	0beb78884r			; -0.358463
	DD	0beb8442ar			; -0.359895
	DD	0beb8ffb2r			; -0.361326
	DD	0beb9bb1er			; -0.362756
	DD	0beba766er			; -0.364185
	DD	0bebb31a0r			; -0.365613
	DD	0bebbecb6r			; -0.36704
	DD	0bebca7afr			; -0.368467
	DD	0bebd628br			; -0.369892
	DD	0bebe1d4ar			; -0.371317
	DD	0bebed7ebr			; -0.372741
	DD	0bebf926fr			; -0.374164
	DD	0bec04cd5r			; -0.375586
	DD	0bec1071er			; -0.377007
	DD	0bec1c148r			; -0.378428
	DD	0bec27b55r			; -0.379847
	DD	0bec33544r			; -0.381266
	DD	0bec3ef15r			; -0.382683
	DD	0bec4a8c8r			; -0.3841
	DD	0bec5625cr			; -0.385516
	DD	0bec61bd2r			; -0.386931
	DD	0bec6d529r			; -0.388345
	DD	0bec78e62r			; -0.389758
	DD	0bec8477cr			; -0.39117
	DD	0bec90077r			; -0.392582
	DD	0bec9b953r			; -0.393992
	DD	0beca7210r			; -0.395401
	DD	0becb2aaer			; -0.39681
	DD	0becbe32cr			; -0.398218
	DD	0becc9b8br			; -0.399624
	DD	0becd53car			; -0.40103
	DD	0bece0bear			; -0.402435
	DD	0becec3ear			; -0.403838
	DD	0becf7bcar			; -0.405241
	DD	0bed0338ar			; -0.406643
	DD	0bed0eb2ar			; -0.408044
	DD	0bed1a2aar			; -0.409444
	DD	0bed25a09r			; -0.410843
	DD	0bed31148r			; -0.412241
	DD	0bed3c867r			; -0.413638
	DD	0bed47f64r			; -0.415034
	DD	0bed53641r			; -0.41643
	DD	0bed5ecfdr			; -0.417824
	DD	0bed6a399r			; -0.419217
	DD	0bed75a13r			; -0.420609
	DD	0bed8106br			; -0.422
	DD	0bed8c6a3r			; -0.42339
	DD	0bed97cb9r			; -0.42478
	DD	0beda32adr			; -0.426168
	DD	0bedae880r			; -0.427555
	DD	0bedb9e31r			; -0.428941
	DD	0bedc53c1r			; -0.430326
	DD	0bedd092er			; -0.431711
	DD	0beddbe79r			; -0.433094
	DD	0bede73a2r			; -0.434476
	DD	0bedf28a9r			; -0.435857
	DD	0bedfdd8dr			; -0.437237
	DD	0bee0924fr			; -0.438616
	DD	0bee146eer			; -0.439994
	DD	0bee1fb6ar			; -0.441371
	DD	0bee2afc4r			; -0.442747
	DD	0bee363far			; -0.444122
	DD	0bee4180er			; -0.445496
	DD	0bee4cbfer			; -0.446869
	DD	0bee57fcbr			; -0.448241
	DD	0bee63375r			; -0.449611
	DD	0bee6e6fbr			; -0.450981
	DD	0bee79a5dr			; -0.45235
	DD	0bee84d9cr			; -0.453717
	DD	0bee900b7r			; -0.455084
	DD	0bee9b3aer			; -0.456449
	DD	0beea6681r			; -0.457813
	DD	0beeb1930r			; -0.459177
	DD	0beebcbbbr			; -0.460539
	DD	0beec7e21r			; -0.4619
	DD	0beed3063r			; -0.46326
	DD	0beede280r			; -0.464619
	DD	0beee9479r			; -0.465977
	DD	0beef464cr			; -0.467333
	DD	0beeff7fbr			; -0.468689
	DD	0bef0a985r			; -0.470043
	DD	0bef15aear			; -0.471397
	DD	0bef20c29r			; -0.472749
	DD	0bef2bd43r			; -0.4741
	DD	0bef36e38r			; -0.47545
	DD	0bef41f07r			; -0.476799
	DD	0bef4cfb1r			; -0.478147
	DD	0bef58035r			; -0.479494
	DD	0bef63093r			; -0.480839
	DD	0bef6e0cbr			; -0.482184
	DD	0bef790dcr			; -0.483527
	DD	0bef840c8r			; -0.484869
	DD	0bef8f08er			; -0.48621
	DD	0bef9a02dr			; -0.48755
	DD	0befa4fa5r			; -0.488889
	DD	0befafef7r			; -0.490226
	DD	0befbae22r			; -0.491563
	DD	0befc5d27r			; -0.492898
	DD	0befd0c04r			; -0.494232
	DD	0befdbabbr			; -0.495565
	DD	0befe694ar			; -0.496897
	DD	0beff17b2r			; -0.498228
	DD	0beffc5f3r			; -0.499557
	DD	0bf003a06r			; -0.500885
	DD	0bf0090ffr			; -0.502212
	DD	0bf00e7e4r			; -0.503538
	DD	0bf013eb5r			; -0.504863
	DD	0bf019573r			; -0.506187
	DD	0bf01ec1cr			; -0.507509
	DD	0bf0242b1r			; -0.50883
	DD	0bf029932r			; -0.51015
	DD	0bf02ef9fr			; -0.511469
	DD	0bf0345f8r			; -0.512786
	DD	0bf039c3dr			; -0.514103
	DD	0bf03f26dr			; -0.515418
	DD	0bf044889r			; -0.516732
	DD	0bf049e91r			; -0.518045
	DD	0bf04f484r			; -0.519356
	DD	0bf054a62r			; -0.520666
	DD	0bf05a02cr			; -0.521975
	DD	0bf05f5e2r			; -0.523283
	DD	0bf064b82r			; -0.52459
	DD	0bf06a10er			; -0.525895
	DD	0bf06f686r			; -0.527199
	DD	0bf074be8r			; -0.528502
	DD	0bf07a136r			; -0.529804
	DD	0bf07f66fr			; -0.531104
	DD	0bf084b92r			; -0.532403
	DD	0bf08a0a1r			; -0.533701
	DD	0bf08f59br			; -0.534998
	DD	0bf094a7fr			; -0.536293
	DD	0bf099f4er			; -0.537587
	DD	0bf09f409r			; -0.53888
	DD	0bf0a48adr			; -0.540171
	DD	0bf0a9d3dr			; -0.541462
	DD	0bf0af1b7r			; -0.542751
	DD	0bf0b461cr			; -0.544039
	DD	0bf0b9a6br			; -0.545325
	DD	0bf0beea5r			; -0.54661
	DD	0bf0c42c9r			; -0.547894
	DD	0bf0c96d7r			; -0.549177
	DD	0bf0cead0r			; -0.550458
	DD	0bf0d3eb3r			; -0.551738
	DD	0bf0d9281r			; -0.553017
	DD	0bf0de638r			; -0.554294
	DD	0bf0e39dar			; -0.55557
	DD	0bf0e8d65r			; -0.556845
	DD	0bf0ee0dbr			; -0.558119
	DD	0bf0f343br			; -0.559391
	DD	0bf0f8784r			; -0.560662
	DD	0bf0fdab8r			; -0.561931
	DD	0bf102dd5r			; -0.563199
	DD	0bf1080dcr			; -0.564466
	DD	0bf10d3cdr			; -0.565732
	DD	0bf1126a7r			; -0.566996
	DD	0bf11796br			; -0.568259
	DD	0bf11cc19r			; -0.569521
	DD	0bf121eb0r			; -0.570781
	DD	0bf127130r			; -0.57204
	DD	0bf12c39ar			; -0.573297
	DD	0bf1315eer			; -0.574553
	DD	0bf13682ar			; -0.575808
	DD	0bf13ba50r			; -0.577062
	DD	0bf140c5fr			; -0.578314
	DD	0bf145e58r			; -0.579565
	DD	0bf14b039r			; -0.580814
	DD	0bf150204r			; -0.582062
	DD	0bf1553b7r			; -0.583309
	DD	0bf15a554r			; -0.584554
	DD	0bf15f6d9r			; -0.585798
	DD	0bf164847r			; -0.58704
	DD	0bf16999fr			; -0.588282
	DD	0bf16eader			; -0.589521
	DD	0bf173c07r			; -0.59076
	DD	0bf178d18r			; -0.591997
	DD	0bf17de12r			; -0.593232
	DD	0bf182ef5r			; -0.594467
	DD	0bf187fc0r			; -0.595699
	DD	0bf18d073r			; -0.596931
	DD	0bf19210fr			; -0.598161
	DD	0bf197194r			; -0.599389
	DD	0bf19c200r			; -0.600616
	DD	0bf1a1255r			; -0.601842
	DD	0bf1a6293r			; -0.603067
	DD	0bf1ab2b8r			; -0.60429
	DD	0bf1b02c6r			; -0.605511
	DD	0bf1b52bbr			; -0.606731
	DD	0bf1ba299r			; -0.60795
	DD	0bf1bf25fr			; -0.609167
	DD	0bf1c420cr			; -0.610383
	DD	0bf1c91a2r			; -0.611597
	DD	0bf1ce11fr			; -0.61281
	DD	0bf1d3084r			; -0.614022
	DD	0bf1d7fd1r			; -0.615232
	DD	0bf1dcf06r			; -0.61644
	DD	0bf1e1e22r			; -0.617647
	DD	0bf1e6d26r			; -0.618853
	DD	0bf1ebc12r			; -0.620057
	DD	0bf1f0ae5r			; -0.62126
	DD	0bf1f599fr			; -0.622461
	DD	0bf1fa841r			; -0.623661
	DD	0bf1ff6cbr			; -0.62486
	DD	0bf20453br			; -0.626056
	DD	0bf209393r			; -0.627252
	DD	0bf20e1d2r			; -0.628446
	DD	0bf212ff9r			; -0.629638
	DD	0bf217e06r			; -0.630829
	DD	0bf21cbfbr			; -0.632019
	DD	0bf2219d7r			; -0.633207
	DD	0bf226799r			; -0.634393
	DD	0bf22b543r			; -0.635578
	DD	0bf2302d3r			; -0.636762
	DD	0bf23504br			; -0.637944
	DD	0bf239da9r			; -0.639124
	DD	0bf23eaeer			; -0.640303
	DD	0bf24381ar			; -0.641481
	DD	0bf24852cr			; -0.642657
	DD	0bf24d225r			; -0.643832
	DD	0bf251f04r			; -0.645005
	DD	0bf256bcbr			; -0.646176
	DD	0bf25b877r			; -0.647346
	DD	0bf26050ar			; -0.648514
	DD	0bf265184r			; -0.649681
	DD	0bf269de3r			; -0.650847
	DD	0bf26ea2ar			; -0.652011
	DD	0bf273656r			; -0.653173
	DD	0bf278268r			; -0.654334
	DD	0bf27ce61r			; -0.655493
	DD	0bf281a40r			; -0.656651
	DD	0bf286605r			; -0.657807
	DD	0bf28b1b0r			; -0.658961
	DD	0bf28fd41r			; -0.660114
	DD	0bf2948b8r			; -0.661266
	DD	0bf299415r			; -0.662416
	DD	0bf29df57r			; -0.663564
	DD	0bf2a2a80r			; -0.664711
	DD	0bf2a758er			; -0.665856
	DD	0bf2ac082r			; -0.667
	DD	0bf2b0b5br			; -0.668142
	DD	0bf2b561br			; -0.669283
	DD	0bf2ba0bfr			; -0.670422
	DD	0bf2beb4ar			; -0.671559
	DD	0bf2c35b9r			; -0.672695
	DD	0bf2c800fr			; -0.673829
	DD	0bf2cca49r			; -0.674962
	DD	0bf2d1469r			; -0.676093
	DD	0bf2d5e6fr			; -0.677222
	DD	0bf2da859r			; -0.67835
	DD	0bf2df229r			; -0.679476
	DD	0bf2e3bder			; -0.680601
	DD	0bf2e8578r			; -0.681724
	DD	0bf2ecef7r			; -0.682846
	DD	0bf2f185br			; -0.683965
	DD	0bf2f61a5r			; -0.685084
	DD	0bf2faad3r			; -0.6862
	DD	0bf2ff3e6r			; -0.687315
	DD	0bf303cder			; -0.688429
	DD	0bf3085bbr			; -0.689541
	DD	0bf30ce7cr			; -0.690651
	DD	0bf311722r			; -0.691759
	DD	0bf315fadr			; -0.692866
	DD	0bf31a81dr			; -0.693971
	DD	0bf31f071r			; -0.695075
	DD	0bf3238aar			; -0.696177
	DD	0bf3280c7r			; -0.697277
	DD	0bf32c8c9r			; -0.698376
	DD	0bf3310afr			; -0.699473
	DD	0bf33587ar			; -0.700569
	DD	0bf33a029r			; -0.701663
	DD	0bf33e7bcr			; -0.702755
	DD	0bf342f34r			; -0.703845
	DD	0bf34768fr			; -0.704934
	DD	0bf34bdcfr			; -0.706021
	DD	0bf3504f3r			; -0.707107
	DD	0bf354bfbr			; -0.708191
	DD	0bf3592e7r			; -0.709273
	DD	0bf35d9b8r			; -0.710353
	DD	0bf36206cr			; -0.711432
	DD	0bf366704r			; -0.712509
	DD	0bf36ad7fr			; -0.713585
	DD	0bf36f3dfr			; -0.714659
	DD	0bf373a23r			; -0.715731
	DD	0bf37804ar			; -0.716801
	DD	0bf37c655r			; -0.71787
	DD	0bf380c43r			; -0.718937
	DD	0bf385216r			; -0.720003
	DD	0bf3897cbr			; -0.721066
	DD	0bf38dd65r			; -0.722128
	DD	0bf3922e1r			; -0.723188
	DD	0bf396842r			; -0.724247
	DD	0bf39ad85r			; -0.725304
	DD	0bf39f2acr			; -0.726359
	DD	0bf3a37b7r			; -0.727413
	DD	0bf3a7ca4r			; -0.728464
	DD	0bf3ac175r			; -0.729514
	DD	0bf3b0629r			; -0.730563
	DD	0bf3b4ac1r			; -0.731609
	DD	0bf3b8f3br			; -0.732654
	DD	0bf3bd398r			; -0.733697
	DD	0bf3c17d9r			; -0.734739
	DD	0bf3c5bfcr			; -0.735779
	DD	0bf3ca003r			; -0.736817
	DD	0bf3ce3ecr			; -0.737853
	DD	0bf3d27b8r			; -0.738887
	DD	0bf3d6b67r			; -0.73992
	DD	0bf3daef9r			; -0.740951
	DD	0bf3df26er			; -0.74198
	DD	0bf3e35c5r			; -0.743008
	DD	0bf3e78ffr			; -0.744034
	DD	0bf3ebc1br			; -0.745058
	DD	0bf3eff1br			; -0.74608
	DD	0bf3f41fcr			; -0.747101
	DD	0bf3f84c0r			; -0.748119
	DD	0bf3fc767r			; -0.749136
	DD	0bf4009f0r			; -0.750152
	DD	0bf404c5cr			; -0.751165
	DD	0bf408ea9r			; -0.752177
	DD	0bf40d0dar			; -0.753187
	DD	0bf4112ecr			; -0.754195
	DD	0bf4154e1r			; -0.755201
	DD	0bf4196b7r			; -0.756206
	DD	0bf41d870r			; -0.757209
	DD	0bf421a0br			; -0.75821
	DD	0bf425b89r			; -0.759209
	DD	0bf429ce8r			; -0.760207
	DD	0bf42de29r			; -0.761202
	DD	0bf431f4cr			; -0.762196
	DD	0bf436051r			; -0.763188
	DD	0bf43a138r			; -0.764179
	DD	0bf43e200r			; -0.765167
	DD	0bf4422abr			; -0.766154
	DD	0bf446337r			; -0.767139
	DD	0bf44a3a5r			; -0.768122
	DD	0bf44e3f5r			; -0.769103
	DD	0bf452426r			; -0.770083
	DD	0bf456439r			; -0.771061
	DD	0bf45a42dr			; -0.772036
	DD	0bf45e403r			; -0.77301
	DD	0bf4623bbr			; -0.773983
	DD	0bf466354r			; -0.774953
	DD	0bf46a2cer			; -0.775922
	DD	0bf46e22ar			; -0.776888
	DD	0bf472167r			; -0.777853
	DD	0bf476085r			; -0.778817
	DD	0bf479f84r			; -0.779778
	DD	0bf47de65r			; -0.780737
	DD	0bf481d27r			; -0.781695
	DD	0bf485bcar			; -0.782651
	DD	0bf489a4er			; -0.783605
	DD	0bf48d8b3r			; -0.784557
	DD	0bf4916far			; -0.785507
	DD	0bf495521r			; -0.786455
	DD	0bf499329r			; -0.787402
	DD	0bf49d112r			; -0.788346
	DD	0bf4a0edcr			; -0.789289
	DD	0bf4a4c87r			; -0.79023
	DD	0bf4a8a13r			; -0.791169
	DD	0bf4ac77fr			; -0.792107
	DD	0bf4b04ccr			; -0.793042
	DD	0bf4b41far			; -0.793975
	DD	0bf4b7f09r			; -0.794907
	DD	0bf4bbbf8r			; -0.795837
	DD	0bf4bf8c7r			; -0.796765
	DD	0bf4c3578r			; -0.797691
	DD	0bf4c7208r			; -0.798615
	DD	0bf4cae79r			; -0.799537
	DD	0bf4ceacbr			; -0.800458
	DD	0bf4d26fdr			; -0.801376
	DD	0bf4d6310r			; -0.802293
	DD	0bf4d9f02r			; -0.803208
	DD	0bf4ddad5r			; -0.80412
	DD	0bf4e1689r			; -0.805031
	DD	0bf4e521cr			; -0.80594
	DD	0bf4e8d90r			; -0.806848
	DD	0bf4ec8e4r			; -0.807753
	DD	0bf4f0417r			; -0.808656
	DD	0bf4f3f2br			; -0.809558
	DD	0bf4f7a1fr			; -0.810457
	DD	0bf4fb4f4r			; -0.811355
	DD	0bf4fefa8r			; -0.812251
	DD	0bf502a3br			; -0.813144
	DD	0bf5064afr			; -0.814036
	DD	0bf509f03r			; -0.814926
	DD	0bf50d937r			; -0.815814
	DD	0bf51134ar			; -0.816701
	DD	0bf514d3dr			; -0.817585
	DD	0bf518710r			; -0.818467
	DD	0bf51c0c2r			; -0.819348
	DD	0bf51fa54r			; -0.820226
	DD	0bf5233c6r			; -0.821102
	DD	0bf526d18r			; -0.821977
	DD	0bf52a649r			; -0.82285
	DD	0bf52df59r			; -0.823721
	DD	0bf531849r			; -0.824589
	DD	0bf535118r			; -0.825456
	DD	0bf5389c7r			; -0.826321
	DD	0bf53c255r			; -0.827184
	DD	0bf53fac3r			; -0.828045
	DD	0bf54330fr			; -0.828904
	DD	0bf546b3br			; -0.829761
	DD	0bf54a347r			; -0.830616
	DD	0bf54db31r			; -0.83147
	DD	0bf5512fbr			; -0.832321
	DD	0bf554aa4r			; -0.83317
	DD	0bf55822cr			; -0.834018
	DD	0bf55b993r			; -0.834863
	DD	0bf55f0d9r			; -0.835706
	DD	0bf5627fer			; -0.836548
	DD	0bf565f02r			; -0.837387
	DD	0bf5695e5r			; -0.838225
	DD	0bf56cca7r			; -0.83906
	DD	0bf570348r			; -0.839894
	DD	0bf5739c7r			; -0.840725
	DD	0bf577026r			; -0.841555
	DD	0bf57a663r			; -0.842383
	DD	0bf57dc7fr			; -0.843208
	DD	0bf581279r			; -0.844032
	DD	0bf584853r			; -0.844854
	DD	0bf587e0br			; -0.845673
	DD	0bf58b3a1r			; -0.846491
	DD	0bf58e916r			; -0.847307
	DD	0bf591e6ar			; -0.84812
	DD	0bf59539cr			; -0.848932
	DD	0bf5988adr			; -0.849742
	DD	0bf59bd9cr			; -0.850549
	DD	0bf59f26ar			; -0.851355
	DD	0bf5a2716r			; -0.852159
	DD	0bf5a5ba0r			; -0.852961
	DD	0bf5a9009r			; -0.85376
	DD	0bf5ac450r			; -0.854558
	DD	0bf5af875r			; -0.855354
	DD	0bf5b2c79r			; -0.856147
	DD	0bf5b605ar			; -0.856939
	DD	0bf5b941ar			; -0.857729
	DD	0bf5bc7b8r			; -0.858516
	DD	0bf5bfb34r			; -0.859302
	DD	0bf5c2e8er			; -0.860085
	DD	0bf5c61c7r			; -0.860867
	DD	0bf5c94ddr			; -0.861646
	DD	0bf5cc7d1r			; -0.862424
	DD	0bf5cfaa3r			; -0.863199
	DD	0bf5d2d53r			; -0.863973
	DD	0bf5d5fe1r			; -0.864744
	DD	0bf5d924dr			; -0.865514
	DD	0bf5dc497r			; -0.866281
	DD	0bf5df6ber			; -0.867046
	DD	0bf5e28c3r			; -0.867809
	DD	0bf5e5aa6r			; -0.868571
	DD	0bf5e8c67r			; -0.86933
	DD	0bf5ebe05r			; -0.870087
	DD	0bf5eef81r			; -0.870842
	DD	0bf5f20dbr			; -0.871595
	DD	0bf5f5212r			; -0.872346
	DD	0bf5f8327r			; -0.873095
	DD	0bf5fb419r			; -0.873842
	DD	0bf5fe4e9r			; -0.874587
	DD	0bf601596r			; -0.875329
	DD	0bf604621r			; -0.87607
	DD	0bf607689r			; -0.876809
	DD	0bf60a6cfr			; -0.877545
	DD	0bf60d6f2r			; -0.87828
	DD	0bf6106f2r			; -0.879012
	DD	0bf6136d0r			; -0.879743
	DD	0bf61668ar			; -0.880471
	DD	0bf619622r			; -0.881197
	DD	0bf61c598r			; -0.881921
	DD	0bf61f4ear			; -0.882643
	DD	0bf62241ar			; -0.883363
	DD	0bf625326r			; -0.884081
	DD	0bf628210r			; -0.884797
	DD	0bf62b0d7r			; -0.885511
	DD	0bf62df7br			; -0.886223
	DD	0bf630dfcr			; -0.886932
	DD	0bf633c5ar			; -0.88764
	DD	0bf636a95r			; -0.888345
	DD	0bf6398acr			; -0.889048
	DD	0bf63c6a1r			; -0.88975
	DD	0bf63f473r			; -0.890449
	DD	0bf642221r			; -0.891146
	DD	0bf644facr			; -0.891841
	DD	0bf647d14r			; -0.892534
	DD	0bf64aa59r			; -0.893224
	DD	0bf64d77br			; -0.893913
	DD	0bf650479r			; -0.894599
	DD	0bf653154r			; -0.895284
	DD	0bf655e0br			; -0.895966
	DD	0bf658aa0r			; -0.896646
	DD	0bf65b710r			; -0.897325
	DD	0bf65e35er			; -0.898001
	DD	0bf660f88r			; -0.898674
	DD	0bf663b8er			; -0.899346
	DD	0bf666771r			; -0.900016
	DD	0bf669330r			; -0.900683
	DD	0bf66beccr			; -0.901349
	DD	0bf66ea45r			; -0.902012
	DD	0bf671599r			; -0.902673
	DD	0bf6740car			; -0.903332
	DD	0bf676bd8r			; -0.903989
	DD	0bf6796c1r			; -0.904644
	DD	0bf67c187r			; -0.905297
	DD	0bf67ec29r			; -0.905947
	DD	0bf6816a8r			; -0.906596
	DD	0bf684103r			; -0.907242
	DD	0bf686b39r			; -0.907886
	DD	0bf68954cr			; -0.908528
	DD	0bf68bf3cr			; -0.909168
	DD	0bf68e907r			; -0.909806
	DD	0bf6912aer			; -0.910441
	DD	0bf693c32r			; -0.911075
	DD	0bf696591r			; -0.911706
	DD	0bf698eccr			; -0.912335
	DD	0bf69b7e4r			; -0.912962
	DD	0bf69e0d7r			; -0.913587
	DD	0bf6a09a7r			; -0.91421
	DD	0bf6a3252r			; -0.91483
	DD	0bf6a5ad9r			; -0.915449
	DD	0bf6a833cr			; -0.916065
	DD	0bf6aab7br			; -0.916679
	DD	0bf6ad395r			; -0.917291
	DD	0bf6afb8cr			; -0.917901
	DD	0bf6b235er			; -0.918508
	DD	0bf6b4b0cr			; -0.919114
	DD	0bf6b7295r			; -0.919717
	DD	0bf6b99fbr			; -0.920318
	DD	0bf6bc13br			; -0.920917
	DD	0bf6be858r			; -0.921514
	DD	0bf6c0f50r			; -0.922109
	DD	0bf6c3624r			; -0.922701
	DD	0bf6c5cd4r			; -0.923291
	DD	0bf6c835er			; -0.92388
	DD	0bf6ca9c5r			; -0.924465
	DD	0bf6cd007r			; -0.925049
	DD	0bf6cf624r			; -0.925631
	DD	0bf6d1c1dr			; -0.92621
	DD	0bf6d41f2r			; -0.926787
	DD	0bf6d67a1r			; -0.927363
	DD	0bf6d8d2dr			; -0.927935
	DD	0bf6db293r			; -0.928506
	DD	0bf6dd7d5r			; -0.929075
	DD	0bf6dfcf2r			; -0.929641
	DD	0bf6e21ebr			; -0.930205
	DD	0bf6e46ber			; -0.930767
	DD	0bf6e6b6dr			; -0.931327
	DD	0bf6e8ff8r			; -0.931884
	DD	0bf6eb45dr			; -0.93244
	DD	0bf6ed89er			; -0.932993
	DD	0bf6efcbar			; -0.933544
	DD	0bf6f20b0r			; -0.934093
	DD	0bf6f4483r			; -0.934639
	DD	0bf6f6830r			; -0.935184
	DD	0bf6f8bb8r			; -0.935726
	DD	0bf6faf1br			; -0.936266
	DD	0bf6fd25ar			; -0.936803
	DD	0bf6ff573r			; -0.937339
	DD	0bf701867r			; -0.937872
	DD	0bf703b37r			; -0.938404
	DD	0bf705de1r			; -0.938932
	DD	0bf708066r			; -0.939459
	DD	0bf70a2c6r			; -0.939984
	DD	0bf70c501r			; -0.940506
	DD	0bf70e717r			; -0.941026
	DD	0bf710908r			; -0.941544
	DD	0bf712ad4r			; -0.94206
	DD	0bf714c7ar			; -0.942573
	DD	0bf716dfbr			; -0.943084
	DD	0bf718f57r			; -0.943593
	DD	0bf71b08er			; -0.9441
	DD	0bf71d19fr			; -0.944605
	DD	0bf71f28cr			; -0.945107
	DD	0bf721352r			; -0.945607
	DD	0bf7233f4r			; -0.946105
	DD	0bf725470r			; -0.946601
	DD	0bf7274c7r			; -0.947094
	DD	0bf7294f8r			; -0.947586
	DD	0bf72b504r			; -0.948075
	DD	0bf72d4ebr			; -0.948561
	DD	0bf72f4acr			; -0.949046
	DD	0bf731447r			; -0.949528
	DD	0bf7333ber			; -0.950008
	DD	0bf73530er			; -0.950486
	DD	0bf737239r			; -0.950962
	DD	0bf73913fr			; -0.951435
	DD	0bf73b01fr			; -0.951906
	DD	0bf73ced9r			; -0.952375
	DD	0bf73ed6er			; -0.952842
	DD	0bf740bddr			; -0.953306
	DD	0bf742a27r			; -0.953768
	DD	0bf74484br			; -0.954228
	DD	0bf746649r			; -0.954686
	DD	0bf748422r			; -0.955141
	DD	0bf74a1d5r			; -0.955594
	DD	0bf74bf62r			; -0.956045
	DD	0bf74dcc9r			; -0.956494
	DD	0bf74fa0br			; -0.95694
	DD	0bf751727r			; -0.957385
	DD	0bf75341dr			; -0.957826
	DD	0bf7550edr			; -0.958266
	DD	0bf756d97r			; -0.958703
	DD	0bf758a1cr			; -0.959139
	DD	0bf75a67br			; -0.959572
	DD	0bf75c2b3r			; -0.960002
	DD	0bf75dec6r			; -0.960431
	DD	0bf75fab3r			; -0.960857
	DD	0bf76167ar			; -0.96128
	DD	0bf76321br			; -0.961702
	DD	0bf764d97r			; -0.962121
	DD	0bf7668ecr			; -0.962538
	DD	0bf76841br			; -0.962953
	DD	0bf769f24r			; -0.963366
	DD	0bf76ba07r			; -0.963776
	DD	0bf76d4c4r			; -0.964184
	DD	0bf76ef5br			; -0.96459
	DD	0bf7709ccr			; -0.964993
	DD	0bf772417r			; -0.965394
	DD	0bf773e3cr			; -0.965793
	DD	0bf77583ar			; -0.96619
	DD	0bf777213r			; -0.966584
	DD	0bf778bc5r			; -0.966976
	DD	0bf77a551r			; -0.967366
	DD	0bf77beb7r			; -0.967754
	DD	0bf77d7f7r			; -0.968139
	DD	0bf77f110r			; -0.968522
	DD	0bf780a04r			; -0.968903
	DD	0bf7822d1r			; -0.969281
	DD	0bf783b77r			; -0.969657
	DD	0bf7853f8r			; -0.970031
	DD	0bf786c52r			; -0.970403
	DD	0bf788486r			; -0.970772
	DD	0bf789c93r			; -0.971139
	DD	0bf78b47br			; -0.971504
	DD	0bf78cc3br			; -0.971866
	DD	0bf78e3d6r			; -0.972227
	DD	0bf78fb4ar			; -0.972584
	DD	0bf791298r			; -0.97294
	DD	0bf7929bfr			; -0.973293
	DD	0bf7940c0r			; -0.973644
	DD	0bf79579ar			; -0.973993
	DD	0bf796e4er			; -0.974339
	DD	0bf7984dcr			; -0.974684
	DD	0bf799b43r			; -0.975025
	DD	0bf79b183r			; -0.975365
	DD	0bf79c79dr			; -0.975702
	DD	0bf79dd91r			; -0.976037
	DD	0bf79f35er			; -0.97637
	DD	0bf7a0904r			; -0.9767
	DD	0bf7a1e84r			; -0.977028
	DD	0bf7a33ddr			; -0.977354
	DD	0bf7a4910r			; -0.977677
	DD	0bf7a5e1cr			; -0.977998
	DD	0bf7a7302r			; -0.978317
	DD	0bf7a87c1r			; -0.978634
	DD	0bf7a9c59r			; -0.978948
	DD	0bf7ab0cbr			; -0.97926
	DD	0bf7ac516r			; -0.97957
	DD	0bf7ad93ar			; -0.979877
	DD	0bf7aed37r			; -0.980182
	DD	0bf7b010er			; -0.980485
	DD	0bf7b14ber			; -0.980785
	DD	0bf7b2848r			; -0.981083
	DD	0bf7b3babr			; -0.981379
	DD	0bf7b4ee7r			; -0.981673
	DD	0bf7b61fcr			; -0.981964
	DD	0bf7b74ear			; -0.982253
	DD	0bf7b87b2r			; -0.982539
	DD	0bf7b9a53r			; -0.982824
	DD	0bf7baccdr			; -0.983105
	DD	0bf7bbf20r			; -0.983385
	DD	0bf7bd14dr			; -0.983662
	DD	0bf7be353r			; -0.983937
	DD	0bf7bf531r			; -0.98421
	DD	0bf7c06e9r			; -0.98448
	DD	0bf7c187ar			; -0.984748
	DD	0bf7c29e5r			; -0.985014
	DD	0bf7c3b28r			; -0.985278
	DD	0bf7c4c44r			; -0.985539
	DD	0bf7c5d3ar			; -0.985798
	DD	0bf7c6e08r			; -0.986054
	DD	0bf7c7eb0r			; -0.986308
	DD	0bf7c8f31r			; -0.98656
	DD	0bf7c9f8ar			; -0.986809
	DD	0bf7cafbdr			; -0.987057
	DD	0bf7cbfc9r			; -0.987301
	DD	0bf7ccfaer			; -0.987544
	DD	0bf7cdf6cr			; -0.987784
	DD	0bf7cef03r			; -0.988022
	DD	0bf7cfe73r			; -0.988258
	DD	0bf7d0dbcr			; -0.988491
	DD	0bf7d1cddr			; -0.988722
	DD	0bf7d2bd8r			; -0.98895
	DD	0bf7d3aacr			; -0.989177
	DD	0bf7d4959r			; -0.9894
	DD	0bf7d57der			; -0.989622
	DD	0bf7d663dr			; -0.989841
	DD	0bf7d7474r			; -0.990058
	DD	0bf7d8285r			; -0.990273
	DD	0bf7d906er			; -0.990485
	DD	0bf7d9e30r			; -0.990695
	DD	0bf7dabccr			; -0.990903
	DD	0bf7db940r			; -0.991108
	DD	0bf7dc68cr			; -0.991311
	DD	0bf7dd3b2r			; -0.991511
	DD	0bf7de0b1r			; -0.99171
	DD	0bf7ded88r			; -0.991906
	DD	0bf7dfa38r			; -0.992099
	DD	0bf7e06c2r			; -0.992291
	DD	0bf7e1324r			; -0.99248
	DD	0bf7e1f5er			; -0.992666
	DD	0bf7e2b72r			; -0.99285
	DD	0bf7e375er			; -0.993032
	DD	0bf7e4323r			; -0.993212
	DD	0bf7e4ec1r			; -0.993389
	DD	0bf7e5a38r			; -0.993564
	DD	0bf7e6588r			; -0.993737
	DD	0bf7e70b0r			; -0.993907
	DD	0bf7e7bb1r			; -0.994075
	DD	0bf7e868br			; -0.99424
	DD	0bf7e913dr			; -0.994404
	DD	0bf7e9bc9r			; -0.994565
	DD	0bf7ea62dr			; -0.994723
	DD	0bf7eb069r			; -0.994879
	DD	0bf7eba7fr			; -0.995033
	DD	0bf7ec46dr			; -0.995185
	DD	0bf7ece34r			; -0.995334
	DD	0bf7ed7d4r			; -0.995481
	DD	0bf7ee14cr			; -0.995625
	DD	0bf7eea9dr			; -0.995767
	DD	0bf7ef3c7r			; -0.995907
	DD	0bf7efcc9r			; -0.996045
	DD	0bf7f05a4r			; -0.99618
	DD	0bf7f0e58r			; -0.996313
	DD	0bf7f16e4r			; -0.996443
	DD	0bf7f1f49r			; -0.996571
	DD	0bf7f2787r			; -0.996697
	DD	0bf7f2f9dr			; -0.99682
	DD	0bf7f378cr			; -0.996941
	DD	0bf7f3f54r			; -0.99706
	DD	0bf7f46f4r			; -0.997176
	DD	0bf7f4e6dr			; -0.99729
	DD	0bf7f55bfr			; -0.997402
	DD	0bf7f5ce9r			; -0.997511
	DD	0bf7f63ecr			; -0.997618
	DD	0bf7f6ac7r			; -0.997723
	DD	0bf7f717br			; -0.997825
	DD	0bf7f7808r			; -0.997925
	DD	0bf7f7e6dr			; -0.998023
	DD	0bf7f84abr			; -0.998118
	DD	0bf7f8ac2r			; -0.998211
	DD	0bf7f90b1r			; -0.998302
	DD	0bf7f9678r			; -0.99839
	DD	0bf7f9c18r			; -0.998476
	DD	0bf7fa191r			; -0.998559
	DD	0bf7fa6e3r			; -0.99864
	DD	0bf7fac0dr			; -0.998719
	DD	0bf7fb10fr			; -0.998795
	DD	0bf7fb5ear			; -0.99887
	DD	0bf7fba9er			; -0.998941
	DD	0bf7fbf2ar			; -0.999011
	DD	0bf7fc38fr			; -0.999078
	DD	0bf7fc7ccr			; -0.999142
	DD	0bf7fcbe2r			; -0.999205
	DD	0bf7fcfd1r			; -0.999265
	DD	0bf7fd397r			; -0.999322
	DD	0bf7fd737r			; -0.999378
	DD	0bf7fdaafr			; -0.999431
	DD	0bf7fde00r			; -0.999481
	DD	0bf7fe129r			; -0.999529
	DD	0bf7fe42br			; -0.999575
	DD	0bf7fe705r			; -0.999619
	DD	0bf7fe9b8r			; -0.99966
	DD	0bf7fec43r			; -0.999699
	DD	0bf7feea7r			; -0.999735
	DD	0bf7ff0e3r			; -0.999769
	DD	0bf7ff2f8r			; -0.999801
	DD	0bf7ff4e6r			; -0.999831
	DD	0bf7ff6acr			; -0.999858
	DD	0bf7ff84ar			; -0.999882
	DD	0bf7ff9c1r			; -0.999905
	DD	0bf7ffb11r			; -0.999925
	DD	0bf7ffc39r			; -0.999942
	DD	0bf7ffd39r			; -0.999958
	DD	0bf7ffe13r			; -0.999971
	DD	0bf7ffec4r			; -0.999981
	DD	0bf7fff4er			; -0.999989
	DD	0bf7fffb1r			; -0.999995
	DD	0bf7fffecr			; -0.999999
	DD	0bf800000r			; -1
	DD	0bf7fffecr			; -0.999999
	DD	0bf7fffb1r			; -0.999995
	DD	0bf7fff4er			; -0.999989
	DD	0bf7ffec4r			; -0.999981
	DD	0bf7ffe13r			; -0.999971
	DD	0bf7ffd39r			; -0.999958
	DD	0bf7ffc39r			; -0.999942
	DD	0bf7ffb11r			; -0.999925
	DD	0bf7ff9c1r			; -0.999905
	DD	0bf7ff84ar			; -0.999882
	DD	0bf7ff6acr			; -0.999858
	DD	0bf7ff4e6r			; -0.999831
	DD	0bf7ff2f8r			; -0.999801
	DD	0bf7ff0e3r			; -0.999769
	DD	0bf7feea7r			; -0.999735
	DD	0bf7fec43r			; -0.999699
	DD	0bf7fe9b8r			; -0.99966
	DD	0bf7fe705r			; -0.999619
	DD	0bf7fe42br			; -0.999575
	DD	0bf7fe129r			; -0.999529
	DD	0bf7fde00r			; -0.999481
	DD	0bf7fdaafr			; -0.999431
	DD	0bf7fd737r			; -0.999378
	DD	0bf7fd397r			; -0.999322
	DD	0bf7fcfd1r			; -0.999265
	DD	0bf7fcbe2r			; -0.999205
	DD	0bf7fc7ccr			; -0.999142
	DD	0bf7fc38fr			; -0.999078
	DD	0bf7fbf2ar			; -0.999011
	DD	0bf7fba9er			; -0.998941
	DD	0bf7fb5ear			; -0.99887
	DD	0bf7fb10fr			; -0.998795
	DD	0bf7fac0dr			; -0.998719
	DD	0bf7fa6e3r			; -0.99864
	DD	0bf7fa191r			; -0.998559
	DD	0bf7f9c18r			; -0.998476
	DD	0bf7f9678r			; -0.99839
	DD	0bf7f90b1r			; -0.998302
	DD	0bf7f8ac2r			; -0.998211
	DD	0bf7f84abr			; -0.998118
	DD	0bf7f7e6dr			; -0.998023
	DD	0bf7f7808r			; -0.997925
	DD	0bf7f717br			; -0.997825
	DD	0bf7f6ac7r			; -0.997723
	DD	0bf7f63ecr			; -0.997618
	DD	0bf7f5ce9r			; -0.997511
	DD	0bf7f55bfr			; -0.997402
	DD	0bf7f4e6dr			; -0.99729
	DD	0bf7f46f4r			; -0.997176
	DD	0bf7f3f54r			; -0.99706
	DD	0bf7f378cr			; -0.996941
	DD	0bf7f2f9dr			; -0.99682
	DD	0bf7f2787r			; -0.996697
	DD	0bf7f1f49r			; -0.996571
	DD	0bf7f16e4r			; -0.996443
	DD	0bf7f0e58r			; -0.996313
	DD	0bf7f05a4r			; -0.99618
	DD	0bf7efcc9r			; -0.996045
	DD	0bf7ef3c7r			; -0.995907
	DD	0bf7eea9dr			; -0.995767
	DD	0bf7ee14cr			; -0.995625
	DD	0bf7ed7d4r			; -0.995481
	DD	0bf7ece34r			; -0.995334
	DD	0bf7ec46dr			; -0.995185
	DD	0bf7eba7fr			; -0.995033
	DD	0bf7eb069r			; -0.994879
	DD	0bf7ea62dr			; -0.994723
	DD	0bf7e9bc9r			; -0.994565
	DD	0bf7e913dr			; -0.994404
	DD	0bf7e868br			; -0.99424
	DD	0bf7e7bb1r			; -0.994075
	DD	0bf7e70b0r			; -0.993907
	DD	0bf7e6588r			; -0.993737
	DD	0bf7e5a38r			; -0.993564
	DD	0bf7e4ec1r			; -0.993389
	DD	0bf7e4323r			; -0.993212
	DD	0bf7e375er			; -0.993032
	DD	0bf7e2b72r			; -0.99285
	DD	0bf7e1f5er			; -0.992666
	DD	0bf7e1324r			; -0.99248
	DD	0bf7e06c2r			; -0.992291
	DD	0bf7dfa38r			; -0.992099
	DD	0bf7ded88r			; -0.991906
	DD	0bf7de0b1r			; -0.99171
	DD	0bf7dd3b2r			; -0.991511
	DD	0bf7dc68cr			; -0.991311
	DD	0bf7db940r			; -0.991108
	DD	0bf7dabccr			; -0.990903
	DD	0bf7d9e30r			; -0.990695
	DD	0bf7d906er			; -0.990485
	DD	0bf7d8285r			; -0.990273
	DD	0bf7d7474r			; -0.990058
	DD	0bf7d663dr			; -0.989841
	DD	0bf7d57der			; -0.989622
	DD	0bf7d4959r			; -0.9894
	DD	0bf7d3aacr			; -0.989177
	DD	0bf7d2bd8r			; -0.98895
	DD	0bf7d1cddr			; -0.988722
	DD	0bf7d0dbcr			; -0.988491
	DD	0bf7cfe73r			; -0.988258
	DD	0bf7cef03r			; -0.988022
	DD	0bf7cdf6cr			; -0.987784
	DD	0bf7ccfaer			; -0.987544
	DD	0bf7cbfc9r			; -0.987301
	DD	0bf7cafbdr			; -0.987057
	DD	0bf7c9f8ar			; -0.986809
	DD	0bf7c8f31r			; -0.98656
	DD	0bf7c7eb0r			; -0.986308
	DD	0bf7c6e08r			; -0.986054
	DD	0bf7c5d3ar			; -0.985798
	DD	0bf7c4c44r			; -0.985539
	DD	0bf7c3b28r			; -0.985278
	DD	0bf7c29e5r			; -0.985014
	DD	0bf7c187ar			; -0.984748
	DD	0bf7c06e9r			; -0.98448
	DD	0bf7bf531r			; -0.98421
	DD	0bf7be353r			; -0.983937
	DD	0bf7bd14dr			; -0.983662
	DD	0bf7bbf20r			; -0.983385
	DD	0bf7baccdr			; -0.983105
	DD	0bf7b9a53r			; -0.982824
	DD	0bf7b87b2r			; -0.982539
	DD	0bf7b74ear			; -0.982253
	DD	0bf7b61fcr			; -0.981964
	DD	0bf7b4ee7r			; -0.981673
	DD	0bf7b3babr			; -0.981379
	DD	0bf7b2848r			; -0.981083
	DD	0bf7b14ber			; -0.980785
	DD	0bf7b010er			; -0.980485
	DD	0bf7aed37r			; -0.980182
	DD	0bf7ad93ar			; -0.979877
	DD	0bf7ac516r			; -0.97957
	DD	0bf7ab0cbr			; -0.97926
	DD	0bf7a9c59r			; -0.978948
	DD	0bf7a87c1r			; -0.978634
	DD	0bf7a7302r			; -0.978317
	DD	0bf7a5e1cr			; -0.977998
	DD	0bf7a4910r			; -0.977677
	DD	0bf7a33ddr			; -0.977354
	DD	0bf7a1e84r			; -0.977028
	DD	0bf7a0904r			; -0.9767
	DD	0bf79f35er			; -0.97637
	DD	0bf79dd91r			; -0.976037
	DD	0bf79c79dr			; -0.975702
	DD	0bf79b183r			; -0.975365
	DD	0bf799b43r			; -0.975025
	DD	0bf7984dcr			; -0.974684
	DD	0bf796e4er			; -0.974339
	DD	0bf79579ar			; -0.973993
	DD	0bf7940c0r			; -0.973644
	DD	0bf7929bfr			; -0.973293
	DD	0bf791298r			; -0.97294
	DD	0bf78fb4ar			; -0.972584
	DD	0bf78e3d6r			; -0.972227
	DD	0bf78cc3br			; -0.971866
	DD	0bf78b47br			; -0.971504
	DD	0bf789c93r			; -0.971139
	DD	0bf788486r			; -0.970772
	DD	0bf786c52r			; -0.970403
	DD	0bf7853f8r			; -0.970031
	DD	0bf783b77r			; -0.969657
	DD	0bf7822d1r			; -0.969281
	DD	0bf780a04r			; -0.968903
	DD	0bf77f110r			; -0.968522
	DD	0bf77d7f7r			; -0.968139
	DD	0bf77beb7r			; -0.967754
	DD	0bf77a551r			; -0.967366
	DD	0bf778bc5r			; -0.966976
	DD	0bf777213r			; -0.966584
	DD	0bf77583ar			; -0.96619
	DD	0bf773e3cr			; -0.965793
	DD	0bf772417r			; -0.965394
	DD	0bf7709ccr			; -0.964993
	DD	0bf76ef5br			; -0.96459
	DD	0bf76d4c4r			; -0.964184
	DD	0bf76ba07r			; -0.963776
	DD	0bf769f24r			; -0.963366
	DD	0bf76841br			; -0.962953
	DD	0bf7668ecr			; -0.962538
	DD	0bf764d97r			; -0.962121
	DD	0bf76321br			; -0.961702
	DD	0bf76167ar			; -0.96128
	DD	0bf75fab3r			; -0.960857
	DD	0bf75dec6r			; -0.960431
	DD	0bf75c2b3r			; -0.960002
	DD	0bf75a67br			; -0.959572
	DD	0bf758a1cr			; -0.959139
	DD	0bf756d97r			; -0.958703
	DD	0bf7550edr			; -0.958266
	DD	0bf75341dr			; -0.957826
	DD	0bf751727r			; -0.957385
	DD	0bf74fa0br			; -0.95694
	DD	0bf74dcc9r			; -0.956494
	DD	0bf74bf62r			; -0.956045
	DD	0bf74a1d5r			; -0.955594
	DD	0bf748422r			; -0.955141
	DD	0bf746649r			; -0.954686
	DD	0bf74484br			; -0.954228
	DD	0bf742a27r			; -0.953768
	DD	0bf740bddr			; -0.953306
	DD	0bf73ed6er			; -0.952842
	DD	0bf73ced9r			; -0.952375
	DD	0bf73b01fr			; -0.951906
	DD	0bf73913fr			; -0.951435
	DD	0bf737239r			; -0.950962
	DD	0bf73530er			; -0.950486
	DD	0bf7333ber			; -0.950008
	DD	0bf731447r			; -0.949528
	DD	0bf72f4acr			; -0.949046
	DD	0bf72d4ebr			; -0.948561
	DD	0bf72b504r			; -0.948075
	DD	0bf7294f8r			; -0.947586
	DD	0bf7274c7r			; -0.947094
	DD	0bf725470r			; -0.946601
	DD	0bf7233f4r			; -0.946105
	DD	0bf721352r			; -0.945607
	DD	0bf71f28cr			; -0.945107
	DD	0bf71d19fr			; -0.944605
	DD	0bf71b08er			; -0.9441
	DD	0bf718f57r			; -0.943593
	DD	0bf716dfbr			; -0.943084
	DD	0bf714c7ar			; -0.942573
	DD	0bf712ad4r			; -0.94206
	DD	0bf710908r			; -0.941544
	DD	0bf70e717r			; -0.941026
	DD	0bf70c501r			; -0.940506
	DD	0bf70a2c6r			; -0.939984
	DD	0bf708066r			; -0.939459
	DD	0bf705de1r			; -0.938932
	DD	0bf703b37r			; -0.938404
	DD	0bf701867r			; -0.937872
	DD	0bf6ff573r			; -0.937339
	DD	0bf6fd25ar			; -0.936803
	DD	0bf6faf1br			; -0.936266
	DD	0bf6f8bb8r			; -0.935726
	DD	0bf6f6830r			; -0.935184
	DD	0bf6f4483r			; -0.934639
	DD	0bf6f20b0r			; -0.934093
	DD	0bf6efcbar			; -0.933544
	DD	0bf6ed89er			; -0.932993
	DD	0bf6eb45dr			; -0.93244
	DD	0bf6e8ff8r			; -0.931884
	DD	0bf6e6b6dr			; -0.931327
	DD	0bf6e46ber			; -0.930767
	DD	0bf6e21ebr			; -0.930205
	DD	0bf6dfcf2r			; -0.929641
	DD	0bf6dd7d5r			; -0.929075
	DD	0bf6db293r			; -0.928506
	DD	0bf6d8d2dr			; -0.927935
	DD	0bf6d67a1r			; -0.927363
	DD	0bf6d41f2r			; -0.926787
	DD	0bf6d1c1dr			; -0.92621
	DD	0bf6cf624r			; -0.925631
	DD	0bf6cd007r			; -0.925049
	DD	0bf6ca9c5r			; -0.924465
	DD	0bf6c835er			; -0.92388
	DD	0bf6c5cd4r			; -0.923291
	DD	0bf6c3624r			; -0.922701
	DD	0bf6c0f50r			; -0.922109
	DD	0bf6be858r			; -0.921514
	DD	0bf6bc13br			; -0.920917
	DD	0bf6b99fbr			; -0.920318
	DD	0bf6b7295r			; -0.919717
	DD	0bf6b4b0cr			; -0.919114
	DD	0bf6b235er			; -0.918508
	DD	0bf6afb8cr			; -0.917901
	DD	0bf6ad395r			; -0.917291
	DD	0bf6aab7br			; -0.916679
	DD	0bf6a833cr			; -0.916065
	DD	0bf6a5ad9r			; -0.915449
	DD	0bf6a3252r			; -0.91483
	DD	0bf6a09a7r			; -0.91421
	DD	0bf69e0d7r			; -0.913587
	DD	0bf69b7e4r			; -0.912962
	DD	0bf698eccr			; -0.912335
	DD	0bf696591r			; -0.911706
	DD	0bf693c32r			; -0.911075
	DD	0bf6912aer			; -0.910441
	DD	0bf68e907r			; -0.909806
	DD	0bf68bf3cr			; -0.909168
	DD	0bf68954cr			; -0.908528
	DD	0bf686b39r			; -0.907886
	DD	0bf684103r			; -0.907242
	DD	0bf6816a8r			; -0.906596
	DD	0bf67ec29r			; -0.905947
	DD	0bf67c187r			; -0.905297
	DD	0bf6796c1r			; -0.904644
	DD	0bf676bd8r			; -0.903989
	DD	0bf6740car			; -0.903332
	DD	0bf671599r			; -0.902673
	DD	0bf66ea45r			; -0.902012
	DD	0bf66beccr			; -0.901349
	DD	0bf669330r			; -0.900683
	DD	0bf666771r			; -0.900016
	DD	0bf663b8er			; -0.899346
	DD	0bf660f88r			; -0.898674
	DD	0bf65e35er			; -0.898001
	DD	0bf65b710r			; -0.897325
	DD	0bf658aa0r			; -0.896646
	DD	0bf655e0br			; -0.895966
	DD	0bf653154r			; -0.895284
	DD	0bf650479r			; -0.894599
	DD	0bf64d77br			; -0.893913
	DD	0bf64aa59r			; -0.893224
	DD	0bf647d14r			; -0.892534
	DD	0bf644facr			; -0.891841
	DD	0bf642221r			; -0.891146
	DD	0bf63f473r			; -0.890449
	DD	0bf63c6a1r			; -0.88975
	DD	0bf6398acr			; -0.889048
	DD	0bf636a95r			; -0.888345
	DD	0bf633c5ar			; -0.88764
	DD	0bf630dfcr			; -0.886932
	DD	0bf62df7br			; -0.886223
	DD	0bf62b0d7r			; -0.885511
	DD	0bf628210r			; -0.884797
	DD	0bf625326r			; -0.884081
	DD	0bf62241ar			; -0.883363
	DD	0bf61f4ear			; -0.882643
	DD	0bf61c598r			; -0.881921
	DD	0bf619622r			; -0.881197
	DD	0bf61668ar			; -0.880471
	DD	0bf6136d0r			; -0.879743
	DD	0bf6106f2r			; -0.879012
	DD	0bf60d6f2r			; -0.87828
	DD	0bf60a6cfr			; -0.877545
	DD	0bf607689r			; -0.876809
	DD	0bf604621r			; -0.87607
	DD	0bf601596r			; -0.875329
	DD	0bf5fe4e9r			; -0.874587
	DD	0bf5fb419r			; -0.873842
	DD	0bf5f8327r			; -0.873095
	DD	0bf5f5212r			; -0.872346
	DD	0bf5f20dbr			; -0.871595
	DD	0bf5eef81r			; -0.870842
	DD	0bf5ebe05r			; -0.870087
	DD	0bf5e8c67r			; -0.86933
	DD	0bf5e5aa6r			; -0.868571
	DD	0bf5e28c3r			; -0.867809
	DD	0bf5df6ber			; -0.867046
	DD	0bf5dc497r			; -0.866281
	DD	0bf5d924dr			; -0.865514
	DD	0bf5d5fe1r			; -0.864744
	DD	0bf5d2d53r			; -0.863973
	DD	0bf5cfaa3r			; -0.863199
	DD	0bf5cc7d1r			; -0.862424
	DD	0bf5c94ddr			; -0.861646
	DD	0bf5c61c7r			; -0.860867
	DD	0bf5c2e8er			; -0.860085
	DD	0bf5bfb34r			; -0.859302
	DD	0bf5bc7b8r			; -0.858516
	DD	0bf5b941ar			; -0.857729
	DD	0bf5b605ar			; -0.856939
	DD	0bf5b2c79r			; -0.856147
	DD	0bf5af875r			; -0.855354
	DD	0bf5ac450r			; -0.854558
	DD	0bf5a9009r			; -0.85376
	DD	0bf5a5ba0r			; -0.852961
	DD	0bf5a2716r			; -0.852159
	DD	0bf59f26ar			; -0.851355
	DD	0bf59bd9cr			; -0.850549
	DD	0bf5988adr			; -0.849742
	DD	0bf59539cr			; -0.848932
	DD	0bf591e6ar			; -0.84812
	DD	0bf58e916r			; -0.847307
	DD	0bf58b3a1r			; -0.846491
	DD	0bf587e0br			; -0.845673
	DD	0bf584853r			; -0.844854
	DD	0bf581279r			; -0.844032
	DD	0bf57dc7fr			; -0.843208
	DD	0bf57a663r			; -0.842383
	DD	0bf577026r			; -0.841555
	DD	0bf5739c7r			; -0.840725
	DD	0bf570348r			; -0.839894
	DD	0bf56cca7r			; -0.83906
	DD	0bf5695e5r			; -0.838225
	DD	0bf565f02r			; -0.837387
	DD	0bf5627fer			; -0.836548
	DD	0bf55f0d9r			; -0.835706
	DD	0bf55b993r			; -0.834863
	DD	0bf55822cr			; -0.834018
	DD	0bf554aa4r			; -0.83317
	DD	0bf5512fbr			; -0.832321
	DD	0bf54db31r			; -0.83147
	DD	0bf54a347r			; -0.830616
	DD	0bf546b3br			; -0.829761
	DD	0bf54330fr			; -0.828904
	DD	0bf53fac3r			; -0.828045
	DD	0bf53c255r			; -0.827184
	DD	0bf5389c7r			; -0.826321
	DD	0bf535118r			; -0.825456
	DD	0bf531849r			; -0.824589
	DD	0bf52df59r			; -0.823721
	DD	0bf52a649r			; -0.82285
	DD	0bf526d18r			; -0.821977
	DD	0bf5233c6r			; -0.821102
	DD	0bf51fa54r			; -0.820226
	DD	0bf51c0c2r			; -0.819348
	DD	0bf518710r			; -0.818467
	DD	0bf514d3dr			; -0.817585
	DD	0bf51134ar			; -0.816701
	DD	0bf50d937r			; -0.815814
	DD	0bf509f03r			; -0.814926
	DD	0bf5064afr			; -0.814036
	DD	0bf502a3br			; -0.813144
	DD	0bf4fefa8r			; -0.812251
	DD	0bf4fb4f4r			; -0.811355
	DD	0bf4f7a1fr			; -0.810457
	DD	0bf4f3f2br			; -0.809558
	DD	0bf4f0417r			; -0.808656
	DD	0bf4ec8e4r			; -0.807753
	DD	0bf4e8d90r			; -0.806848
	DD	0bf4e521cr			; -0.80594
	DD	0bf4e1689r			; -0.805031
	DD	0bf4ddad5r			; -0.80412
	DD	0bf4d9f02r			; -0.803208
	DD	0bf4d6310r			; -0.802293
	DD	0bf4d26fdr			; -0.801376
	DD	0bf4ceacbr			; -0.800458
	DD	0bf4cae79r			; -0.799537
	DD	0bf4c7208r			; -0.798615
	DD	0bf4c3578r			; -0.797691
	DD	0bf4bf8c7r			; -0.796765
	DD	0bf4bbbf8r			; -0.795837
	DD	0bf4b7f09r			; -0.794907
	DD	0bf4b41far			; -0.793975
	DD	0bf4b04ccr			; -0.793042
	DD	0bf4ac77fr			; -0.792107
	DD	0bf4a8a13r			; -0.791169
	DD	0bf4a4c87r			; -0.79023
	DD	0bf4a0edcr			; -0.789289
	DD	0bf49d112r			; -0.788346
	DD	0bf499329r			; -0.787402
	DD	0bf495521r			; -0.786455
	DD	0bf4916far			; -0.785507
	DD	0bf48d8b3r			; -0.784557
	DD	0bf489a4er			; -0.783605
	DD	0bf485bcar			; -0.782651
	DD	0bf481d27r			; -0.781695
	DD	0bf47de65r			; -0.780737
	DD	0bf479f84r			; -0.779778
	DD	0bf476085r			; -0.778817
	DD	0bf472167r			; -0.777853
	DD	0bf46e22ar			; -0.776888
	DD	0bf46a2cer			; -0.775922
	DD	0bf466354r			; -0.774953
	DD	0bf4623bbr			; -0.773983
	DD	0bf45e403r			; -0.77301
	DD	0bf45a42dr			; -0.772036
	DD	0bf456439r			; -0.771061
	DD	0bf452426r			; -0.770083
	DD	0bf44e3f5r			; -0.769103
	DD	0bf44a3a5r			; -0.768122
	DD	0bf446337r			; -0.767139
	DD	0bf4422abr			; -0.766154
	DD	0bf43e200r			; -0.765167
	DD	0bf43a138r			; -0.764179
	DD	0bf436051r			; -0.763188
	DD	0bf431f4cr			; -0.762196
	DD	0bf42de29r			; -0.761202
	DD	0bf429ce8r			; -0.760207
	DD	0bf425b89r			; -0.759209
	DD	0bf421a0br			; -0.75821
	DD	0bf41d870r			; -0.757209
	DD	0bf4196b7r			; -0.756206
	DD	0bf4154e1r			; -0.755201
	DD	0bf4112ecr			; -0.754195
	DD	0bf40d0dar			; -0.753187
	DD	0bf408ea9r			; -0.752177
	DD	0bf404c5cr			; -0.751165
	DD	0bf4009f0r			; -0.750152
	DD	0bf3fc767r			; -0.749136
	DD	0bf3f84c0r			; -0.748119
	DD	0bf3f41fcr			; -0.747101
	DD	0bf3eff1br			; -0.74608
	DD	0bf3ebc1br			; -0.745058
	DD	0bf3e78ffr			; -0.744034
	DD	0bf3e35c5r			; -0.743008
	DD	0bf3df26er			; -0.74198
	DD	0bf3daef9r			; -0.740951
	DD	0bf3d6b67r			; -0.73992
	DD	0bf3d27b8r			; -0.738887
	DD	0bf3ce3ecr			; -0.737853
	DD	0bf3ca003r			; -0.736817
	DD	0bf3c5bfcr			; -0.735779
	DD	0bf3c17d9r			; -0.734739
	DD	0bf3bd398r			; -0.733697
	DD	0bf3b8f3br			; -0.732654
	DD	0bf3b4ac1r			; -0.731609
	DD	0bf3b0629r			; -0.730563
	DD	0bf3ac175r			; -0.729514
	DD	0bf3a7ca4r			; -0.728464
	DD	0bf3a37b7r			; -0.727413
	DD	0bf39f2acr			; -0.726359
	DD	0bf39ad85r			; -0.725304
	DD	0bf396842r			; -0.724247
	DD	0bf3922e1r			; -0.723188
	DD	0bf38dd65r			; -0.722128
	DD	0bf3897cbr			; -0.721066
	DD	0bf385216r			; -0.720003
	DD	0bf380c43r			; -0.718937
	DD	0bf37c655r			; -0.71787
	DD	0bf37804ar			; -0.716801
	DD	0bf373a23r			; -0.715731
	DD	0bf36f3dfr			; -0.714659
	DD	0bf36ad7fr			; -0.713585
	DD	0bf366704r			; -0.712509
	DD	0bf36206cr			; -0.711432
	DD	0bf35d9b8r			; -0.710353
	DD	0bf3592e7r			; -0.709273
	DD	0bf354bfbr			; -0.708191
	DD	0bf3504f3r			; -0.707107
	DD	0bf34bdcfr			; -0.706021
	DD	0bf34768fr			; -0.704934
	DD	0bf342f34r			; -0.703845
	DD	0bf33e7bcr			; -0.702755
	DD	0bf33a029r			; -0.701663
	DD	0bf33587ar			; -0.700569
	DD	0bf3310afr			; -0.699473
	DD	0bf32c8c9r			; -0.698376
	DD	0bf3280c7r			; -0.697277
	DD	0bf3238aar			; -0.696177
	DD	0bf31f071r			; -0.695075
	DD	0bf31a81dr			; -0.693971
	DD	0bf315fadr			; -0.692866
	DD	0bf311722r			; -0.691759
	DD	0bf30ce7cr			; -0.690651
	DD	0bf3085bbr			; -0.689541
	DD	0bf303cder			; -0.688429
	DD	0bf2ff3e6r			; -0.687315
	DD	0bf2faad3r			; -0.6862
	DD	0bf2f61a5r			; -0.685084
	DD	0bf2f185br			; -0.683965
	DD	0bf2ecef7r			; -0.682846
	DD	0bf2e8578r			; -0.681724
	DD	0bf2e3bder			; -0.680601
	DD	0bf2df229r			; -0.679476
	DD	0bf2da859r			; -0.67835
	DD	0bf2d5e6fr			; -0.677222
	DD	0bf2d1469r			; -0.676093
	DD	0bf2cca49r			; -0.674962
	DD	0bf2c800fr			; -0.673829
	DD	0bf2c35b9r			; -0.672695
	DD	0bf2beb4ar			; -0.671559
	DD	0bf2ba0bfr			; -0.670422
	DD	0bf2b561br			; -0.669283
	DD	0bf2b0b5br			; -0.668142
	DD	0bf2ac082r			; -0.667
	DD	0bf2a758er			; -0.665856
	DD	0bf2a2a80r			; -0.664711
	DD	0bf29df57r			; -0.663564
	DD	0bf299415r			; -0.662416
	DD	0bf2948b8r			; -0.661266
	DD	0bf28fd41r			; -0.660114
	DD	0bf28b1b0r			; -0.658961
	DD	0bf286605r			; -0.657807
	DD	0bf281a40r			; -0.656651
	DD	0bf27ce61r			; -0.655493
	DD	0bf278268r			; -0.654334
	DD	0bf273656r			; -0.653173
	DD	0bf26ea2ar			; -0.652011
	DD	0bf269de3r			; -0.650847
	DD	0bf265184r			; -0.649681
	DD	0bf26050ar			; -0.648514
	DD	0bf25b877r			; -0.647346
	DD	0bf256bcbr			; -0.646176
	DD	0bf251f04r			; -0.645005
	DD	0bf24d225r			; -0.643832
	DD	0bf24852cr			; -0.642657
	DD	0bf24381ar			; -0.641481
	DD	0bf23eaeer			; -0.640303
	DD	0bf239da9r			; -0.639124
	DD	0bf23504br			; -0.637944
	DD	0bf2302d3r			; -0.636762
	DD	0bf22b543r			; -0.635578
	DD	0bf226799r			; -0.634393
	DD	0bf2219d7r			; -0.633207
	DD	0bf21cbfbr			; -0.632019
	DD	0bf217e06r			; -0.630829
	DD	0bf212ff9r			; -0.629638
	DD	0bf20e1d2r			; -0.628446
	DD	0bf209393r			; -0.627252
	DD	0bf20453br			; -0.626056
	DD	0bf1ff6cbr			; -0.62486
	DD	0bf1fa841r			; -0.623661
	DD	0bf1f599fr			; -0.622461
	DD	0bf1f0ae5r			; -0.62126
	DD	0bf1ebc12r			; -0.620057
	DD	0bf1e6d26r			; -0.618853
	DD	0bf1e1e22r			; -0.617647
	DD	0bf1dcf06r			; -0.61644
	DD	0bf1d7fd1r			; -0.615232
	DD	0bf1d3084r			; -0.614022
	DD	0bf1ce11fr			; -0.61281
	DD	0bf1c91a2r			; -0.611597
	DD	0bf1c420cr			; -0.610383
	DD	0bf1bf25fr			; -0.609167
	DD	0bf1ba299r			; -0.60795
	DD	0bf1b52bbr			; -0.606731
	DD	0bf1b02c6r			; -0.605511
	DD	0bf1ab2b8r			; -0.60429
	DD	0bf1a6293r			; -0.603067
	DD	0bf1a1255r			; -0.601842
	DD	0bf19c200r			; -0.600616
	DD	0bf197194r			; -0.599389
	DD	0bf19210fr			; -0.598161
	DD	0bf18d073r			; -0.596931
	DD	0bf187fc0r			; -0.595699
	DD	0bf182ef5r			; -0.594467
	DD	0bf17de12r			; -0.593232
	DD	0bf178d18r			; -0.591997
	DD	0bf173c07r			; -0.59076
	DD	0bf16eader			; -0.589521
	DD	0bf16999fr			; -0.588282
	DD	0bf164847r			; -0.58704
	DD	0bf15f6d9r			; -0.585798
	DD	0bf15a554r			; -0.584554
	DD	0bf1553b7r			; -0.583309
	DD	0bf150204r			; -0.582062
	DD	0bf14b039r			; -0.580814
	DD	0bf145e58r			; -0.579565
	DD	0bf140c5fr			; -0.578314
	DD	0bf13ba50r			; -0.577062
	DD	0bf13682ar			; -0.575808
	DD	0bf1315eer			; -0.574553
	DD	0bf12c39ar			; -0.573297
	DD	0bf127130r			; -0.57204
	DD	0bf121eb0r			; -0.570781
	DD	0bf11cc19r			; -0.569521
	DD	0bf11796br			; -0.568259
	DD	0bf1126a7r			; -0.566996
	DD	0bf10d3cdr			; -0.565732
	DD	0bf1080dcr			; -0.564466
	DD	0bf102dd5r			; -0.563199
	DD	0bf0fdab8r			; -0.561931
	DD	0bf0f8784r			; -0.560662
	DD	0bf0f343br			; -0.559391
	DD	0bf0ee0dbr			; -0.558119
	DD	0bf0e8d65r			; -0.556845
	DD	0bf0e39dar			; -0.55557
	DD	0bf0de638r			; -0.554294
	DD	0bf0d9281r			; -0.553017
	DD	0bf0d3eb3r			; -0.551738
	DD	0bf0cead0r			; -0.550458
	DD	0bf0c96d7r			; -0.549177
	DD	0bf0c42c9r			; -0.547894
	DD	0bf0beea5r			; -0.54661
	DD	0bf0b9a6br			; -0.545325
	DD	0bf0b461cr			; -0.544039
	DD	0bf0af1b7r			; -0.542751
	DD	0bf0a9d3dr			; -0.541462
	DD	0bf0a48adr			; -0.540171
	DD	0bf09f409r			; -0.53888
	DD	0bf099f4er			; -0.537587
	DD	0bf094a7fr			; -0.536293
	DD	0bf08f59br			; -0.534998
	DD	0bf08a0a1r			; -0.533701
	DD	0bf084b92r			; -0.532403
	DD	0bf07f66fr			; -0.531104
	DD	0bf07a136r			; -0.529804
	DD	0bf074be8r			; -0.528502
	DD	0bf06f686r			; -0.527199
	DD	0bf06a10er			; -0.525895
	DD	0bf064b82r			; -0.52459
	DD	0bf05f5e2r			; -0.523283
	DD	0bf05a02cr			; -0.521975
	DD	0bf054a62r			; -0.520666
	DD	0bf04f484r			; -0.519356
	DD	0bf049e91r			; -0.518045
	DD	0bf044889r			; -0.516732
	DD	0bf03f26dr			; -0.515418
	DD	0bf039c3dr			; -0.514103
	DD	0bf0345f8r			; -0.512786
	DD	0bf02ef9fr			; -0.511469
	DD	0bf029932r			; -0.51015
	DD	0bf0242b1r			; -0.50883
	DD	0bf01ec1cr			; -0.507509
	DD	0bf019573r			; -0.506187
	DD	0bf013eb5r			; -0.504863
	DD	0bf00e7e4r			; -0.503538
	DD	0bf0090ffr			; -0.502212
	DD	0bf003a06r			; -0.500885
	DD	0beffc5f3r			; -0.499557
	DD	0beff17b2r			; -0.498228
	DD	0befe694ar			; -0.496897
	DD	0befdbabbr			; -0.495565
	DD	0befd0c04r			; -0.494232
	DD	0befc5d27r			; -0.492898
	DD	0befbae22r			; -0.491563
	DD	0befafef7r			; -0.490226
	DD	0befa4fa5r			; -0.488889
	DD	0bef9a02dr			; -0.48755
	DD	0bef8f08er			; -0.48621
	DD	0bef840c8r			; -0.484869
	DD	0bef790dcr			; -0.483527
	DD	0bef6e0cbr			; -0.482184
	DD	0bef63093r			; -0.480839
	DD	0bef58035r			; -0.479494
	DD	0bef4cfb1r			; -0.478147
	DD	0bef41f07r			; -0.476799
	DD	0bef36e38r			; -0.47545
	DD	0bef2bd43r			; -0.4741
	DD	0bef20c29r			; -0.472749
	DD	0bef15aear			; -0.471397
	DD	0bef0a985r			; -0.470043
	DD	0beeff7fbr			; -0.468689
	DD	0beef464cr			; -0.467333
	DD	0beee9479r			; -0.465977
	DD	0beede280r			; -0.464619
	DD	0beed3063r			; -0.46326
	DD	0beec7e21r			; -0.4619
	DD	0beebcbbbr			; -0.460539
	DD	0beeb1930r			; -0.459177
	DD	0beea6681r			; -0.457813
	DD	0bee9b3aer			; -0.456449
	DD	0bee900b7r			; -0.455084
	DD	0bee84d9cr			; -0.453717
	DD	0bee79a5dr			; -0.45235
	DD	0bee6e6fbr			; -0.450981
	DD	0bee63375r			; -0.449611
	DD	0bee57fcbr			; -0.448241
	DD	0bee4cbfer			; -0.446869
	DD	0bee4180er			; -0.445496
	DD	0bee363far			; -0.444122
	DD	0bee2afc4r			; -0.442747
	DD	0bee1fb6ar			; -0.441371
	DD	0bee146eer			; -0.439994
	DD	0bee0924fr			; -0.438616
	DD	0bedfdd8dr			; -0.437237
	DD	0bedf28a9r			; -0.435857
	DD	0bede73a2r			; -0.434476
	DD	0beddbe79r			; -0.433094
	DD	0bedd092er			; -0.431711
	DD	0bedc53c1r			; -0.430326
	DD	0bedb9e31r			; -0.428941
	DD	0bedae880r			; -0.427555
	DD	0beda32adr			; -0.426168
	DD	0bed97cb9r			; -0.42478
	DD	0bed8c6a3r			; -0.42339
	DD	0bed8106br			; -0.422
	DD	0bed75a13r			; -0.420609
	DD	0bed6a399r			; -0.419217
	DD	0bed5ecfdr			; -0.417824
	DD	0bed53641r			; -0.41643
	DD	0bed47f64r			; -0.415034
	DD	0bed3c867r			; -0.413638
	DD	0bed31148r			; -0.412241
	DD	0bed25a09r			; -0.410843
	DD	0bed1a2aar			; -0.409444
	DD	0bed0eb2ar			; -0.408044
	DD	0bed0338ar			; -0.406643
	DD	0becf7bcar			; -0.405241
	DD	0becec3ear			; -0.403838
	DD	0bece0bear			; -0.402435
	DD	0becd53car			; -0.40103
	DD	0becc9b8br			; -0.399624
	DD	0becbe32cr			; -0.398218
	DD	0becb2aaer			; -0.39681
	DD	0beca7210r			; -0.395401
	DD	0bec9b953r			; -0.393992
	DD	0bec90077r			; -0.392582
	DD	0bec8477cr			; -0.39117
	DD	0bec78e62r			; -0.389758
	DD	0bec6d529r			; -0.388345
	DD	0bec61bd2r			; -0.386931
	DD	0bec5625cr			; -0.385516
	DD	0bec4a8c8r			; -0.3841
	DD	0bec3ef15r			; -0.382683
	DD	0bec33544r			; -0.381266
	DD	0bec27b55r			; -0.379847
	DD	0bec1c148r			; -0.378428
	DD	0bec1071er			; -0.377007
	DD	0bec04cd5r			; -0.375586
	DD	0bebf926fr			; -0.374164
	DD	0bebed7ebr			; -0.372741
	DD	0bebe1d4ar			; -0.371317
	DD	0bebd628br			; -0.369892
	DD	0bebca7afr			; -0.368467
	DD	0bebbecb6r			; -0.36704
	DD	0bebb31a0r			; -0.365613
	DD	0beba766er			; -0.364185
	DD	0beb9bb1er			; -0.362756
	DD	0beb8ffb2r			; -0.361326
	DD	0beb8442ar			; -0.359895
	DD	0beb78884r			; -0.358463
	DD	0beb6ccc3r			; -0.357031
	DD	0beb610e6r			; -0.355598
	DD	0beb554ecr			; -0.354164
	DD	0beb498d6r			; -0.352729
	DD	0beb3dca5r			; -0.351293
	DD	0beb32058r			; -0.349856
	DD	0beb263efr			; -0.348419
	DD	0beb1a76br			; -0.34698
	DD	0beb0eacbr			; -0.345541
	DD	0beb02e10r			; -0.344101
	DD	0beaf713ar			; -0.342661
	DD	0beaeb449r			; -0.341219
	DD	0beadf73cr			; -0.339777
	DD	0bead3a15r			; -0.338334
	DD	0beac7cd4r			; -0.33689
	DD	0beabbf77r			; -0.335445
	DD	0beab0201r			; -0.334
	DD	0beaa446fr			; -0.332553
	DD	0bea986c4r			; -0.331106
	DD	0bea8c8fer			; -0.329658
	DD	0bea80b1fr			; -0.32821
	DD	0bea74d25r			; -0.32676
	DD	0bea68f12r			; -0.32531
	DD	0bea5d0e5r			; -0.323859
	DD	0bea5129fr			; -0.322408
	DD	0bea4543fr			; -0.320955
	DD	0bea395c5r			; -0.319502
	DD	0bea2d733r			; -0.318048
	DD	0bea21887r			; -0.316593
	DD	0bea159c2r			; -0.315138
	DD	0bea09ae5r			; -0.313682
	DD	0be9fdbeer			; -0.312225
	DD	0be9f1cdfr			; -0.310767
	DD	0be9e5db8r			; -0.309309
	DD	0be9d9e78r			; -0.30785
	DD	0be9cdf20r			; -0.30639
	DD	0be9c1fafr			; -0.304929
	DD	0be9b6027r			; -0.303468
	DD	0be9aa086r			; -0.302006
	DD	0be99e0cer			; -0.300543
	DD	0be9920fer			; -0.29908
	DD	0be986116r			; -0.297616
	DD	0be97a117r			; -0.296151
	DD	0be96e100r			; -0.294685
	DD	0be9620d2r			; -0.293219
	DD	0be95608dr			; -0.291752
	DD	0be94a031r			; -0.290285
	DD	0be93dfbfr			; -0.288816
	DD	0be931f35r			; -0.287347
	DD	0be925e94r			; -0.285878
	DD	0be919dddr			; -0.284408
	DD	0be90dd10r			; -0.282937
	DD	0be901c2cr			; -0.281465
	DD	0be8f5b32r			; -0.279993
	DD	0be8e9a22r			; -0.27852
	DD	0be8dd8fcr			; -0.277046
	DD	0be8d17c0r			; -0.275572
	DD	0be8c566er			; -0.274097
	DD	0be8b9507r			; -0.272621
	DD	0be8ad38ar			; -0.271145
	DD	0be8a11f7r			; -0.269668
	DD	0be895050r			; -0.268191
	DD	0be888e93r			; -0.266713
	DD	0be87ccc1r			; -0.265234
	DD	0be870adar			; -0.263755
	DD	0be8648dfr			; -0.262275
	DD	0be8586cer			; -0.260794
	DD	0be84c4aar			; -0.259313
	DD	0be840270r			; -0.257831
	DD	0be834022r			; -0.256349
	DD	0be827dc0r			; -0.254866
	DD	0be81bb4ar			; -0.253382
	DD	0be80f8c0r			; -0.251898
	DD	0be803622r			; -0.250413
	DD	0be7ee6e1r			; -0.248928
	DD	0be7d6156r			; -0.247442
	DD	0be7bdba4r			; -0.245955
	DD	0be7a55cbr			; -0.244468
	DD	0be78cfccr			; -0.24298
	DD	0be7749a6r			; -0.241492
	DD	0be75c35ar			; -0.240003
	DD	0be743ce8r			; -0.238514
	DD	0be72b651r			; -0.237024
	DD	0be712f94r			; -0.235533
	DD	0be6fa8b2r			; -0.234042
	DD	0be6e21abr			; -0.23255
	DD	0be6c9a7fr			; -0.231058
	DD	0be6b132fr			; -0.229565
	DD	0be698bbar			; -0.228072
	DD	0be680422r			; -0.226578
	DD	0be667c66r			; -0.225084
	DD	0be64f486r			; -0.223589
	DD	0be636c83r			; -0.222094
	DD	0be61e45cr			; -0.220598
	DD	0be605c13r			; -0.219101
	DD	0be5ed3a8r			; -0.217604
	DD	0be5d4b1ar			; -0.216107
	DD	0be5bc26ar			; -0.214609
	DD	0be5a3997r			; -0.21311
	DD	0be58b0a4r			; -0.211611
	DD	0be57278fr			; -0.210112
	DD	0be559e58r			; -0.208612
	DD	0be541501r			; -0.207111
	DD	0be528b89r			; -0.20561
	DD	0be5101f1r			; -0.204109
	DD	0be4f7838r			; -0.202607
	DD	0be4dee60r			; -0.201105
	DD	0be4c6467r			; -0.199602
	DD	0be4ada4fr			; -0.198098
	DD	0be495018r			; -0.196595
	DD	0be47c5c2r			; -0.19509
	DD	0be463b4dr			; -0.193586
	DD	0be44b0b9r			; -0.19208
	DD	0be432607r			; -0.190575
	DD	0be419b37r			; -0.189069
	DD	0be401049r			; -0.187562
	DD	0be3e853er			; -0.186055
	DD	0be3cfa15r			; -0.184548
	DD	0be3b6ecfr			; -0.18304
	DD	0be39e36cr			; -0.181532
	DD	0be3857ecr			; -0.180023
	DD	0be36cc50r			; -0.178514
	DD	0be354098r			; -0.177004
	DD	0be33b4c4r			; -0.175494
	DD	0be3228d4r			; -0.173984
	DD	0be309cc9r			; -0.172473
	DD	0be2f10a2r			; -0.170962
	DD	0be2d8461r			; -0.16945
	DD	0be2bf804r			; -0.167938
	DD	0be2a6b8dr			; -0.166426
	DD	0be28defcr			; -0.164913
	DD	0be275251r			; -0.1634
	DD	0be25c58cr			; -0.161886
	DD	0be2438adr			; -0.160372
	DD	0be22abb6r			; -0.158858
	DD	0be211ea5r			; -0.157343
	DD	0be1f917br			; -0.155828
	DD	0be1e0438r			; -0.154313
	DD	0be1c76der			; -0.152797
	DD	0be1ae96br			; -0.151281
	DD	0be195be0r			; -0.149765
	DD	0be17ce3dr			; -0.148248
	DD	0be164083r			; -0.14673
	DD	0be14b2b2r			; -0.145213
	DD	0be1324car			; -0.143695
	DD	0be1196ccr			; -0.142177
	DD	0be1008b7r			; -0.140658
	DD	0be0e7a8br			; -0.139139
	DD	0be0cec4ar			; -0.13762
	DD	0be0b5df3r			; -0.136101
	DD	0be09cf86r			; -0.134581
	DD	0be084105r			; -0.133061
	DD	0be06b26er			; -0.13154
	DD	0be0523c2r			; -0.130019
	DD	0be039502r			; -0.128498
	DD	0be02062er			; -0.126977
	DD	0be007745r			; -0.125455
	DD	0bdfdd092r			; -0.123933
	DD	0bdfab273r			; -0.122411
	DD	0bdf7942cr			; -0.120888
	DD	0bdf475c0r			; -0.119365
	DD	0bdf1572er			; -0.117842
	DD	0bdee3876r			; -0.116319
	DD	0bdeb199ar			; -0.114795
	DD	0bde7fa9ar			; -0.113271
	DD	0bde4db76r			; -0.111747
	DD	0bde1bc2er			; -0.110222
	DD	0bdde9cc4r			; -0.108697
	DD	0bddb7d37r			; -0.107172
	DD	0bdd85d89r			; -0.105647
	DD	0bdd53db9r			; -0.104122
	DD	0bdd21dc8r			; -0.102596
	DD	0bdcefdb7r			; -0.10107
	DD	0bdcbdd86r			; -0.0995436
	DD	0bdc8bd36r			; -0.0980171
	DD	0bdc59cc6r			; -0.0964904
	DD	0bdc27c39r			; -0.0949635
	DD	0bdbf5b8dr			; -0.0934363
	DD	0bdbc3ac3r			; -0.091909
	DD	0bdb919ddr			; -0.0903814
	DD	0bdb5f8dar			; -0.0888536
	DD	0bdb2d7bbr			; -0.0873255
	DD	0bdafb680r			; -0.0857973
	DD	0bdac952br			; -0.0842689
	DD	0bda973bar			; -0.0827403
	DD	0bda65230r			; -0.0812114
	DD	0bda3308cr			; -0.0796824
	DD	0bda00ecfr			; -0.0781532
	DD	0bd9cecf9r			; -0.0766239
	DD	0bd99cb0ar			; -0.0750943
	DD	0bd96a905r			; -0.0735646
	DD	0bd9386e7r			; -0.0720346
	DD	0bd9064b4r			; -0.0705046
	DD	0bd8d426ar			; -0.0689743
	DD	0bd8a200ar			; -0.0674439
	DD	0bd86fd94r			; -0.0659133
	DD	0bd83db0ar			; -0.0643826
	DD	0bd80b86cr			; -0.0628518
	DD	0bd7b2b74r			; -0.0613207
	DD	0bd74e5e9r			; -0.0597896
	DD	0bd6ea038r			; -0.0582583
	DD	0bd685a62r			; -0.0567268
	DD	0bd621469r			; -0.0551952
	DD	0bd5bce4cr			; -0.0536635
	DD	0bd55880er			; -0.0521317
	DD	0bd4f41afr			; -0.0505998
	DD	0bd48fb30r			; -0.0490677
	DD	0bd42b491r			; -0.0475355
	DD	0bd3c6dd5r			; -0.0460032
	DD	0bd3626fcr			; -0.0444708
	DD	0bd2fe007r			; -0.0429383
	DD	0bd2998f6r			; -0.0414056
	DD	0bd2351cbr			; -0.0398729
	DD	0bd1d0a88r			; -0.0383401
	DD	0bd16c32cr			; -0.0368072
	DD	0bd107bb8r			; -0.0352742
	DD	0bd0a342fr			; -0.0337412
	DD	0bd03ec90r			; -0.032208
	DD	0bcfb49bar			; -0.0306748
	DD	0bceeba2cr			; -0.0291415
	DD	0bce22a7ar			; -0.0276081
	DD	0bcd59aa6r			; -0.0260747
	DD	0bcc90ab0r			; -0.0245412
	DD	0bcbc7a9br			; -0.0230077
	DD	0bcafea69r			; -0.0214741
	DD	0bca35a1cr			; -0.0199404
	DD	0bc96c9b6r			; -0.0184067
	DD	0bc8a3938r			; -0.016873
	DD	0bc7b514br			; -0.0153392
	DD	0bc622fffr			; -0.0138054
	DD	0bc490e90r			; -0.0122715
	DD	0bc2fed02r			; -0.0107377
	DD	0bc16cb58r			; -0.00920375
	DD	0bbfb5330r			; -0.00766983
	DD	0bbc90f88r			; -0.00613588
	DD	0bb96cbc1r			; -0.00460193
	DD	0bb490fc6r			; -0.00306796
	DD	0bac90fd5r			; -0.00153398
	DD	0a553c800r			; -1.83691e-16
	DD	03ac90fd5r			; 0.00153398
	DD	03b490fc6r			; 0.00306796
	DD	03b96cbc1r			; 0.00460193
	DD	03bc90f88r			; 0.00613588
	DD	03bfb5330r			; 0.00766983
	DD	03c16cb58r			; 0.00920375
	DD	03c2fed02r			; 0.0107377
	DD	03c490e90r			; 0.0122715
	DD	03c622fffr			; 0.0138054
	DD	03c7b514br			; 0.0153392
	DD	03c8a3938r			; 0.016873
	DD	03c96c9b6r			; 0.0184067
	DD	03ca35a1cr			; 0.0199404
	DD	03cafea69r			; 0.0214741
	DD	03cbc7a9br			; 0.0230077
	DD	03cc90ab0r			; 0.0245412
	DD	03cd59aa6r			; 0.0260747
	DD	03ce22a7ar			; 0.0276081
	DD	03ceeba2cr			; 0.0291415
	DD	03cfb49bar			; 0.0306748
	DD	03d03ec90r			; 0.032208
	DD	03d0a342fr			; 0.0337412
	DD	03d107bb8r			; 0.0352742
	DD	03d16c32cr			; 0.0368072
	DD	03d1d0a88r			; 0.0383401
	DD	03d2351cbr			; 0.0398729
	DD	03d2998f6r			; 0.0414056
	DD	03d2fe007r			; 0.0429383
	DD	03d3626fcr			; 0.0444708
	DD	03d3c6dd5r			; 0.0460032
	DD	03d42b491r			; 0.0475355
	DD	03d48fb30r			; 0.0490677
	DD	03d4f41afr			; 0.0505998
	DD	03d55880er			; 0.0521317
	DD	03d5bce4cr			; 0.0536635
	DD	03d621469r			; 0.0551952
	DD	03d685a62r			; 0.0567268
	DD	03d6ea038r			; 0.0582583
	DD	03d74e5e9r			; 0.0597896
	DD	03d7b2b74r			; 0.0613207
	DD	03d80b86cr			; 0.0628518
	DD	03d83db0ar			; 0.0643826
	DD	03d86fd94r			; 0.0659133
	DD	03d8a200ar			; 0.0674439
	DD	03d8d426ar			; 0.0689743
	DD	03d9064b4r			; 0.0705046
	DD	03d9386e7r			; 0.0720346
	DD	03d96a905r			; 0.0735646
	DD	03d99cb0ar			; 0.0750943
	DD	03d9cecf9r			; 0.0766239
	DD	03da00ecfr			; 0.0781532
	DD	03da3308cr			; 0.0796824
	DD	03da65230r			; 0.0812114
	DD	03da973bar			; 0.0827403
	DD	03dac952br			; 0.0842689
	DD	03dafb680r			; 0.0857973
	DD	03db2d7bbr			; 0.0873255
	DD	03db5f8dar			; 0.0888536
	DD	03db919ddr			; 0.0903814
	DD	03dbc3ac3r			; 0.091909
	DD	03dbf5b8dr			; 0.0934363
	DD	03dc27c39r			; 0.0949635
	DD	03dc59cc6r			; 0.0964904
	DD	03dc8bd36r			; 0.0980171
	DD	03dcbdd86r			; 0.0995436
	DD	03dcefdb7r			; 0.10107
	DD	03dd21dc8r			; 0.102596
	DD	03dd53db9r			; 0.104122
	DD	03dd85d89r			; 0.105647
	DD	03ddb7d37r			; 0.107172
	DD	03dde9cc4r			; 0.108697
	DD	03de1bc2er			; 0.110222
	DD	03de4db76r			; 0.111747
	DD	03de7fa9ar			; 0.113271
	DD	03deb199ar			; 0.114795
	DD	03dee3876r			; 0.116319
	DD	03df1572er			; 0.117842
	DD	03df475c0r			; 0.119365
	DD	03df7942cr			; 0.120888
	DD	03dfab273r			; 0.122411
	DD	03dfdd092r			; 0.123933
	DD	03e007745r			; 0.125455
	DD	03e02062er			; 0.126977
	DD	03e039502r			; 0.128498
	DD	03e0523c2r			; 0.130019
	DD	03e06b26er			; 0.13154
	DD	03e084105r			; 0.133061
	DD	03e09cf86r			; 0.134581
	DD	03e0b5df3r			; 0.136101
	DD	03e0cec4ar			; 0.13762
	DD	03e0e7a8br			; 0.139139
	DD	03e1008b7r			; 0.140658
	DD	03e1196ccr			; 0.142177
	DD	03e1324car			; 0.143695
	DD	03e14b2b2r			; 0.145213
	DD	03e164083r			; 0.14673
	DD	03e17ce3dr			; 0.148248
	DD	03e195be0r			; 0.149765
	DD	03e1ae96br			; 0.151281
	DD	03e1c76der			; 0.152797
	DD	03e1e0438r			; 0.154313
	DD	03e1f917br			; 0.155828
	DD	03e211ea5r			; 0.157343
	DD	03e22abb6r			; 0.158858
	DD	03e2438adr			; 0.160372
	DD	03e25c58cr			; 0.161886
	DD	03e275251r			; 0.1634
	DD	03e28defcr			; 0.164913
	DD	03e2a6b8dr			; 0.166426
	DD	03e2bf804r			; 0.167938
	DD	03e2d8461r			; 0.16945
	DD	03e2f10a2r			; 0.170962
	DD	03e309cc9r			; 0.172473
	DD	03e3228d4r			; 0.173984
	DD	03e33b4c4r			; 0.175494
	DD	03e354098r			; 0.177004
	DD	03e36cc50r			; 0.178514
	DD	03e3857ecr			; 0.180023
	DD	03e39e36cr			; 0.181532
	DD	03e3b6ecfr			; 0.18304
	DD	03e3cfa15r			; 0.184548
	DD	03e3e853er			; 0.186055
	DD	03e401049r			; 0.187562
	DD	03e419b37r			; 0.189069
	DD	03e432607r			; 0.190575
	DD	03e44b0b9r			; 0.19208
	DD	03e463b4dr			; 0.193586
	DD	03e47c5c2r			; 0.19509
	DD	03e495018r			; 0.196595
	DD	03e4ada4fr			; 0.198098
	DD	03e4c6467r			; 0.199602
	DD	03e4dee60r			; 0.201105
	DD	03e4f7838r			; 0.202607
	DD	03e5101f1r			; 0.204109
	DD	03e528b89r			; 0.20561
	DD	03e541501r			; 0.207111
	DD	03e559e58r			; 0.208612
	DD	03e57278fr			; 0.210112
	DD	03e58b0a4r			; 0.211611
	DD	03e5a3997r			; 0.21311
	DD	03e5bc26ar			; 0.214609
	DD	03e5d4b1ar			; 0.216107
	DD	03e5ed3a8r			; 0.217604
	DD	03e605c13r			; 0.219101
	DD	03e61e45cr			; 0.220598
	DD	03e636c83r			; 0.222094
	DD	03e64f486r			; 0.223589
	DD	03e667c66r			; 0.225084
	DD	03e680422r			; 0.226578
	DD	03e698bbar			; 0.228072
	DD	03e6b132fr			; 0.229565
	DD	03e6c9a7fr			; 0.231058
	DD	03e6e21abr			; 0.23255
	DD	03e6fa8b2r			; 0.234042
	DD	03e712f94r			; 0.235533
	DD	03e72b651r			; 0.237024
	DD	03e743ce8r			; 0.238514
	DD	03e75c35ar			; 0.240003
	DD	03e7749a6r			; 0.241492
	DD	03e78cfccr			; 0.24298
	DD	03e7a55cbr			; 0.244468
	DD	03e7bdba4r			; 0.245955
	DD	03e7d6156r			; 0.247442
	DD	03e7ee6e1r			; 0.248928
	DD	03e803622r			; 0.250413
	DD	03e80f8c0r			; 0.251898
	DD	03e81bb4ar			; 0.253382
	DD	03e827dc0r			; 0.254866
	DD	03e834022r			; 0.256349
	DD	03e840270r			; 0.257831
	DD	03e84c4aar			; 0.259313
	DD	03e8586cer			; 0.260794
	DD	03e8648dfr			; 0.262275
	DD	03e870adar			; 0.263755
	DD	03e87ccc1r			; 0.265234
	DD	03e888e93r			; 0.266713
	DD	03e895050r			; 0.268191
	DD	03e8a11f7r			; 0.269668
	DD	03e8ad38ar			; 0.271145
	DD	03e8b9507r			; 0.272621
	DD	03e8c566er			; 0.274097
	DD	03e8d17c0r			; 0.275572
	DD	03e8dd8fcr			; 0.277046
	DD	03e8e9a22r			; 0.27852
	DD	03e8f5b32r			; 0.279993
	DD	03e901c2cr			; 0.281465
	DD	03e90dd10r			; 0.282937
	DD	03e919dddr			; 0.284408
	DD	03e925e94r			; 0.285878
	DD	03e931f35r			; 0.287347
	DD	03e93dfbfr			; 0.288816
	DD	03e94a031r			; 0.290285
	DD	03e95608dr			; 0.291752
	DD	03e9620d2r			; 0.293219
	DD	03e96e100r			; 0.294685
	DD	03e97a117r			; 0.296151
	DD	03e986116r			; 0.297616
	DD	03e9920fer			; 0.29908
	DD	03e99e0cer			; 0.300543
	DD	03e9aa086r			; 0.302006
	DD	03e9b6027r			; 0.303468
	DD	03e9c1fafr			; 0.304929
	DD	03e9cdf20r			; 0.30639
	DD	03e9d9e78r			; 0.30785
	DD	03e9e5db8r			; 0.309309
	DD	03e9f1cdfr			; 0.310767
	DD	03e9fdbeer			; 0.312225
	DD	03ea09ae5r			; 0.313682
	DD	03ea159c2r			; 0.315138
	DD	03ea21887r			; 0.316593
	DD	03ea2d733r			; 0.318048
	DD	03ea395c5r			; 0.319502
	DD	03ea4543fr			; 0.320955
	DD	03ea5129fr			; 0.322408
	DD	03ea5d0e5r			; 0.323859
	DD	03ea68f12r			; 0.32531
	DD	03ea74d25r			; 0.32676
	DD	03ea80b1fr			; 0.32821
	DD	03ea8c8fer			; 0.329658
	DD	03ea986c4r			; 0.331106
	DD	03eaa446fr			; 0.332553
	DD	03eab0201r			; 0.334
	DD	03eabbf77r			; 0.335445
	DD	03eac7cd4r			; 0.33689
	DD	03ead3a15r			; 0.338334
	DD	03eadf73cr			; 0.339777
	DD	03eaeb449r			; 0.341219
	DD	03eaf713ar			; 0.342661
	DD	03eb02e10r			; 0.344101
	DD	03eb0eacbr			; 0.345541
	DD	03eb1a76br			; 0.34698
	DD	03eb263efr			; 0.348419
	DD	03eb32058r			; 0.349856
	DD	03eb3dca5r			; 0.351293
	DD	03eb498d6r			; 0.352729
	DD	03eb554ecr			; 0.354164
	DD	03eb610e6r			; 0.355598
	DD	03eb6ccc3r			; 0.357031
	DD	03eb78884r			; 0.358463
	DD	03eb8442ar			; 0.359895
	DD	03eb8ffb2r			; 0.361326
	DD	03eb9bb1er			; 0.362756
	DD	03eba766er			; 0.364185
	DD	03ebb31a0r			; 0.365613
	DD	03ebbecb6r			; 0.36704
	DD	03ebca7afr			; 0.368467
	DD	03ebd628br			; 0.369892
	DD	03ebe1d4ar			; 0.371317
	DD	03ebed7ebr			; 0.372741
	DD	03ebf926fr			; 0.374164
	DD	03ec04cd5r			; 0.375586
	DD	03ec1071er			; 0.377007
	DD	03ec1c148r			; 0.378428
	DD	03ec27b55r			; 0.379847
	DD	03ec33544r			; 0.381266
	DD	03ec3ef15r			; 0.382683
	DD	03ec4a8c8r			; 0.3841
	DD	03ec5625cr			; 0.385516
	DD	03ec61bd2r			; 0.386931
	DD	03ec6d529r			; 0.388345
	DD	03ec78e62r			; 0.389758
	DD	03ec8477cr			; 0.39117
	DD	03ec90077r			; 0.392582
	DD	03ec9b953r			; 0.393992
	DD	03eca7210r			; 0.395401
	DD	03ecb2aaer			; 0.39681
	DD	03ecbe32cr			; 0.398218
	DD	03ecc9b8br			; 0.399624
	DD	03ecd53car			; 0.40103
	DD	03ece0bear			; 0.402435
	DD	03ecec3ear			; 0.403838
	DD	03ecf7bcar			; 0.405241
	DD	03ed0338ar			; 0.406643
	DD	03ed0eb2ar			; 0.408044
	DD	03ed1a2aar			; 0.409444
	DD	03ed25a09r			; 0.410843
	DD	03ed31148r			; 0.412241
	DD	03ed3c867r			; 0.413638
	DD	03ed47f64r			; 0.415034
	DD	03ed53641r			; 0.41643
	DD	03ed5ecfdr			; 0.417824
	DD	03ed6a399r			; 0.419217
	DD	03ed75a13r			; 0.420609
	DD	03ed8106br			; 0.422
	DD	03ed8c6a3r			; 0.42339
	DD	03ed97cb9r			; 0.42478
	DD	03eda32adr			; 0.426168
	DD	03edae880r			; 0.427555
	DD	03edb9e31r			; 0.428941
	DD	03edc53c1r			; 0.430326
	DD	03edd092er			; 0.431711
	DD	03eddbe79r			; 0.433094
	DD	03ede73a2r			; 0.434476
	DD	03edf28a9r			; 0.435857
	DD	03edfdd8dr			; 0.437237
	DD	03ee0924fr			; 0.438616
	DD	03ee146eer			; 0.439994
	DD	03ee1fb6ar			; 0.441371
	DD	03ee2afc4r			; 0.442747
	DD	03ee363far			; 0.444122
	DD	03ee4180er			; 0.445496
	DD	03ee4cbfer			; 0.446869
	DD	03ee57fcbr			; 0.448241
	DD	03ee63375r			; 0.449611
	DD	03ee6e6fbr			; 0.450981
	DD	03ee79a5dr			; 0.45235
	DD	03ee84d9cr			; 0.453717
	DD	03ee900b7r			; 0.455084
	DD	03ee9b3aer			; 0.456449
	DD	03eea6681r			; 0.457813
	DD	03eeb1930r			; 0.459177
	DD	03eebcbbbr			; 0.460539
	DD	03eec7e21r			; 0.4619
	DD	03eed3063r			; 0.46326
	DD	03eede280r			; 0.464619
	DD	03eee9479r			; 0.465977
	DD	03eef464cr			; 0.467333
	DD	03eeff7fbr			; 0.468689
	DD	03ef0a985r			; 0.470043
	DD	03ef15aear			; 0.471397
	DD	03ef20c29r			; 0.472749
	DD	03ef2bd43r			; 0.4741
	DD	03ef36e38r			; 0.47545
	DD	03ef41f07r			; 0.476799
	DD	03ef4cfb1r			; 0.478147
	DD	03ef58035r			; 0.479494
	DD	03ef63093r			; 0.480839
	DD	03ef6e0cbr			; 0.482184
	DD	03ef790dcr			; 0.483527
	DD	03ef840c8r			; 0.484869
	DD	03ef8f08er			; 0.48621
	DD	03ef9a02dr			; 0.48755
	DD	03efa4fa5r			; 0.488889
	DD	03efafef7r			; 0.490226
	DD	03efbae22r			; 0.491563
	DD	03efc5d27r			; 0.492898
	DD	03efd0c04r			; 0.494232
	DD	03efdbabbr			; 0.495565
	DD	03efe694ar			; 0.496897
	DD	03eff17b2r			; 0.498228
	DD	03effc5f3r			; 0.499557
	DD	03f003a06r			; 0.500885
	DD	03f0090ffr			; 0.502212
	DD	03f00e7e4r			; 0.503538
	DD	03f013eb5r			; 0.504863
	DD	03f019573r			; 0.506187
	DD	03f01ec1cr			; 0.507509
	DD	03f0242b1r			; 0.50883
	DD	03f029932r			; 0.51015
	DD	03f02ef9fr			; 0.511469
	DD	03f0345f8r			; 0.512786
	DD	03f039c3dr			; 0.514103
	DD	03f03f26dr			; 0.515418
	DD	03f044889r			; 0.516732
	DD	03f049e91r			; 0.518045
	DD	03f04f484r			; 0.519356
	DD	03f054a62r			; 0.520666
	DD	03f05a02cr			; 0.521975
	DD	03f05f5e2r			; 0.523283
	DD	03f064b82r			; 0.52459
	DD	03f06a10er			; 0.525895
	DD	03f06f686r			; 0.527199
	DD	03f074be8r			; 0.528502
	DD	03f07a136r			; 0.529804
	DD	03f07f66fr			; 0.531104
	DD	03f084b92r			; 0.532403
	DD	03f08a0a1r			; 0.533701
	DD	03f08f59br			; 0.534998
	DD	03f094a7fr			; 0.536293
	DD	03f099f4er			; 0.537587
	DD	03f09f409r			; 0.53888
	DD	03f0a48adr			; 0.540171
	DD	03f0a9d3dr			; 0.541462
	DD	03f0af1b7r			; 0.542751
	DD	03f0b461cr			; 0.544039
	DD	03f0b9a6br			; 0.545325
	DD	03f0beea5r			; 0.54661
	DD	03f0c42c9r			; 0.547894
	DD	03f0c96d7r			; 0.549177
	DD	03f0cead0r			; 0.550458
	DD	03f0d3eb3r			; 0.551738
	DD	03f0d9281r			; 0.553017
	DD	03f0de638r			; 0.554294
	DD	03f0e39dar			; 0.55557
	DD	03f0e8d65r			; 0.556845
	DD	03f0ee0dbr			; 0.558119
	DD	03f0f343br			; 0.559391
	DD	03f0f8784r			; 0.560662
	DD	03f0fdab8r			; 0.561931
	DD	03f102dd5r			; 0.563199
	DD	03f1080dcr			; 0.564466
	DD	03f10d3cdr			; 0.565732
	DD	03f1126a7r			; 0.566996
	DD	03f11796br			; 0.568259
	DD	03f11cc19r			; 0.569521
	DD	03f121eb0r			; 0.570781
	DD	03f127130r			; 0.57204
	DD	03f12c39ar			; 0.573297
	DD	03f1315eer			; 0.574553
	DD	03f13682ar			; 0.575808
	DD	03f13ba50r			; 0.577062
	DD	03f140c5fr			; 0.578314
	DD	03f145e58r			; 0.579565
	DD	03f14b039r			; 0.580814
	DD	03f150204r			; 0.582062
	DD	03f1553b7r			; 0.583309
	DD	03f15a554r			; 0.584554
	DD	03f15f6d9r			; 0.585798
	DD	03f164847r			; 0.58704
	DD	03f16999fr			; 0.588282
	DD	03f16eader			; 0.589521
	DD	03f173c07r			; 0.59076
	DD	03f178d18r			; 0.591997
	DD	03f17de12r			; 0.593232
	DD	03f182ef5r			; 0.594467
	DD	03f187fc0r			; 0.595699
	DD	03f18d073r			; 0.596931
	DD	03f19210fr			; 0.598161
	DD	03f197194r			; 0.599389
	DD	03f19c200r			; 0.600616
	DD	03f1a1255r			; 0.601842
	DD	03f1a6293r			; 0.603067
	DD	03f1ab2b8r			; 0.60429
	DD	03f1b02c6r			; 0.605511
	DD	03f1b52bbr			; 0.606731
	DD	03f1ba299r			; 0.60795
	DD	03f1bf25fr			; 0.609167
	DD	03f1c420cr			; 0.610383
	DD	03f1c91a2r			; 0.611597
	DD	03f1ce11fr			; 0.61281
	DD	03f1d3084r			; 0.614022
	DD	03f1d7fd1r			; 0.615232
	DD	03f1dcf06r			; 0.61644
	DD	03f1e1e22r			; 0.617647
	DD	03f1e6d26r			; 0.618853
	DD	03f1ebc12r			; 0.620057
	DD	03f1f0ae5r			; 0.62126
	DD	03f1f599fr			; 0.622461
	DD	03f1fa841r			; 0.623661
	DD	03f1ff6cbr			; 0.62486
	DD	03f20453br			; 0.626056
	DD	03f209393r			; 0.627252
	DD	03f20e1d2r			; 0.628446
	DD	03f212ff9r			; 0.629638
	DD	03f217e06r			; 0.630829
	DD	03f21cbfbr			; 0.632019
	DD	03f2219d7r			; 0.633207
	DD	03f226799r			; 0.634393
	DD	03f22b543r			; 0.635578
	DD	03f2302d3r			; 0.636762
	DD	03f23504br			; 0.637944
	DD	03f239da9r			; 0.639124
	DD	03f23eaeer			; 0.640303
	DD	03f24381ar			; 0.641481
	DD	03f24852cr			; 0.642657
	DD	03f24d225r			; 0.643832
	DD	03f251f04r			; 0.645005
	DD	03f256bcbr			; 0.646176
	DD	03f25b877r			; 0.647346
	DD	03f26050ar			; 0.648514
	DD	03f265184r			; 0.649681
	DD	03f269de3r			; 0.650847
	DD	03f26ea2ar			; 0.652011
	DD	03f273656r			; 0.653173
	DD	03f278268r			; 0.654334
	DD	03f27ce61r			; 0.655493
	DD	03f281a40r			; 0.656651
	DD	03f286605r			; 0.657807
	DD	03f28b1b0r			; 0.658961
	DD	03f28fd41r			; 0.660114
	DD	03f2948b8r			; 0.661266
	DD	03f299415r			; 0.662416
	DD	03f29df57r			; 0.663564
	DD	03f2a2a80r			; 0.664711
	DD	03f2a758er			; 0.665856
	DD	03f2ac082r			; 0.667
	DD	03f2b0b5br			; 0.668142
	DD	03f2b561br			; 0.669283
	DD	03f2ba0bfr			; 0.670422
	DD	03f2beb4ar			; 0.671559
	DD	03f2c35b9r			; 0.672695
	DD	03f2c800fr			; 0.673829
	DD	03f2cca49r			; 0.674962
	DD	03f2d1469r			; 0.676093
	DD	03f2d5e6fr			; 0.677222
	DD	03f2da859r			; 0.67835
	DD	03f2df229r			; 0.679476
	DD	03f2e3bder			; 0.680601
	DD	03f2e8578r			; 0.681724
	DD	03f2ecef7r			; 0.682846
	DD	03f2f185br			; 0.683965
	DD	03f2f61a5r			; 0.685084
	DD	03f2faad3r			; 0.6862
	DD	03f2ff3e6r			; 0.687315
	DD	03f303cder			; 0.688429
	DD	03f3085bbr			; 0.689541
	DD	03f30ce7cr			; 0.690651
	DD	03f311722r			; 0.691759
	DD	03f315fadr			; 0.692866
	DD	03f31a81dr			; 0.693971
	DD	03f31f071r			; 0.695075
	DD	03f3238aar			; 0.696177
	DD	03f3280c7r			; 0.697277
	DD	03f32c8c9r			; 0.698376
	DD	03f3310afr			; 0.699473
	DD	03f33587ar			; 0.700569
	DD	03f33a029r			; 0.701663
	DD	03f33e7bcr			; 0.702755
	DD	03f342f34r			; 0.703845
	DD	03f34768fr			; 0.704934
	DD	03f34bdcfr			; 0.706021
	DD	03f3504f3r			; 0.707107
	DD	03f354bfbr			; 0.708191
	DD	03f3592e7r			; 0.709273
	DD	03f35d9b8r			; 0.710353
	DD	03f36206cr			; 0.711432
	DD	03f366704r			; 0.712509
	DD	03f36ad7fr			; 0.713585
	DD	03f36f3dfr			; 0.714659
	DD	03f373a23r			; 0.715731
	DD	03f37804ar			; 0.716801
	DD	03f37c655r			; 0.71787
	DD	03f380c43r			; 0.718937
	DD	03f385216r			; 0.720003
	DD	03f3897cbr			; 0.721066
	DD	03f38dd65r			; 0.722128
	DD	03f3922e1r			; 0.723188
	DD	03f396842r			; 0.724247
	DD	03f39ad85r			; 0.725304
	DD	03f39f2acr			; 0.726359
	DD	03f3a37b7r			; 0.727413
	DD	03f3a7ca4r			; 0.728464
	DD	03f3ac175r			; 0.729514
	DD	03f3b0629r			; 0.730563
	DD	03f3b4ac1r			; 0.731609
	DD	03f3b8f3br			; 0.732654
	DD	03f3bd398r			; 0.733697
	DD	03f3c17d9r			; 0.734739
	DD	03f3c5bfcr			; 0.735779
	DD	03f3ca003r			; 0.736817
	DD	03f3ce3ecr			; 0.737853
	DD	03f3d27b8r			; 0.738887
	DD	03f3d6b67r			; 0.73992
	DD	03f3daef9r			; 0.740951
	DD	03f3df26er			; 0.74198
	DD	03f3e35c5r			; 0.743008
	DD	03f3e78ffr			; 0.744034
	DD	03f3ebc1br			; 0.745058
	DD	03f3eff1br			; 0.74608
	DD	03f3f41fcr			; 0.747101
	DD	03f3f84c0r			; 0.748119
	DD	03f3fc767r			; 0.749136
	DD	03f4009f0r			; 0.750152
	DD	03f404c5cr			; 0.751165
	DD	03f408ea9r			; 0.752177
	DD	03f40d0dar			; 0.753187
	DD	03f4112ecr			; 0.754195
	DD	03f4154e1r			; 0.755201
	DD	03f4196b7r			; 0.756206
	DD	03f41d870r			; 0.757209
	DD	03f421a0br			; 0.75821
	DD	03f425b89r			; 0.759209
	DD	03f429ce8r			; 0.760207
	DD	03f42de29r			; 0.761202
	DD	03f431f4cr			; 0.762196
	DD	03f436051r			; 0.763188
	DD	03f43a138r			; 0.764179
	DD	03f43e200r			; 0.765167
	DD	03f4422abr			; 0.766154
	DD	03f446337r			; 0.767139
	DD	03f44a3a5r			; 0.768122
	DD	03f44e3f5r			; 0.769103
	DD	03f452426r			; 0.770083
	DD	03f456439r			; 0.771061
	DD	03f45a42dr			; 0.772036
	DD	03f45e403r			; 0.77301
	DD	03f4623bbr			; 0.773983
	DD	03f466354r			; 0.774953
	DD	03f46a2cer			; 0.775922
	DD	03f46e22ar			; 0.776888
	DD	03f472167r			; 0.777853
	DD	03f476085r			; 0.778817
	DD	03f479f84r			; 0.779778
	DD	03f47de65r			; 0.780737
	DD	03f481d27r			; 0.781695
	DD	03f485bcar			; 0.782651
	DD	03f489a4er			; 0.783605
	DD	03f48d8b3r			; 0.784557
	DD	03f4916far			; 0.785507
	DD	03f495521r			; 0.786455
	DD	03f499329r			; 0.787402
	DD	03f49d112r			; 0.788346
	DD	03f4a0edcr			; 0.789289
	DD	03f4a4c87r			; 0.79023
	DD	03f4a8a13r			; 0.791169
	DD	03f4ac77fr			; 0.792107
	DD	03f4b04ccr			; 0.793042
	DD	03f4b41far			; 0.793975
	DD	03f4b7f09r			; 0.794907
	DD	03f4bbbf8r			; 0.795837
	DD	03f4bf8c7r			; 0.796765
	DD	03f4c3578r			; 0.797691
	DD	03f4c7208r			; 0.798615
	DD	03f4cae79r			; 0.799537
	DD	03f4ceacbr			; 0.800458
	DD	03f4d26fdr			; 0.801376
	DD	03f4d6310r			; 0.802293
	DD	03f4d9f02r			; 0.803208
	DD	03f4ddad5r			; 0.80412
	DD	03f4e1689r			; 0.805031
	DD	03f4e521cr			; 0.80594
	DD	03f4e8d90r			; 0.806848
	DD	03f4ec8e4r			; 0.807753
	DD	03f4f0417r			; 0.808656
	DD	03f4f3f2br			; 0.809558
	DD	03f4f7a1fr			; 0.810457
	DD	03f4fb4f4r			; 0.811355
	DD	03f4fefa8r			; 0.812251
	DD	03f502a3br			; 0.813144
	DD	03f5064afr			; 0.814036
	DD	03f509f03r			; 0.814926
	DD	03f50d937r			; 0.815814
	DD	03f51134ar			; 0.816701
	DD	03f514d3dr			; 0.817585
	DD	03f518710r			; 0.818467
	DD	03f51c0c2r			; 0.819348
	DD	03f51fa54r			; 0.820226
	DD	03f5233c6r			; 0.821102
	DD	03f526d18r			; 0.821977
	DD	03f52a649r			; 0.82285
	DD	03f52df59r			; 0.823721
	DD	03f531849r			; 0.824589
	DD	03f535118r			; 0.825456
	DD	03f5389c7r			; 0.826321
	DD	03f53c255r			; 0.827184
	DD	03f53fac3r			; 0.828045
	DD	03f54330fr			; 0.828904
	DD	03f546b3br			; 0.829761
	DD	03f54a347r			; 0.830616
	DD	03f54db31r			; 0.83147
	DD	03f5512fbr			; 0.832321
	DD	03f554aa4r			; 0.83317
	DD	03f55822cr			; 0.834018
	DD	03f55b993r			; 0.834863
	DD	03f55f0d9r			; 0.835706
	DD	03f5627fer			; 0.836548
	DD	03f565f02r			; 0.837387
	DD	03f5695e5r			; 0.838225
	DD	03f56cca7r			; 0.83906
	DD	03f570348r			; 0.839894
	DD	03f5739c7r			; 0.840725
	DD	03f577026r			; 0.841555
	DD	03f57a663r			; 0.842383
	DD	03f57dc7fr			; 0.843208
	DD	03f581279r			; 0.844032
	DD	03f584853r			; 0.844854
	DD	03f587e0br			; 0.845673
	DD	03f58b3a1r			; 0.846491
	DD	03f58e916r			; 0.847307
	DD	03f591e6ar			; 0.84812
	DD	03f59539cr			; 0.848932
	DD	03f5988adr			; 0.849742
	DD	03f59bd9cr			; 0.850549
	DD	03f59f26ar			; 0.851355
	DD	03f5a2716r			; 0.852159
	DD	03f5a5ba0r			; 0.852961
	DD	03f5a9009r			; 0.85376
	DD	03f5ac450r			; 0.854558
	DD	03f5af875r			; 0.855354
	DD	03f5b2c79r			; 0.856147
	DD	03f5b605ar			; 0.856939
	DD	03f5b941ar			; 0.857729
	DD	03f5bc7b8r			; 0.858516
	DD	03f5bfb34r			; 0.859302
	DD	03f5c2e8er			; 0.860085
	DD	03f5c61c7r			; 0.860867
	DD	03f5c94ddr			; 0.861646
	DD	03f5cc7d1r			; 0.862424
	DD	03f5cfaa3r			; 0.863199
	DD	03f5d2d53r			; 0.863973
	DD	03f5d5fe1r			; 0.864744
	DD	03f5d924dr			; 0.865514
	DD	03f5dc497r			; 0.866281
	DD	03f5df6ber			; 0.867046
	DD	03f5e28c3r			; 0.867809
	DD	03f5e5aa6r			; 0.868571
	DD	03f5e8c67r			; 0.86933
	DD	03f5ebe05r			; 0.870087
	DD	03f5eef81r			; 0.870842
	DD	03f5f20dbr			; 0.871595
	DD	03f5f5212r			; 0.872346
	DD	03f5f8327r			; 0.873095
	DD	03f5fb419r			; 0.873842
	DD	03f5fe4e9r			; 0.874587
	DD	03f601596r			; 0.875329
	DD	03f604621r			; 0.87607
	DD	03f607689r			; 0.876809
	DD	03f60a6cfr			; 0.877545
	DD	03f60d6f2r			; 0.87828
	DD	03f6106f2r			; 0.879012
	DD	03f6136d0r			; 0.879743
	DD	03f61668ar			; 0.880471
	DD	03f619622r			; 0.881197
	DD	03f61c598r			; 0.881921
	DD	03f61f4ear			; 0.882643
	DD	03f62241ar			; 0.883363
	DD	03f625326r			; 0.884081
	DD	03f628210r			; 0.884797
	DD	03f62b0d7r			; 0.885511
	DD	03f62df7br			; 0.886223
	DD	03f630dfcr			; 0.886932
	DD	03f633c5ar			; 0.88764
	DD	03f636a95r			; 0.888345
	DD	03f6398acr			; 0.889048
	DD	03f63c6a1r			; 0.88975
	DD	03f63f473r			; 0.890449
	DD	03f642221r			; 0.891146
	DD	03f644facr			; 0.891841
	DD	03f647d14r			; 0.892534
	DD	03f64aa59r			; 0.893224
	DD	03f64d77br			; 0.893913
	DD	03f650479r			; 0.894599
	DD	03f653154r			; 0.895284
	DD	03f655e0br			; 0.895966
	DD	03f658aa0r			; 0.896646
	DD	03f65b710r			; 0.897325
	DD	03f65e35er			; 0.898001
	DD	03f660f88r			; 0.898674
	DD	03f663b8er			; 0.899346
	DD	03f666771r			; 0.900016
	DD	03f669330r			; 0.900683
	DD	03f66beccr			; 0.901349
	DD	03f66ea45r			; 0.902012
	DD	03f671599r			; 0.902673
	DD	03f6740car			; 0.903332
	DD	03f676bd8r			; 0.903989
	DD	03f6796c1r			; 0.904644
	DD	03f67c187r			; 0.905297
	DD	03f67ec29r			; 0.905947
	DD	03f6816a8r			; 0.906596
	DD	03f684103r			; 0.907242
	DD	03f686b39r			; 0.907886
	DD	03f68954cr			; 0.908528
	DD	03f68bf3cr			; 0.909168
	DD	03f68e907r			; 0.909806
	DD	03f6912aer			; 0.910441
	DD	03f693c32r			; 0.911075
	DD	03f696591r			; 0.911706
	DD	03f698eccr			; 0.912335
	DD	03f69b7e4r			; 0.912962
	DD	03f69e0d7r			; 0.913587
	DD	03f6a09a7r			; 0.91421
	DD	03f6a3252r			; 0.91483
	DD	03f6a5ad9r			; 0.915449
	DD	03f6a833cr			; 0.916065
	DD	03f6aab7br			; 0.916679
	DD	03f6ad395r			; 0.917291
	DD	03f6afb8cr			; 0.917901
	DD	03f6b235er			; 0.918508
	DD	03f6b4b0cr			; 0.919114
	DD	03f6b7295r			; 0.919717
	DD	03f6b99fbr			; 0.920318
	DD	03f6bc13br			; 0.920917
	DD	03f6be858r			; 0.921514
	DD	03f6c0f50r			; 0.922109
	DD	03f6c3624r			; 0.922701
	DD	03f6c5cd4r			; 0.923291
	DD	03f6c835er			; 0.92388
	DD	03f6ca9c5r			; 0.924465
	DD	03f6cd007r			; 0.925049
	DD	03f6cf624r			; 0.925631
	DD	03f6d1c1dr			; 0.92621
	DD	03f6d41f2r			; 0.926787
	DD	03f6d67a1r			; 0.927363
	DD	03f6d8d2dr			; 0.927935
	DD	03f6db293r			; 0.928506
	DD	03f6dd7d5r			; 0.929075
	DD	03f6dfcf2r			; 0.929641
	DD	03f6e21ebr			; 0.930205
	DD	03f6e46ber			; 0.930767
	DD	03f6e6b6dr			; 0.931327
	DD	03f6e8ff8r			; 0.931884
	DD	03f6eb45dr			; 0.93244
	DD	03f6ed89er			; 0.932993
	DD	03f6efcbar			; 0.933544
	DD	03f6f20b0r			; 0.934093
	DD	03f6f4483r			; 0.934639
	DD	03f6f6830r			; 0.935184
	DD	03f6f8bb8r			; 0.935726
	DD	03f6faf1br			; 0.936266
	DD	03f6fd25ar			; 0.936803
	DD	03f6ff573r			; 0.937339
	DD	03f701867r			; 0.937872
	DD	03f703b37r			; 0.938404
	DD	03f705de1r			; 0.938932
	DD	03f708066r			; 0.939459
	DD	03f70a2c6r			; 0.939984
	DD	03f70c501r			; 0.940506
	DD	03f70e717r			; 0.941026
	DD	03f710908r			; 0.941544
	DD	03f712ad4r			; 0.94206
	DD	03f714c7ar			; 0.942573
	DD	03f716dfbr			; 0.943084
	DD	03f718f57r			; 0.943593
	DD	03f71b08er			; 0.9441
	DD	03f71d19fr			; 0.944605
	DD	03f71f28cr			; 0.945107
	DD	03f721352r			; 0.945607
	DD	03f7233f4r			; 0.946105
	DD	03f725470r			; 0.946601
	DD	03f7274c7r			; 0.947094
	DD	03f7294f8r			; 0.947586
	DD	03f72b504r			; 0.948075
	DD	03f72d4ebr			; 0.948561
	DD	03f72f4acr			; 0.949046
	DD	03f731447r			; 0.949528
	DD	03f7333ber			; 0.950008
	DD	03f73530er			; 0.950486
	DD	03f737239r			; 0.950962
	DD	03f73913fr			; 0.951435
	DD	03f73b01fr			; 0.951906
	DD	03f73ced9r			; 0.952375
	DD	03f73ed6er			; 0.952842
	DD	03f740bddr			; 0.953306
	DD	03f742a27r			; 0.953768
	DD	03f74484br			; 0.954228
	DD	03f746649r			; 0.954686
	DD	03f748422r			; 0.955141
	DD	03f74a1d5r			; 0.955594
	DD	03f74bf62r			; 0.956045
	DD	03f74dcc9r			; 0.956494
	DD	03f74fa0br			; 0.95694
	DD	03f751727r			; 0.957385
	DD	03f75341dr			; 0.957826
	DD	03f7550edr			; 0.958266
	DD	03f756d97r			; 0.958703
	DD	03f758a1cr			; 0.959139
	DD	03f75a67br			; 0.959572
	DD	03f75c2b3r			; 0.960002
	DD	03f75dec6r			; 0.960431
	DD	03f75fab3r			; 0.960857
	DD	03f76167ar			; 0.96128
	DD	03f76321br			; 0.961702
	DD	03f764d97r			; 0.962121
	DD	03f7668ecr			; 0.962538
	DD	03f76841br			; 0.962953
	DD	03f769f24r			; 0.963366
	DD	03f76ba07r			; 0.963776
	DD	03f76d4c4r			; 0.964184
	DD	03f76ef5br			; 0.96459
	DD	03f7709ccr			; 0.964993
	DD	03f772417r			; 0.965394
	DD	03f773e3cr			; 0.965793
	DD	03f77583ar			; 0.96619
	DD	03f777213r			; 0.966584
	DD	03f778bc5r			; 0.966976
	DD	03f77a551r			; 0.967366
	DD	03f77beb7r			; 0.967754
	DD	03f77d7f7r			; 0.968139
	DD	03f77f110r			; 0.968522
	DD	03f780a04r			; 0.968903
	DD	03f7822d1r			; 0.969281
	DD	03f783b77r			; 0.969657
	DD	03f7853f8r			; 0.970031
	DD	03f786c52r			; 0.970403
	DD	03f788486r			; 0.970772
	DD	03f789c93r			; 0.971139
	DD	03f78b47br			; 0.971504
	DD	03f78cc3br			; 0.971866
	DD	03f78e3d6r			; 0.972227
	DD	03f78fb4ar			; 0.972584
	DD	03f791298r			; 0.97294
	DD	03f7929bfr			; 0.973293
	DD	03f7940c0r			; 0.973644
	DD	03f79579ar			; 0.973993
	DD	03f796e4er			; 0.974339
	DD	03f7984dcr			; 0.974684
	DD	03f799b43r			; 0.975025
	DD	03f79b183r			; 0.975365
	DD	03f79c79dr			; 0.975702
	DD	03f79dd91r			; 0.976037
	DD	03f79f35er			; 0.97637
	DD	03f7a0904r			; 0.9767
	DD	03f7a1e84r			; 0.977028
	DD	03f7a33ddr			; 0.977354
	DD	03f7a4910r			; 0.977677
	DD	03f7a5e1cr			; 0.977998
	DD	03f7a7302r			; 0.978317
	DD	03f7a87c1r			; 0.978634
	DD	03f7a9c59r			; 0.978948
	DD	03f7ab0cbr			; 0.97926
	DD	03f7ac516r			; 0.97957
	DD	03f7ad93ar			; 0.979877
	DD	03f7aed37r			; 0.980182
	DD	03f7b010er			; 0.980485
	DD	03f7b14ber			; 0.980785
	DD	03f7b2848r			; 0.981083
	DD	03f7b3babr			; 0.981379
	DD	03f7b4ee7r			; 0.981673
	DD	03f7b61fcr			; 0.981964
	DD	03f7b74ear			; 0.982253
	DD	03f7b87b2r			; 0.982539
	DD	03f7b9a53r			; 0.982824
	DD	03f7baccdr			; 0.983105
	DD	03f7bbf20r			; 0.983385
	DD	03f7bd14dr			; 0.983662
	DD	03f7be353r			; 0.983937
	DD	03f7bf531r			; 0.98421
	DD	03f7c06e9r			; 0.98448
	DD	03f7c187ar			; 0.984748
	DD	03f7c29e5r			; 0.985014
	DD	03f7c3b28r			; 0.985278
	DD	03f7c4c44r			; 0.985539
	DD	03f7c5d3ar			; 0.985798
	DD	03f7c6e08r			; 0.986054
	DD	03f7c7eb0r			; 0.986308
	DD	03f7c8f31r			; 0.98656
	DD	03f7c9f8ar			; 0.986809
	DD	03f7cafbdr			; 0.987057
	DD	03f7cbfc9r			; 0.987301
	DD	03f7ccfaer			; 0.987544
	DD	03f7cdf6cr			; 0.987784
	DD	03f7cef03r			; 0.988022
	DD	03f7cfe73r			; 0.988258
	DD	03f7d0dbcr			; 0.988491
	DD	03f7d1cddr			; 0.988722
	DD	03f7d2bd8r			; 0.98895
	DD	03f7d3aacr			; 0.989177
	DD	03f7d4959r			; 0.9894
	DD	03f7d57der			; 0.989622
	DD	03f7d663dr			; 0.989841
	DD	03f7d7474r			; 0.990058
	DD	03f7d8285r			; 0.990273
	DD	03f7d906er			; 0.990485
	DD	03f7d9e30r			; 0.990695
	DD	03f7dabccr			; 0.990903
	DD	03f7db940r			; 0.991108
	DD	03f7dc68cr			; 0.991311
	DD	03f7dd3b2r			; 0.991511
	DD	03f7de0b1r			; 0.99171
	DD	03f7ded88r			; 0.991906
	DD	03f7dfa38r			; 0.992099
	DD	03f7e06c2r			; 0.992291
	DD	03f7e1324r			; 0.99248
	DD	03f7e1f5er			; 0.992666
	DD	03f7e2b72r			; 0.99285
	DD	03f7e375er			; 0.993032
	DD	03f7e4323r			; 0.993212
	DD	03f7e4ec1r			; 0.993389
	DD	03f7e5a38r			; 0.993564
	DD	03f7e6588r			; 0.993737
	DD	03f7e70b0r			; 0.993907
	DD	03f7e7bb1r			; 0.994075
	DD	03f7e868br			; 0.99424
	DD	03f7e913dr			; 0.994404
	DD	03f7e9bc9r			; 0.994565
	DD	03f7ea62dr			; 0.994723
	DD	03f7eb069r			; 0.994879
	DD	03f7eba7fr			; 0.995033
	DD	03f7ec46dr			; 0.995185
	DD	03f7ece34r			; 0.995334
	DD	03f7ed7d4r			; 0.995481
	DD	03f7ee14cr			; 0.995625
	DD	03f7eea9dr			; 0.995767
	DD	03f7ef3c7r			; 0.995907
	DD	03f7efcc9r			; 0.996045
	DD	03f7f05a4r			; 0.99618
	DD	03f7f0e58r			; 0.996313
	DD	03f7f16e4r			; 0.996443
	DD	03f7f1f49r			; 0.996571
	DD	03f7f2787r			; 0.996697
	DD	03f7f2f9dr			; 0.99682
	DD	03f7f378cr			; 0.996941
	DD	03f7f3f54r			; 0.99706
	DD	03f7f46f4r			; 0.997176
	DD	03f7f4e6dr			; 0.99729
	DD	03f7f55bfr			; 0.997402
	DD	03f7f5ce9r			; 0.997511
	DD	03f7f63ecr			; 0.997618
	DD	03f7f6ac7r			; 0.997723
	DD	03f7f717br			; 0.997825
	DD	03f7f7808r			; 0.997925
	DD	03f7f7e6dr			; 0.998023
	DD	03f7f84abr			; 0.998118
	DD	03f7f8ac2r			; 0.998211
	DD	03f7f90b1r			; 0.998302
	DD	03f7f9678r			; 0.99839
	DD	03f7f9c18r			; 0.998476
	DD	03f7fa191r			; 0.998559
	DD	03f7fa6e3r			; 0.99864
	DD	03f7fac0dr			; 0.998719
	DD	03f7fb10fr			; 0.998795
	DD	03f7fb5ear			; 0.99887
	DD	03f7fba9er			; 0.998941
	DD	03f7fbf2ar			; 0.999011
	DD	03f7fc38fr			; 0.999078
	DD	03f7fc7ccr			; 0.999142
	DD	03f7fcbe2r			; 0.999205
	DD	03f7fcfd1r			; 0.999265
	DD	03f7fd397r			; 0.999322
	DD	03f7fd737r			; 0.999378
	DD	03f7fdaafr			; 0.999431
	DD	03f7fde00r			; 0.999481
	DD	03f7fe129r			; 0.999529
	DD	03f7fe42br			; 0.999575
	DD	03f7fe705r			; 0.999619
	DD	03f7fe9b8r			; 0.99966
	DD	03f7fec43r			; 0.999699
	DD	03f7feea7r			; 0.999735
	DD	03f7ff0e3r			; 0.999769
	DD	03f7ff2f8r			; 0.999801
	DD	03f7ff4e6r			; 0.999831
	DD	03f7ff6acr			; 0.999858
	DD	03f7ff84ar			; 0.999882
	DD	03f7ff9c1r			; 0.999905
	DD	03f7ffb11r			; 0.999925
	DD	03f7ffc39r			; 0.999942
	DD	03f7ffd39r			; 0.999958
	DD	03f7ffe13r			; 0.999971
	DD	03f7ffec4r			; 0.999981
	DD	03f7fff4er			; 0.999989
	DD	03f7fffb1r			; 0.999995
	DD	03f7fffecr			; 0.999999
?g_fIdvSinTable@@3QBMB DD 000000000r		; 0	; g_fIdvSinTable
	DD	03ac90fd5r			; 0.00153398
	DD	03b490fc6r			; 0.00306796
	DD	03b96cbc1r			; 0.00460193
	DD	03bc90f88r			; 0.00613588
	DD	03bfb5330r			; 0.00766983
	DD	03c16cb58r			; 0.00920375
	DD	03c2fed02r			; 0.0107377
	DD	03c490e90r			; 0.0122715
	DD	03c622fffr			; 0.0138054
	DD	03c7b514br			; 0.0153392
	DD	03c8a3938r			; 0.016873
	DD	03c96c9b6r			; 0.0184067
	DD	03ca35a1cr			; 0.0199404
	DD	03cafea69r			; 0.0214741
	DD	03cbc7a9br			; 0.0230077
	DD	03cc90ab0r			; 0.0245412
	DD	03cd59aa6r			; 0.0260747
	DD	03ce22a7ar			; 0.0276081
	DD	03ceeba2cr			; 0.0291415
	DD	03cfb49bar			; 0.0306748
	DD	03d03ec90r			; 0.032208
	DD	03d0a342fr			; 0.0337412
	DD	03d107bb8r			; 0.0352742
	DD	03d16c32cr			; 0.0368072
	DD	03d1d0a88r			; 0.0383401
	DD	03d2351cbr			; 0.0398729
	DD	03d2998f6r			; 0.0414056
	DD	03d2fe007r			; 0.0429383
	DD	03d3626fcr			; 0.0444708
	DD	03d3c6dd5r			; 0.0460032
	DD	03d42b491r			; 0.0475355
	DD	03d48fb30r			; 0.0490677
	DD	03d4f41afr			; 0.0505998
	DD	03d55880er			; 0.0521317
	DD	03d5bce4cr			; 0.0536635
	DD	03d621469r			; 0.0551952
	DD	03d685a62r			; 0.0567268
	DD	03d6ea038r			; 0.0582583
	DD	03d74e5e9r			; 0.0597896
	DD	03d7b2b74r			; 0.0613207
	DD	03d80b86cr			; 0.0628518
	DD	03d83db0ar			; 0.0643826
	DD	03d86fd94r			; 0.0659133
	DD	03d8a200ar			; 0.0674439
	DD	03d8d426ar			; 0.0689743
	DD	03d9064b4r			; 0.0705046
	DD	03d9386e7r			; 0.0720346
	DD	03d96a905r			; 0.0735646
	DD	03d99cb0ar			; 0.0750943
	DD	03d9cecf9r			; 0.0766239
	DD	03da00ecfr			; 0.0781532
	DD	03da3308cr			; 0.0796824
	DD	03da65230r			; 0.0812114
	DD	03da973bar			; 0.0827403
	DD	03dac952br			; 0.0842689
	DD	03dafb680r			; 0.0857973
	DD	03db2d7bbr			; 0.0873255
	DD	03db5f8dar			; 0.0888536
	DD	03db919ddr			; 0.0903814
	DD	03dbc3ac3r			; 0.091909
	DD	03dbf5b8dr			; 0.0934363
	DD	03dc27c39r			; 0.0949635
	DD	03dc59cc6r			; 0.0964904
	DD	03dc8bd36r			; 0.0980171
	DD	03dcbdd86r			; 0.0995436
	DD	03dcefdb7r			; 0.10107
	DD	03dd21dc8r			; 0.102596
	DD	03dd53db9r			; 0.104122
	DD	03dd85d89r			; 0.105647
	DD	03ddb7d37r			; 0.107172
	DD	03dde9cc4r			; 0.108697
	DD	03de1bc2er			; 0.110222
	DD	03de4db76r			; 0.111747
	DD	03de7fa9ar			; 0.113271
	DD	03deb199ar			; 0.114795
	DD	03dee3876r			; 0.116319
	DD	03df1572er			; 0.117842
	DD	03df475c0r			; 0.119365
	DD	03df7942cr			; 0.120888
	DD	03dfab273r			; 0.122411
	DD	03dfdd092r			; 0.123933
	DD	03e007745r			; 0.125455
	DD	03e02062er			; 0.126977
	DD	03e039502r			; 0.128498
	DD	03e0523c2r			; 0.130019
	DD	03e06b26er			; 0.13154
	DD	03e084105r			; 0.133061
	DD	03e09cf86r			; 0.134581
	DD	03e0b5df3r			; 0.136101
	DD	03e0cec4ar			; 0.13762
	DD	03e0e7a8br			; 0.139139
	DD	03e1008b7r			; 0.140658
	DD	03e1196ccr			; 0.142177
	DD	03e1324car			; 0.143695
	DD	03e14b2b2r			; 0.145213
	DD	03e164083r			; 0.14673
	DD	03e17ce3dr			; 0.148248
	DD	03e195be0r			; 0.149765
	DD	03e1ae96br			; 0.151281
	DD	03e1c76der			; 0.152797
	DD	03e1e0438r			; 0.154313
	DD	03e1f917br			; 0.155828
	DD	03e211ea5r			; 0.157343
	DD	03e22abb6r			; 0.158858
	DD	03e2438adr			; 0.160372
	DD	03e25c58cr			; 0.161886
	DD	03e275251r			; 0.1634
	DD	03e28defcr			; 0.164913
	DD	03e2a6b8dr			; 0.166426
	DD	03e2bf804r			; 0.167938
	DD	03e2d8461r			; 0.16945
	DD	03e2f10a2r			; 0.170962
	DD	03e309cc9r			; 0.172473
	DD	03e3228d4r			; 0.173984
	DD	03e33b4c4r			; 0.175494
	DD	03e354098r			; 0.177004
	DD	03e36cc50r			; 0.178514
	DD	03e3857ecr			; 0.180023
	DD	03e39e36cr			; 0.181532
	DD	03e3b6ecfr			; 0.18304
	DD	03e3cfa15r			; 0.184548
	DD	03e3e853er			; 0.186055
	DD	03e401049r			; 0.187562
	DD	03e419b37r			; 0.189069
	DD	03e432607r			; 0.190575
	DD	03e44b0b9r			; 0.19208
	DD	03e463b4dr			; 0.193586
	DD	03e47c5c2r			; 0.19509
	DD	03e495018r			; 0.196595
	DD	03e4ada4fr			; 0.198098
	DD	03e4c6467r			; 0.199602
	DD	03e4dee60r			; 0.201105
	DD	03e4f7838r			; 0.202607
	DD	03e5101f1r			; 0.204109
	DD	03e528b89r			; 0.20561
	DD	03e541501r			; 0.207111
	DD	03e559e58r			; 0.208612
	DD	03e57278fr			; 0.210112
	DD	03e58b0a4r			; 0.211611
	DD	03e5a3997r			; 0.21311
	DD	03e5bc26ar			; 0.214609
	DD	03e5d4b1ar			; 0.216107
	DD	03e5ed3a8r			; 0.217604
	DD	03e605c13r			; 0.219101
	DD	03e61e45cr			; 0.220598
	DD	03e636c83r			; 0.222094
	DD	03e64f486r			; 0.223589
	DD	03e667c66r			; 0.225084
	DD	03e680422r			; 0.226578
	DD	03e698bbar			; 0.228072
	DD	03e6b132fr			; 0.229565
	DD	03e6c9a7fr			; 0.231058
	DD	03e6e21abr			; 0.23255
	DD	03e6fa8b2r			; 0.234042
	DD	03e712f94r			; 0.235533
	DD	03e72b651r			; 0.237024
	DD	03e743ce8r			; 0.238514
	DD	03e75c35ar			; 0.240003
	DD	03e7749a6r			; 0.241492
	DD	03e78cfccr			; 0.24298
	DD	03e7a55cbr			; 0.244468
	DD	03e7bdba4r			; 0.245955
	DD	03e7d6156r			; 0.247442
	DD	03e7ee6e1r			; 0.248928
	DD	03e803622r			; 0.250413
	DD	03e80f8c0r			; 0.251898
	DD	03e81bb4ar			; 0.253382
	DD	03e827dc0r			; 0.254866
	DD	03e834022r			; 0.256349
	DD	03e840270r			; 0.257831
	DD	03e84c4aar			; 0.259313
	DD	03e8586cer			; 0.260794
	DD	03e8648dfr			; 0.262275
	DD	03e870adar			; 0.263755
	DD	03e87ccc1r			; 0.265234
	DD	03e888e93r			; 0.266713
	DD	03e895050r			; 0.268191
	DD	03e8a11f7r			; 0.269668
	DD	03e8ad38ar			; 0.271145
	DD	03e8b9507r			; 0.272621
	DD	03e8c566er			; 0.274097
	DD	03e8d17c0r			; 0.275572
	DD	03e8dd8fcr			; 0.277046
	DD	03e8e9a22r			; 0.27852
	DD	03e8f5b32r			; 0.279993
	DD	03e901c2cr			; 0.281465
	DD	03e90dd10r			; 0.282937
	DD	03e919dddr			; 0.284408
	DD	03e925e94r			; 0.285878
	DD	03e931f35r			; 0.287347
	DD	03e93dfbfr			; 0.288816
	DD	03e94a031r			; 0.290285
	DD	03e95608dr			; 0.291752
	DD	03e9620d2r			; 0.293219
	DD	03e96e100r			; 0.294685
	DD	03e97a117r			; 0.296151
	DD	03e986116r			; 0.297616
	DD	03e9920fer			; 0.29908
	DD	03e99e0cer			; 0.300543
	DD	03e9aa086r			; 0.302006
	DD	03e9b6027r			; 0.303468
	DD	03e9c1fafr			; 0.304929
	DD	03e9cdf20r			; 0.30639
	DD	03e9d9e78r			; 0.30785
	DD	03e9e5db8r			; 0.309309
	DD	03e9f1cdfr			; 0.310767
	DD	03e9fdbeer			; 0.312225
	DD	03ea09ae5r			; 0.313682
	DD	03ea159c2r			; 0.315138
	DD	03ea21887r			; 0.316593
	DD	03ea2d733r			; 0.318048
	DD	03ea395c5r			; 0.319502
	DD	03ea4543fr			; 0.320955
	DD	03ea5129fr			; 0.322408
	DD	03ea5d0e5r			; 0.323859
	DD	03ea68f12r			; 0.32531
	DD	03ea74d25r			; 0.32676
	DD	03ea80b1fr			; 0.32821
	DD	03ea8c8fer			; 0.329658
	DD	03ea986c4r			; 0.331106
	DD	03eaa446fr			; 0.332553
	DD	03eab0201r			; 0.334
	DD	03eabbf77r			; 0.335445
	DD	03eac7cd4r			; 0.33689
	DD	03ead3a15r			; 0.338334
	DD	03eadf73cr			; 0.339777
	DD	03eaeb449r			; 0.341219
	DD	03eaf713ar			; 0.342661
	DD	03eb02e10r			; 0.344101
	DD	03eb0eacbr			; 0.345541
	DD	03eb1a76br			; 0.34698
	DD	03eb263efr			; 0.348419
	DD	03eb32058r			; 0.349856
	DD	03eb3dca5r			; 0.351293
	DD	03eb498d6r			; 0.352729
	DD	03eb554ecr			; 0.354164
	DD	03eb610e6r			; 0.355598
	DD	03eb6ccc3r			; 0.357031
	DD	03eb78884r			; 0.358463
	DD	03eb8442ar			; 0.359895
	DD	03eb8ffb2r			; 0.361326
	DD	03eb9bb1er			; 0.362756
	DD	03eba766er			; 0.364185
	DD	03ebb31a0r			; 0.365613
	DD	03ebbecb6r			; 0.36704
	DD	03ebca7afr			; 0.368467
	DD	03ebd628br			; 0.369892
	DD	03ebe1d4ar			; 0.371317
	DD	03ebed7ebr			; 0.372741
	DD	03ebf926fr			; 0.374164
	DD	03ec04cd5r			; 0.375586
	DD	03ec1071er			; 0.377007
	DD	03ec1c148r			; 0.378428
	DD	03ec27b55r			; 0.379847
	DD	03ec33544r			; 0.381266
	DD	03ec3ef15r			; 0.382683
	DD	03ec4a8c8r			; 0.3841
	DD	03ec5625cr			; 0.385516
	DD	03ec61bd2r			; 0.386931
	DD	03ec6d529r			; 0.388345
	DD	03ec78e62r			; 0.389758
	DD	03ec8477cr			; 0.39117
	DD	03ec90077r			; 0.392582
	DD	03ec9b953r			; 0.393992
	DD	03eca7210r			; 0.395401
	DD	03ecb2aaer			; 0.39681
	DD	03ecbe32cr			; 0.398218
	DD	03ecc9b8br			; 0.399624
	DD	03ecd53car			; 0.40103
	DD	03ece0bear			; 0.402435
	DD	03ecec3ear			; 0.403838
	DD	03ecf7bcar			; 0.405241
	DD	03ed0338ar			; 0.406643
	DD	03ed0eb2ar			; 0.408044
	DD	03ed1a2aar			; 0.409444
	DD	03ed25a09r			; 0.410843
	DD	03ed31148r			; 0.412241
	DD	03ed3c867r			; 0.413638
	DD	03ed47f64r			; 0.415034
	DD	03ed53641r			; 0.41643
	DD	03ed5ecfdr			; 0.417824
	DD	03ed6a399r			; 0.419217
	DD	03ed75a13r			; 0.420609
	DD	03ed8106br			; 0.422
	DD	03ed8c6a3r			; 0.42339
	DD	03ed97cb9r			; 0.42478
	DD	03eda32adr			; 0.426168
	DD	03edae880r			; 0.427555
	DD	03edb9e31r			; 0.428941
	DD	03edc53c1r			; 0.430326
	DD	03edd092er			; 0.431711
	DD	03eddbe79r			; 0.433094
	DD	03ede73a2r			; 0.434476
	DD	03edf28a9r			; 0.435857
	DD	03edfdd8dr			; 0.437237
	DD	03ee0924fr			; 0.438616
	DD	03ee146eer			; 0.439994
	DD	03ee1fb6ar			; 0.441371
	DD	03ee2afc4r			; 0.442747
	DD	03ee363far			; 0.444122
	DD	03ee4180er			; 0.445496
	DD	03ee4cbfer			; 0.446869
	DD	03ee57fcbr			; 0.448241
	DD	03ee63375r			; 0.449611
	DD	03ee6e6fbr			; 0.450981
	DD	03ee79a5dr			; 0.45235
	DD	03ee84d9cr			; 0.453717
	DD	03ee900b7r			; 0.455084
	DD	03ee9b3aer			; 0.456449
	DD	03eea6681r			; 0.457813
	DD	03eeb1930r			; 0.459177
	DD	03eebcbbbr			; 0.460539
	DD	03eec7e21r			; 0.4619
	DD	03eed3063r			; 0.46326
	DD	03eede280r			; 0.464619
	DD	03eee9479r			; 0.465977
	DD	03eef464cr			; 0.467333
	DD	03eeff7fbr			; 0.468689
	DD	03ef0a985r			; 0.470043
	DD	03ef15aear			; 0.471397
	DD	03ef20c29r			; 0.472749
	DD	03ef2bd43r			; 0.4741
	DD	03ef36e38r			; 0.47545
	DD	03ef41f07r			; 0.476799
	DD	03ef4cfb1r			; 0.478147
	DD	03ef58035r			; 0.479494
	DD	03ef63093r			; 0.480839
	DD	03ef6e0cbr			; 0.482184
	DD	03ef790dcr			; 0.483527
	DD	03ef840c8r			; 0.484869
	DD	03ef8f08er			; 0.48621
	DD	03ef9a02dr			; 0.48755
	DD	03efa4fa5r			; 0.488889
	DD	03efafef7r			; 0.490226
	DD	03efbae22r			; 0.491563
	DD	03efc5d27r			; 0.492898
	DD	03efd0c04r			; 0.494232
	DD	03efdbabbr			; 0.495565
	DD	03efe694ar			; 0.496897
	DD	03eff17b2r			; 0.498228
	DD	03effc5f3r			; 0.499557
	DD	03f003a06r			; 0.500885
	DD	03f0090ffr			; 0.502212
	DD	03f00e7e4r			; 0.503538
	DD	03f013eb5r			; 0.504863
	DD	03f019573r			; 0.506187
	DD	03f01ec1cr			; 0.507509
	DD	03f0242b1r			; 0.50883
	DD	03f029932r			; 0.51015
	DD	03f02ef9fr			; 0.511469
	DD	03f0345f8r			; 0.512786
	DD	03f039c3dr			; 0.514103
	DD	03f03f26dr			; 0.515418
	DD	03f044889r			; 0.516732
	DD	03f049e91r			; 0.518045
	DD	03f04f484r			; 0.519356
	DD	03f054a62r			; 0.520666
	DD	03f05a02cr			; 0.521975
	DD	03f05f5e2r			; 0.523283
	DD	03f064b82r			; 0.52459
	DD	03f06a10er			; 0.525895
	DD	03f06f686r			; 0.527199
	DD	03f074be8r			; 0.528502
	DD	03f07a136r			; 0.529804
	DD	03f07f66fr			; 0.531104
	DD	03f084b92r			; 0.532403
	DD	03f08a0a1r			; 0.533701
	DD	03f08f59br			; 0.534998
	DD	03f094a7fr			; 0.536293
	DD	03f099f4er			; 0.537587
	DD	03f09f409r			; 0.53888
	DD	03f0a48adr			; 0.540171
	DD	03f0a9d3dr			; 0.541462
	DD	03f0af1b7r			; 0.542751
	DD	03f0b461cr			; 0.544039
	DD	03f0b9a6br			; 0.545325
	DD	03f0beea5r			; 0.54661
	DD	03f0c42c9r			; 0.547894
	DD	03f0c96d7r			; 0.549177
	DD	03f0cead0r			; 0.550458
	DD	03f0d3eb3r			; 0.551738
	DD	03f0d9281r			; 0.553017
	DD	03f0de638r			; 0.554294
	DD	03f0e39dar			; 0.55557
	DD	03f0e8d65r			; 0.556845
	DD	03f0ee0dbr			; 0.558119
	DD	03f0f343br			; 0.559391
	DD	03f0f8784r			; 0.560662
	DD	03f0fdab8r			; 0.561931
	DD	03f102dd5r			; 0.563199
	DD	03f1080dcr			; 0.564466
	DD	03f10d3cdr			; 0.565732
	DD	03f1126a7r			; 0.566996
	DD	03f11796br			; 0.568259
	DD	03f11cc19r			; 0.569521
	DD	03f121eb0r			; 0.570781
	DD	03f127130r			; 0.57204
	DD	03f12c39ar			; 0.573297
	DD	03f1315eer			; 0.574553
	DD	03f13682ar			; 0.575808
	DD	03f13ba50r			; 0.577062
	DD	03f140c5fr			; 0.578314
	DD	03f145e58r			; 0.579565
	DD	03f14b039r			; 0.580814
	DD	03f150204r			; 0.582062
	DD	03f1553b7r			; 0.583309
	DD	03f15a554r			; 0.584554
	DD	03f15f6d9r			; 0.585798
	DD	03f164847r			; 0.58704
	DD	03f16999fr			; 0.588282
	DD	03f16eader			; 0.589521
	DD	03f173c07r			; 0.59076
	DD	03f178d18r			; 0.591997
	DD	03f17de12r			; 0.593232
	DD	03f182ef5r			; 0.594467
	DD	03f187fc0r			; 0.595699
	DD	03f18d073r			; 0.596931
	DD	03f19210fr			; 0.598161
	DD	03f197194r			; 0.599389
	DD	03f19c200r			; 0.600616
	DD	03f1a1255r			; 0.601842
	DD	03f1a6293r			; 0.603067
	DD	03f1ab2b8r			; 0.60429
	DD	03f1b02c6r			; 0.605511
	DD	03f1b52bbr			; 0.606731
	DD	03f1ba299r			; 0.60795
	DD	03f1bf25fr			; 0.609167
	DD	03f1c420cr			; 0.610383
	DD	03f1c91a2r			; 0.611597
	DD	03f1ce11fr			; 0.61281
	DD	03f1d3084r			; 0.614022
	DD	03f1d7fd1r			; 0.615232
	DD	03f1dcf06r			; 0.61644
	DD	03f1e1e22r			; 0.617647
	DD	03f1e6d26r			; 0.618853
	DD	03f1ebc12r			; 0.620057
	DD	03f1f0ae5r			; 0.62126
	DD	03f1f599fr			; 0.622461
	DD	03f1fa841r			; 0.623661
	DD	03f1ff6cbr			; 0.62486
	DD	03f20453br			; 0.626056
	DD	03f209393r			; 0.627252
	DD	03f20e1d2r			; 0.628446
	DD	03f212ff9r			; 0.629638
	DD	03f217e06r			; 0.630829
	DD	03f21cbfbr			; 0.632019
	DD	03f2219d7r			; 0.633207
	DD	03f226799r			; 0.634393
	DD	03f22b543r			; 0.635578
	DD	03f2302d3r			; 0.636762
	DD	03f23504br			; 0.637944
	DD	03f239da9r			; 0.639124
	DD	03f23eaeer			; 0.640303
	DD	03f24381ar			; 0.641481
	DD	03f24852cr			; 0.642657
	DD	03f24d225r			; 0.643832
	DD	03f251f04r			; 0.645005
	DD	03f256bcbr			; 0.646176
	DD	03f25b877r			; 0.647346
	DD	03f26050ar			; 0.648514
	DD	03f265184r			; 0.649681
	DD	03f269de3r			; 0.650847
	DD	03f26ea2ar			; 0.652011
	DD	03f273656r			; 0.653173
	DD	03f278268r			; 0.654334
	DD	03f27ce61r			; 0.655493
	DD	03f281a40r			; 0.656651
	DD	03f286605r			; 0.657807
	DD	03f28b1b0r			; 0.658961
	DD	03f28fd41r			; 0.660114
	DD	03f2948b8r			; 0.661266
	DD	03f299415r			; 0.662416
	DD	03f29df57r			; 0.663564
	DD	03f2a2a80r			; 0.664711
	DD	03f2a758er			; 0.665856
	DD	03f2ac082r			; 0.667
	DD	03f2b0b5br			; 0.668142
	DD	03f2b561br			; 0.669283
	DD	03f2ba0bfr			; 0.670422
	DD	03f2beb4ar			; 0.671559
	DD	03f2c35b9r			; 0.672695
	DD	03f2c800fr			; 0.673829
	DD	03f2cca49r			; 0.674962
	DD	03f2d1469r			; 0.676093
	DD	03f2d5e6fr			; 0.677222
	DD	03f2da859r			; 0.67835
	DD	03f2df229r			; 0.679476
	DD	03f2e3bder			; 0.680601
	DD	03f2e8578r			; 0.681724
	DD	03f2ecef7r			; 0.682846
	DD	03f2f185br			; 0.683965
	DD	03f2f61a5r			; 0.685084
	DD	03f2faad3r			; 0.6862
	DD	03f2ff3e6r			; 0.687315
	DD	03f303cder			; 0.688429
	DD	03f3085bbr			; 0.689541
	DD	03f30ce7cr			; 0.690651
	DD	03f311722r			; 0.691759
	DD	03f315fadr			; 0.692866
	DD	03f31a81dr			; 0.693971
	DD	03f31f071r			; 0.695075
	DD	03f3238aar			; 0.696177
	DD	03f3280c7r			; 0.697277
	DD	03f32c8c9r			; 0.698376
	DD	03f3310afr			; 0.699473
	DD	03f33587ar			; 0.700569
	DD	03f33a029r			; 0.701663
	DD	03f33e7bcr			; 0.702755
	DD	03f342f34r			; 0.703845
	DD	03f34768fr			; 0.704934
	DD	03f34bdcfr			; 0.706021
	DD	03f3504f3r			; 0.707107
	DD	03f354bfbr			; 0.708191
	DD	03f3592e7r			; 0.709273
	DD	03f35d9b8r			; 0.710353
	DD	03f36206cr			; 0.711432
	DD	03f366704r			; 0.712509
	DD	03f36ad7fr			; 0.713585
	DD	03f36f3dfr			; 0.714659
	DD	03f373a23r			; 0.715731
	DD	03f37804ar			; 0.716801
	DD	03f37c655r			; 0.71787
	DD	03f380c43r			; 0.718937
	DD	03f385216r			; 0.720003
	DD	03f3897cbr			; 0.721066
	DD	03f38dd65r			; 0.722128
	DD	03f3922e1r			; 0.723188
	DD	03f396842r			; 0.724247
	DD	03f39ad85r			; 0.725304
	DD	03f39f2acr			; 0.726359
	DD	03f3a37b7r			; 0.727413
	DD	03f3a7ca4r			; 0.728464
	DD	03f3ac175r			; 0.729514
	DD	03f3b0629r			; 0.730563
	DD	03f3b4ac1r			; 0.731609
	DD	03f3b8f3br			; 0.732654
	DD	03f3bd398r			; 0.733697
	DD	03f3c17d9r			; 0.734739
	DD	03f3c5bfcr			; 0.735779
	DD	03f3ca003r			; 0.736817
	DD	03f3ce3ecr			; 0.737853
	DD	03f3d27b8r			; 0.738887
	DD	03f3d6b67r			; 0.73992
	DD	03f3daef9r			; 0.740951
	DD	03f3df26er			; 0.74198
	DD	03f3e35c5r			; 0.743008
	DD	03f3e78ffr			; 0.744034
	DD	03f3ebc1br			; 0.745058
	DD	03f3eff1br			; 0.74608
	DD	03f3f41fcr			; 0.747101
	DD	03f3f84c0r			; 0.748119
	DD	03f3fc767r			; 0.749136
	DD	03f4009f0r			; 0.750152
	DD	03f404c5cr			; 0.751165
	DD	03f408ea9r			; 0.752177
	DD	03f40d0dar			; 0.753187
	DD	03f4112ecr			; 0.754195
	DD	03f4154e1r			; 0.755201
	DD	03f4196b7r			; 0.756206
	DD	03f41d870r			; 0.757209
	DD	03f421a0br			; 0.75821
	DD	03f425b89r			; 0.759209
	DD	03f429ce8r			; 0.760207
	DD	03f42de29r			; 0.761202
	DD	03f431f4cr			; 0.762196
	DD	03f436051r			; 0.763188
	DD	03f43a138r			; 0.764179
	DD	03f43e200r			; 0.765167
	DD	03f4422abr			; 0.766154
	DD	03f446337r			; 0.767139
	DD	03f44a3a5r			; 0.768122
	DD	03f44e3f5r			; 0.769103
	DD	03f452426r			; 0.770083
	DD	03f456439r			; 0.771061
	DD	03f45a42dr			; 0.772036
	DD	03f45e403r			; 0.77301
	DD	03f4623bbr			; 0.773983
	DD	03f466354r			; 0.774953
	DD	03f46a2cer			; 0.775922
	DD	03f46e22ar			; 0.776888
	DD	03f472167r			; 0.777853
	DD	03f476085r			; 0.778817
	DD	03f479f84r			; 0.779778
	DD	03f47de65r			; 0.780737
	DD	03f481d27r			; 0.781695
	DD	03f485bcar			; 0.782651
	DD	03f489a4er			; 0.783605
	DD	03f48d8b3r			; 0.784557
	DD	03f4916far			; 0.785507
	DD	03f495521r			; 0.786455
	DD	03f499329r			; 0.787402
	DD	03f49d112r			; 0.788346
	DD	03f4a0edcr			; 0.789289
	DD	03f4a4c87r			; 0.79023
	DD	03f4a8a13r			; 0.791169
	DD	03f4ac77fr			; 0.792107
	DD	03f4b04ccr			; 0.793042
	DD	03f4b41far			; 0.793975
	DD	03f4b7f09r			; 0.794907
	DD	03f4bbbf8r			; 0.795837
	DD	03f4bf8c7r			; 0.796765
	DD	03f4c3578r			; 0.797691
	DD	03f4c7208r			; 0.798615
	DD	03f4cae79r			; 0.799537
	DD	03f4ceacbr			; 0.800458
	DD	03f4d26fdr			; 0.801376
	DD	03f4d6310r			; 0.802293
	DD	03f4d9f02r			; 0.803208
	DD	03f4ddad5r			; 0.80412
	DD	03f4e1689r			; 0.805031
	DD	03f4e521cr			; 0.80594
	DD	03f4e8d90r			; 0.806848
	DD	03f4ec8e4r			; 0.807753
	DD	03f4f0417r			; 0.808656
	DD	03f4f3f2br			; 0.809558
	DD	03f4f7a1fr			; 0.810457
	DD	03f4fb4f4r			; 0.811355
	DD	03f4fefa8r			; 0.812251
	DD	03f502a3br			; 0.813144
	DD	03f5064afr			; 0.814036
	DD	03f509f03r			; 0.814926
	DD	03f50d937r			; 0.815814
	DD	03f51134ar			; 0.816701
	DD	03f514d3dr			; 0.817585
	DD	03f518710r			; 0.818467
	DD	03f51c0c2r			; 0.819348
	DD	03f51fa54r			; 0.820226
	DD	03f5233c6r			; 0.821102
	DD	03f526d18r			; 0.821977
	DD	03f52a649r			; 0.82285
	DD	03f52df59r			; 0.823721
	DD	03f531849r			; 0.824589
	DD	03f535118r			; 0.825456
	DD	03f5389c7r			; 0.826321
	DD	03f53c255r			; 0.827184
	DD	03f53fac3r			; 0.828045
	DD	03f54330fr			; 0.828904
	DD	03f546b3br			; 0.829761
	DD	03f54a347r			; 0.830616
	DD	03f54db31r			; 0.83147
	DD	03f5512fbr			; 0.832321
	DD	03f554aa4r			; 0.83317
	DD	03f55822cr			; 0.834018
	DD	03f55b993r			; 0.834863
	DD	03f55f0d9r			; 0.835706
	DD	03f5627fer			; 0.836548
	DD	03f565f02r			; 0.837387
	DD	03f5695e5r			; 0.838225
	DD	03f56cca7r			; 0.83906
	DD	03f570348r			; 0.839894
	DD	03f5739c7r			; 0.840725
	DD	03f577026r			; 0.841555
	DD	03f57a663r			; 0.842383
	DD	03f57dc7fr			; 0.843208
	DD	03f581279r			; 0.844032
	DD	03f584853r			; 0.844854
	DD	03f587e0br			; 0.845673
	DD	03f58b3a1r			; 0.846491
	DD	03f58e916r			; 0.847307
	DD	03f591e6ar			; 0.84812
	DD	03f59539cr			; 0.848932
	DD	03f5988adr			; 0.849742
	DD	03f59bd9cr			; 0.850549
	DD	03f59f26ar			; 0.851355
	DD	03f5a2716r			; 0.852159
	DD	03f5a5ba0r			; 0.852961
	DD	03f5a9009r			; 0.85376
	DD	03f5ac450r			; 0.854558
	DD	03f5af875r			; 0.855354
	DD	03f5b2c79r			; 0.856147
	DD	03f5b605ar			; 0.856939
	DD	03f5b941ar			; 0.857729
	DD	03f5bc7b8r			; 0.858516
	DD	03f5bfb34r			; 0.859302
	DD	03f5c2e8er			; 0.860085
	DD	03f5c61c7r			; 0.860867
	DD	03f5c94ddr			; 0.861646
	DD	03f5cc7d1r			; 0.862424
	DD	03f5cfaa3r			; 0.863199
	DD	03f5d2d53r			; 0.863973
	DD	03f5d5fe1r			; 0.864744
	DD	03f5d924dr			; 0.865514
	DD	03f5dc497r			; 0.866281
	DD	03f5df6ber			; 0.867046
	DD	03f5e28c3r			; 0.867809
	DD	03f5e5aa6r			; 0.868571
	DD	03f5e8c67r			; 0.86933
	DD	03f5ebe05r			; 0.870087
	DD	03f5eef81r			; 0.870842
	DD	03f5f20dbr			; 0.871595
	DD	03f5f5212r			; 0.872346
	DD	03f5f8327r			; 0.873095
	DD	03f5fb419r			; 0.873842
	DD	03f5fe4e9r			; 0.874587
	DD	03f601596r			; 0.875329
	DD	03f604621r			; 0.87607
	DD	03f607689r			; 0.876809
	DD	03f60a6cfr			; 0.877545
	DD	03f60d6f2r			; 0.87828
	DD	03f6106f2r			; 0.879012
	DD	03f6136d0r			; 0.879743
	DD	03f61668ar			; 0.880471
	DD	03f619622r			; 0.881197
	DD	03f61c598r			; 0.881921
	DD	03f61f4ear			; 0.882643
	DD	03f62241ar			; 0.883363
	DD	03f625326r			; 0.884081
	DD	03f628210r			; 0.884797
	DD	03f62b0d7r			; 0.885511
	DD	03f62df7br			; 0.886223
	DD	03f630dfcr			; 0.886932
	DD	03f633c5ar			; 0.88764
	DD	03f636a95r			; 0.888345
	DD	03f6398acr			; 0.889048
	DD	03f63c6a1r			; 0.88975
	DD	03f63f473r			; 0.890449
	DD	03f642221r			; 0.891146
	DD	03f644facr			; 0.891841
	DD	03f647d14r			; 0.892534
	DD	03f64aa59r			; 0.893224
	DD	03f64d77br			; 0.893913
	DD	03f650479r			; 0.894599
	DD	03f653154r			; 0.895284
	DD	03f655e0br			; 0.895966
	DD	03f658aa0r			; 0.896646
	DD	03f65b710r			; 0.897325
	DD	03f65e35er			; 0.898001
	DD	03f660f88r			; 0.898674
	DD	03f663b8er			; 0.899346
	DD	03f666771r			; 0.900016
	DD	03f669330r			; 0.900683
	DD	03f66beccr			; 0.901349
	DD	03f66ea45r			; 0.902012
	DD	03f671599r			; 0.902673
	DD	03f6740car			; 0.903332
	DD	03f676bd8r			; 0.903989
	DD	03f6796c1r			; 0.904644
	DD	03f67c187r			; 0.905297
	DD	03f67ec29r			; 0.905947
	DD	03f6816a8r			; 0.906596
	DD	03f684103r			; 0.907242
	DD	03f686b39r			; 0.907886
	DD	03f68954cr			; 0.908528
	DD	03f68bf3cr			; 0.909168
	DD	03f68e907r			; 0.909806
	DD	03f6912aer			; 0.910441
	DD	03f693c32r			; 0.911075
	DD	03f696591r			; 0.911706
	DD	03f698eccr			; 0.912335
	DD	03f69b7e4r			; 0.912962
	DD	03f69e0d7r			; 0.913587
	DD	03f6a09a7r			; 0.91421
	DD	03f6a3252r			; 0.91483
	DD	03f6a5ad9r			; 0.915449
	DD	03f6a833cr			; 0.916065
	DD	03f6aab7br			; 0.916679
	DD	03f6ad395r			; 0.917291
	DD	03f6afb8cr			; 0.917901
	DD	03f6b235er			; 0.918508
	DD	03f6b4b0cr			; 0.919114
	DD	03f6b7295r			; 0.919717
	DD	03f6b99fbr			; 0.920318
	DD	03f6bc13br			; 0.920917
	DD	03f6be858r			; 0.921514
	DD	03f6c0f50r			; 0.922109
	DD	03f6c3624r			; 0.922701
	DD	03f6c5cd4r			; 0.923291
	DD	03f6c835er			; 0.92388
	DD	03f6ca9c5r			; 0.924465
	DD	03f6cd007r			; 0.925049
	DD	03f6cf624r			; 0.925631
	DD	03f6d1c1dr			; 0.92621
	DD	03f6d41f2r			; 0.926787
	DD	03f6d67a1r			; 0.927363
	DD	03f6d8d2dr			; 0.927935
	DD	03f6db293r			; 0.928506
	DD	03f6dd7d5r			; 0.929075
	DD	03f6dfcf2r			; 0.929641
	DD	03f6e21ebr			; 0.930205
	DD	03f6e46ber			; 0.930767
	DD	03f6e6b6dr			; 0.931327
	DD	03f6e8ff8r			; 0.931884
	DD	03f6eb45dr			; 0.93244
	DD	03f6ed89er			; 0.932993
	DD	03f6efcbar			; 0.933544
	DD	03f6f20b0r			; 0.934093
	DD	03f6f4483r			; 0.934639
	DD	03f6f6830r			; 0.935184
	DD	03f6f8bb8r			; 0.935726
	DD	03f6faf1br			; 0.936266
	DD	03f6fd25ar			; 0.936803
	DD	03f6ff573r			; 0.937339
	DD	03f701867r			; 0.937872
	DD	03f703b37r			; 0.938404
	DD	03f705de1r			; 0.938932
	DD	03f708066r			; 0.939459
	DD	03f70a2c6r			; 0.939984
	DD	03f70c501r			; 0.940506
	DD	03f70e717r			; 0.941026
	DD	03f710908r			; 0.941544
	DD	03f712ad4r			; 0.94206
	DD	03f714c7ar			; 0.942573
	DD	03f716dfbr			; 0.943084
	DD	03f718f57r			; 0.943593
	DD	03f71b08er			; 0.9441
	DD	03f71d19fr			; 0.944605
	DD	03f71f28cr			; 0.945107
	DD	03f721352r			; 0.945607
	DD	03f7233f4r			; 0.946105
	DD	03f725470r			; 0.946601
	DD	03f7274c7r			; 0.947094
	DD	03f7294f8r			; 0.947586
	DD	03f72b504r			; 0.948075
	DD	03f72d4ebr			; 0.948561
	DD	03f72f4acr			; 0.949046
	DD	03f731447r			; 0.949528
	DD	03f7333ber			; 0.950008
	DD	03f73530er			; 0.950486
	DD	03f737239r			; 0.950962
	DD	03f73913fr			; 0.951435
	DD	03f73b01fr			; 0.951906
	DD	03f73ced9r			; 0.952375
	DD	03f73ed6er			; 0.952842
	DD	03f740bddr			; 0.953306
	DD	03f742a27r			; 0.953768
	DD	03f74484br			; 0.954228
	DD	03f746649r			; 0.954686
	DD	03f748422r			; 0.955141
	DD	03f74a1d5r			; 0.955594
	DD	03f74bf62r			; 0.956045
	DD	03f74dcc9r			; 0.956494
	DD	03f74fa0br			; 0.95694
	DD	03f751727r			; 0.957385
	DD	03f75341dr			; 0.957826
	DD	03f7550edr			; 0.958266
	DD	03f756d97r			; 0.958703
	DD	03f758a1cr			; 0.959139
	DD	03f75a67br			; 0.959572
	DD	03f75c2b3r			; 0.960002
	DD	03f75dec6r			; 0.960431
	DD	03f75fab3r			; 0.960857
	DD	03f76167ar			; 0.96128
	DD	03f76321br			; 0.961702
	DD	03f764d97r			; 0.962121
	DD	03f7668ecr			; 0.962538
	DD	03f76841br			; 0.962953
	DD	03f769f24r			; 0.963366
	DD	03f76ba07r			; 0.963776
	DD	03f76d4c4r			; 0.964184
	DD	03f76ef5br			; 0.96459
	DD	03f7709ccr			; 0.964993
	DD	03f772417r			; 0.965394
	DD	03f773e3cr			; 0.965793
	DD	03f77583ar			; 0.96619
	DD	03f777213r			; 0.966584
	DD	03f778bc5r			; 0.966976
	DD	03f77a551r			; 0.967366
	DD	03f77beb7r			; 0.967754
	DD	03f77d7f7r			; 0.968139
	DD	03f77f110r			; 0.968522
	DD	03f780a04r			; 0.968903
	DD	03f7822d1r			; 0.969281
	DD	03f783b77r			; 0.969657
	DD	03f7853f8r			; 0.970031
	DD	03f786c52r			; 0.970403
	DD	03f788486r			; 0.970772
	DD	03f789c93r			; 0.971139
	DD	03f78b47br			; 0.971504
	DD	03f78cc3br			; 0.971866
	DD	03f78e3d6r			; 0.972227
	DD	03f78fb4ar			; 0.972584
	DD	03f791298r			; 0.97294
	DD	03f7929bfr			; 0.973293
	DD	03f7940c0r			; 0.973644
	DD	03f79579ar			; 0.973993
	DD	03f796e4er			; 0.974339
	DD	03f7984dcr			; 0.974684
	DD	03f799b43r			; 0.975025
	DD	03f79b183r			; 0.975365
	DD	03f79c79dr			; 0.975702
	DD	03f79dd91r			; 0.976037
	DD	03f79f35er			; 0.97637
	DD	03f7a0904r			; 0.9767
	DD	03f7a1e84r			; 0.977028
	DD	03f7a33ddr			; 0.977354
	DD	03f7a4910r			; 0.977677
	DD	03f7a5e1cr			; 0.977998
	DD	03f7a7302r			; 0.978317
	DD	03f7a87c1r			; 0.978634
	DD	03f7a9c59r			; 0.978948
	DD	03f7ab0cbr			; 0.97926
	DD	03f7ac516r			; 0.97957
	DD	03f7ad93ar			; 0.979877
	DD	03f7aed37r			; 0.980182
	DD	03f7b010er			; 0.980485
	DD	03f7b14ber			; 0.980785
	DD	03f7b2848r			; 0.981083
	DD	03f7b3babr			; 0.981379
	DD	03f7b4ee7r			; 0.981673
	DD	03f7b61fcr			; 0.981964
	DD	03f7b74ear			; 0.982253
	DD	03f7b87b2r			; 0.982539
	DD	03f7b9a53r			; 0.982824
	DD	03f7baccdr			; 0.983105
	DD	03f7bbf20r			; 0.983385
	DD	03f7bd14dr			; 0.983662
	DD	03f7be353r			; 0.983937
	DD	03f7bf531r			; 0.98421
	DD	03f7c06e9r			; 0.98448
	DD	03f7c187ar			; 0.984748
	DD	03f7c29e5r			; 0.985014
	DD	03f7c3b28r			; 0.985278
	DD	03f7c4c44r			; 0.985539
	DD	03f7c5d3ar			; 0.985798
	DD	03f7c6e08r			; 0.986054
	DD	03f7c7eb0r			; 0.986308
	DD	03f7c8f31r			; 0.98656
	DD	03f7c9f8ar			; 0.986809
	DD	03f7cafbdr			; 0.987057
	DD	03f7cbfc9r			; 0.987301
	DD	03f7ccfaer			; 0.987544
	DD	03f7cdf6cr			; 0.987784
	DD	03f7cef03r			; 0.988022
	DD	03f7cfe73r			; 0.988258
	DD	03f7d0dbcr			; 0.988491
	DD	03f7d1cddr			; 0.988722
	DD	03f7d2bd8r			; 0.98895
	DD	03f7d3aacr			; 0.989177
	DD	03f7d4959r			; 0.9894
	DD	03f7d57der			; 0.989622
	DD	03f7d663dr			; 0.989841
	DD	03f7d7474r			; 0.990058
	DD	03f7d8285r			; 0.990273
	DD	03f7d906er			; 0.990485
	DD	03f7d9e30r			; 0.990695
	DD	03f7dabccr			; 0.990903
	DD	03f7db940r			; 0.991108
	DD	03f7dc68cr			; 0.991311
	DD	03f7dd3b2r			; 0.991511
	DD	03f7de0b1r			; 0.99171
	DD	03f7ded88r			; 0.991906
	DD	03f7dfa38r			; 0.992099
	DD	03f7e06c2r			; 0.992291
	DD	03f7e1324r			; 0.99248
	DD	03f7e1f5er			; 0.992666
	DD	03f7e2b72r			; 0.99285
	DD	03f7e375er			; 0.993032
	DD	03f7e4323r			; 0.993212
	DD	03f7e4ec1r			; 0.993389
	DD	03f7e5a38r			; 0.993564
	DD	03f7e6588r			; 0.993737
	DD	03f7e70b0r			; 0.993907
	DD	03f7e7bb1r			; 0.994075
	DD	03f7e868br			; 0.99424
	DD	03f7e913dr			; 0.994404
	DD	03f7e9bc9r			; 0.994565
	DD	03f7ea62dr			; 0.994723
	DD	03f7eb069r			; 0.994879
	DD	03f7eba7fr			; 0.995033
	DD	03f7ec46dr			; 0.995185
	DD	03f7ece34r			; 0.995334
	DD	03f7ed7d4r			; 0.995481
	DD	03f7ee14cr			; 0.995625
	DD	03f7eea9dr			; 0.995767
	DD	03f7ef3c7r			; 0.995907
	DD	03f7efcc9r			; 0.996045
	DD	03f7f05a4r			; 0.99618
	DD	03f7f0e58r			; 0.996313
	DD	03f7f16e4r			; 0.996443
	DD	03f7f1f49r			; 0.996571
	DD	03f7f2787r			; 0.996697
	DD	03f7f2f9dr			; 0.99682
	DD	03f7f378cr			; 0.996941
	DD	03f7f3f54r			; 0.99706
	DD	03f7f46f4r			; 0.997176
	DD	03f7f4e6dr			; 0.99729
	DD	03f7f55bfr			; 0.997402
	DD	03f7f5ce9r			; 0.997511
	DD	03f7f63ecr			; 0.997618
	DD	03f7f6ac7r			; 0.997723
	DD	03f7f717br			; 0.997825
	DD	03f7f7808r			; 0.997925
	DD	03f7f7e6dr			; 0.998023
	DD	03f7f84abr			; 0.998118
	DD	03f7f8ac2r			; 0.998211
	DD	03f7f90b1r			; 0.998302
	DD	03f7f9678r			; 0.99839
	DD	03f7f9c18r			; 0.998476
	DD	03f7fa191r			; 0.998559
	DD	03f7fa6e3r			; 0.99864
	DD	03f7fac0dr			; 0.998719
	DD	03f7fb10fr			; 0.998795
	DD	03f7fb5ear			; 0.99887
	DD	03f7fba9er			; 0.998941
	DD	03f7fbf2ar			; 0.999011
	DD	03f7fc38fr			; 0.999078
	DD	03f7fc7ccr			; 0.999142
	DD	03f7fcbe2r			; 0.999205
	DD	03f7fcfd1r			; 0.999265
	DD	03f7fd397r			; 0.999322
	DD	03f7fd737r			; 0.999378
	DD	03f7fdaafr			; 0.999431
	DD	03f7fde00r			; 0.999481
	DD	03f7fe129r			; 0.999529
	DD	03f7fe42br			; 0.999575
	DD	03f7fe705r			; 0.999619
	DD	03f7fe9b8r			; 0.99966
	DD	03f7fec43r			; 0.999699
	DD	03f7feea7r			; 0.999735
	DD	03f7ff0e3r			; 0.999769
	DD	03f7ff2f8r			; 0.999801
	DD	03f7ff4e6r			; 0.999831
	DD	03f7ff6acr			; 0.999858
	DD	03f7ff84ar			; 0.999882
	DD	03f7ff9c1r			; 0.999905
	DD	03f7ffb11r			; 0.999925
	DD	03f7ffc39r			; 0.999942
	DD	03f7ffd39r			; 0.999958
	DD	03f7ffe13r			; 0.999971
	DD	03f7ffec4r			; 0.999981
	DD	03f7fff4er			; 0.999989
	DD	03f7fffb1r			; 0.999995
	DD	03f7fffecr			; 0.999999
	DD	03f800000r			; 1
	DD	03f7fffecr			; 0.999999
	DD	03f7fffb1r			; 0.999995
	DD	03f7fff4er			; 0.999989
	DD	03f7ffec4r			; 0.999981
	DD	03f7ffe13r			; 0.999971
	DD	03f7ffd39r			; 0.999958
	DD	03f7ffc39r			; 0.999942
	DD	03f7ffb11r			; 0.999925
	DD	03f7ff9c1r			; 0.999905
	DD	03f7ff84ar			; 0.999882
	DD	03f7ff6acr			; 0.999858
	DD	03f7ff4e6r			; 0.999831
	DD	03f7ff2f8r			; 0.999801
	DD	03f7ff0e3r			; 0.999769
	DD	03f7feea7r			; 0.999735
	DD	03f7fec43r			; 0.999699
	DD	03f7fe9b8r			; 0.99966
	DD	03f7fe705r			; 0.999619
	DD	03f7fe42br			; 0.999575
	DD	03f7fe129r			; 0.999529
	DD	03f7fde00r			; 0.999481
	DD	03f7fdaafr			; 0.999431
	DD	03f7fd737r			; 0.999378
	DD	03f7fd397r			; 0.999322
	DD	03f7fcfd1r			; 0.999265
	DD	03f7fcbe2r			; 0.999205
	DD	03f7fc7ccr			; 0.999142
	DD	03f7fc38fr			; 0.999078
	DD	03f7fbf2ar			; 0.999011
	DD	03f7fba9er			; 0.998941
	DD	03f7fb5ear			; 0.99887
	DD	03f7fb10fr			; 0.998795
	DD	03f7fac0dr			; 0.998719
	DD	03f7fa6e3r			; 0.99864
	DD	03f7fa191r			; 0.998559
	DD	03f7f9c18r			; 0.998476
	DD	03f7f9678r			; 0.99839
	DD	03f7f90b1r			; 0.998302
	DD	03f7f8ac2r			; 0.998211
	DD	03f7f84abr			; 0.998118
	DD	03f7f7e6dr			; 0.998023
	DD	03f7f7808r			; 0.997925
	DD	03f7f717br			; 0.997825
	DD	03f7f6ac7r			; 0.997723
	DD	03f7f63ecr			; 0.997618
	DD	03f7f5ce9r			; 0.997511
	DD	03f7f55bfr			; 0.997402
	DD	03f7f4e6dr			; 0.99729
	DD	03f7f46f4r			; 0.997176
	DD	03f7f3f54r			; 0.99706
	DD	03f7f378cr			; 0.996941
	DD	03f7f2f9dr			; 0.99682
	DD	03f7f2787r			; 0.996697
	DD	03f7f1f49r			; 0.996571
	DD	03f7f16e4r			; 0.996443
	DD	03f7f0e58r			; 0.996313
	DD	03f7f05a4r			; 0.99618
	DD	03f7efcc9r			; 0.996045
	DD	03f7ef3c7r			; 0.995907
	DD	03f7eea9dr			; 0.995767
	DD	03f7ee14cr			; 0.995625
	DD	03f7ed7d4r			; 0.995481
	DD	03f7ece34r			; 0.995334
	DD	03f7ec46dr			; 0.995185
	DD	03f7eba7fr			; 0.995033
	DD	03f7eb069r			; 0.994879
	DD	03f7ea62dr			; 0.994723
	DD	03f7e9bc9r			; 0.994565
	DD	03f7e913dr			; 0.994404
	DD	03f7e868br			; 0.99424
	DD	03f7e7bb1r			; 0.994075
	DD	03f7e70b0r			; 0.993907
	DD	03f7e6588r			; 0.993737
	DD	03f7e5a38r			; 0.993564
	DD	03f7e4ec1r			; 0.993389
	DD	03f7e4323r			; 0.993212
	DD	03f7e375er			; 0.993032
	DD	03f7e2b72r			; 0.99285
	DD	03f7e1f5er			; 0.992666
	DD	03f7e1324r			; 0.99248
	DD	03f7e06c2r			; 0.992291
	DD	03f7dfa38r			; 0.992099
	DD	03f7ded88r			; 0.991906
	DD	03f7de0b1r			; 0.99171
	DD	03f7dd3b2r			; 0.991511
	DD	03f7dc68cr			; 0.991311
	DD	03f7db940r			; 0.991108
	DD	03f7dabccr			; 0.990903
	DD	03f7d9e30r			; 0.990695
	DD	03f7d906er			; 0.990485
	DD	03f7d8285r			; 0.990273
	DD	03f7d7474r			; 0.990058
	DD	03f7d663dr			; 0.989841
	DD	03f7d57der			; 0.989622
	DD	03f7d4959r			; 0.9894
	DD	03f7d3aacr			; 0.989177
	DD	03f7d2bd8r			; 0.98895
	DD	03f7d1cddr			; 0.988722
	DD	03f7d0dbcr			; 0.988491
	DD	03f7cfe73r			; 0.988258
	DD	03f7cef03r			; 0.988022
	DD	03f7cdf6cr			; 0.987784
	DD	03f7ccfaer			; 0.987544
	DD	03f7cbfc9r			; 0.987301
	DD	03f7cafbdr			; 0.987057
	DD	03f7c9f8ar			; 0.986809
	DD	03f7c8f31r			; 0.98656
	DD	03f7c7eb0r			; 0.986308
	DD	03f7c6e08r			; 0.986054
	DD	03f7c5d3ar			; 0.985798
	DD	03f7c4c44r			; 0.985539
	DD	03f7c3b28r			; 0.985278
	DD	03f7c29e5r			; 0.985014
	DD	03f7c187ar			; 0.984748
	DD	03f7c06e9r			; 0.98448
	DD	03f7bf531r			; 0.98421
	DD	03f7be353r			; 0.983937
	DD	03f7bd14dr			; 0.983662
	DD	03f7bbf20r			; 0.983385
	DD	03f7baccdr			; 0.983105
	DD	03f7b9a53r			; 0.982824
	DD	03f7b87b2r			; 0.982539
	DD	03f7b74ear			; 0.982253
	DD	03f7b61fcr			; 0.981964
	DD	03f7b4ee7r			; 0.981673
	DD	03f7b3babr			; 0.981379
	DD	03f7b2848r			; 0.981083
	DD	03f7b14ber			; 0.980785
	DD	03f7b010er			; 0.980485
	DD	03f7aed37r			; 0.980182
	DD	03f7ad93ar			; 0.979877
	DD	03f7ac516r			; 0.97957
	DD	03f7ab0cbr			; 0.97926
	DD	03f7a9c59r			; 0.978948
	DD	03f7a87c1r			; 0.978634
	DD	03f7a7302r			; 0.978317
	DD	03f7a5e1cr			; 0.977998
	DD	03f7a4910r			; 0.977677
	DD	03f7a33ddr			; 0.977354
	DD	03f7a1e84r			; 0.977028
	DD	03f7a0904r			; 0.9767
	DD	03f79f35er			; 0.97637
	DD	03f79dd91r			; 0.976037
	DD	03f79c79dr			; 0.975702
	DD	03f79b183r			; 0.975365
	DD	03f799b43r			; 0.975025
	DD	03f7984dcr			; 0.974684
	DD	03f796e4er			; 0.974339
	DD	03f79579ar			; 0.973993
	DD	03f7940c0r			; 0.973644
	DD	03f7929bfr			; 0.973293
	DD	03f791298r			; 0.97294
	DD	03f78fb4ar			; 0.972584
	DD	03f78e3d6r			; 0.972227
	DD	03f78cc3br			; 0.971866
	DD	03f78b47br			; 0.971504
	DD	03f789c93r			; 0.971139
	DD	03f788486r			; 0.970772
	DD	03f786c52r			; 0.970403
	DD	03f7853f8r			; 0.970031
	DD	03f783b77r			; 0.969657
	DD	03f7822d1r			; 0.969281
	DD	03f780a04r			; 0.968903
	DD	03f77f110r			; 0.968522
	DD	03f77d7f7r			; 0.968139
	DD	03f77beb7r			; 0.967754
	DD	03f77a551r			; 0.967366
	DD	03f778bc5r			; 0.966976
	DD	03f777213r			; 0.966584
	DD	03f77583ar			; 0.96619
	DD	03f773e3cr			; 0.965793
	DD	03f772417r			; 0.965394
	DD	03f7709ccr			; 0.964993
	DD	03f76ef5br			; 0.96459
	DD	03f76d4c4r			; 0.964184
	DD	03f76ba07r			; 0.963776
	DD	03f769f24r			; 0.963366
	DD	03f76841br			; 0.962953
	DD	03f7668ecr			; 0.962538
	DD	03f764d97r			; 0.962121
	DD	03f76321br			; 0.961702
	DD	03f76167ar			; 0.96128
	DD	03f75fab3r			; 0.960857
	DD	03f75dec6r			; 0.960431
	DD	03f75c2b3r			; 0.960002
	DD	03f75a67br			; 0.959572
	DD	03f758a1cr			; 0.959139
	DD	03f756d97r			; 0.958703
	DD	03f7550edr			; 0.958266
	DD	03f75341dr			; 0.957826
	DD	03f751727r			; 0.957385
	DD	03f74fa0br			; 0.95694
	DD	03f74dcc9r			; 0.956494
	DD	03f74bf62r			; 0.956045
	DD	03f74a1d5r			; 0.955594
	DD	03f748422r			; 0.955141
	DD	03f746649r			; 0.954686
	DD	03f74484br			; 0.954228
	DD	03f742a27r			; 0.953768
	DD	03f740bddr			; 0.953306
	DD	03f73ed6er			; 0.952842
	DD	03f73ced9r			; 0.952375
	DD	03f73b01fr			; 0.951906
	DD	03f73913fr			; 0.951435
	DD	03f737239r			; 0.950962
	DD	03f73530er			; 0.950486
	DD	03f7333ber			; 0.950008
	DD	03f731447r			; 0.949528
	DD	03f72f4acr			; 0.949046
	DD	03f72d4ebr			; 0.948561
	DD	03f72b504r			; 0.948075
	DD	03f7294f8r			; 0.947586
	DD	03f7274c7r			; 0.947094
	DD	03f725470r			; 0.946601
	DD	03f7233f4r			; 0.946105
	DD	03f721352r			; 0.945607
	DD	03f71f28cr			; 0.945107
	DD	03f71d19fr			; 0.944605
	DD	03f71b08er			; 0.9441
	DD	03f718f57r			; 0.943593
	DD	03f716dfbr			; 0.943084
	DD	03f714c7ar			; 0.942573
	DD	03f712ad4r			; 0.94206
	DD	03f710908r			; 0.941544
	DD	03f70e717r			; 0.941026
	DD	03f70c501r			; 0.940506
	DD	03f70a2c6r			; 0.939984
	DD	03f708066r			; 0.939459
	DD	03f705de1r			; 0.938932
	DD	03f703b37r			; 0.938404
	DD	03f701867r			; 0.937872
	DD	03f6ff573r			; 0.937339
	DD	03f6fd25ar			; 0.936803
	DD	03f6faf1br			; 0.936266
	DD	03f6f8bb8r			; 0.935726
	DD	03f6f6830r			; 0.935184
	DD	03f6f4483r			; 0.934639
	DD	03f6f20b0r			; 0.934093
	DD	03f6efcbar			; 0.933544
	DD	03f6ed89er			; 0.932993
	DD	03f6eb45dr			; 0.93244
	DD	03f6e8ff8r			; 0.931884
	DD	03f6e6b6dr			; 0.931327
	DD	03f6e46ber			; 0.930767
	DD	03f6e21ebr			; 0.930205
	DD	03f6dfcf2r			; 0.929641
	DD	03f6dd7d5r			; 0.929075
	DD	03f6db293r			; 0.928506
	DD	03f6d8d2dr			; 0.927935
	DD	03f6d67a1r			; 0.927363
	DD	03f6d41f2r			; 0.926787
	DD	03f6d1c1dr			; 0.92621
	DD	03f6cf624r			; 0.925631
	DD	03f6cd007r			; 0.925049
	DD	03f6ca9c5r			; 0.924465
	DD	03f6c835er			; 0.92388
	DD	03f6c5cd4r			; 0.923291
	DD	03f6c3624r			; 0.922701
	DD	03f6c0f50r			; 0.922109
	DD	03f6be858r			; 0.921514
	DD	03f6bc13br			; 0.920917
	DD	03f6b99fbr			; 0.920318
	DD	03f6b7295r			; 0.919717
	DD	03f6b4b0cr			; 0.919114
	DD	03f6b235er			; 0.918508
	DD	03f6afb8cr			; 0.917901
	DD	03f6ad395r			; 0.917291
	DD	03f6aab7br			; 0.916679
	DD	03f6a833cr			; 0.916065
	DD	03f6a5ad9r			; 0.915449
	DD	03f6a3252r			; 0.91483
	DD	03f6a09a7r			; 0.91421
	DD	03f69e0d7r			; 0.913587
	DD	03f69b7e4r			; 0.912962
	DD	03f698eccr			; 0.912335
	DD	03f696591r			; 0.911706
	DD	03f693c32r			; 0.911075
	DD	03f6912aer			; 0.910441
	DD	03f68e907r			; 0.909806
	DD	03f68bf3cr			; 0.909168
	DD	03f68954cr			; 0.908528
	DD	03f686b39r			; 0.907886
	DD	03f684103r			; 0.907242
	DD	03f6816a8r			; 0.906596
	DD	03f67ec29r			; 0.905947
	DD	03f67c187r			; 0.905297
	DD	03f6796c1r			; 0.904644
	DD	03f676bd8r			; 0.903989
	DD	03f6740car			; 0.903332
	DD	03f671599r			; 0.902673
	DD	03f66ea45r			; 0.902012
	DD	03f66beccr			; 0.901349
	DD	03f669330r			; 0.900683
	DD	03f666771r			; 0.900016
	DD	03f663b8er			; 0.899346
	DD	03f660f88r			; 0.898674
	DD	03f65e35er			; 0.898001
	DD	03f65b710r			; 0.897325
	DD	03f658aa0r			; 0.896646
	DD	03f655e0br			; 0.895966
	DD	03f653154r			; 0.895284
	DD	03f650479r			; 0.894599
	DD	03f64d77br			; 0.893913
	DD	03f64aa59r			; 0.893224
	DD	03f647d14r			; 0.892534
	DD	03f644facr			; 0.891841
	DD	03f642221r			; 0.891146
	DD	03f63f473r			; 0.890449
	DD	03f63c6a1r			; 0.88975
	DD	03f6398acr			; 0.889048
	DD	03f636a95r			; 0.888345
	DD	03f633c5ar			; 0.88764
	DD	03f630dfcr			; 0.886932
	DD	03f62df7br			; 0.886223
	DD	03f62b0d7r			; 0.885511
	DD	03f628210r			; 0.884797
	DD	03f625326r			; 0.884081
	DD	03f62241ar			; 0.883363
	DD	03f61f4ear			; 0.882643
	DD	03f61c598r			; 0.881921
	DD	03f619622r			; 0.881197
	DD	03f61668ar			; 0.880471
	DD	03f6136d0r			; 0.879743
	DD	03f6106f2r			; 0.879012
	DD	03f60d6f2r			; 0.87828
	DD	03f60a6cfr			; 0.877545
	DD	03f607689r			; 0.876809
	DD	03f604621r			; 0.87607
	DD	03f601596r			; 0.875329
	DD	03f5fe4e9r			; 0.874587
	DD	03f5fb419r			; 0.873842
	DD	03f5f8327r			; 0.873095
	DD	03f5f5212r			; 0.872346
	DD	03f5f20dbr			; 0.871595
	DD	03f5eef81r			; 0.870842
	DD	03f5ebe05r			; 0.870087
	DD	03f5e8c67r			; 0.86933
	DD	03f5e5aa6r			; 0.868571
	DD	03f5e28c3r			; 0.867809
	DD	03f5df6ber			; 0.867046
	DD	03f5dc497r			; 0.866281
	DD	03f5d924dr			; 0.865514
	DD	03f5d5fe1r			; 0.864744
	DD	03f5d2d53r			; 0.863973
	DD	03f5cfaa3r			; 0.863199
	DD	03f5cc7d1r			; 0.862424
	DD	03f5c94ddr			; 0.861646
	DD	03f5c61c7r			; 0.860867
	DD	03f5c2e8er			; 0.860085
	DD	03f5bfb34r			; 0.859302
	DD	03f5bc7b8r			; 0.858516
	DD	03f5b941ar			; 0.857729
	DD	03f5b605ar			; 0.856939
	DD	03f5b2c79r			; 0.856147
	DD	03f5af875r			; 0.855354
	DD	03f5ac450r			; 0.854558
	DD	03f5a9009r			; 0.85376
	DD	03f5a5ba0r			; 0.852961
	DD	03f5a2716r			; 0.852159
	DD	03f59f26ar			; 0.851355
	DD	03f59bd9cr			; 0.850549
	DD	03f5988adr			; 0.849742
	DD	03f59539cr			; 0.848932
	DD	03f591e6ar			; 0.84812
	DD	03f58e916r			; 0.847307
	DD	03f58b3a1r			; 0.846491
	DD	03f587e0br			; 0.845673
	DD	03f584853r			; 0.844854
	DD	03f581279r			; 0.844032
	DD	03f57dc7fr			; 0.843208
	DD	03f57a663r			; 0.842383
	DD	03f577026r			; 0.841555
	DD	03f5739c7r			; 0.840725
	DD	03f570348r			; 0.839894
	DD	03f56cca7r			; 0.83906
	DD	03f5695e5r			; 0.838225
	DD	03f565f02r			; 0.837387
	DD	03f5627fer			; 0.836548
	DD	03f55f0d9r			; 0.835706
	DD	03f55b993r			; 0.834863
	DD	03f55822cr			; 0.834018
	DD	03f554aa4r			; 0.83317
	DD	03f5512fbr			; 0.832321
	DD	03f54db31r			; 0.83147
	DD	03f54a347r			; 0.830616
	DD	03f546b3br			; 0.829761
	DD	03f54330fr			; 0.828904
	DD	03f53fac3r			; 0.828045
	DD	03f53c255r			; 0.827184
	DD	03f5389c7r			; 0.826321
	DD	03f535118r			; 0.825456
	DD	03f531849r			; 0.824589
	DD	03f52df59r			; 0.823721
	DD	03f52a649r			; 0.82285
	DD	03f526d18r			; 0.821977
	DD	03f5233c6r			; 0.821102
	DD	03f51fa54r			; 0.820226
	DD	03f51c0c2r			; 0.819348
	DD	03f518710r			; 0.818467
	DD	03f514d3dr			; 0.817585
	DD	03f51134ar			; 0.816701
	DD	03f50d937r			; 0.815814
	DD	03f509f03r			; 0.814926
	DD	03f5064afr			; 0.814036
	DD	03f502a3br			; 0.813144
	DD	03f4fefa8r			; 0.812251
	DD	03f4fb4f4r			; 0.811355
	DD	03f4f7a1fr			; 0.810457
	DD	03f4f3f2br			; 0.809558
	DD	03f4f0417r			; 0.808656
	DD	03f4ec8e4r			; 0.807753
	DD	03f4e8d90r			; 0.806848
	DD	03f4e521cr			; 0.80594
	DD	03f4e1689r			; 0.805031
	DD	03f4ddad5r			; 0.80412
	DD	03f4d9f02r			; 0.803208
	DD	03f4d6310r			; 0.802293
	DD	03f4d26fdr			; 0.801376
	DD	03f4ceacbr			; 0.800458
	DD	03f4cae79r			; 0.799537
	DD	03f4c7208r			; 0.798615
	DD	03f4c3578r			; 0.797691
	DD	03f4bf8c7r			; 0.796765
	DD	03f4bbbf8r			; 0.795837
	DD	03f4b7f09r			; 0.794907
	DD	03f4b41far			; 0.793975
	DD	03f4b04ccr			; 0.793042
	DD	03f4ac77fr			; 0.792107
	DD	03f4a8a13r			; 0.791169
	DD	03f4a4c87r			; 0.79023
	DD	03f4a0edcr			; 0.789289
	DD	03f49d112r			; 0.788346
	DD	03f499329r			; 0.787402
	DD	03f495521r			; 0.786455
	DD	03f4916far			; 0.785507
	DD	03f48d8b3r			; 0.784557
	DD	03f489a4er			; 0.783605
	DD	03f485bcar			; 0.782651
	DD	03f481d27r			; 0.781695
	DD	03f47de65r			; 0.780737
	DD	03f479f84r			; 0.779778
	DD	03f476085r			; 0.778817
	DD	03f472167r			; 0.777853
	DD	03f46e22ar			; 0.776888
	DD	03f46a2cer			; 0.775922
	DD	03f466354r			; 0.774953
	DD	03f4623bbr			; 0.773983
	DD	03f45e403r			; 0.77301
	DD	03f45a42dr			; 0.772036
	DD	03f456439r			; 0.771061
	DD	03f452426r			; 0.770083
	DD	03f44e3f5r			; 0.769103
	DD	03f44a3a5r			; 0.768122
	DD	03f446337r			; 0.767139
	DD	03f4422abr			; 0.766154
	DD	03f43e200r			; 0.765167
	DD	03f43a138r			; 0.764179
	DD	03f436051r			; 0.763188
	DD	03f431f4cr			; 0.762196
	DD	03f42de29r			; 0.761202
	DD	03f429ce8r			; 0.760207
	DD	03f425b89r			; 0.759209
	DD	03f421a0br			; 0.75821
	DD	03f41d870r			; 0.757209
	DD	03f4196b7r			; 0.756206
	DD	03f4154e1r			; 0.755201
	DD	03f4112ecr			; 0.754195
	DD	03f40d0dar			; 0.753187
	DD	03f408ea9r			; 0.752177
	DD	03f404c5cr			; 0.751165
	DD	03f4009f0r			; 0.750152
	DD	03f3fc767r			; 0.749136
	DD	03f3f84c0r			; 0.748119
	DD	03f3f41fcr			; 0.747101
	DD	03f3eff1br			; 0.74608
	DD	03f3ebc1br			; 0.745058
	DD	03f3e78ffr			; 0.744034
	DD	03f3e35c5r			; 0.743008
	DD	03f3df26er			; 0.74198
	DD	03f3daef9r			; 0.740951
	DD	03f3d6b67r			; 0.73992
	DD	03f3d27b8r			; 0.738887
	DD	03f3ce3ecr			; 0.737853
	DD	03f3ca003r			; 0.736817
	DD	03f3c5bfcr			; 0.735779
	DD	03f3c17d9r			; 0.734739
	DD	03f3bd398r			; 0.733697
	DD	03f3b8f3br			; 0.732654
	DD	03f3b4ac1r			; 0.731609
	DD	03f3b0629r			; 0.730563
	DD	03f3ac175r			; 0.729514
	DD	03f3a7ca4r			; 0.728464
	DD	03f3a37b7r			; 0.727413
	DD	03f39f2acr			; 0.726359
	DD	03f39ad85r			; 0.725304
	DD	03f396842r			; 0.724247
	DD	03f3922e1r			; 0.723188
	DD	03f38dd65r			; 0.722128
	DD	03f3897cbr			; 0.721066
	DD	03f385216r			; 0.720003
	DD	03f380c43r			; 0.718937
	DD	03f37c655r			; 0.71787
	DD	03f37804ar			; 0.716801
	DD	03f373a23r			; 0.715731
	DD	03f36f3dfr			; 0.714659
	DD	03f36ad7fr			; 0.713585
	DD	03f366704r			; 0.712509
	DD	03f36206cr			; 0.711432
	DD	03f35d9b8r			; 0.710353
	DD	03f3592e7r			; 0.709273
	DD	03f354bfbr			; 0.708191
	DD	03f3504f3r			; 0.707107
	DD	03f34bdcfr			; 0.706021
	DD	03f34768fr			; 0.704934
	DD	03f342f34r			; 0.703845
	DD	03f33e7bcr			; 0.702755
	DD	03f33a029r			; 0.701663
	DD	03f33587ar			; 0.700569
	DD	03f3310afr			; 0.699473
	DD	03f32c8c9r			; 0.698376
	DD	03f3280c7r			; 0.697277
	DD	03f3238aar			; 0.696177
	DD	03f31f071r			; 0.695075
	DD	03f31a81dr			; 0.693971
	DD	03f315fadr			; 0.692866
	DD	03f311722r			; 0.691759
	DD	03f30ce7cr			; 0.690651
	DD	03f3085bbr			; 0.689541
	DD	03f303cder			; 0.688429
	DD	03f2ff3e6r			; 0.687315
	DD	03f2faad3r			; 0.6862
	DD	03f2f61a5r			; 0.685084
	DD	03f2f185br			; 0.683965
	DD	03f2ecef7r			; 0.682846
	DD	03f2e8578r			; 0.681724
	DD	03f2e3bder			; 0.680601
	DD	03f2df229r			; 0.679476
	DD	03f2da859r			; 0.67835
	DD	03f2d5e6fr			; 0.677222
	DD	03f2d1469r			; 0.676093
	DD	03f2cca49r			; 0.674962
	DD	03f2c800fr			; 0.673829
	DD	03f2c35b9r			; 0.672695
	DD	03f2beb4ar			; 0.671559
	DD	03f2ba0bfr			; 0.670422
	DD	03f2b561br			; 0.669283
	DD	03f2b0b5br			; 0.668142
	DD	03f2ac082r			; 0.667
	DD	03f2a758er			; 0.665856
	DD	03f2a2a80r			; 0.664711
	DD	03f29df57r			; 0.663564
	DD	03f299415r			; 0.662416
	DD	03f2948b8r			; 0.661266
	DD	03f28fd41r			; 0.660114
	DD	03f28b1b0r			; 0.658961
	DD	03f286605r			; 0.657807
	DD	03f281a40r			; 0.656651
	DD	03f27ce61r			; 0.655493
	DD	03f278268r			; 0.654334
	DD	03f273656r			; 0.653173
	DD	03f26ea2ar			; 0.652011
	DD	03f269de3r			; 0.650847
	DD	03f265184r			; 0.649681
	DD	03f26050ar			; 0.648514
	DD	03f25b877r			; 0.647346
	DD	03f256bcbr			; 0.646176
	DD	03f251f04r			; 0.645005
	DD	03f24d225r			; 0.643832
	DD	03f24852cr			; 0.642657
	DD	03f24381ar			; 0.641481
	DD	03f23eaeer			; 0.640303
	DD	03f239da9r			; 0.639124
	DD	03f23504br			; 0.637944
	DD	03f2302d3r			; 0.636762
	DD	03f22b543r			; 0.635578
	DD	03f226799r			; 0.634393
	DD	03f2219d7r			; 0.633207
	DD	03f21cbfbr			; 0.632019
	DD	03f217e06r			; 0.630829
	DD	03f212ff9r			; 0.629638
	DD	03f20e1d2r			; 0.628446
	DD	03f209393r			; 0.627252
	DD	03f20453br			; 0.626056
	DD	03f1ff6cbr			; 0.62486
	DD	03f1fa841r			; 0.623661
	DD	03f1f599fr			; 0.622461
	DD	03f1f0ae5r			; 0.62126
	DD	03f1ebc12r			; 0.620057
	DD	03f1e6d26r			; 0.618853
	DD	03f1e1e22r			; 0.617647
	DD	03f1dcf06r			; 0.61644
	DD	03f1d7fd1r			; 0.615232
	DD	03f1d3084r			; 0.614022
	DD	03f1ce11fr			; 0.61281
	DD	03f1c91a2r			; 0.611597
	DD	03f1c420cr			; 0.610383
	DD	03f1bf25fr			; 0.609167
	DD	03f1ba299r			; 0.60795
	DD	03f1b52bbr			; 0.606731
	DD	03f1b02c6r			; 0.605511
	DD	03f1ab2b8r			; 0.60429
	DD	03f1a6293r			; 0.603067
	DD	03f1a1255r			; 0.601842
	DD	03f19c200r			; 0.600616
	DD	03f197194r			; 0.599389
	DD	03f19210fr			; 0.598161
	DD	03f18d073r			; 0.596931
	DD	03f187fc0r			; 0.595699
	DD	03f182ef5r			; 0.594467
	DD	03f17de12r			; 0.593232
	DD	03f178d18r			; 0.591997
	DD	03f173c07r			; 0.59076
	DD	03f16eader			; 0.589521
	DD	03f16999fr			; 0.588282
	DD	03f164847r			; 0.58704
	DD	03f15f6d9r			; 0.585798
	DD	03f15a554r			; 0.584554
	DD	03f1553b7r			; 0.583309
	DD	03f150204r			; 0.582062
	DD	03f14b039r			; 0.580814
	DD	03f145e58r			; 0.579565
	DD	03f140c5fr			; 0.578314
	DD	03f13ba50r			; 0.577062
	DD	03f13682ar			; 0.575808
	DD	03f1315eer			; 0.574553
	DD	03f12c39ar			; 0.573297
	DD	03f127130r			; 0.57204
	DD	03f121eb0r			; 0.570781
	DD	03f11cc19r			; 0.569521
	DD	03f11796br			; 0.568259
	DD	03f1126a7r			; 0.566996
	DD	03f10d3cdr			; 0.565732
	DD	03f1080dcr			; 0.564466
	DD	03f102dd5r			; 0.563199
	DD	03f0fdab8r			; 0.561931
	DD	03f0f8784r			; 0.560662
	DD	03f0f343br			; 0.559391
	DD	03f0ee0dbr			; 0.558119
	DD	03f0e8d65r			; 0.556845
	DD	03f0e39dar			; 0.55557
	DD	03f0de638r			; 0.554294
	DD	03f0d9281r			; 0.553017
	DD	03f0d3eb3r			; 0.551738
	DD	03f0cead0r			; 0.550458
	DD	03f0c96d7r			; 0.549177
	DD	03f0c42c9r			; 0.547894
	DD	03f0beea5r			; 0.54661
	DD	03f0b9a6br			; 0.545325
	DD	03f0b461cr			; 0.544039
	DD	03f0af1b7r			; 0.542751
	DD	03f0a9d3dr			; 0.541462
	DD	03f0a48adr			; 0.540171
	DD	03f09f409r			; 0.53888
	DD	03f099f4er			; 0.537587
	DD	03f094a7fr			; 0.536293
	DD	03f08f59br			; 0.534998
	DD	03f08a0a1r			; 0.533701
	DD	03f084b92r			; 0.532403
	DD	03f07f66fr			; 0.531104
	DD	03f07a136r			; 0.529804
	DD	03f074be8r			; 0.528502
	DD	03f06f686r			; 0.527199
	DD	03f06a10er			; 0.525895
	DD	03f064b82r			; 0.52459
	DD	03f05f5e2r			; 0.523283
	DD	03f05a02cr			; 0.521975
	DD	03f054a62r			; 0.520666
	DD	03f04f484r			; 0.519356
	DD	03f049e91r			; 0.518045
	DD	03f044889r			; 0.516732
	DD	03f03f26dr			; 0.515418
	DD	03f039c3dr			; 0.514103
	DD	03f0345f8r			; 0.512786
	DD	03f02ef9fr			; 0.511469
	DD	03f029932r			; 0.51015
	DD	03f0242b1r			; 0.50883
	DD	03f01ec1cr			; 0.507509
	DD	03f019573r			; 0.506187
	DD	03f013eb5r			; 0.504863
	DD	03f00e7e4r			; 0.503538
	DD	03f0090ffr			; 0.502212
	DD	03f003a06r			; 0.500885
	DD	03effc5f3r			; 0.499557
	DD	03eff17b2r			; 0.498228
	DD	03efe694ar			; 0.496897
	DD	03efdbabbr			; 0.495565
	DD	03efd0c04r			; 0.494232
	DD	03efc5d27r			; 0.492898
	DD	03efbae22r			; 0.491563
	DD	03efafef7r			; 0.490226
	DD	03efa4fa5r			; 0.488889
	DD	03ef9a02dr			; 0.48755
	DD	03ef8f08er			; 0.48621
	DD	03ef840c8r			; 0.484869
	DD	03ef790dcr			; 0.483527
	DD	03ef6e0cbr			; 0.482184
	DD	03ef63093r			; 0.480839
	DD	03ef58035r			; 0.479494
	DD	03ef4cfb1r			; 0.478147
	DD	03ef41f07r			; 0.476799
	DD	03ef36e38r			; 0.47545
	DD	03ef2bd43r			; 0.4741
	DD	03ef20c29r			; 0.472749
	DD	03ef15aear			; 0.471397
	DD	03ef0a985r			; 0.470043
	DD	03eeff7fbr			; 0.468689
	DD	03eef464cr			; 0.467333
	DD	03eee9479r			; 0.465977
	DD	03eede280r			; 0.464619
	DD	03eed3063r			; 0.46326
	DD	03eec7e21r			; 0.4619
	DD	03eebcbbbr			; 0.460539
	DD	03eeb1930r			; 0.459177
	DD	03eea6681r			; 0.457813
	DD	03ee9b3aer			; 0.456449
	DD	03ee900b7r			; 0.455084
	DD	03ee84d9cr			; 0.453717
	DD	03ee79a5dr			; 0.45235
	DD	03ee6e6fbr			; 0.450981
	DD	03ee63375r			; 0.449611
	DD	03ee57fcbr			; 0.448241
	DD	03ee4cbfer			; 0.446869
	DD	03ee4180er			; 0.445496
	DD	03ee363far			; 0.444122
	DD	03ee2afc4r			; 0.442747
	DD	03ee1fb6ar			; 0.441371
	DD	03ee146eer			; 0.439994
	DD	03ee0924fr			; 0.438616
	DD	03edfdd8dr			; 0.437237
	DD	03edf28a9r			; 0.435857
	DD	03ede73a2r			; 0.434476
	DD	03eddbe79r			; 0.433094
	DD	03edd092er			; 0.431711
	DD	03edc53c1r			; 0.430326
	DD	03edb9e31r			; 0.428941
	DD	03edae880r			; 0.427555
	DD	03eda32adr			; 0.426168
	DD	03ed97cb9r			; 0.42478
	DD	03ed8c6a3r			; 0.42339
	DD	03ed8106br			; 0.422
	DD	03ed75a13r			; 0.420609
	DD	03ed6a399r			; 0.419217
	DD	03ed5ecfdr			; 0.417824
	DD	03ed53641r			; 0.41643
	DD	03ed47f64r			; 0.415034
	DD	03ed3c867r			; 0.413638
	DD	03ed31148r			; 0.412241
	DD	03ed25a09r			; 0.410843
	DD	03ed1a2aar			; 0.409444
	DD	03ed0eb2ar			; 0.408044
	DD	03ed0338ar			; 0.406643
	DD	03ecf7bcar			; 0.405241
	DD	03ecec3ear			; 0.403838
	DD	03ece0bear			; 0.402435
	DD	03ecd53car			; 0.40103
	DD	03ecc9b8br			; 0.399624
	DD	03ecbe32cr			; 0.398218
	DD	03ecb2aaer			; 0.39681
	DD	03eca7210r			; 0.395401
	DD	03ec9b953r			; 0.393992
	DD	03ec90077r			; 0.392582
	DD	03ec8477cr			; 0.39117
	DD	03ec78e62r			; 0.389758
	DD	03ec6d529r			; 0.388345
	DD	03ec61bd2r			; 0.386931
	DD	03ec5625cr			; 0.385516
	DD	03ec4a8c8r			; 0.3841
	DD	03ec3ef15r			; 0.382683
	DD	03ec33544r			; 0.381266
	DD	03ec27b55r			; 0.379847
	DD	03ec1c148r			; 0.378428
	DD	03ec1071er			; 0.377007
	DD	03ec04cd5r			; 0.375586
	DD	03ebf926fr			; 0.374164
	DD	03ebed7ebr			; 0.372741
	DD	03ebe1d4ar			; 0.371317
	DD	03ebd628br			; 0.369892
	DD	03ebca7afr			; 0.368467
	DD	03ebbecb6r			; 0.36704
	DD	03ebb31a0r			; 0.365613
	DD	03eba766er			; 0.364185
	DD	03eb9bb1er			; 0.362756
	DD	03eb8ffb2r			; 0.361326
	DD	03eb8442ar			; 0.359895
	DD	03eb78884r			; 0.358463
	DD	03eb6ccc3r			; 0.357031
	DD	03eb610e6r			; 0.355598
	DD	03eb554ecr			; 0.354164
	DD	03eb498d6r			; 0.352729
	DD	03eb3dca5r			; 0.351293
	DD	03eb32058r			; 0.349856
	DD	03eb263efr			; 0.348419
	DD	03eb1a76br			; 0.34698
	DD	03eb0eacbr			; 0.345541
	DD	03eb02e10r			; 0.344101
	DD	03eaf713ar			; 0.342661
	DD	03eaeb449r			; 0.341219
	DD	03eadf73cr			; 0.339777
	DD	03ead3a15r			; 0.338334
	DD	03eac7cd4r			; 0.33689
	DD	03eabbf77r			; 0.335445
	DD	03eab0201r			; 0.334
	DD	03eaa446fr			; 0.332553
	DD	03ea986c4r			; 0.331106
	DD	03ea8c8fer			; 0.329658
	DD	03ea80b1fr			; 0.32821
	DD	03ea74d25r			; 0.32676
	DD	03ea68f12r			; 0.32531
	DD	03ea5d0e5r			; 0.323859
	DD	03ea5129fr			; 0.322408
	DD	03ea4543fr			; 0.320955
	DD	03ea395c5r			; 0.319502
	DD	03ea2d733r			; 0.318048
	DD	03ea21887r			; 0.316593
	DD	03ea159c2r			; 0.315138
	DD	03ea09ae5r			; 0.313682
	DD	03e9fdbeer			; 0.312225
	DD	03e9f1cdfr			; 0.310767
	DD	03e9e5db8r			; 0.309309
	DD	03e9d9e78r			; 0.30785
	DD	03e9cdf20r			; 0.30639
	DD	03e9c1fafr			; 0.304929
	DD	03e9b6027r			; 0.303468
	DD	03e9aa086r			; 0.302006
	DD	03e99e0cer			; 0.300543
	DD	03e9920fer			; 0.29908
	DD	03e986116r			; 0.297616
	DD	03e97a117r			; 0.296151
	DD	03e96e100r			; 0.294685
	DD	03e9620d2r			; 0.293219
	DD	03e95608dr			; 0.291752
	DD	03e94a031r			; 0.290285
	DD	03e93dfbfr			; 0.288816
	DD	03e931f35r			; 0.287347
	DD	03e925e94r			; 0.285878
	DD	03e919dddr			; 0.284408
	DD	03e90dd10r			; 0.282937
	DD	03e901c2cr			; 0.281465
	DD	03e8f5b32r			; 0.279993
	DD	03e8e9a22r			; 0.27852
	DD	03e8dd8fcr			; 0.277046
	DD	03e8d17c0r			; 0.275572
	DD	03e8c566er			; 0.274097
	DD	03e8b9507r			; 0.272621
	DD	03e8ad38ar			; 0.271145
	DD	03e8a11f7r			; 0.269668
	DD	03e895050r			; 0.268191
	DD	03e888e93r			; 0.266713
	DD	03e87ccc1r			; 0.265234
	DD	03e870adar			; 0.263755
	DD	03e8648dfr			; 0.262275
	DD	03e8586cer			; 0.260794
	DD	03e84c4aar			; 0.259313
	DD	03e840270r			; 0.257831
	DD	03e834022r			; 0.256349
	DD	03e827dc0r			; 0.254866
	DD	03e81bb4ar			; 0.253382
	DD	03e80f8c0r			; 0.251898
	DD	03e803622r			; 0.250413
	DD	03e7ee6e1r			; 0.248928
	DD	03e7d6156r			; 0.247442
	DD	03e7bdba4r			; 0.245955
	DD	03e7a55cbr			; 0.244468
	DD	03e78cfccr			; 0.24298
	DD	03e7749a6r			; 0.241492
	DD	03e75c35ar			; 0.240003
	DD	03e743ce8r			; 0.238514
	DD	03e72b651r			; 0.237024
	DD	03e712f94r			; 0.235533
	DD	03e6fa8b2r			; 0.234042
	DD	03e6e21abr			; 0.23255
	DD	03e6c9a7fr			; 0.231058
	DD	03e6b132fr			; 0.229565
	DD	03e698bbar			; 0.228072
	DD	03e680422r			; 0.226578
	DD	03e667c66r			; 0.225084
	DD	03e64f486r			; 0.223589
	DD	03e636c83r			; 0.222094
	DD	03e61e45cr			; 0.220598
	DD	03e605c13r			; 0.219101
	DD	03e5ed3a8r			; 0.217604
	DD	03e5d4b1ar			; 0.216107
	DD	03e5bc26ar			; 0.214609
	DD	03e5a3997r			; 0.21311
	DD	03e58b0a4r			; 0.211611
	DD	03e57278fr			; 0.210112
	DD	03e559e58r			; 0.208612
	DD	03e541501r			; 0.207111
	DD	03e528b89r			; 0.20561
	DD	03e5101f1r			; 0.204109
	DD	03e4f7838r			; 0.202607
	DD	03e4dee60r			; 0.201105
	DD	03e4c6467r			; 0.199602
	DD	03e4ada4fr			; 0.198098
	DD	03e495018r			; 0.196595
	DD	03e47c5c2r			; 0.19509
	DD	03e463b4dr			; 0.193586
	DD	03e44b0b9r			; 0.19208
	DD	03e432607r			; 0.190575
	DD	03e419b37r			; 0.189069
	DD	03e401049r			; 0.187562
	DD	03e3e853er			; 0.186055
	DD	03e3cfa15r			; 0.184548
	DD	03e3b6ecfr			; 0.18304
	DD	03e39e36cr			; 0.181532
	DD	03e3857ecr			; 0.180023
	DD	03e36cc50r			; 0.178514
	DD	03e354098r			; 0.177004
	DD	03e33b4c4r			; 0.175494
	DD	03e3228d4r			; 0.173984
	DD	03e309cc9r			; 0.172473
	DD	03e2f10a2r			; 0.170962
	DD	03e2d8461r			; 0.16945
	DD	03e2bf804r			; 0.167938
	DD	03e2a6b8dr			; 0.166426
	DD	03e28defcr			; 0.164913
	DD	03e275251r			; 0.1634
	DD	03e25c58cr			; 0.161886
	DD	03e2438adr			; 0.160372
	DD	03e22abb6r			; 0.158858
	DD	03e211ea5r			; 0.157343
	DD	03e1f917br			; 0.155828
	DD	03e1e0438r			; 0.154313
	DD	03e1c76der			; 0.152797
	DD	03e1ae96br			; 0.151281
	DD	03e195be0r			; 0.149765
	DD	03e17ce3dr			; 0.148248
	DD	03e164083r			; 0.14673
	DD	03e14b2b2r			; 0.145213
	DD	03e1324car			; 0.143695
	DD	03e1196ccr			; 0.142177
	DD	03e1008b7r			; 0.140658
	DD	03e0e7a8br			; 0.139139
	DD	03e0cec4ar			; 0.13762
	DD	03e0b5df3r			; 0.136101
	DD	03e09cf86r			; 0.134581
	DD	03e084105r			; 0.133061
	DD	03e06b26er			; 0.13154
	DD	03e0523c2r			; 0.130019
	DD	03e039502r			; 0.128498
	DD	03e02062er			; 0.126977
	DD	03e007745r			; 0.125455
	DD	03dfdd092r			; 0.123933
	DD	03dfab273r			; 0.122411
	DD	03df7942cr			; 0.120888
	DD	03df475c0r			; 0.119365
	DD	03df1572er			; 0.117842
	DD	03dee3876r			; 0.116319
	DD	03deb199ar			; 0.114795
	DD	03de7fa9ar			; 0.113271
	DD	03de4db76r			; 0.111747
	DD	03de1bc2er			; 0.110222
	DD	03dde9cc4r			; 0.108697
	DD	03ddb7d37r			; 0.107172
	DD	03dd85d89r			; 0.105647
	DD	03dd53db9r			; 0.104122
	DD	03dd21dc8r			; 0.102596
	DD	03dcefdb7r			; 0.10107
	DD	03dcbdd86r			; 0.0995436
	DD	03dc8bd36r			; 0.0980171
	DD	03dc59cc6r			; 0.0964904
	DD	03dc27c39r			; 0.0949635
	DD	03dbf5b8dr			; 0.0934363
	DD	03dbc3ac3r			; 0.091909
	DD	03db919ddr			; 0.0903814
	DD	03db5f8dar			; 0.0888536
	DD	03db2d7bbr			; 0.0873255
	DD	03dafb680r			; 0.0857973
	DD	03dac952br			; 0.0842689
	DD	03da973bar			; 0.0827403
	DD	03da65230r			; 0.0812114
	DD	03da3308cr			; 0.0796824
	DD	03da00ecfr			; 0.0781532
	DD	03d9cecf9r			; 0.0766239
	DD	03d99cb0ar			; 0.0750943
	DD	03d96a905r			; 0.0735646
	DD	03d9386e7r			; 0.0720346
	DD	03d9064b4r			; 0.0705046
	DD	03d8d426ar			; 0.0689743
	DD	03d8a200ar			; 0.0674439
	DD	03d86fd94r			; 0.0659133
	DD	03d83db0ar			; 0.0643826
	DD	03d80b86cr			; 0.0628518
	DD	03d7b2b74r			; 0.0613207
	DD	03d74e5e9r			; 0.0597896
	DD	03d6ea038r			; 0.0582583
	DD	03d685a62r			; 0.0567268
	DD	03d621469r			; 0.0551952
	DD	03d5bce4cr			; 0.0536635
	DD	03d55880er			; 0.0521317
	DD	03d4f41afr			; 0.0505998
	DD	03d48fb30r			; 0.0490677
	DD	03d42b491r			; 0.0475355
	DD	03d3c6dd5r			; 0.0460032
	DD	03d3626fcr			; 0.0444708
	DD	03d2fe007r			; 0.0429383
	DD	03d2998f6r			; 0.0414056
	DD	03d2351cbr			; 0.0398729
	DD	03d1d0a88r			; 0.0383401
	DD	03d16c32cr			; 0.0368072
	DD	03d107bb8r			; 0.0352742
	DD	03d0a342fr			; 0.0337412
	DD	03d03ec90r			; 0.032208
	DD	03cfb49bar			; 0.0306748
	DD	03ceeba2cr			; 0.0291415
	DD	03ce22a7ar			; 0.0276081
	DD	03cd59aa6r			; 0.0260747
	DD	03cc90ab0r			; 0.0245412
	DD	03cbc7a9br			; 0.0230077
	DD	03cafea69r			; 0.0214741
	DD	03ca35a1cr			; 0.0199404
	DD	03c96c9b6r			; 0.0184067
	DD	03c8a3938r			; 0.016873
	DD	03c7b514br			; 0.0153392
	DD	03c622fffr			; 0.0138054
	DD	03c490e90r			; 0.0122715
	DD	03c2fed02r			; 0.0107377
	DD	03c16cb58r			; 0.00920375
	DD	03bfb5330r			; 0.00766983
	DD	03bc90f88r			; 0.00613588
	DD	03b96cbc1r			; 0.00460193
	DD	03b490fc6r			; 0.00306796
	DD	03ac90fd5r			; 0.00153398
	DD	0250d3000r			; 1.22461e-16
	DD	0bac90fd5r			; -0.00153398
	DD	0bb490fc6r			; -0.00306796
	DD	0bb96cbc1r			; -0.00460193
	DD	0bbc90f88r			; -0.00613588
	DD	0bbfb5330r			; -0.00766983
	DD	0bc16cb58r			; -0.00920375
	DD	0bc2fed02r			; -0.0107377
	DD	0bc490e90r			; -0.0122715
	DD	0bc622fffr			; -0.0138054
	DD	0bc7b514br			; -0.0153392
	DD	0bc8a3938r			; -0.016873
	DD	0bc96c9b6r			; -0.0184067
	DD	0bca35a1cr			; -0.0199404
	DD	0bcafea69r			; -0.0214741
	DD	0bcbc7a9br			; -0.0230077
	DD	0bcc90ab0r			; -0.0245412
	DD	0bcd59aa6r			; -0.0260747
	DD	0bce22a7ar			; -0.0276081
	DD	0bceeba2cr			; -0.0291415
	DD	0bcfb49bar			; -0.0306748
	DD	0bd03ec90r			; -0.032208
	DD	0bd0a342fr			; -0.0337412
	DD	0bd107bb8r			; -0.0352742
	DD	0bd16c32cr			; -0.0368072
	DD	0bd1d0a88r			; -0.0383401
	DD	0bd2351cbr			; -0.0398729
	DD	0bd2998f6r			; -0.0414056
	DD	0bd2fe007r			; -0.0429383
	DD	0bd3626fcr			; -0.0444708
	DD	0bd3c6dd5r			; -0.0460032
	DD	0bd42b491r			; -0.0475355
	DD	0bd48fb30r			; -0.0490677
	DD	0bd4f41afr			; -0.0505998
	DD	0bd55880er			; -0.0521317
	DD	0bd5bce4cr			; -0.0536635
	DD	0bd621469r			; -0.0551952
	DD	0bd685a62r			; -0.0567268
	DD	0bd6ea038r			; -0.0582583
	DD	0bd74e5e9r			; -0.0597896
	DD	0bd7b2b74r			; -0.0613207
	DD	0bd80b86cr			; -0.0628518
	DD	0bd83db0ar			; -0.0643826
	DD	0bd86fd94r			; -0.0659133
	DD	0bd8a200ar			; -0.0674439
	DD	0bd8d426ar			; -0.0689743
	DD	0bd9064b4r			; -0.0705046
	DD	0bd9386e7r			; -0.0720346
	DD	0bd96a905r			; -0.0735646
	DD	0bd99cb0ar			; -0.0750943
	DD	0bd9cecf9r			; -0.0766239
	DD	0bda00ecfr			; -0.0781532
	DD	0bda3308cr			; -0.0796824
	DD	0bda65230r			; -0.0812114
	DD	0bda973bar			; -0.0827403
	DD	0bdac952br			; -0.0842689
	DD	0bdafb680r			; -0.0857973
	DD	0bdb2d7bbr			; -0.0873255
	DD	0bdb5f8dar			; -0.0888536
	DD	0bdb919ddr			; -0.0903814
	DD	0bdbc3ac3r			; -0.091909
	DD	0bdbf5b8dr			; -0.0934363
	DD	0bdc27c39r			; -0.0949635
	DD	0bdc59cc6r			; -0.0964904
	DD	0bdc8bd36r			; -0.0980171
	DD	0bdcbdd86r			; -0.0995436
	DD	0bdcefdb7r			; -0.10107
	DD	0bdd21dc8r			; -0.102596
	DD	0bdd53db9r			; -0.104122
	DD	0bdd85d89r			; -0.105647
	DD	0bddb7d37r			; -0.107172
	DD	0bdde9cc4r			; -0.108697
	DD	0bde1bc2er			; -0.110222
	DD	0bde4db76r			; -0.111747
	DD	0bde7fa9ar			; -0.113271
	DD	0bdeb199ar			; -0.114795
	DD	0bdee3876r			; -0.116319
	DD	0bdf1572er			; -0.117842
	DD	0bdf475c0r			; -0.119365
	DD	0bdf7942cr			; -0.120888
	DD	0bdfab273r			; -0.122411
	DD	0bdfdd092r			; -0.123933
	DD	0be007745r			; -0.125455
	DD	0be02062er			; -0.126977
	DD	0be039502r			; -0.128498
	DD	0be0523c2r			; -0.130019
	DD	0be06b26er			; -0.13154
	DD	0be084105r			; -0.133061
	DD	0be09cf86r			; -0.134581
	DD	0be0b5df3r			; -0.136101
	DD	0be0cec4ar			; -0.13762
	DD	0be0e7a8br			; -0.139139
	DD	0be1008b7r			; -0.140658
	DD	0be1196ccr			; -0.142177
	DD	0be1324car			; -0.143695
	DD	0be14b2b2r			; -0.145213
	DD	0be164083r			; -0.14673
	DD	0be17ce3dr			; -0.148248
	DD	0be195be0r			; -0.149765
	DD	0be1ae96br			; -0.151281
	DD	0be1c76der			; -0.152797
	DD	0be1e0438r			; -0.154313
	DD	0be1f917br			; -0.155828
	DD	0be211ea5r			; -0.157343
	DD	0be22abb6r			; -0.158858
	DD	0be2438adr			; -0.160372
	DD	0be25c58cr			; -0.161886
	DD	0be275251r			; -0.1634
	DD	0be28defcr			; -0.164913
	DD	0be2a6b8dr			; -0.166426
	DD	0be2bf804r			; -0.167938
	DD	0be2d8461r			; -0.16945
	DD	0be2f10a2r			; -0.170962
	DD	0be309cc9r			; -0.172473
	DD	0be3228d4r			; -0.173984
	DD	0be33b4c4r			; -0.175494
	DD	0be354098r			; -0.177004
	DD	0be36cc50r			; -0.178514
	DD	0be3857ecr			; -0.180023
	DD	0be39e36cr			; -0.181532
	DD	0be3b6ecfr			; -0.18304
	DD	0be3cfa15r			; -0.184548
	DD	0be3e853er			; -0.186055
	DD	0be401049r			; -0.187562
	DD	0be419b37r			; -0.189069
	DD	0be432607r			; -0.190575
	DD	0be44b0b9r			; -0.19208
	DD	0be463b4dr			; -0.193586
	DD	0be47c5c2r			; -0.19509
	DD	0be495018r			; -0.196595
	DD	0be4ada4fr			; -0.198098
	DD	0be4c6467r			; -0.199602
	DD	0be4dee60r			; -0.201105
	DD	0be4f7838r			; -0.202607
	DD	0be5101f1r			; -0.204109
	DD	0be528b89r			; -0.20561
	DD	0be541501r			; -0.207111
	DD	0be559e58r			; -0.208612
	DD	0be57278fr			; -0.210112
	DD	0be58b0a4r			; -0.211611
	DD	0be5a3997r			; -0.21311
	DD	0be5bc26ar			; -0.214609
	DD	0be5d4b1ar			; -0.216107
	DD	0be5ed3a8r			; -0.217604
	DD	0be605c13r			; -0.219101
	DD	0be61e45cr			; -0.220598
	DD	0be636c83r			; -0.222094
	DD	0be64f486r			; -0.223589
	DD	0be667c66r			; -0.225084
	DD	0be680422r			; -0.226578
	DD	0be698bbar			; -0.228072
	DD	0be6b132fr			; -0.229565
	DD	0be6c9a7fr			; -0.231058
	DD	0be6e21abr			; -0.23255
	DD	0be6fa8b2r			; -0.234042
	DD	0be712f94r			; -0.235533
	DD	0be72b651r			; -0.237024
	DD	0be743ce8r			; -0.238514
	DD	0be75c35ar			; -0.240003
	DD	0be7749a6r			; -0.241492
	DD	0be78cfccr			; -0.24298
	DD	0be7a55cbr			; -0.244468
	DD	0be7bdba4r			; -0.245955
	DD	0be7d6156r			; -0.247442
	DD	0be7ee6e1r			; -0.248928
	DD	0be803622r			; -0.250413
	DD	0be80f8c0r			; -0.251898
	DD	0be81bb4ar			; -0.253382
	DD	0be827dc0r			; -0.254866
	DD	0be834022r			; -0.256349
	DD	0be840270r			; -0.257831
	DD	0be84c4aar			; -0.259313
	DD	0be8586cer			; -0.260794
	DD	0be8648dfr			; -0.262275
	DD	0be870adar			; -0.263755
	DD	0be87ccc1r			; -0.265234
	DD	0be888e93r			; -0.266713
	DD	0be895050r			; -0.268191
	DD	0be8a11f7r			; -0.269668
	DD	0be8ad38ar			; -0.271145
	DD	0be8b9507r			; -0.272621
	DD	0be8c566er			; -0.274097
	DD	0be8d17c0r			; -0.275572
	DD	0be8dd8fcr			; -0.277046
	DD	0be8e9a22r			; -0.27852
	DD	0be8f5b32r			; -0.279993
	DD	0be901c2cr			; -0.281465
	DD	0be90dd10r			; -0.282937
	DD	0be919dddr			; -0.284408
	DD	0be925e94r			; -0.285878
	DD	0be931f35r			; -0.287347
	DD	0be93dfbfr			; -0.288816
	DD	0be94a031r			; -0.290285
	DD	0be95608dr			; -0.291752
	DD	0be9620d2r			; -0.293219
	DD	0be96e100r			; -0.294685
	DD	0be97a117r			; -0.296151
	DD	0be986116r			; -0.297616
	DD	0be9920fer			; -0.29908
	DD	0be99e0cer			; -0.300543
	DD	0be9aa086r			; -0.302006
	DD	0be9b6027r			; -0.303468
	DD	0be9c1fafr			; -0.304929
	DD	0be9cdf20r			; -0.30639
	DD	0be9d9e78r			; -0.30785
	DD	0be9e5db8r			; -0.309309
	DD	0be9f1cdfr			; -0.310767
	DD	0be9fdbeer			; -0.312225
	DD	0bea09ae5r			; -0.313682
	DD	0bea159c2r			; -0.315138
	DD	0bea21887r			; -0.316593
	DD	0bea2d733r			; -0.318048
	DD	0bea395c5r			; -0.319502
	DD	0bea4543fr			; -0.320955
	DD	0bea5129fr			; -0.322408
	DD	0bea5d0e5r			; -0.323859
	DD	0bea68f12r			; -0.32531
	DD	0bea74d25r			; -0.32676
	DD	0bea80b1fr			; -0.32821
	DD	0bea8c8fer			; -0.329658
	DD	0bea986c4r			; -0.331106
	DD	0beaa446fr			; -0.332553
	DD	0beab0201r			; -0.334
	DD	0beabbf77r			; -0.335445
	DD	0beac7cd4r			; -0.33689
	DD	0bead3a15r			; -0.338334
	DD	0beadf73cr			; -0.339777
	DD	0beaeb449r			; -0.341219
	DD	0beaf713ar			; -0.342661
	DD	0beb02e10r			; -0.344101
	DD	0beb0eacbr			; -0.345541
	DD	0beb1a76br			; -0.34698
	DD	0beb263efr			; -0.348419
	DD	0beb32058r			; -0.349856
	DD	0beb3dca5r			; -0.351293
	DD	0beb498d6r			; -0.352729
	DD	0beb554ecr			; -0.354164
	DD	0beb610e6r			; -0.355598
	DD	0beb6ccc3r			; -0.357031
	DD	0beb78884r			; -0.358463
	DD	0beb8442ar			; -0.359895
	DD	0beb8ffb2r			; -0.361326
	DD	0beb9bb1er			; -0.362756
	DD	0beba766er			; -0.364185
	DD	0bebb31a0r			; -0.365613
	DD	0bebbecb6r			; -0.36704
	DD	0bebca7afr			; -0.368467
	DD	0bebd628br			; -0.369892
	DD	0bebe1d4ar			; -0.371317
	DD	0bebed7ebr			; -0.372741
	DD	0bebf926fr			; -0.374164
	DD	0bec04cd5r			; -0.375586
	DD	0bec1071er			; -0.377007
	DD	0bec1c148r			; -0.378428
	DD	0bec27b55r			; -0.379847
	DD	0bec33544r			; -0.381266
	DD	0bec3ef15r			; -0.382683
	DD	0bec4a8c8r			; -0.3841
	DD	0bec5625cr			; -0.385516
	DD	0bec61bd2r			; -0.386931
	DD	0bec6d529r			; -0.388345
	DD	0bec78e62r			; -0.389758
	DD	0bec8477cr			; -0.39117
	DD	0bec90077r			; -0.392582
	DD	0bec9b953r			; -0.393992
	DD	0beca7210r			; -0.395401
	DD	0becb2aaer			; -0.39681
	DD	0becbe32cr			; -0.398218
	DD	0becc9b8br			; -0.399624
	DD	0becd53car			; -0.40103
	DD	0bece0bear			; -0.402435
	DD	0becec3ear			; -0.403838
	DD	0becf7bcar			; -0.405241
	DD	0bed0338ar			; -0.406643
	DD	0bed0eb2ar			; -0.408044
	DD	0bed1a2aar			; -0.409444
	DD	0bed25a09r			; -0.410843
	DD	0bed31148r			; -0.412241
	DD	0bed3c867r			; -0.413638
	DD	0bed47f64r			; -0.415034
	DD	0bed53641r			; -0.41643
	DD	0bed5ecfdr			; -0.417824
	DD	0bed6a399r			; -0.419217
	DD	0bed75a13r			; -0.420609
	DD	0bed8106br			; -0.422
	DD	0bed8c6a3r			; -0.42339
	DD	0bed97cb9r			; -0.42478
	DD	0beda32adr			; -0.426168
	DD	0bedae880r			; -0.427555
	DD	0bedb9e31r			; -0.428941
	DD	0bedc53c1r			; -0.430326
	DD	0bedd092er			; -0.431711
	DD	0beddbe79r			; -0.433094
	DD	0bede73a2r			; -0.434476
	DD	0bedf28a9r			; -0.435857
	DD	0bedfdd8dr			; -0.437237
	DD	0bee0924fr			; -0.438616
	DD	0bee146eer			; -0.439994
	DD	0bee1fb6ar			; -0.441371
	DD	0bee2afc4r			; -0.442747
	DD	0bee363far			; -0.444122
	DD	0bee4180er			; -0.445496
	DD	0bee4cbfer			; -0.446869
	DD	0bee57fcbr			; -0.448241
	DD	0bee63375r			; -0.449611
	DD	0bee6e6fbr			; -0.450981
	DD	0bee79a5dr			; -0.45235
	DD	0bee84d9cr			; -0.453717
	DD	0bee900b7r			; -0.455084
	DD	0bee9b3aer			; -0.456449
	DD	0beea6681r			; -0.457813
	DD	0beeb1930r			; -0.459177
	DD	0beebcbbbr			; -0.460539
	DD	0beec7e21r			; -0.4619
	DD	0beed3063r			; -0.46326
	DD	0beede280r			; -0.464619
	DD	0beee9479r			; -0.465977
	DD	0beef464cr			; -0.467333
	DD	0beeff7fbr			; -0.468689
	DD	0bef0a985r			; -0.470043
	DD	0bef15aear			; -0.471397
	DD	0bef20c29r			; -0.472749
	DD	0bef2bd43r			; -0.4741
	DD	0bef36e38r			; -0.47545
	DD	0bef41f07r			; -0.476799
	DD	0bef4cfb1r			; -0.478147
	DD	0bef58035r			; -0.479494
	DD	0bef63093r			; -0.480839
	DD	0bef6e0cbr			; -0.482184
	DD	0bef790dcr			; -0.483527
	DD	0bef840c8r			; -0.484869
	DD	0bef8f08er			; -0.48621
	DD	0bef9a02dr			; -0.48755
	DD	0befa4fa5r			; -0.488889
	DD	0befafef7r			; -0.490226
	DD	0befbae22r			; -0.491563
	DD	0befc5d27r			; -0.492898
	DD	0befd0c04r			; -0.494232
	DD	0befdbabbr			; -0.495565
	DD	0befe694ar			; -0.496897
	DD	0beff17b2r			; -0.498228
	DD	0beffc5f3r			; -0.499557
	DD	0bf003a06r			; -0.500885
	DD	0bf0090ffr			; -0.502212
	DD	0bf00e7e4r			; -0.503538
	DD	0bf013eb5r			; -0.504863
	DD	0bf019573r			; -0.506187
	DD	0bf01ec1cr			; -0.507509
	DD	0bf0242b1r			; -0.50883
	DD	0bf029932r			; -0.51015
	DD	0bf02ef9fr			; -0.511469
	DD	0bf0345f8r			; -0.512786
	DD	0bf039c3dr			; -0.514103
	DD	0bf03f26dr			; -0.515418
	DD	0bf044889r			; -0.516732
	DD	0bf049e91r			; -0.518045
	DD	0bf04f484r			; -0.519356
	DD	0bf054a62r			; -0.520666
	DD	0bf05a02cr			; -0.521975
	DD	0bf05f5e2r			; -0.523283
	DD	0bf064b82r			; -0.52459
	DD	0bf06a10er			; -0.525895
	DD	0bf06f686r			; -0.527199
	DD	0bf074be8r			; -0.528502
	DD	0bf07a136r			; -0.529804
	DD	0bf07f66fr			; -0.531104
	DD	0bf084b92r			; -0.532403
	DD	0bf08a0a1r			; -0.533701
	DD	0bf08f59br			; -0.534998
	DD	0bf094a7fr			; -0.536293
	DD	0bf099f4er			; -0.537587
	DD	0bf09f409r			; -0.53888
	DD	0bf0a48adr			; -0.540171
	DD	0bf0a9d3dr			; -0.541462
	DD	0bf0af1b7r			; -0.542751
	DD	0bf0b461cr			; -0.544039
	DD	0bf0b9a6br			; -0.545325
	DD	0bf0beea5r			; -0.54661
	DD	0bf0c42c9r			; -0.547894
	DD	0bf0c96d7r			; -0.549177
	DD	0bf0cead0r			; -0.550458
	DD	0bf0d3eb3r			; -0.551738
	DD	0bf0d9281r			; -0.553017
	DD	0bf0de638r			; -0.554294
	DD	0bf0e39dar			; -0.55557
	DD	0bf0e8d65r			; -0.556845
	DD	0bf0ee0dbr			; -0.558119
	DD	0bf0f343br			; -0.559391
	DD	0bf0f8784r			; -0.560662
	DD	0bf0fdab8r			; -0.561931
	DD	0bf102dd5r			; -0.563199
	DD	0bf1080dcr			; -0.564466
	DD	0bf10d3cdr			; -0.565732
	DD	0bf1126a7r			; -0.566996
	DD	0bf11796br			; -0.568259
	DD	0bf11cc19r			; -0.569521
	DD	0bf121eb0r			; -0.570781
	DD	0bf127130r			; -0.57204
	DD	0bf12c39ar			; -0.573297
	DD	0bf1315eer			; -0.574553
	DD	0bf13682ar			; -0.575808
	DD	0bf13ba50r			; -0.577062
	DD	0bf140c5fr			; -0.578314
	DD	0bf145e58r			; -0.579565
	DD	0bf14b039r			; -0.580814
	DD	0bf150204r			; -0.582062
	DD	0bf1553b7r			; -0.583309
	DD	0bf15a554r			; -0.584554
	DD	0bf15f6d9r			; -0.585798
	DD	0bf164847r			; -0.58704
	DD	0bf16999fr			; -0.588282
	DD	0bf16eader			; -0.589521
	DD	0bf173c07r			; -0.59076
	DD	0bf178d18r			; -0.591997
	DD	0bf17de12r			; -0.593232
	DD	0bf182ef5r			; -0.594467
	DD	0bf187fc0r			; -0.595699
	DD	0bf18d073r			; -0.596931
	DD	0bf19210fr			; -0.598161
	DD	0bf197194r			; -0.599389
	DD	0bf19c200r			; -0.600616
	DD	0bf1a1255r			; -0.601842
	DD	0bf1a6293r			; -0.603067
	DD	0bf1ab2b8r			; -0.60429
	DD	0bf1b02c6r			; -0.605511
	DD	0bf1b52bbr			; -0.606731
	DD	0bf1ba299r			; -0.60795
	DD	0bf1bf25fr			; -0.609167
	DD	0bf1c420cr			; -0.610383
	DD	0bf1c91a2r			; -0.611597
	DD	0bf1ce11fr			; -0.61281
	DD	0bf1d3084r			; -0.614022
	DD	0bf1d7fd1r			; -0.615232
	DD	0bf1dcf06r			; -0.61644
	DD	0bf1e1e22r			; -0.617647
	DD	0bf1e6d26r			; -0.618853
	DD	0bf1ebc12r			; -0.620057
	DD	0bf1f0ae5r			; -0.62126
	DD	0bf1f599fr			; -0.622461
	DD	0bf1fa841r			; -0.623661
	DD	0bf1ff6cbr			; -0.62486
	DD	0bf20453br			; -0.626056
	DD	0bf209393r			; -0.627252
	DD	0bf20e1d2r			; -0.628446
	DD	0bf212ff9r			; -0.629638
	DD	0bf217e06r			; -0.630829
	DD	0bf21cbfbr			; -0.632019
	DD	0bf2219d7r			; -0.633207
	DD	0bf226799r			; -0.634393
	DD	0bf22b543r			; -0.635578
	DD	0bf2302d3r			; -0.636762
	DD	0bf23504br			; -0.637944
	DD	0bf239da9r			; -0.639124
	DD	0bf23eaeer			; -0.640303
	DD	0bf24381ar			; -0.641481
	DD	0bf24852cr			; -0.642657
	DD	0bf24d225r			; -0.643832
	DD	0bf251f04r			; -0.645005
	DD	0bf256bcbr			; -0.646176
	DD	0bf25b877r			; -0.647346
	DD	0bf26050ar			; -0.648514
	DD	0bf265184r			; -0.649681
	DD	0bf269de3r			; -0.650847
	DD	0bf26ea2ar			; -0.652011
	DD	0bf273656r			; -0.653173
	DD	0bf278268r			; -0.654334
	DD	0bf27ce61r			; -0.655493
	DD	0bf281a40r			; -0.656651
	DD	0bf286605r			; -0.657807
	DD	0bf28b1b0r			; -0.658961
	DD	0bf28fd41r			; -0.660114
	DD	0bf2948b8r			; -0.661266
	DD	0bf299415r			; -0.662416
	DD	0bf29df57r			; -0.663564
	DD	0bf2a2a80r			; -0.664711
	DD	0bf2a758er			; -0.665856
	DD	0bf2ac082r			; -0.667
	DD	0bf2b0b5br			; -0.668142
	DD	0bf2b561br			; -0.669283
	DD	0bf2ba0bfr			; -0.670422
	DD	0bf2beb4ar			; -0.671559
	DD	0bf2c35b9r			; -0.672695
	DD	0bf2c800fr			; -0.673829
	DD	0bf2cca49r			; -0.674962
	DD	0bf2d1469r			; -0.676093
	DD	0bf2d5e6fr			; -0.677222
	DD	0bf2da859r			; -0.67835
	DD	0bf2df229r			; -0.679476
	DD	0bf2e3bder			; -0.680601
	DD	0bf2e8578r			; -0.681724
	DD	0bf2ecef7r			; -0.682846
	DD	0bf2f185br			; -0.683965
	DD	0bf2f61a5r			; -0.685084
	DD	0bf2faad3r			; -0.6862
	DD	0bf2ff3e6r			; -0.687315
	DD	0bf303cder			; -0.688429
	DD	0bf3085bbr			; -0.689541
	DD	0bf30ce7cr			; -0.690651
	DD	0bf311722r			; -0.691759
	DD	0bf315fadr			; -0.692866
	DD	0bf31a81dr			; -0.693971
	DD	0bf31f071r			; -0.695075
	DD	0bf3238aar			; -0.696177
	DD	0bf3280c7r			; -0.697277
	DD	0bf32c8c9r			; -0.698376
	DD	0bf3310afr			; -0.699473
	DD	0bf33587ar			; -0.700569
	DD	0bf33a029r			; -0.701663
	DD	0bf33e7bcr			; -0.702755
	DD	0bf342f34r			; -0.703845
	DD	0bf34768fr			; -0.704934
	DD	0bf34bdcfr			; -0.706021
	DD	0bf3504f3r			; -0.707107
	DD	0bf354bfbr			; -0.708191
	DD	0bf3592e7r			; -0.709273
	DD	0bf35d9b8r			; -0.710353
	DD	0bf36206cr			; -0.711432
	DD	0bf366704r			; -0.712509
	DD	0bf36ad7fr			; -0.713585
	DD	0bf36f3dfr			; -0.714659
	DD	0bf373a23r			; -0.715731
	DD	0bf37804ar			; -0.716801
	DD	0bf37c655r			; -0.71787
	DD	0bf380c43r			; -0.718937
	DD	0bf385216r			; -0.720003
	DD	0bf3897cbr			; -0.721066
	DD	0bf38dd65r			; -0.722128
	DD	0bf3922e1r			; -0.723188
	DD	0bf396842r			; -0.724247
	DD	0bf39ad85r			; -0.725304
	DD	0bf39f2acr			; -0.726359
	DD	0bf3a37b7r			; -0.727413
	DD	0bf3a7ca4r			; -0.728464
	DD	0bf3ac175r			; -0.729514
	DD	0bf3b0629r			; -0.730563
	DD	0bf3b4ac1r			; -0.731609
	DD	0bf3b8f3br			; -0.732654
	DD	0bf3bd398r			; -0.733697
	DD	0bf3c17d9r			; -0.734739
	DD	0bf3c5bfcr			; -0.735779
	DD	0bf3ca003r			; -0.736817
	DD	0bf3ce3ecr			; -0.737853
	DD	0bf3d27b8r			; -0.738887
	DD	0bf3d6b67r			; -0.73992
	DD	0bf3daef9r			; -0.740951
	DD	0bf3df26er			; -0.74198
	DD	0bf3e35c5r			; -0.743008
	DD	0bf3e78ffr			; -0.744034
	DD	0bf3ebc1br			; -0.745058
	DD	0bf3eff1br			; -0.74608
	DD	0bf3f41fcr			; -0.747101
	DD	0bf3f84c0r			; -0.748119
	DD	0bf3fc767r			; -0.749136
	DD	0bf4009f0r			; -0.750152
	DD	0bf404c5cr			; -0.751165
	DD	0bf408ea9r			; -0.752177
	DD	0bf40d0dar			; -0.753187
	DD	0bf4112ecr			; -0.754195
	DD	0bf4154e1r			; -0.755201
	DD	0bf4196b7r			; -0.756206
	DD	0bf41d870r			; -0.757209
	DD	0bf421a0br			; -0.75821
	DD	0bf425b89r			; -0.759209
	DD	0bf429ce8r			; -0.760207
	DD	0bf42de29r			; -0.761202
	DD	0bf431f4cr			; -0.762196
	DD	0bf436051r			; -0.763188
	DD	0bf43a138r			; -0.764179
	DD	0bf43e200r			; -0.765167
	DD	0bf4422abr			; -0.766154
	DD	0bf446337r			; -0.767139
	DD	0bf44a3a5r			; -0.768122
	DD	0bf44e3f5r			; -0.769103
	DD	0bf452426r			; -0.770083
	DD	0bf456439r			; -0.771061
	DD	0bf45a42dr			; -0.772036
	DD	0bf45e403r			; -0.77301
	DD	0bf4623bbr			; -0.773983
	DD	0bf466354r			; -0.774953
	DD	0bf46a2cer			; -0.775922
	DD	0bf46e22ar			; -0.776888
	DD	0bf472167r			; -0.777853
	DD	0bf476085r			; -0.778817
	DD	0bf479f84r			; -0.779778
	DD	0bf47de65r			; -0.780737
	DD	0bf481d27r			; -0.781695
	DD	0bf485bcar			; -0.782651
	DD	0bf489a4er			; -0.783605
	DD	0bf48d8b3r			; -0.784557
	DD	0bf4916far			; -0.785507
	DD	0bf495521r			; -0.786455
	DD	0bf499329r			; -0.787402
	DD	0bf49d112r			; -0.788346
	DD	0bf4a0edcr			; -0.789289
	DD	0bf4a4c87r			; -0.79023
	DD	0bf4a8a13r			; -0.791169
	DD	0bf4ac77fr			; -0.792107
	DD	0bf4b04ccr			; -0.793042
	DD	0bf4b41far			; -0.793975
	DD	0bf4b7f09r			; -0.794907
	DD	0bf4bbbf8r			; -0.795837
	DD	0bf4bf8c7r			; -0.796765
	DD	0bf4c3578r			; -0.797691
	DD	0bf4c7208r			; -0.798615
	DD	0bf4cae79r			; -0.799537
	DD	0bf4ceacbr			; -0.800458
	DD	0bf4d26fdr			; -0.801376
	DD	0bf4d6310r			; -0.802293
	DD	0bf4d9f02r			; -0.803208
	DD	0bf4ddad5r			; -0.80412
	DD	0bf4e1689r			; -0.805031
	DD	0bf4e521cr			; -0.80594
	DD	0bf4e8d90r			; -0.806848
	DD	0bf4ec8e4r			; -0.807753
	DD	0bf4f0417r			; -0.808656
	DD	0bf4f3f2br			; -0.809558
	DD	0bf4f7a1fr			; -0.810457
	DD	0bf4fb4f4r			; -0.811355
	DD	0bf4fefa8r			; -0.812251
	DD	0bf502a3br			; -0.813144
	DD	0bf5064afr			; -0.814036
	DD	0bf509f03r			; -0.814926
	DD	0bf50d937r			; -0.815814
	DD	0bf51134ar			; -0.816701
	DD	0bf514d3dr			; -0.817585
	DD	0bf518710r			; -0.818467
	DD	0bf51c0c2r			; -0.819348
	DD	0bf51fa54r			; -0.820226
	DD	0bf5233c6r			; -0.821102
	DD	0bf526d18r			; -0.821977
	DD	0bf52a649r			; -0.82285
	DD	0bf52df59r			; -0.823721
	DD	0bf531849r			; -0.824589
	DD	0bf535118r			; -0.825456
	DD	0bf5389c7r			; -0.826321
	DD	0bf53c255r			; -0.827184
	DD	0bf53fac3r			; -0.828045
	DD	0bf54330fr			; -0.828904
	DD	0bf546b3br			; -0.829761
	DD	0bf54a347r			; -0.830616
	DD	0bf54db31r			; -0.83147
	DD	0bf5512fbr			; -0.832321
	DD	0bf554aa4r			; -0.83317
	DD	0bf55822cr			; -0.834018
	DD	0bf55b993r			; -0.834863
	DD	0bf55f0d9r			; -0.835706
	DD	0bf5627fer			; -0.836548
	DD	0bf565f02r			; -0.837387
	DD	0bf5695e5r			; -0.838225
	DD	0bf56cca7r			; -0.83906
	DD	0bf570348r			; -0.839894
	DD	0bf5739c7r			; -0.840725
	DD	0bf577026r			; -0.841555
	DD	0bf57a663r			; -0.842383
	DD	0bf57dc7fr			; -0.843208
	DD	0bf581279r			; -0.844032
	DD	0bf584853r			; -0.844854
	DD	0bf587e0br			; -0.845673
	DD	0bf58b3a1r			; -0.846491
	DD	0bf58e916r			; -0.847307
	DD	0bf591e6ar			; -0.84812
	DD	0bf59539cr			; -0.848932
	DD	0bf5988adr			; -0.849742
	DD	0bf59bd9cr			; -0.850549
	DD	0bf59f26ar			; -0.851355
	DD	0bf5a2716r			; -0.852159
	DD	0bf5a5ba0r			; -0.852961
	DD	0bf5a9009r			; -0.85376
	DD	0bf5ac450r			; -0.854558
	DD	0bf5af875r			; -0.855354
	DD	0bf5b2c79r			; -0.856147
	DD	0bf5b605ar			; -0.856939
	DD	0bf5b941ar			; -0.857729
	DD	0bf5bc7b8r			; -0.858516
	DD	0bf5bfb34r			; -0.859302
	DD	0bf5c2e8er			; -0.860085
	DD	0bf5c61c7r			; -0.860867
	DD	0bf5c94ddr			; -0.861646
	DD	0bf5cc7d1r			; -0.862424
	DD	0bf5cfaa3r			; -0.863199
	DD	0bf5d2d53r			; -0.863973
	DD	0bf5d5fe1r			; -0.864744
	DD	0bf5d924dr			; -0.865514
	DD	0bf5dc497r			; -0.866281
	DD	0bf5df6ber			; -0.867046
	DD	0bf5e28c3r			; -0.867809
	DD	0bf5e5aa6r			; -0.868571
	DD	0bf5e8c67r			; -0.86933
	DD	0bf5ebe05r			; -0.870087
	DD	0bf5eef81r			; -0.870842
	DD	0bf5f20dbr			; -0.871595
	DD	0bf5f5212r			; -0.872346
	DD	0bf5f8327r			; -0.873095
	DD	0bf5fb419r			; -0.873842
	DD	0bf5fe4e9r			; -0.874587
	DD	0bf601596r			; -0.875329
	DD	0bf604621r			; -0.87607
	DD	0bf607689r			; -0.876809
	DD	0bf60a6cfr			; -0.877545
	DD	0bf60d6f2r			; -0.87828
	DD	0bf6106f2r			; -0.879012
	DD	0bf6136d0r			; -0.879743
	DD	0bf61668ar			; -0.880471
	DD	0bf619622r			; -0.881197
	DD	0bf61c598r			; -0.881921
	DD	0bf61f4ear			; -0.882643
	DD	0bf62241ar			; -0.883363
	DD	0bf625326r			; -0.884081
	DD	0bf628210r			; -0.884797
	DD	0bf62b0d7r			; -0.885511
	DD	0bf62df7br			; -0.886223
	DD	0bf630dfcr			; -0.886932
	DD	0bf633c5ar			; -0.88764
	DD	0bf636a95r			; -0.888345
	DD	0bf6398acr			; -0.889048
	DD	0bf63c6a1r			; -0.88975
	DD	0bf63f473r			; -0.890449
	DD	0bf642221r			; -0.891146
	DD	0bf644facr			; -0.891841
	DD	0bf647d14r			; -0.892534
	DD	0bf64aa59r			; -0.893224
	DD	0bf64d77br			; -0.893913
	DD	0bf650479r			; -0.894599
	DD	0bf653154r			; -0.895284
	DD	0bf655e0br			; -0.895966
	DD	0bf658aa0r			; -0.896646
	DD	0bf65b710r			; -0.897325
	DD	0bf65e35er			; -0.898001
	DD	0bf660f88r			; -0.898674
	DD	0bf663b8er			; -0.899346
	DD	0bf666771r			; -0.900016
	DD	0bf669330r			; -0.900683
	DD	0bf66beccr			; -0.901349
	DD	0bf66ea45r			; -0.902012
	DD	0bf671599r			; -0.902673
	DD	0bf6740car			; -0.903332
	DD	0bf676bd8r			; -0.903989
	DD	0bf6796c1r			; -0.904644
	DD	0bf67c187r			; -0.905297
	DD	0bf67ec29r			; -0.905947
	DD	0bf6816a8r			; -0.906596
	DD	0bf684103r			; -0.907242
	DD	0bf686b39r			; -0.907886
	DD	0bf68954cr			; -0.908528
	DD	0bf68bf3cr			; -0.909168
	DD	0bf68e907r			; -0.909806
	DD	0bf6912aer			; -0.910441
	DD	0bf693c32r			; -0.911075
	DD	0bf696591r			; -0.911706
	DD	0bf698eccr			; -0.912335
	DD	0bf69b7e4r			; -0.912962
	DD	0bf69e0d7r			; -0.913587
	DD	0bf6a09a7r			; -0.91421
	DD	0bf6a3252r			; -0.91483
	DD	0bf6a5ad9r			; -0.915449
	DD	0bf6a833cr			; -0.916065
	DD	0bf6aab7br			; -0.916679
	DD	0bf6ad395r			; -0.917291
	DD	0bf6afb8cr			; -0.917901
	DD	0bf6b235er			; -0.918508
	DD	0bf6b4b0cr			; -0.919114
	DD	0bf6b7295r			; -0.919717
	DD	0bf6b99fbr			; -0.920318
	DD	0bf6bc13br			; -0.920917
	DD	0bf6be858r			; -0.921514
	DD	0bf6c0f50r			; -0.922109
	DD	0bf6c3624r			; -0.922701
	DD	0bf6c5cd4r			; -0.923291
	DD	0bf6c835er			; -0.92388
	DD	0bf6ca9c5r			; -0.924465
	DD	0bf6cd007r			; -0.925049
	DD	0bf6cf624r			; -0.925631
	DD	0bf6d1c1dr			; -0.92621
	DD	0bf6d41f2r			; -0.926787
	DD	0bf6d67a1r			; -0.927363
	DD	0bf6d8d2dr			; -0.927935
	DD	0bf6db293r			; -0.928506
	DD	0bf6dd7d5r			; -0.929075
	DD	0bf6dfcf2r			; -0.929641
	DD	0bf6e21ebr			; -0.930205
	DD	0bf6e46ber			; -0.930767
	DD	0bf6e6b6dr			; -0.931327
	DD	0bf6e8ff8r			; -0.931884
	DD	0bf6eb45dr			; -0.93244
	DD	0bf6ed89er			; -0.932993
	DD	0bf6efcbar			; -0.933544
	DD	0bf6f20b0r			; -0.934093
	DD	0bf6f4483r			; -0.934639
	DD	0bf6f6830r			; -0.935184
	DD	0bf6f8bb8r			; -0.935726
	DD	0bf6faf1br			; -0.936266
	DD	0bf6fd25ar			; -0.936803
	DD	0bf6ff573r			; -0.937339
	DD	0bf701867r			; -0.937872
	DD	0bf703b37r			; -0.938404
	DD	0bf705de1r			; -0.938932
	DD	0bf708066r			; -0.939459
	DD	0bf70a2c6r			; -0.939984
	DD	0bf70c501r			; -0.940506
	DD	0bf70e717r			; -0.941026
	DD	0bf710908r			; -0.941544
	DD	0bf712ad4r			; -0.94206
	DD	0bf714c7ar			; -0.942573
	DD	0bf716dfbr			; -0.943084
	DD	0bf718f57r			; -0.943593
	DD	0bf71b08er			; -0.9441
	DD	0bf71d19fr			; -0.944605
	DD	0bf71f28cr			; -0.945107
	DD	0bf721352r			; -0.945607
	DD	0bf7233f4r			; -0.946105
	DD	0bf725470r			; -0.946601
	DD	0bf7274c7r			; -0.947094
	DD	0bf7294f8r			; -0.947586
	DD	0bf72b504r			; -0.948075
	DD	0bf72d4ebr			; -0.948561
	DD	0bf72f4acr			; -0.949046
	DD	0bf731447r			; -0.949528
	DD	0bf7333ber			; -0.950008
	DD	0bf73530er			; -0.950486
	DD	0bf737239r			; -0.950962
	DD	0bf73913fr			; -0.951435
	DD	0bf73b01fr			; -0.951906
	DD	0bf73ced9r			; -0.952375
	DD	0bf73ed6er			; -0.952842
	DD	0bf740bddr			; -0.953306
	DD	0bf742a27r			; -0.953768
	DD	0bf74484br			; -0.954228
	DD	0bf746649r			; -0.954686
	DD	0bf748422r			; -0.955141
	DD	0bf74a1d5r			; -0.955594
	DD	0bf74bf62r			; -0.956045
	DD	0bf74dcc9r			; -0.956494
	DD	0bf74fa0br			; -0.95694
	DD	0bf751727r			; -0.957385
	DD	0bf75341dr			; -0.957826
	DD	0bf7550edr			; -0.958266
	DD	0bf756d97r			; -0.958703
	DD	0bf758a1cr			; -0.959139
	DD	0bf75a67br			; -0.959572
	DD	0bf75c2b3r			; -0.960002
	DD	0bf75dec6r			; -0.960431
	DD	0bf75fab3r			; -0.960857
	DD	0bf76167ar			; -0.96128
	DD	0bf76321br			; -0.961702
	DD	0bf764d97r			; -0.962121
	DD	0bf7668ecr			; -0.962538
	DD	0bf76841br			; -0.962953
	DD	0bf769f24r			; -0.963366
	DD	0bf76ba07r			; -0.963776
	DD	0bf76d4c4r			; -0.964184
	DD	0bf76ef5br			; -0.96459
	DD	0bf7709ccr			; -0.964993
	DD	0bf772417r			; -0.965394
	DD	0bf773e3cr			; -0.965793
	DD	0bf77583ar			; -0.96619
	DD	0bf777213r			; -0.966584
	DD	0bf778bc5r			; -0.966976
	DD	0bf77a551r			; -0.967366
	DD	0bf77beb7r			; -0.967754
	DD	0bf77d7f7r			; -0.968139
	DD	0bf77f110r			; -0.968522
	DD	0bf780a04r			; -0.968903
	DD	0bf7822d1r			; -0.969281
	DD	0bf783b77r			; -0.969657
	DD	0bf7853f8r			; -0.970031
	DD	0bf786c52r			; -0.970403
	DD	0bf788486r			; -0.970772
	DD	0bf789c93r			; -0.971139
	DD	0bf78b47br			; -0.971504
	DD	0bf78cc3br			; -0.971866
	DD	0bf78e3d6r			; -0.972227
	DD	0bf78fb4ar			; -0.972584
	DD	0bf791298r			; -0.97294
	DD	0bf7929bfr			; -0.973293
	DD	0bf7940c0r			; -0.973644
	DD	0bf79579ar			; -0.973993
	DD	0bf796e4er			; -0.974339
	DD	0bf7984dcr			; -0.974684
	DD	0bf799b43r			; -0.975025
	DD	0bf79b183r			; -0.975365
	DD	0bf79c79dr			; -0.975702
	DD	0bf79dd91r			; -0.976037
	DD	0bf79f35er			; -0.97637
	DD	0bf7a0904r			; -0.9767
	DD	0bf7a1e84r			; -0.977028
	DD	0bf7a33ddr			; -0.977354
	DD	0bf7a4910r			; -0.977677
	DD	0bf7a5e1cr			; -0.977998
	DD	0bf7a7302r			; -0.978317
	DD	0bf7a87c1r			; -0.978634
	DD	0bf7a9c59r			; -0.978948
	DD	0bf7ab0cbr			; -0.97926
	DD	0bf7ac516r			; -0.97957
	DD	0bf7ad93ar			; -0.979877
	DD	0bf7aed37r			; -0.980182
	DD	0bf7b010er			; -0.980485
	DD	0bf7b14ber			; -0.980785
	DD	0bf7b2848r			; -0.981083
	DD	0bf7b3babr			; -0.981379
	DD	0bf7b4ee7r			; -0.981673
	DD	0bf7b61fcr			; -0.981964
	DD	0bf7b74ear			; -0.982253
	DD	0bf7b87b2r			; -0.982539
	DD	0bf7b9a53r			; -0.982824
	DD	0bf7baccdr			; -0.983105
	DD	0bf7bbf20r			; -0.983385
	DD	0bf7bd14dr			; -0.983662
	DD	0bf7be353r			; -0.983937
	DD	0bf7bf531r			; -0.98421
	DD	0bf7c06e9r			; -0.98448
	DD	0bf7c187ar			; -0.984748
	DD	0bf7c29e5r			; -0.985014
	DD	0bf7c3b28r			; -0.985278
	DD	0bf7c4c44r			; -0.985539
	DD	0bf7c5d3ar			; -0.985798
	DD	0bf7c6e08r			; -0.986054
	DD	0bf7c7eb0r			; -0.986308
	DD	0bf7c8f31r			; -0.98656
	DD	0bf7c9f8ar			; -0.986809
	DD	0bf7cafbdr			; -0.987057
	DD	0bf7cbfc9r			; -0.987301
	DD	0bf7ccfaer			; -0.987544
	DD	0bf7cdf6cr			; -0.987784
	DD	0bf7cef03r			; -0.988022
	DD	0bf7cfe73r			; -0.988258
	DD	0bf7d0dbcr			; -0.988491
	DD	0bf7d1cddr			; -0.988722
	DD	0bf7d2bd8r			; -0.98895
	DD	0bf7d3aacr			; -0.989177
	DD	0bf7d4959r			; -0.9894
	DD	0bf7d57der			; -0.989622
	DD	0bf7d663dr			; -0.989841
	DD	0bf7d7474r			; -0.990058
	DD	0bf7d8285r			; -0.990273
	DD	0bf7d906er			; -0.990485
	DD	0bf7d9e30r			; -0.990695
	DD	0bf7dabccr			; -0.990903
	DD	0bf7db940r			; -0.991108
	DD	0bf7dc68cr			; -0.991311
	DD	0bf7dd3b2r			; -0.991511
	DD	0bf7de0b1r			; -0.99171
	DD	0bf7ded88r			; -0.991906
	DD	0bf7dfa38r			; -0.992099
	DD	0bf7e06c2r			; -0.992291
	DD	0bf7e1324r			; -0.99248
	DD	0bf7e1f5er			; -0.992666
	DD	0bf7e2b72r			; -0.99285
	DD	0bf7e375er			; -0.993032
	DD	0bf7e4323r			; -0.993212
	DD	0bf7e4ec1r			; -0.993389
	DD	0bf7e5a38r			; -0.993564
	DD	0bf7e6588r			; -0.993737
	DD	0bf7e70b0r			; -0.993907
	DD	0bf7e7bb1r			; -0.994075
	DD	0bf7e868br			; -0.99424
	DD	0bf7e913dr			; -0.994404
	DD	0bf7e9bc9r			; -0.994565
	DD	0bf7ea62dr			; -0.994723
	DD	0bf7eb069r			; -0.994879
	DD	0bf7eba7fr			; -0.995033
	DD	0bf7ec46dr			; -0.995185
	DD	0bf7ece34r			; -0.995334
	DD	0bf7ed7d4r			; -0.995481
	DD	0bf7ee14cr			; -0.995625
	DD	0bf7eea9dr			; -0.995767
	DD	0bf7ef3c7r			; -0.995907
	DD	0bf7efcc9r			; -0.996045
	DD	0bf7f05a4r			; -0.99618
	DD	0bf7f0e58r			; -0.996313
	DD	0bf7f16e4r			; -0.996443
	DD	0bf7f1f49r			; -0.996571
	DD	0bf7f2787r			; -0.996697
	DD	0bf7f2f9dr			; -0.99682
	DD	0bf7f378cr			; -0.996941
	DD	0bf7f3f54r			; -0.99706
	DD	0bf7f46f4r			; -0.997176
	DD	0bf7f4e6dr			; -0.99729
	DD	0bf7f55bfr			; -0.997402
	DD	0bf7f5ce9r			; -0.997511
	DD	0bf7f63ecr			; -0.997618
	DD	0bf7f6ac7r			; -0.997723
	DD	0bf7f717br			; -0.997825
	DD	0bf7f7808r			; -0.997925
	DD	0bf7f7e6dr			; -0.998023
	DD	0bf7f84abr			; -0.998118
	DD	0bf7f8ac2r			; -0.998211
	DD	0bf7f90b1r			; -0.998302
	DD	0bf7f9678r			; -0.99839
	DD	0bf7f9c18r			; -0.998476
	DD	0bf7fa191r			; -0.998559
	DD	0bf7fa6e3r			; -0.99864
	DD	0bf7fac0dr			; -0.998719
	DD	0bf7fb10fr			; -0.998795
	DD	0bf7fb5ear			; -0.99887
	DD	0bf7fba9er			; -0.998941
	DD	0bf7fbf2ar			; -0.999011
	DD	0bf7fc38fr			; -0.999078
	DD	0bf7fc7ccr			; -0.999142
	DD	0bf7fcbe2r			; -0.999205
	DD	0bf7fcfd1r			; -0.999265
	DD	0bf7fd397r			; -0.999322
	DD	0bf7fd737r			; -0.999378
	DD	0bf7fdaafr			; -0.999431
	DD	0bf7fde00r			; -0.999481
	DD	0bf7fe129r			; -0.999529
	DD	0bf7fe42br			; -0.999575
	DD	0bf7fe705r			; -0.999619
	DD	0bf7fe9b8r			; -0.99966
	DD	0bf7fec43r			; -0.999699
	DD	0bf7feea7r			; -0.999735
	DD	0bf7ff0e3r			; -0.999769
	DD	0bf7ff2f8r			; -0.999801
	DD	0bf7ff4e6r			; -0.999831
	DD	0bf7ff6acr			; -0.999858
	DD	0bf7ff84ar			; -0.999882
	DD	0bf7ff9c1r			; -0.999905
	DD	0bf7ffb11r			; -0.999925
	DD	0bf7ffc39r			; -0.999942
	DD	0bf7ffd39r			; -0.999958
	DD	0bf7ffe13r			; -0.999971
	DD	0bf7ffec4r			; -0.999981
	DD	0bf7fff4er			; -0.999989
	DD	0bf7fffb1r			; -0.999995
	DD	0bf7fffecr			; -0.999999
	DD	0bf800000r			; -1
	DD	0bf7fffecr			; -0.999999
	DD	0bf7fffb1r			; -0.999995
	DD	0bf7fff4er			; -0.999989
	DD	0bf7ffec4r			; -0.999981
	DD	0bf7ffe13r			; -0.999971
	DD	0bf7ffd39r			; -0.999958
	DD	0bf7ffc39r			; -0.999942
	DD	0bf7ffb11r			; -0.999925
	DD	0bf7ff9c1r			; -0.999905
	DD	0bf7ff84ar			; -0.999882
	DD	0bf7ff6acr			; -0.999858
	DD	0bf7ff4e6r			; -0.999831
	DD	0bf7ff2f8r			; -0.999801
	DD	0bf7ff0e3r			; -0.999769
	DD	0bf7feea7r			; -0.999735
	DD	0bf7fec43r			; -0.999699
	DD	0bf7fe9b8r			; -0.99966
	DD	0bf7fe705r			; -0.999619
	DD	0bf7fe42br			; -0.999575
	DD	0bf7fe129r			; -0.999529
	DD	0bf7fde00r			; -0.999481
	DD	0bf7fdaafr			; -0.999431
	DD	0bf7fd737r			; -0.999378
	DD	0bf7fd397r			; -0.999322
	DD	0bf7fcfd1r			; -0.999265
	DD	0bf7fcbe2r			; -0.999205
	DD	0bf7fc7ccr			; -0.999142
	DD	0bf7fc38fr			; -0.999078
	DD	0bf7fbf2ar			; -0.999011
	DD	0bf7fba9er			; -0.998941
	DD	0bf7fb5ear			; -0.99887
	DD	0bf7fb10fr			; -0.998795
	DD	0bf7fac0dr			; -0.998719
	DD	0bf7fa6e3r			; -0.99864
	DD	0bf7fa191r			; -0.998559
	DD	0bf7f9c18r			; -0.998476
	DD	0bf7f9678r			; -0.99839
	DD	0bf7f90b1r			; -0.998302
	DD	0bf7f8ac2r			; -0.998211
	DD	0bf7f84abr			; -0.998118
	DD	0bf7f7e6dr			; -0.998023
	DD	0bf7f7808r			; -0.997925
	DD	0bf7f717br			; -0.997825
	DD	0bf7f6ac7r			; -0.997723
	DD	0bf7f63ecr			; -0.997618
	DD	0bf7f5ce9r			; -0.997511
	DD	0bf7f55bfr			; -0.997402
	DD	0bf7f4e6dr			; -0.99729
	DD	0bf7f46f4r			; -0.997176
	DD	0bf7f3f54r			; -0.99706
	DD	0bf7f378cr			; -0.996941
	DD	0bf7f2f9dr			; -0.99682
	DD	0bf7f2787r			; -0.996697
	DD	0bf7f1f49r			; -0.996571
	DD	0bf7f16e4r			; -0.996443
	DD	0bf7f0e58r			; -0.996313
	DD	0bf7f05a4r			; -0.99618
	DD	0bf7efcc9r			; -0.996045
	DD	0bf7ef3c7r			; -0.995907
	DD	0bf7eea9dr			; -0.995767
	DD	0bf7ee14cr			; -0.995625
	DD	0bf7ed7d4r			; -0.995481
	DD	0bf7ece34r			; -0.995334
	DD	0bf7ec46dr			; -0.995185
	DD	0bf7eba7fr			; -0.995033
	DD	0bf7eb069r			; -0.994879
	DD	0bf7ea62dr			; -0.994723
	DD	0bf7e9bc9r			; -0.994565
	DD	0bf7e913dr			; -0.994404
	DD	0bf7e868br			; -0.99424
	DD	0bf7e7bb1r			; -0.994075
	DD	0bf7e70b0r			; -0.993907
	DD	0bf7e6588r			; -0.993737
	DD	0bf7e5a38r			; -0.993564
	DD	0bf7e4ec1r			; -0.993389
	DD	0bf7e4323r			; -0.993212
	DD	0bf7e375er			; -0.993032
	DD	0bf7e2b72r			; -0.99285
	DD	0bf7e1f5er			; -0.992666
	DD	0bf7e1324r			; -0.99248
	DD	0bf7e06c2r			; -0.992291
	DD	0bf7dfa38r			; -0.992099
	DD	0bf7ded88r			; -0.991906
	DD	0bf7de0b1r			; -0.99171
	DD	0bf7dd3b2r			; -0.991511
	DD	0bf7dc68cr			; -0.991311
	DD	0bf7db940r			; -0.991108
	DD	0bf7dabccr			; -0.990903
	DD	0bf7d9e30r			; -0.990695
	DD	0bf7d906er			; -0.990485
	DD	0bf7d8285r			; -0.990273
	DD	0bf7d7474r			; -0.990058
	DD	0bf7d663dr			; -0.989841
	DD	0bf7d57der			; -0.989622
	DD	0bf7d4959r			; -0.9894
	DD	0bf7d3aacr			; -0.989177
	DD	0bf7d2bd8r			; -0.98895
	DD	0bf7d1cddr			; -0.988722
	DD	0bf7d0dbcr			; -0.988491
	DD	0bf7cfe73r			; -0.988258
	DD	0bf7cef03r			; -0.988022
	DD	0bf7cdf6cr			; -0.987784
	DD	0bf7ccfaer			; -0.987544
	DD	0bf7cbfc9r			; -0.987301
	DD	0bf7cafbdr			; -0.987057
	DD	0bf7c9f8ar			; -0.986809
	DD	0bf7c8f31r			; -0.98656
	DD	0bf7c7eb0r			; -0.986308
	DD	0bf7c6e08r			; -0.986054
	DD	0bf7c5d3ar			; -0.985798
	DD	0bf7c4c44r			; -0.985539
	DD	0bf7c3b28r			; -0.985278
	DD	0bf7c29e5r			; -0.985014
	DD	0bf7c187ar			; -0.984748
	DD	0bf7c06e9r			; -0.98448
	DD	0bf7bf531r			; -0.98421
	DD	0bf7be353r			; -0.983937
	DD	0bf7bd14dr			; -0.983662
	DD	0bf7bbf20r			; -0.983385
	DD	0bf7baccdr			; -0.983105
	DD	0bf7b9a53r			; -0.982824
	DD	0bf7b87b2r			; -0.982539
	DD	0bf7b74ear			; -0.982253
	DD	0bf7b61fcr			; -0.981964
	DD	0bf7b4ee7r			; -0.981673
	DD	0bf7b3babr			; -0.981379
	DD	0bf7b2848r			; -0.981083
	DD	0bf7b14ber			; -0.980785
	DD	0bf7b010er			; -0.980485
	DD	0bf7aed37r			; -0.980182
	DD	0bf7ad93ar			; -0.979877
	DD	0bf7ac516r			; -0.97957
	DD	0bf7ab0cbr			; -0.97926
	DD	0bf7a9c59r			; -0.978948
	DD	0bf7a87c1r			; -0.978634
	DD	0bf7a7302r			; -0.978317
	DD	0bf7a5e1cr			; -0.977998
	DD	0bf7a4910r			; -0.977677
	DD	0bf7a33ddr			; -0.977354
	DD	0bf7a1e84r			; -0.977028
	DD	0bf7a0904r			; -0.9767
	DD	0bf79f35er			; -0.97637
	DD	0bf79dd91r			; -0.976037
	DD	0bf79c79dr			; -0.975702
	DD	0bf79b183r			; -0.975365
	DD	0bf799b43r			; -0.975025
	DD	0bf7984dcr			; -0.974684
	DD	0bf796e4er			; -0.974339
	DD	0bf79579ar			; -0.973993
	DD	0bf7940c0r			; -0.973644
	DD	0bf7929bfr			; -0.973293
	DD	0bf791298r			; -0.97294
	DD	0bf78fb4ar			; -0.972584
	DD	0bf78e3d6r			; -0.972227
	DD	0bf78cc3br			; -0.971866
	DD	0bf78b47br			; -0.971504
	DD	0bf789c93r			; -0.971139
	DD	0bf788486r			; -0.970772
	DD	0bf786c52r			; -0.970403
	DD	0bf7853f8r			; -0.970031
	DD	0bf783b77r			; -0.969657
	DD	0bf7822d1r			; -0.969281
	DD	0bf780a04r			; -0.968903
	DD	0bf77f110r			; -0.968522
	DD	0bf77d7f7r			; -0.968139
	DD	0bf77beb7r			; -0.967754
	DD	0bf77a551r			; -0.967366
	DD	0bf778bc5r			; -0.966976
	DD	0bf777213r			; -0.966584
	DD	0bf77583ar			; -0.96619
	DD	0bf773e3cr			; -0.965793
	DD	0bf772417r			; -0.965394
	DD	0bf7709ccr			; -0.964993
	DD	0bf76ef5br			; -0.96459
	DD	0bf76d4c4r			; -0.964184
	DD	0bf76ba07r			; -0.963776
	DD	0bf769f24r			; -0.963366
	DD	0bf76841br			; -0.962953
	DD	0bf7668ecr			; -0.962538
	DD	0bf764d97r			; -0.962121
	DD	0bf76321br			; -0.961702
	DD	0bf76167ar			; -0.96128
	DD	0bf75fab3r			; -0.960857
	DD	0bf75dec6r			; -0.960431
	DD	0bf75c2b3r			; -0.960002
	DD	0bf75a67br			; -0.959572
	DD	0bf758a1cr			; -0.959139
	DD	0bf756d97r			; -0.958703
	DD	0bf7550edr			; -0.958266
	DD	0bf75341dr			; -0.957826
	DD	0bf751727r			; -0.957385
	DD	0bf74fa0br			; -0.95694
	DD	0bf74dcc9r			; -0.956494
	DD	0bf74bf62r			; -0.956045
	DD	0bf74a1d5r			; -0.955594
	DD	0bf748422r			; -0.955141
	DD	0bf746649r			; -0.954686
	DD	0bf74484br			; -0.954228
	DD	0bf742a27r			; -0.953768
	DD	0bf740bddr			; -0.953306
	DD	0bf73ed6er			; -0.952842
	DD	0bf73ced9r			; -0.952375
	DD	0bf73b01fr			; -0.951906
	DD	0bf73913fr			; -0.951435
	DD	0bf737239r			; -0.950962
	DD	0bf73530er			; -0.950486
	DD	0bf7333ber			; -0.950008
	DD	0bf731447r			; -0.949528
	DD	0bf72f4acr			; -0.949046
	DD	0bf72d4ebr			; -0.948561
	DD	0bf72b504r			; -0.948075
	DD	0bf7294f8r			; -0.947586
	DD	0bf7274c7r			; -0.947094
	DD	0bf725470r			; -0.946601
	DD	0bf7233f4r			; -0.946105
	DD	0bf721352r			; -0.945607
	DD	0bf71f28cr			; -0.945107
	DD	0bf71d19fr			; -0.944605
	DD	0bf71b08er			; -0.9441
	DD	0bf718f57r			; -0.943593
	DD	0bf716dfbr			; -0.943084
	DD	0bf714c7ar			; -0.942573
	DD	0bf712ad4r			; -0.94206
	DD	0bf710908r			; -0.941544
	DD	0bf70e717r			; -0.941026
	DD	0bf70c501r			; -0.940506
	DD	0bf70a2c6r			; -0.939984
	DD	0bf708066r			; -0.939459
	DD	0bf705de1r			; -0.938932
	DD	0bf703b37r			; -0.938404
	DD	0bf701867r			; -0.937872
	DD	0bf6ff573r			; -0.937339
	DD	0bf6fd25ar			; -0.936803
	DD	0bf6faf1br			; -0.936266
	DD	0bf6f8bb8r			; -0.935726
	DD	0bf6f6830r			; -0.935184
	DD	0bf6f4483r			; -0.934639
	DD	0bf6f20b0r			; -0.934093
	DD	0bf6efcbar			; -0.933544
	DD	0bf6ed89er			; -0.932993
	DD	0bf6eb45dr			; -0.93244
	DD	0bf6e8ff8r			; -0.931884
	DD	0bf6e6b6dr			; -0.931327
	DD	0bf6e46ber			; -0.930767
	DD	0bf6e21ebr			; -0.930205
	DD	0bf6dfcf2r			; -0.929641
	DD	0bf6dd7d5r			; -0.929075
	DD	0bf6db293r			; -0.928506
	DD	0bf6d8d2dr			; -0.927935
	DD	0bf6d67a1r			; -0.927363
	DD	0bf6d41f2r			; -0.926787
	DD	0bf6d1c1dr			; -0.92621
	DD	0bf6cf624r			; -0.925631
	DD	0bf6cd007r			; -0.925049
	DD	0bf6ca9c5r			; -0.924465
	DD	0bf6c835er			; -0.92388
	DD	0bf6c5cd4r			; -0.923291
	DD	0bf6c3624r			; -0.922701
	DD	0bf6c0f50r			; -0.922109
	DD	0bf6be858r			; -0.921514
	DD	0bf6bc13br			; -0.920917
	DD	0bf6b99fbr			; -0.920318
	DD	0bf6b7295r			; -0.919717
	DD	0bf6b4b0cr			; -0.919114
	DD	0bf6b235er			; -0.918508
	DD	0bf6afb8cr			; -0.917901
	DD	0bf6ad395r			; -0.917291
	DD	0bf6aab7br			; -0.916679
	DD	0bf6a833cr			; -0.916065
	DD	0bf6a5ad9r			; -0.915449
	DD	0bf6a3252r			; -0.91483
	DD	0bf6a09a7r			; -0.91421
	DD	0bf69e0d7r			; -0.913587
	DD	0bf69b7e4r			; -0.912962
	DD	0bf698eccr			; -0.912335
	DD	0bf696591r			; -0.911706
	DD	0bf693c32r			; -0.911075
	DD	0bf6912aer			; -0.910441
	DD	0bf68e907r			; -0.909806
	DD	0bf68bf3cr			; -0.909168
	DD	0bf68954cr			; -0.908528
	DD	0bf686b39r			; -0.907886
	DD	0bf684103r			; -0.907242
	DD	0bf6816a8r			; -0.906596
	DD	0bf67ec29r			; -0.905947
	DD	0bf67c187r			; -0.905297
	DD	0bf6796c1r			; -0.904644
	DD	0bf676bd8r			; -0.903989
	DD	0bf6740car			; -0.903332
	DD	0bf671599r			; -0.902673
	DD	0bf66ea45r			; -0.902012
	DD	0bf66beccr			; -0.901349
	DD	0bf669330r			; -0.900683
	DD	0bf666771r			; -0.900016
	DD	0bf663b8er			; -0.899346
	DD	0bf660f88r			; -0.898674
	DD	0bf65e35er			; -0.898001
	DD	0bf65b710r			; -0.897325
	DD	0bf658aa0r			; -0.896646
	DD	0bf655e0br			; -0.895966
	DD	0bf653154r			; -0.895284
	DD	0bf650479r			; -0.894599
	DD	0bf64d77br			; -0.893913
	DD	0bf64aa59r			; -0.893224
	DD	0bf647d14r			; -0.892534
	DD	0bf644facr			; -0.891841
	DD	0bf642221r			; -0.891146
	DD	0bf63f473r			; -0.890449
	DD	0bf63c6a1r			; -0.88975
	DD	0bf6398acr			; -0.889048
	DD	0bf636a95r			; -0.888345
	DD	0bf633c5ar			; -0.88764
	DD	0bf630dfcr			; -0.886932
	DD	0bf62df7br			; -0.886223
	DD	0bf62b0d7r			; -0.885511
	DD	0bf628210r			; -0.884797
	DD	0bf625326r			; -0.884081
	DD	0bf62241ar			; -0.883363
	DD	0bf61f4ear			; -0.882643
	DD	0bf61c598r			; -0.881921
	DD	0bf619622r			; -0.881197
	DD	0bf61668ar			; -0.880471
	DD	0bf6136d0r			; -0.879743
	DD	0bf6106f2r			; -0.879012
	DD	0bf60d6f2r			; -0.87828
	DD	0bf60a6cfr			; -0.877545
	DD	0bf607689r			; -0.876809
	DD	0bf604621r			; -0.87607
	DD	0bf601596r			; -0.875329
	DD	0bf5fe4e9r			; -0.874587
	DD	0bf5fb419r			; -0.873842
	DD	0bf5f8327r			; -0.873095
	DD	0bf5f5212r			; -0.872346
	DD	0bf5f20dbr			; -0.871595
	DD	0bf5eef81r			; -0.870842
	DD	0bf5ebe05r			; -0.870087
	DD	0bf5e8c67r			; -0.86933
	DD	0bf5e5aa6r			; -0.868571
	DD	0bf5e28c3r			; -0.867809
	DD	0bf5df6ber			; -0.867046
	DD	0bf5dc497r			; -0.866281
	DD	0bf5d924dr			; -0.865514
	DD	0bf5d5fe1r			; -0.864744
	DD	0bf5d2d53r			; -0.863973
	DD	0bf5cfaa3r			; -0.863199
	DD	0bf5cc7d1r			; -0.862424
	DD	0bf5c94ddr			; -0.861646
	DD	0bf5c61c7r			; -0.860867
	DD	0bf5c2e8er			; -0.860085
	DD	0bf5bfb34r			; -0.859302
	DD	0bf5bc7b8r			; -0.858516
	DD	0bf5b941ar			; -0.857729
	DD	0bf5b605ar			; -0.856939
	DD	0bf5b2c79r			; -0.856147
	DD	0bf5af875r			; -0.855354
	DD	0bf5ac450r			; -0.854558
	DD	0bf5a9009r			; -0.85376
	DD	0bf5a5ba0r			; -0.852961
	DD	0bf5a2716r			; -0.852159
	DD	0bf59f26ar			; -0.851355
	DD	0bf59bd9cr			; -0.850549
	DD	0bf5988adr			; -0.849742
	DD	0bf59539cr			; -0.848932
	DD	0bf591e6ar			; -0.84812
	DD	0bf58e916r			; -0.847307
	DD	0bf58b3a1r			; -0.846491
	DD	0bf587e0br			; -0.845673
	DD	0bf584853r			; -0.844854
	DD	0bf581279r			; -0.844032
	DD	0bf57dc7fr			; -0.843208
	DD	0bf57a663r			; -0.842383
	DD	0bf577026r			; -0.841555
	DD	0bf5739c7r			; -0.840725
	DD	0bf570348r			; -0.839894
	DD	0bf56cca7r			; -0.83906
	DD	0bf5695e5r			; -0.838225
	DD	0bf565f02r			; -0.837387
	DD	0bf5627fer			; -0.836548
	DD	0bf55f0d9r			; -0.835706
	DD	0bf55b993r			; -0.834863
	DD	0bf55822cr			; -0.834018
	DD	0bf554aa4r			; -0.83317
	DD	0bf5512fbr			; -0.832321
	DD	0bf54db31r			; -0.83147
	DD	0bf54a347r			; -0.830616
	DD	0bf546b3br			; -0.829761
	DD	0bf54330fr			; -0.828904
	DD	0bf53fac3r			; -0.828045
	DD	0bf53c255r			; -0.827184
	DD	0bf5389c7r			; -0.826321
	DD	0bf535118r			; -0.825456
	DD	0bf531849r			; -0.824589
	DD	0bf52df59r			; -0.823721
	DD	0bf52a649r			; -0.82285
	DD	0bf526d18r			; -0.821977
	DD	0bf5233c6r			; -0.821102
	DD	0bf51fa54r			; -0.820226
	DD	0bf51c0c2r			; -0.819348
	DD	0bf518710r			; -0.818467
	DD	0bf514d3dr			; -0.817585
	DD	0bf51134ar			; -0.816701
	DD	0bf50d937r			; -0.815814
	DD	0bf509f03r			; -0.814926
	DD	0bf5064afr			; -0.814036
	DD	0bf502a3br			; -0.813144
	DD	0bf4fefa8r			; -0.812251
	DD	0bf4fb4f4r			; -0.811355
	DD	0bf4f7a1fr			; -0.810457
	DD	0bf4f3f2br			; -0.809558
	DD	0bf4f0417r			; -0.808656
	DD	0bf4ec8e4r			; -0.807753
	DD	0bf4e8d90r			; -0.806848
	DD	0bf4e521cr			; -0.80594
	DD	0bf4e1689r			; -0.805031
	DD	0bf4ddad5r			; -0.80412
	DD	0bf4d9f02r			; -0.803208
	DD	0bf4d6310r			; -0.802293
	DD	0bf4d26fdr			; -0.801376
	DD	0bf4ceacbr			; -0.800458
	DD	0bf4cae79r			; -0.799537
	DD	0bf4c7208r			; -0.798615
	DD	0bf4c3578r			; -0.797691
	DD	0bf4bf8c7r			; -0.796765
	DD	0bf4bbbf8r			; -0.795837
	DD	0bf4b7f09r			; -0.794907
	DD	0bf4b41far			; -0.793975
	DD	0bf4b04ccr			; -0.793042
	DD	0bf4ac77fr			; -0.792107
	DD	0bf4a8a13r			; -0.791169
	DD	0bf4a4c87r			; -0.79023
	DD	0bf4a0edcr			; -0.789289
	DD	0bf49d112r			; -0.788346
	DD	0bf499329r			; -0.787402
	DD	0bf495521r			; -0.786455
	DD	0bf4916far			; -0.785507
	DD	0bf48d8b3r			; -0.784557
	DD	0bf489a4er			; -0.783605
	DD	0bf485bcar			; -0.782651
	DD	0bf481d27r			; -0.781695
	DD	0bf47de65r			; -0.780737
	DD	0bf479f84r			; -0.779778
	DD	0bf476085r			; -0.778817
	DD	0bf472167r			; -0.777853
	DD	0bf46e22ar			; -0.776888
	DD	0bf46a2cer			; -0.775922
	DD	0bf466354r			; -0.774953
	DD	0bf4623bbr			; -0.773983
	DD	0bf45e403r			; -0.77301
	DD	0bf45a42dr			; -0.772036
	DD	0bf456439r			; -0.771061
	DD	0bf452426r			; -0.770083
	DD	0bf44e3f5r			; -0.769103
	DD	0bf44a3a5r			; -0.768122
	DD	0bf446337r			; -0.767139
	DD	0bf4422abr			; -0.766154
	DD	0bf43e200r			; -0.765167
	DD	0bf43a138r			; -0.764179
	DD	0bf436051r			; -0.763188
	DD	0bf431f4cr			; -0.762196
	DD	0bf42de29r			; -0.761202
	DD	0bf429ce8r			; -0.760207
	DD	0bf425b89r			; -0.759209
	DD	0bf421a0br			; -0.75821
	DD	0bf41d870r			; -0.757209
	DD	0bf4196b7r			; -0.756206
	DD	0bf4154e1r			; -0.755201
	DD	0bf4112ecr			; -0.754195
	DD	0bf40d0dar			; -0.753187
	DD	0bf408ea9r			; -0.752177
	DD	0bf404c5cr			; -0.751165
	DD	0bf4009f0r			; -0.750152
	DD	0bf3fc767r			; -0.749136
	DD	0bf3f84c0r			; -0.748119
	DD	0bf3f41fcr			; -0.747101
	DD	0bf3eff1br			; -0.74608
	DD	0bf3ebc1br			; -0.745058
	DD	0bf3e78ffr			; -0.744034
	DD	0bf3e35c5r			; -0.743008
	DD	0bf3df26er			; -0.74198
	DD	0bf3daef9r			; -0.740951
	DD	0bf3d6b67r			; -0.73992
	DD	0bf3d27b8r			; -0.738887
	DD	0bf3ce3ecr			; -0.737853
	DD	0bf3ca003r			; -0.736817
	DD	0bf3c5bfcr			; -0.735779
	DD	0bf3c17d9r			; -0.734739
	DD	0bf3bd398r			; -0.733697
	DD	0bf3b8f3br			; -0.732654
	DD	0bf3b4ac1r			; -0.731609
	DD	0bf3b0629r			; -0.730563
	DD	0bf3ac175r			; -0.729514
	DD	0bf3a7ca4r			; -0.728464
	DD	0bf3a37b7r			; -0.727413
	DD	0bf39f2acr			; -0.726359
	DD	0bf39ad85r			; -0.725304
	DD	0bf396842r			; -0.724247
	DD	0bf3922e1r			; -0.723188
	DD	0bf38dd65r			; -0.722128
	DD	0bf3897cbr			; -0.721066
	DD	0bf385216r			; -0.720003
	DD	0bf380c43r			; -0.718937
	DD	0bf37c655r			; -0.71787
	DD	0bf37804ar			; -0.716801
	DD	0bf373a23r			; -0.715731
	DD	0bf36f3dfr			; -0.714659
	DD	0bf36ad7fr			; -0.713585
	DD	0bf366704r			; -0.712509
	DD	0bf36206cr			; -0.711432
	DD	0bf35d9b8r			; -0.710353
	DD	0bf3592e7r			; -0.709273
	DD	0bf354bfbr			; -0.708191
	DD	0bf3504f3r			; -0.707107
	DD	0bf34bdcfr			; -0.706021
	DD	0bf34768fr			; -0.704934
	DD	0bf342f34r			; -0.703845
	DD	0bf33e7bcr			; -0.702755
	DD	0bf33a029r			; -0.701663
	DD	0bf33587ar			; -0.700569
	DD	0bf3310afr			; -0.699473
	DD	0bf32c8c9r			; -0.698376
	DD	0bf3280c7r			; -0.697277
	DD	0bf3238aar			; -0.696177
	DD	0bf31f071r			; -0.695075
	DD	0bf31a81dr			; -0.693971
	DD	0bf315fadr			; -0.692866
	DD	0bf311722r			; -0.691759
	DD	0bf30ce7cr			; -0.690651
	DD	0bf3085bbr			; -0.689541
	DD	0bf303cder			; -0.688429
	DD	0bf2ff3e6r			; -0.687315
	DD	0bf2faad3r			; -0.6862
	DD	0bf2f61a5r			; -0.685084
	DD	0bf2f185br			; -0.683965
	DD	0bf2ecef7r			; -0.682846
	DD	0bf2e8578r			; -0.681724
	DD	0bf2e3bder			; -0.680601
	DD	0bf2df229r			; -0.679476
	DD	0bf2da859r			; -0.67835
	DD	0bf2d5e6fr			; -0.677222
	DD	0bf2d1469r			; -0.676093
	DD	0bf2cca49r			; -0.674962
	DD	0bf2c800fr			; -0.673829
	DD	0bf2c35b9r			; -0.672695
	DD	0bf2beb4ar			; -0.671559
	DD	0bf2ba0bfr			; -0.670422
	DD	0bf2b561br			; -0.669283
	DD	0bf2b0b5br			; -0.668142
	DD	0bf2ac082r			; -0.667
	DD	0bf2a758er			; -0.665856
	DD	0bf2a2a80r			; -0.664711
	DD	0bf29df57r			; -0.663564
	DD	0bf299415r			; -0.662416
	DD	0bf2948b8r			; -0.661266
	DD	0bf28fd41r			; -0.660114
	DD	0bf28b1b0r			; -0.658961
	DD	0bf286605r			; -0.657807
	DD	0bf281a40r			; -0.656651
	DD	0bf27ce61r			; -0.655493
	DD	0bf278268r			; -0.654334
	DD	0bf273656r			; -0.653173
	DD	0bf26ea2ar			; -0.652011
	DD	0bf269de3r			; -0.650847
	DD	0bf265184r			; -0.649681
	DD	0bf26050ar			; -0.648514
	DD	0bf25b877r			; -0.647346
	DD	0bf256bcbr			; -0.646176
	DD	0bf251f04r			; -0.645005
	DD	0bf24d225r			; -0.643832
	DD	0bf24852cr			; -0.642657
	DD	0bf24381ar			; -0.641481
	DD	0bf23eaeer			; -0.640303
	DD	0bf239da9r			; -0.639124
	DD	0bf23504br			; -0.637944
	DD	0bf2302d3r			; -0.636762
	DD	0bf22b543r			; -0.635578
	DD	0bf226799r			; -0.634393
	DD	0bf2219d7r			; -0.633207
	DD	0bf21cbfbr			; -0.632019
	DD	0bf217e06r			; -0.630829
	DD	0bf212ff9r			; -0.629638
	DD	0bf20e1d2r			; -0.628446
	DD	0bf209393r			; -0.627252
	DD	0bf20453br			; -0.626056
	DD	0bf1ff6cbr			; -0.62486
	DD	0bf1fa841r			; -0.623661
	DD	0bf1f599fr			; -0.622461
	DD	0bf1f0ae5r			; -0.62126
	DD	0bf1ebc12r			; -0.620057
	DD	0bf1e6d26r			; -0.618853
	DD	0bf1e1e22r			; -0.617647
	DD	0bf1dcf06r			; -0.61644
	DD	0bf1d7fd1r			; -0.615232
	DD	0bf1d3084r			; -0.614022
	DD	0bf1ce11fr			; -0.61281
	DD	0bf1c91a2r			; -0.611597
	DD	0bf1c420cr			; -0.610383
	DD	0bf1bf25fr			; -0.609167
	DD	0bf1ba299r			; -0.60795
	DD	0bf1b52bbr			; -0.606731
	DD	0bf1b02c6r			; -0.605511
	DD	0bf1ab2b8r			; -0.60429
	DD	0bf1a6293r			; -0.603067
	DD	0bf1a1255r			; -0.601842
	DD	0bf19c200r			; -0.600616
	DD	0bf197194r			; -0.599389
	DD	0bf19210fr			; -0.598161
	DD	0bf18d073r			; -0.596931
	DD	0bf187fc0r			; -0.595699
	DD	0bf182ef5r			; -0.594467
	DD	0bf17de12r			; -0.593232
	DD	0bf178d18r			; -0.591997
	DD	0bf173c07r			; -0.59076
	DD	0bf16eader			; -0.589521
	DD	0bf16999fr			; -0.588282
	DD	0bf164847r			; -0.58704
	DD	0bf15f6d9r			; -0.585798
	DD	0bf15a554r			; -0.584554
	DD	0bf1553b7r			; -0.583309
	DD	0bf150204r			; -0.582062
	DD	0bf14b039r			; -0.580814
	DD	0bf145e58r			; -0.579565
	DD	0bf140c5fr			; -0.578314
	DD	0bf13ba50r			; -0.577062
	DD	0bf13682ar			; -0.575808
	DD	0bf1315eer			; -0.574553
	DD	0bf12c39ar			; -0.573297
	DD	0bf127130r			; -0.57204
	DD	0bf121eb0r			; -0.570781
	DD	0bf11cc19r			; -0.569521
	DD	0bf11796br			; -0.568259
	DD	0bf1126a7r			; -0.566996
	DD	0bf10d3cdr			; -0.565732
	DD	0bf1080dcr			; -0.564466
	DD	0bf102dd5r			; -0.563199
	DD	0bf0fdab8r			; -0.561931
	DD	0bf0f8784r			; -0.560662
	DD	0bf0f343br			; -0.559391
	DD	0bf0ee0dbr			; -0.558119
	DD	0bf0e8d65r			; -0.556845
	DD	0bf0e39dar			; -0.55557
	DD	0bf0de638r			; -0.554294
	DD	0bf0d9281r			; -0.553017
	DD	0bf0d3eb3r			; -0.551738
	DD	0bf0cead0r			; -0.550458
	DD	0bf0c96d7r			; -0.549177
	DD	0bf0c42c9r			; -0.547894
	DD	0bf0beea5r			; -0.54661
	DD	0bf0b9a6br			; -0.545325
	DD	0bf0b461cr			; -0.544039
	DD	0bf0af1b7r			; -0.542751
	DD	0bf0a9d3dr			; -0.541462
	DD	0bf0a48adr			; -0.540171
	DD	0bf09f409r			; -0.53888
	DD	0bf099f4er			; -0.537587
	DD	0bf094a7fr			; -0.536293
	DD	0bf08f59br			; -0.534998
	DD	0bf08a0a1r			; -0.533701
	DD	0bf084b92r			; -0.532403
	DD	0bf07f66fr			; -0.531104
	DD	0bf07a136r			; -0.529804
	DD	0bf074be8r			; -0.528502
	DD	0bf06f686r			; -0.527199
	DD	0bf06a10er			; -0.525895
	DD	0bf064b82r			; -0.52459
	DD	0bf05f5e2r			; -0.523283
	DD	0bf05a02cr			; -0.521975
	DD	0bf054a62r			; -0.520666
	DD	0bf04f484r			; -0.519356
	DD	0bf049e91r			; -0.518045
	DD	0bf044889r			; -0.516732
	DD	0bf03f26dr			; -0.515418
	DD	0bf039c3dr			; -0.514103
	DD	0bf0345f8r			; -0.512786
	DD	0bf02ef9fr			; -0.511469
	DD	0bf029932r			; -0.51015
	DD	0bf0242b1r			; -0.50883
	DD	0bf01ec1cr			; -0.507509
	DD	0bf019573r			; -0.506187
	DD	0bf013eb5r			; -0.504863
	DD	0bf00e7e4r			; -0.503538
	DD	0bf0090ffr			; -0.502212
	DD	0bf003a06r			; -0.500885
	DD	0beffc5f3r			; -0.499557
	DD	0beff17b2r			; -0.498228
	DD	0befe694ar			; -0.496897
	DD	0befdbabbr			; -0.495565
	DD	0befd0c04r			; -0.494232
	DD	0befc5d27r			; -0.492898
	DD	0befbae22r			; -0.491563
	DD	0befafef7r			; -0.490226
	DD	0befa4fa5r			; -0.488889
	DD	0bef9a02dr			; -0.48755
	DD	0bef8f08er			; -0.48621
	DD	0bef840c8r			; -0.484869
	DD	0bef790dcr			; -0.483527
	DD	0bef6e0cbr			; -0.482184
	DD	0bef63093r			; -0.480839
	DD	0bef58035r			; -0.479494
	DD	0bef4cfb1r			; -0.478147
	DD	0bef41f07r			; -0.476799
	DD	0bef36e38r			; -0.47545
	DD	0bef2bd43r			; -0.4741
	DD	0bef20c29r			; -0.472749
	DD	0bef15aear			; -0.471397
	DD	0bef0a985r			; -0.470043
	DD	0beeff7fbr			; -0.468689
	DD	0beef464cr			; -0.467333
	DD	0beee9479r			; -0.465977
	DD	0beede280r			; -0.464619
	DD	0beed3063r			; -0.46326
	DD	0beec7e21r			; -0.4619
	DD	0beebcbbbr			; -0.460539
	DD	0beeb1930r			; -0.459177
	DD	0beea6681r			; -0.457813
	DD	0bee9b3aer			; -0.456449
	DD	0bee900b7r			; -0.455084
	DD	0bee84d9cr			; -0.453717
	DD	0bee79a5dr			; -0.45235
	DD	0bee6e6fbr			; -0.450981
	DD	0bee63375r			; -0.449611
	DD	0bee57fcbr			; -0.448241
	DD	0bee4cbfer			; -0.446869
	DD	0bee4180er			; -0.445496
	DD	0bee363far			; -0.444122
	DD	0bee2afc4r			; -0.442747
	DD	0bee1fb6ar			; -0.441371
	DD	0bee146eer			; -0.439994
	DD	0bee0924fr			; -0.438616
	DD	0bedfdd8dr			; -0.437237
	DD	0bedf28a9r			; -0.435857
	DD	0bede73a2r			; -0.434476
	DD	0beddbe79r			; -0.433094
	DD	0bedd092er			; -0.431711
	DD	0bedc53c1r			; -0.430326
	DD	0bedb9e31r			; -0.428941
	DD	0bedae880r			; -0.427555
	DD	0beda32adr			; -0.426168
	DD	0bed97cb9r			; -0.42478
	DD	0bed8c6a3r			; -0.42339
	DD	0bed8106br			; -0.422
	DD	0bed75a13r			; -0.420609
	DD	0bed6a399r			; -0.419217
	DD	0bed5ecfdr			; -0.417824
	DD	0bed53641r			; -0.41643
	DD	0bed47f64r			; -0.415034
	DD	0bed3c867r			; -0.413638
	DD	0bed31148r			; -0.412241
	DD	0bed25a09r			; -0.410843
	DD	0bed1a2aar			; -0.409444
	DD	0bed0eb2ar			; -0.408044
	DD	0bed0338ar			; -0.406643
	DD	0becf7bcar			; -0.405241
	DD	0becec3ear			; -0.403838
	DD	0bece0bear			; -0.402435
	DD	0becd53car			; -0.40103
	DD	0becc9b8br			; -0.399624
	DD	0becbe32cr			; -0.398218
	DD	0becb2aaer			; -0.39681
	DD	0beca7210r			; -0.395401
	DD	0bec9b953r			; -0.393992
	DD	0bec90077r			; -0.392582
	DD	0bec8477cr			; -0.39117
	DD	0bec78e62r			; -0.389758
	DD	0bec6d529r			; -0.388345
	DD	0bec61bd2r			; -0.386931
	DD	0bec5625cr			; -0.385516
	DD	0bec4a8c8r			; -0.3841
	DD	0bec3ef15r			; -0.382683
	DD	0bec33544r			; -0.381266
	DD	0bec27b55r			; -0.379847
	DD	0bec1c148r			; -0.378428
	DD	0bec1071er			; -0.377007
	DD	0bec04cd5r			; -0.375586
	DD	0bebf926fr			; -0.374164
	DD	0bebed7ebr			; -0.372741
	DD	0bebe1d4ar			; -0.371317
	DD	0bebd628br			; -0.369892
	DD	0bebca7afr			; -0.368467
	DD	0bebbecb6r			; -0.36704
	DD	0bebb31a0r			; -0.365613
	DD	0beba766er			; -0.364185
	DD	0beb9bb1er			; -0.362756
	DD	0beb8ffb2r			; -0.361326
	DD	0beb8442ar			; -0.359895
	DD	0beb78884r			; -0.358463
	DD	0beb6ccc3r			; -0.357031
	DD	0beb610e6r			; -0.355598
	DD	0beb554ecr			; -0.354164
	DD	0beb498d6r			; -0.352729
	DD	0beb3dca5r			; -0.351293
	DD	0beb32058r			; -0.349856
	DD	0beb263efr			; -0.348419
	DD	0beb1a76br			; -0.34698
	DD	0beb0eacbr			; -0.345541
	DD	0beb02e10r			; -0.344101
	DD	0beaf713ar			; -0.342661
	DD	0beaeb449r			; -0.341219
	DD	0beadf73cr			; -0.339777
	DD	0bead3a15r			; -0.338334
	DD	0beac7cd4r			; -0.33689
	DD	0beabbf77r			; -0.335445
	DD	0beab0201r			; -0.334
	DD	0beaa446fr			; -0.332553
	DD	0bea986c4r			; -0.331106
	DD	0bea8c8fer			; -0.329658
	DD	0bea80b1fr			; -0.32821
	DD	0bea74d25r			; -0.32676
	DD	0bea68f12r			; -0.32531
	DD	0bea5d0e5r			; -0.323859
	DD	0bea5129fr			; -0.322408
	DD	0bea4543fr			; -0.320955
	DD	0bea395c5r			; -0.319502
	DD	0bea2d733r			; -0.318048
	DD	0bea21887r			; -0.316593
	DD	0bea159c2r			; -0.315138
	DD	0bea09ae5r			; -0.313682
	DD	0be9fdbeer			; -0.312225
	DD	0be9f1cdfr			; -0.310767
	DD	0be9e5db8r			; -0.309309
	DD	0be9d9e78r			; -0.30785
	DD	0be9cdf20r			; -0.30639
	DD	0be9c1fafr			; -0.304929
	DD	0be9b6027r			; -0.303468
	DD	0be9aa086r			; -0.302006
	DD	0be99e0cer			; -0.300543
	DD	0be9920fer			; -0.29908
	DD	0be986116r			; -0.297616
	DD	0be97a117r			; -0.296151
	DD	0be96e100r			; -0.294685
	DD	0be9620d2r			; -0.293219
	DD	0be95608dr			; -0.291752
	DD	0be94a031r			; -0.290285
	DD	0be93dfbfr			; -0.288816
	DD	0be931f35r			; -0.287347
	DD	0be925e94r			; -0.285878
	DD	0be919dddr			; -0.284408
	DD	0be90dd10r			; -0.282937
	DD	0be901c2cr			; -0.281465
	DD	0be8f5b32r			; -0.279993
	DD	0be8e9a22r			; -0.27852
	DD	0be8dd8fcr			; -0.277046
	DD	0be8d17c0r			; -0.275572
	DD	0be8c566er			; -0.274097
	DD	0be8b9507r			; -0.272621
	DD	0be8ad38ar			; -0.271145
	DD	0be8a11f7r			; -0.269668
	DD	0be895050r			; -0.268191
	DD	0be888e93r			; -0.266713
	DD	0be87ccc1r			; -0.265234
	DD	0be870adar			; -0.263755
	DD	0be8648dfr			; -0.262275
	DD	0be8586cer			; -0.260794
	DD	0be84c4aar			; -0.259313
	DD	0be840270r			; -0.257831
	DD	0be834022r			; -0.256349
	DD	0be827dc0r			; -0.254866
	DD	0be81bb4ar			; -0.253382
	DD	0be80f8c0r			; -0.251898
	DD	0be803622r			; -0.250413
	DD	0be7ee6e1r			; -0.248928
	DD	0be7d6156r			; -0.247442
	DD	0be7bdba4r			; -0.245955
	DD	0be7a55cbr			; -0.244468
	DD	0be78cfccr			; -0.24298
	DD	0be7749a6r			; -0.241492
	DD	0be75c35ar			; -0.240003
	DD	0be743ce8r			; -0.238514
	DD	0be72b651r			; -0.237024
	DD	0be712f94r			; -0.235533
	DD	0be6fa8b2r			; -0.234042
	DD	0be6e21abr			; -0.23255
	DD	0be6c9a7fr			; -0.231058
	DD	0be6b132fr			; -0.229565
	DD	0be698bbar			; -0.228072
	DD	0be680422r			; -0.226578
	DD	0be667c66r			; -0.225084
	DD	0be64f486r			; -0.223589
	DD	0be636c83r			; -0.222094
	DD	0be61e45cr			; -0.220598
	DD	0be605c13r			; -0.219101
	DD	0be5ed3a8r			; -0.217604
	DD	0be5d4b1ar			; -0.216107
	DD	0be5bc26ar			; -0.214609
	DD	0be5a3997r			; -0.21311
	DD	0be58b0a4r			; -0.211611
	DD	0be57278fr			; -0.210112
	DD	0be559e58r			; -0.208612
	DD	0be541501r			; -0.207111
	DD	0be528b89r			; -0.20561
	DD	0be5101f1r			; -0.204109
	DD	0be4f7838r			; -0.202607
	DD	0be4dee60r			; -0.201105
	DD	0be4c6467r			; -0.199602
	DD	0be4ada4fr			; -0.198098
	DD	0be495018r			; -0.196595
	DD	0be47c5c2r			; -0.19509
	DD	0be463b4dr			; -0.193586
	DD	0be44b0b9r			; -0.19208
	DD	0be432607r			; -0.190575
	DD	0be419b37r			; -0.189069
	DD	0be401049r			; -0.187562
	DD	0be3e853er			; -0.186055
	DD	0be3cfa15r			; -0.184548
	DD	0be3b6ecfr			; -0.18304
	DD	0be39e36cr			; -0.181532
	DD	0be3857ecr			; -0.180023
	DD	0be36cc50r			; -0.178514
	DD	0be354098r			; -0.177004
	DD	0be33b4c4r			; -0.175494
	DD	0be3228d4r			; -0.173984
	DD	0be309cc9r			; -0.172473
	DD	0be2f10a2r			; -0.170962
	DD	0be2d8461r			; -0.16945
	DD	0be2bf804r			; -0.167938
	DD	0be2a6b8dr			; -0.166426
	DD	0be28defcr			; -0.164913
	DD	0be275251r			; -0.1634
	DD	0be25c58cr			; -0.161886
	DD	0be2438adr			; -0.160372
	DD	0be22abb6r			; -0.158858
	DD	0be211ea5r			; -0.157343
	DD	0be1f917br			; -0.155828
	DD	0be1e0438r			; -0.154313
	DD	0be1c76der			; -0.152797
	DD	0be1ae96br			; -0.151281
	DD	0be195be0r			; -0.149765
	DD	0be17ce3dr			; -0.148248
	DD	0be164083r			; -0.14673
	DD	0be14b2b2r			; -0.145213
	DD	0be1324car			; -0.143695
	DD	0be1196ccr			; -0.142177
	DD	0be1008b7r			; -0.140658
	DD	0be0e7a8br			; -0.139139
	DD	0be0cec4ar			; -0.13762
	DD	0be0b5df3r			; -0.136101
	DD	0be09cf86r			; -0.134581
	DD	0be084105r			; -0.133061
	DD	0be06b26er			; -0.13154
	DD	0be0523c2r			; -0.130019
	DD	0be039502r			; -0.128498
	DD	0be02062er			; -0.126977
	DD	0be007745r			; -0.125455
	DD	0bdfdd092r			; -0.123933
	DD	0bdfab273r			; -0.122411
	DD	0bdf7942cr			; -0.120888
	DD	0bdf475c0r			; -0.119365
	DD	0bdf1572er			; -0.117842
	DD	0bdee3876r			; -0.116319
	DD	0bdeb199ar			; -0.114795
	DD	0bde7fa9ar			; -0.113271
	DD	0bde4db76r			; -0.111747
	DD	0bde1bc2er			; -0.110222
	DD	0bdde9cc4r			; -0.108697
	DD	0bddb7d37r			; -0.107172
	DD	0bdd85d89r			; -0.105647
	DD	0bdd53db9r			; -0.104122
	DD	0bdd21dc8r			; -0.102596
	DD	0bdcefdb7r			; -0.10107
	DD	0bdcbdd86r			; -0.0995436
	DD	0bdc8bd36r			; -0.0980171
	DD	0bdc59cc6r			; -0.0964904
	DD	0bdc27c39r			; -0.0949635
	DD	0bdbf5b8dr			; -0.0934363
	DD	0bdbc3ac3r			; -0.091909
	DD	0bdb919ddr			; -0.0903814
	DD	0bdb5f8dar			; -0.0888536
	DD	0bdb2d7bbr			; -0.0873255
	DD	0bdafb680r			; -0.0857973
	DD	0bdac952br			; -0.0842689
	DD	0bda973bar			; -0.0827403
	DD	0bda65230r			; -0.0812114
	DD	0bda3308cr			; -0.0796824
	DD	0bda00ecfr			; -0.0781532
	DD	0bd9cecf9r			; -0.0766239
	DD	0bd99cb0ar			; -0.0750943
	DD	0bd96a905r			; -0.0735646
	DD	0bd9386e7r			; -0.0720346
	DD	0bd9064b4r			; -0.0705046
	DD	0bd8d426ar			; -0.0689743
	DD	0bd8a200ar			; -0.0674439
	DD	0bd86fd94r			; -0.0659133
	DD	0bd83db0ar			; -0.0643826
	DD	0bd80b86cr			; -0.0628518
	DD	0bd7b2b74r			; -0.0613207
	DD	0bd74e5e9r			; -0.0597896
	DD	0bd6ea038r			; -0.0582583
	DD	0bd685a62r			; -0.0567268
	DD	0bd621469r			; -0.0551952
	DD	0bd5bce4cr			; -0.0536635
	DD	0bd55880er			; -0.0521317
	DD	0bd4f41afr			; -0.0505998
	DD	0bd48fb30r			; -0.0490677
	DD	0bd42b491r			; -0.0475355
	DD	0bd3c6dd5r			; -0.0460032
	DD	0bd3626fcr			; -0.0444708
	DD	0bd2fe007r			; -0.0429383
	DD	0bd2998f6r			; -0.0414056
	DD	0bd2351cbr			; -0.0398729
	DD	0bd1d0a88r			; -0.0383401
	DD	0bd16c32cr			; -0.0368072
	DD	0bd107bb8r			; -0.0352742
	DD	0bd0a342fr			; -0.0337412
	DD	0bd03ec90r			; -0.032208
	DD	0bcfb49bar			; -0.0306748
	DD	0bceeba2cr			; -0.0291415
	DD	0bce22a7ar			; -0.0276081
	DD	0bcd59aa6r			; -0.0260747
	DD	0bcc90ab0r			; -0.0245412
	DD	0bcbc7a9br			; -0.0230077
	DD	0bcafea69r			; -0.0214741
	DD	0bca35a1cr			; -0.0199404
	DD	0bc96c9b6r			; -0.0184067
	DD	0bc8a3938r			; -0.016873
	DD	0bc7b514br			; -0.0153392
	DD	0bc622fffr			; -0.0138054
	DD	0bc490e90r			; -0.0122715
	DD	0bc2fed02r			; -0.0107377
	DD	0bc16cb58r			; -0.00920375
	DD	0bbfb5330r			; -0.00766983
	DD	0bbc90f88r			; -0.00613588
	DD	0bb96cbc1r			; -0.00460193
	DD	0bb490fc6r			; -0.00306796
	DD	0bac90fd5r			; -0.00153398
?g_fIdvTanTable@@3QBMB DD 000000000r		; 0	; g_fIdvTanTable
	DD	03ac90fe5r			; 0.00153398
	DD	03b491004r			; 0.00306797
	DD	03b96cc2ar			; 0.00460197
	DD	03bc91080r			; 0.006136
	DD	03bfb5514r			; 0.00767005
	DD	03c16ccfbr			; 0.00920414
	DD	03c2fef9ar			; 0.0107383
	DD	03c491270r			; 0.0122725
	DD	03c623584r			; 0.0138067
	DD	03c7b58ddr			; 0.015341
	DD	03c8a3e42r			; 0.0168754
	DD	03c96d040r			; 0.0184098
	DD	03ca3626dr			; 0.0199444
	DD	03caff4ccr			; 0.021479
	DD	03cbc8762r			; 0.0230138
	DD	03cc91a31r			; 0.0245486
	DD	03cd5ad3fr			; 0.0260836
	DD	03ce2408er			; 0.0276187
	DD	03ceed424r			; 0.0291539
	DD	03cfb6803r			; 0.0306892
	DD	03d03fe18r			; 0.0322247
	DD	03d0a4857r			; 0.0337604
	DD	03d1092c1r			; 0.0352962
	DD	03d16dd57r			; 0.0368322
	DD	03d1d281cr			; 0.0383683
	DD	03d237312r			; 0.0399047
	DD	03d29be3ar			; 0.0414412
	DD	03d300997r			; 0.0429779
	DD	03d36552ar			; 0.0445148
	DD	03d3ca0f5r			; 0.0460519
	DD	03d42ecfar			; 0.0475893
	DD	03d49393cr			; 0.0491268
	DD	03d4f85bcr			; 0.0506646
	DD	03d55d27dr			; 0.0522027
	DD	03d5c1f7fr			; 0.053741
	DD	03d626cc5r			; 0.0552795
	DD	03d68ba52r			; 0.0568183
	DD	03d6f0826r			; 0.0583574
	DD	03d755645r			; 0.0598967
	DD	03d7ba4afr			; 0.0614364
	DD	03d80f9b4r			; 0.0629763
	DD	03d842138r			; 0.0645165
	DD	03d8748e5r			; 0.066057
	DD	03d8a70bcr			; 0.0675978
	DD	03d8d98ber			; 0.069139
	DD	03d90c0ebr			; 0.0706805
	DD	03d93e946r			; 0.0722223
	DD	03d9711cer			; 0.0737644
	DD	03d9a3a86r			; 0.0753069
	DD	03d9d636dr			; 0.0768498
	DD	03da08c85r			; 0.078393
	DD	03da3b5cfr			; 0.0799366
	DD	03da6df4br			; 0.0814806
	DD	03daa08fbr			; 0.0830249
	DD	03dad32e1r			; 0.0845697
	DD	03db05cfcr			; 0.0861149
	DD	03db3874dr			; 0.0876604
	DD	03db6b1d7r			; 0.0892064
	DD	03db9dc99r			; 0.0907528
	DD	03dbd0796r			; 0.0922996
	DD	03dc032cdr			; 0.0938469
	DD	03dc35e3fr			; 0.0953946
	DD	03dc689efr			; 0.0969428
	DD	03dc9b5dcr			; 0.0984914
	DD	03dcce209r			; 0.100041
	DD	03dd00e75r			; 0.10159
	DD	03dd33b22r			; 0.10314
	DD	03dd66810r			; 0.104691
	DD	03dd99542r			; 0.106242
	DD	03ddcc2b7r			; 0.107793
	DD	03ddff072r			; 0.109345
	DD	03de31e72r			; 0.110898
	DD	03de64cb9r			; 0.112451
	DD	03de97b48r			; 0.114005
	DD	03decaa20r			; 0.115559
	DD	03defd942r			; 0.117114
	DD	03df308afr			; 0.118669
	DD	03df63868r			; 0.120225
	DD	03df9686er			; 0.121781
	DD	03dfc98c2r			; 0.123338
	DD	03dffc965r			; 0.124896
	DD	03e017d2cr			; 0.126454
	DD	03e0315cer			; 0.128013
	DD	03e04ae9ar			; 0.129572
	DD	03e06478fr			; 0.131132
	DD	03e07e0aer			; 0.132693
	DD	03e0979f7r			; 0.134254
	DD	03e0b136cr			; 0.135816
	DD	03e0cad0dr			; 0.137379
	DD	03e0e46d9r			; 0.138942
	DD	03e0fe0d3r			; 0.140506
	DD	03e117afar			; 0.142071
	DD	03e13154er			; 0.143636
	DD	03e14afd1r			; 0.145202
	DD	03e164a83r			; 0.146769
	DD	03e17e564r			; 0.148336
	DD	03e198074r			; 0.149904
	DD	03e1b1bb6r			; 0.151473
	DD	03e1cb728r			; 0.153042
	DD	03e1e52ccr			; 0.154613
	DD	03e1feea1r			; 0.156184
	DD	03e218aaar			; 0.157756
	DD	03e2326e5r			; 0.159328
	DD	03e24c354r			; 0.160901
	DD	03e265ff7r			; 0.162475
	DD	03e27fccer			; 0.16405
	DD	03e2999dbr			; 0.165626
	DD	03e2b371er			; 0.167202
	DD	03e2cd497r			; 0.16878
	DD	03e2e7246r			; 0.170358
	DD	03e30102er			; 0.171937
	DD	03e31ae4dr			; 0.173516
	DD	03e334ca4r			; 0.175097
	DD	03e34eb34r			; 0.176678
	DD	03e3689fer			; 0.178261
	DD	03e382902r			; 0.179844
	DD	03e39c841r			; 0.181428
	DD	03e3b67bbr			; 0.183013
	DD	03e3d0771r			; 0.184599
	DD	03e3ea763r			; 0.186185
	DD	03e404791r			; 0.187773
	DD	03e41e7fer			; 0.189362
	DD	03e4388a8r			; 0.190951
	DD	03e452990r			; 0.192541
	DD	03e46cab8r			; 0.194133
	DD	03e486c1fr			; 0.195725
	DD	03e4a0dc7r			; 0.197318
	DD	03e4bafafr			; 0.198912
	DD	03e4d51d9r			; 0.200508
	DD	03e4ef444r			; 0.202104
	DD	03e5096f2r			; 0.203701
	DD	03e5239e3r			; 0.205299
	DD	03e53dd17r			; 0.206898
	DD	03e558090r			; 0.208498
	DD	03e57244dr			; 0.210099
	DD	03e58c84fr			; 0.211702
	DD	03e5a6c98r			; 0.213305
	DD	03e5c1127r			; 0.214909
	DD	03e5db5fdr			; 0.216515
	DD	03e5f5b1ar			; 0.218121
	DD	03e610080r			; 0.219728
	DD	03e62a62er			; 0.221337
	DD	03e644c26r			; 0.222947
	DD	03e65f267r			; 0.224558
	DD	03e6798f3r			; 0.226169
	DD	03e693fcbr			; 0.227782
	DD	03e6ae6edr			; 0.229397
	DD	03e6c8e5dr			; 0.231012
	DD	03e6e3619r			; 0.232628
	DD	03e6fde22r			; 0.234246
	DD	03e718679r			; 0.235865
	DD	03e732f20r			; 0.237484
	DD	03e74d815r			; 0.239106
	DD	03e76815ar			; 0.240728
	DD	03e782af0r			; 0.242351
	DD	03e79d4d6r			; 0.243976
	DD	03e7b7f0fr			; 0.245602
	DD	03e7d2999r			; 0.247229
	DD	03e7ed477r			; 0.248857
	DD	03e803fd4r			; 0.250487
	DD	03e811596r			; 0.252118
	DD	03e81eb83r			; 0.25375
	DD	03e82c19ar			; 0.255383
	DD	03e8397ddr			; 0.257018
	DD	03e846e4ar			; 0.258654
	DD	03e8544e4r			; 0.260291
	DD	03e861ba9r			; 0.26193
	DD	03e86f29ar			; 0.26357
	DD	03e87c9b8r			; 0.265211
	DD	03e88a103r			; 0.266853
	DD	03e89787br			; 0.268497
	DD	03e8a5020r			; 0.270143
	DD	03e8b27f3r			; 0.271789
	DD	03e8bfff4r			; 0.273437
	DD	03e8cd824r			; 0.275087
	DD	03e8db082r			; 0.276737
	DD	03e8e890fr			; 0.278389
	DD	03e8f61ccr			; 0.280043
	DD	03e903ab8r			; 0.281698
	DD	03e9113d5r			; 0.283354
	DD	03e91ed21r			; 0.285012
	DD	03e92c69fr			; 0.286672
	DD	03e93a04dr			; 0.288332
	DD	03e947a2dr			; 0.289995
	DD	03e95543er			; 0.291658
	DD	03e962e82r			; 0.293324
	DD	03e9708f7r			; 0.29499
	DD	03e97e3a0r			; 0.296659
	DD	03e98be7br			; 0.298328
	DD	03e999989r			; 0.3
	DD	03e9a74ccr			; 0.301672
	DD	03e9b5042r			; 0.303347
	DD	03e9c2becr			; 0.305023
	DD	03e9d07cbr			; 0.3067
	DD	03e9de3dfr			; 0.308379
	DD	03e9ec029r			; 0.31006
	DD	03e9f9ca8r			; 0.311742
	DD	03ea0795dr			; 0.313426
	DD	03ea15648r			; 0.315111
	DD	03ea2336br			; 0.316799
	DD	03ea310c4r			; 0.318487
	DD	03ea3ee54r			; 0.320178
	DD	03ea4cc1dr			; 0.32187
	DD	03ea5aa1dr			; 0.323563
	DD	03ea68856r			; 0.325259
	DD	03ea766c8r			; 0.326956
	DD	03ea84573r			; 0.328655
	DD	03ea92457r			; 0.330355
	DD	03eaa0375r			; 0.332058
	DD	03eaae2cer			; 0.333762
	DD	03eabc261r			; 0.335467
	DD	03eaca22fr			; 0.337175
	DD	03ead8238r			; 0.338884
	DD	03eae627dr			; 0.340595
	DD	03eaf42fer			; 0.342308
	DD	03eb023bbr			; 0.344023
	DD	03eb104b5r			; 0.345739
	DD	03eb1e5ecr			; 0.347457
	DD	03eb2c761r			; 0.349177
	DD	03eb3a913r			; 0.350899
	DD	03eb48b04r			; 0.352623
	DD	03eb56d34r			; 0.354349
	DD	03eb64fa2r			; 0.356076
	DD	03eb73250r			; 0.357806
	DD	03eb8153dr			; 0.359537
	DD	03eb8f86br			; 0.36127
	DD	03eb9dbd9r			; 0.363005
	DD	03ebabf88r			; 0.364743
	DD	03ebba378r			; 0.366482
	DD	03ebc87aar			; 0.368223
	DD	03ebd6c1er			; 0.369965
	DD	03ebe50d4r			; 0.37171
	DD	03ebf35cdr			; 0.373457
	DD	03ec01b0ar			; 0.375206
	DD	03ec10089r			; 0.376957
	DD	03ec1e64dr			; 0.37871
	DD	03ec2cc56r			; 0.380465
	DD	03ec3b2a3r			; 0.382222
	DD	03ec49935r			; 0.383981
	DD	03ec5800dr			; 0.385743
	DD	03ec6672ar			; 0.387506
	DD	03ec74e8fr			; 0.389271
	DD	03ec8363ar			; 0.391039
	DD	03ec91e2cr			; 0.392808
	DD	03eca0666r			; 0.39458
	DD	03ecaeee7r			; 0.396354
	DD	03ecbd7b1r			; 0.39813
	DD	03eccc0c4r			; 0.399908
	DD	03ecdaa21r			; 0.401689
	DD	03ece93c7r			; 0.403471
	DD	03ecf7db7r			; 0.405256
	DD	03ed067f1r			; 0.407043
	DD	03ed15277r			; 0.408832
	DD	03ed23d47r			; 0.410624
	DD	03ed32864r			; 0.412418
	DD	03ed413cdr			; 0.414214
	DD	03ed4ff82r			; 0.416012
	DD	03ed5eb85r			; 0.417812
	DD	03ed6d7d5r			; 0.419615
	DD	03ed7c473r			; 0.421421
	DD	03ed8b15fr			; 0.423228
	DD	03ed99e9ar			; 0.425038
	DD	03eda8c24r			; 0.42685
	DD	03edb79fer			; 0.428665
	DD	03edc6828r			; 0.430482
	DD	03edd56a3r			; 0.432302
	DD	03ede456fr			; 0.434123
	DD	03edf348cr			; 0.435948
	DD	03ee023fbr			; 0.437775
	DD	03ee113bdr			; 0.439604
	DD	03ee203d1r			; 0.441435
	DD	03ee2f439r			; 0.44327
	DD	03ee3e4f4r			; 0.445106
	DD	03ee4d604r			; 0.446945
	DD	03ee5c768r			; 0.448787
	DD	03ee6b922r			; 0.450631
	DD	03ee7ab31r			; 0.452478
	DD	03ee89d96r			; 0.454327
	DD	03ee99051r			; 0.456179
	DD	03eea8364r			; 0.458034
	DD	03eeb76cer			; 0.459891
	DD	03eec6a90r			; 0.461751
	DD	03eed5eabr			; 0.463613
	DD	03eee531fr			; 0.465478
	DD	03eef47ecr			; 0.467346
	DD	03ef03d13r			; 0.469216
	DD	03ef13294r			; 0.471089
	DD	03ef22870r			; 0.472965
	DD	03ef31ea8r			; 0.474843
	DD	03ef4153cr			; 0.476725
	DD	03ef50c2cr			; 0.478608
	DD	03ef60378r			; 0.480495
	DD	03ef6fb23r			; 0.482385
	DD	03ef7f32br			; 0.484277
	DD	03ef8eb91r			; 0.486172
	DD	03ef9e457r			; 0.48807
	DD	03efadd7cr			; 0.489971
	DD	03efbd701r			; 0.491875
	DD	03efcd0e6r			; 0.493781
	DD	03efdcb2cr			; 0.495691
	DD	03efec5d4r			; 0.497603
	DD	03effc0der			; 0.499518
	DD	03f005e25r			; 0.501437
	DD	03f00dc0dr			; 0.503358
	DD	03f015a26r			; 0.505282
	DD	03f01d872r			; 0.507209
	DD	03f0256f0r			; 0.509139
	DD	03f02d5a1r			; 0.511072
	DD	03f035484r			; 0.513008
	DD	03f03d39br			; 0.514948
	DD	03f0452e5r			; 0.51689
	DD	03f04d263r			; 0.518835
	DD	03f055215r			; 0.520784
	DD	03f05d1fbr			; 0.522735
	DD	03f065215r			; 0.52469
	DD	03f06d265r			; 0.526648
	DD	03f0752e9r			; 0.528609
	DD	03f07d3a3r			; 0.530573
	DD	03f085493r			; 0.532541
	DD	03f08d5b9r			; 0.534511
	DD	03f095715r			; 0.536485
	DD	03f09d8a7r			; 0.538462
	DD	03f0a5a70r			; 0.540442
	DD	03f0adc71r			; 0.542426
	DD	03f0b5ea9r			; 0.544413
	DD	03f0be118r			; 0.546403
	DD	03f0c63c0r			; 0.548397
	DD	03f0ce6a0r			; 0.550394
	DD	03f0d69b9r			; 0.552394
	DD	03f0ded0ar			; 0.554398
	DD	03f0e7095r			; 0.556405
	DD	03f0ef459r			; 0.558416
	DD	03f0f7857r			; 0.56043
	DD	03f0ffc8fr			; 0.562447
	DD	03f108102r			; 0.564469
	DD	03f1105afr			; 0.566493
	DD	03f118a98r			; 0.568521
	DD	03f120fbcr			; 0.570553
	DD	03f12951cr			; 0.572588
	DD	03f131ab7r			; 0.574626
	DD	03f13a08fr			; 0.576669
	DD	03f1426a4r			; 0.578715
	DD	03f14acf6r			; 0.580764
	DD	03f153385r			; 0.582817
	DD	03f15ba52r			; 0.584874
	DD	03f16415cr			; 0.586935
	DD	03f16c8a5r			; 0.588999
	DD	03f17502dr			; 0.591067
	DD	03f17d7f3r			; 0.593139
	DD	03f185ff9r			; 0.595214
	DD	03f18e83fr			; 0.597294
	DD	03f1970c4r			; 0.599377
	DD	03f19f98ar			; 0.601464
	DD	03f1a8291r			; 0.603555
	DD	03f1b0bd8r			; 0.605649
	DD	03f1b9561r			; 0.607748
	DD	03f1c1f2cr			; 0.609851
	DD	03f1ca938r			; 0.611957
	DD	03f1d3387r			; 0.614067
	DD	03f1dbe19r			; 0.616182
	DD	03f1e48eer			; 0.6183
	DD	03f1ed407r			; 0.620423
	DD	03f1f5f63r			; 0.622549
	DD	03f1feb03r			; 0.62468
	DD	03f2076e9r			; 0.626814
	DD	03f210313r			; 0.628953
	DD	03f218f82r			; 0.631096
	DD	03f221c37r			; 0.633243
	DD	03f22a932r			; 0.635394
	DD	03f233673r			; 0.63755
	DD	03f23c3fcr			; 0.639709
	DD	03f2451cbr			; 0.641873
	DD	03f24dfe2r			; 0.644041
	DD	03f256e41r			; 0.646214
	DD	03f25fce8r			; 0.64839
	DD	03f268bd8r			; 0.650571
	DD	03f271b11r			; 0.652757
	DD	03f27aa94r			; 0.654947
	DD	03f283a60r			; 0.657141
	DD	03f28ca77r			; 0.659339
	DD	03f295ad9r			; 0.661542
	DD	03f29eb85r			; 0.66375
	DD	03f2a7c7dr			; 0.665962
	DD	03f2b0dc1r			; 0.668179
	DD	03f2b9f52r			; 0.6704
	DD	03f2c312fr			; 0.672625
	DD	03f2cc359r			; 0.674856
	DD	03f2d55d0r			; 0.677091
	DD	03f2de896r			; 0.67933
	DD	03f2e7baar			; 0.681574
	DD	03f2f0f0dr			; 0.683823
	DD	03f2fa2bfr			; 0.686077
	DD	03f3036c1r			; 0.688335
	DD	03f30cb13r			; 0.690599
	DD	03f315fb5r			; 0.692867
	DD	03f31f4a9r			; 0.695139
	DD	03f3289edr			; 0.697417
	DD	03f331f84r			; 0.6997
	DD	03f33b56dr			; 0.701987
	DD	03f344ba9r			; 0.704279
	DD	03f34e238r			; 0.706577
	DD	03f35791ar			; 0.708879
	DD	03f361051r			; 0.711186
	DD	03f36a7dcr			; 0.713499
	DD	03f373fbcr			; 0.715816
	DD	03f37d7f2r			; 0.718139
	DD	03f38707dr			; 0.720466
	DD	03f39095fr			; 0.722799
	DD	03f39a298r			; 0.725137
	DD	03f3a3c28r			; 0.72748
	DD	03f3ad610r			; 0.729829
	DD	03f3b7051r			; 0.732183
	DD	03f3c0aear			; 0.734542
	DD	03f3ca5ddr			; 0.736906
	DD	03f3d4129r			; 0.739276
	DD	03f3ddccfr			; 0.741651
	DD	03f3e78d1r			; 0.744031
	DD	03f3f152dr			; 0.746417
	DD	03f3fb1e6r			; 0.748808
	DD	03f404efar			; 0.751205
	DD	03f40ec6cr			; 0.753608
	DD	03f418a3ar			; 0.756015
	DD	03f422867r			; 0.758429
	DD	03f42c6f2r			; 0.760848
	DD	03f4365dcr			; 0.763273
	DD	03f440525r			; 0.765703
	DD	03f44a4cer			; 0.76814
	DD	03f4544d7r			; 0.770582
	DD	03f45e541r			; 0.773029
	DD	03f46860dr			; 0.775483
	DD	03f47273br			; 0.777942
	DD	03f47c8ccr			; 0.780408
	DD	03f486ac0r			; 0.782879
	DD	03f490d17r			; 0.785356
	DD	03f49afd3r			; 0.787839
	DD	03f4a52f3r			; 0.790328
	DD	03f4af679r			; 0.792823
	DD	03f4b9a65r			; 0.795325
	DD	03f4c3eb7r			; 0.797832
	DD	03f4ce370r			; 0.800345
	DD	03f4d8892r			; 0.802865
	DD	03f4e2e1br			; 0.805391
	DD	03f4ed40dr			; 0.807923
	DD	03f4f7a69r			; 0.810462
	DD	03f50212er			; 0.813006
	DD	03f50c85fr			; 0.815557
	DD	03f516ffar			; 0.818115
	DD	03f521801r			; 0.820679
	DD	03f52c075r			; 0.823249
	DD	03f536956r			; 0.825826
	DD	03f5412a4r			; 0.828409
	DD	03f54bc61r			; 0.830999
	DD	03f55668dr			; 0.833596
	DD	03f561128r			; 0.836199
	DD	03f56bc34r			; 0.838809
	DD	03f5767b0r			; 0.841426
	DD	03f58139er			; 0.844049
	DD	03f58bffdr			; 0.84668
	DD	03f596cd0r			; 0.849317
	DD	03f5a1a16r			; 0.851961
	DD	03f5ac7d0r			; 0.854611
	DD	03f5b75ffr			; 0.857269
	DD	03f5c24a4r			; 0.859934
	DD	03f5cd3ber			; 0.862606
	DD	03f5d834fr			; 0.865285
	DD	03f5e3358r			; 0.867971
	DD	03f5ee3d9r			; 0.870664
	DD	03f5f94d3r			; 0.873365
	DD	03f604646r			; 0.876072
	DD	03f60f834r			; 0.878787
	DD	03f61aa9cr			; 0.88151
	DD	03f625d80r			; 0.884239
	DD	03f6310e1r			; 0.886976
	DD	03f63c4bfr			; 0.889721
	DD	03f64791ar			; 0.892473
	DD	03f652df5r			; 0.895232
	DD	03f65e34er			; 0.898
	DD	03f669928r			; 0.900774
	DD	03f674f82r			; 0.903557
	DD	03f68065er			; 0.906347
	DD	03f68bdbdr			; 0.909145
	DD	03f69759er			; 0.911951
	DD	03f6a2e04r			; 0.914765
	DD	03f6ae6eer			; 0.917586
	DD	03f6ba05dr			; 0.920416
	DD	03f6c5a53r			; 0.923253
	DD	03f6d14d0r			; 0.926099
	DD	03f6dcfd4r			; 0.928952
	DD	03f6e8b62r			; 0.931814
	DD	03f6f4778r			; 0.934684
	DD	03f700419r			; 0.937563
	DD	03f70c145r			; 0.940449
	DD	03f717efdr			; 0.943344
	DD	03f723d42r			; 0.946247
	DD	03f72fc15r			; 0.949159
	DD	03f73bb75r			; 0.952079
	DD	03f747b66r			; 0.955008
	DD	03f753be6r			; 0.957945
	DD	03f75fcf7r			; 0.960891
	DD	03f76be9br			; 0.963846
	DD	03f7780d1r			; 0.966809
	DD	03f78439br			; 0.969782
	DD	03f7906f9r			; 0.972763
	DD	03f79caedr			; 0.975753
	DD	03f7a8f77r			; 0.978752
	DD	03f7b5499r			; 0.98176
	DD	03f7c1a53r			; 0.984777
	DD	03f7ce0a6r			; 0.987803
	DD	03f7da793r			; 0.990838
	DD	03f7e6f1br			; 0.993883
	DD	03f7f373fr			; 0.996937
	DD	03f800000r			; 1
	DD	03f8064afr			; 1.00307
	DD	03f80c9aer			; 1.00615
	DD	03f812efdr			; 1.00925
	DD	03f81949dr			; 1.01235
	DD	03f81fa8dr			; 1.01546
	DD	03f8260cer			; 1.01858
	DD	03f82c762r			; 1.02171
	DD	03f832e48r			; 1.02485
	DD	03f839581r			; 1.028
	DD	03f83fd0dr			; 1.03116
	DD	03f8464eer			; 1.03433
	DD	03f84cd23r			; 1.03751
	DD	03f8535adr			; 1.0407
	DD	03f859e8cr			; 1.0439
	DD	03f8607c2r			; 1.04711
	DD	03f86714fr			; 1.05033
	DD	03f86db32r			; 1.05356
	DD	03f87456dr			; 1.05681
	DD	03f87b001r			; 1.06006
	DD	03f881aeer			; 1.06332
	DD	03f888634r			; 1.0666
	DD	03f88f1d4r			; 1.06988
	DD	03f895dcer			; 1.07318
	DD	03f89ca24r			; 1.07648
	DD	03f8a36d5r			; 1.0798
	DD	03f8aa3e3r			; 1.08313
	DD	03f8b114er			; 1.08647
	DD	03f8b7f16r			; 1.08982
	DD	03f8bed3dr			; 1.09318
	DD	03f8c5bc2r			; 1.09655
	DD	03f8ccaa6r			; 1.09993
	DD	03f8d39ebr			; 1.10333
	DD	03f8da990r			; 1.10674
	DD	03f8e1996r			; 1.11016
	DD	03f8e89fer			; 1.11359
	DD	03f8efac8r			; 1.11703
	DD	03f8f6bf6r			; 1.12048
	DD	03f8fdd88r			; 1.12395
	DD	03f904f7dr			; 1.12743
	DD	03f90c1d8r			; 1.13092
	DD	03f913499r			; 1.13442
	DD	03f91a7c0r			; 1.13793
	DD	03f921b4er			; 1.14146
	DD	03f928f44r			; 1.145
	DD	03f9303a3r			; 1.14855
	DD	03f93786ar			; 1.15211
	DD	03f93ed9cr			; 1.15569
	DD	03f946338r			; 1.15928
	DD	03f94d93fr			; 1.16288
	DD	03f954fb3r			; 1.16649
	DD	03f95c693r			; 1.17012
	DD	03f963de0r			; 1.17376
	DD	03f96b59cr			; 1.17742
	DD	03f972dc6r			; 1.18108
	DD	03f97a660r			; 1.18476
	DD	03f981f6br			; 1.18846
	DD	03f9898e7r			; 1.19217
	DD	03f9912d5r			; 1.19589
	DD	03f998d35r			; 1.19962
	DD	03f9a0809r			; 1.20337
	DD	03f9a8352r			; 1.20713
	DD	03f9aff0fr			; 1.21091
	DD	03f9b7b42r			; 1.2147
	DD	03f9bf7ecr			; 1.2185
	DD	03f9c750er			; 1.22232
	DD	03f9cf2a8r			; 1.22616
	DD	03f9d70bbr			; 1.23
	DD	03f9def48r			; 1.23386
	DD	03f9e6e50r			; 1.23774
	DD	03f9eedd4r			; 1.24163
	DD	03f9f6dd4r			; 1.24554
	DD	03f9fee52r			; 1.24946
	DD	03fa06f4er			; 1.2534
	DD	03fa0f0car			; 1.25735
	DD	03fa172c5r			; 1.26131
	DD	03fa1f541r			; 1.2653
	DD	03fa27840r			; 1.26929
	DD	03fa2fbc1r			; 1.27331
	DD	03fa37fc6r			; 1.27734
	DD	03fa40450r			; 1.28138
	DD	03fa4895fr			; 1.28544
	DD	03fa50ef5r			; 1.28952
	DD	03fa59513r			; 1.29361
	DD	03fa61bb9r			; 1.29772
	DD	03fa6a2e8r			; 1.30185
	DD	03fa72aa2r			; 1.30599
	DD	03fa7b2e8r			; 1.31015
	DD	03fa83bbar			; 1.31432
	DD	03fa8c519r			; 1.31851
	DD	03fa94f08r			; 1.32272
	DD	03fa9d985r			; 1.32695
	DD	03faa6494r			; 1.33119
	DD	03faaf034r			; 1.33546
	DD	03fab7c66r			; 1.33973
	DD	03fac092dr			; 1.34403
	DD	03fac9689r			; 1.34834
	DD	03fad247ar			; 1.35268
	DD	03fadb303r			; 1.35703
	DD	03fae4224r			; 1.36139
	DD	03faed1der			; 1.36578
	DD	03faf6232r			; 1.37018
	DD	03faff323r			; 1.37461
	DD	03fb084b0r			; 1.37905
	DD	03fb116dbr			; 1.38351
	DD	03fb1a9a5r			; 1.38799
	DD	03fb23d10r			; 1.39249
	DD	03fb2d11cr			; 1.39701
	DD	03fb365cbr			; 1.40154
	DD	03fb3fb1er			; 1.4061
	DD	03fb49117r			; 1.41068
	DD	03fb527b6r			; 1.41527
	DD	03fb5befcr			; 1.41989
	DD	03fb656ecr			; 1.42453
	DD	03fb6ef86r			; 1.42918
	DD	03fb788ccr			; 1.43386
	DD	03fb822ber			; 1.43856
	DD	03fb8bd5fr			; 1.44328
	DD	03fb958b0r			; 1.44802
	DD	03fb9f4b2r			; 1.45278
	DD	03fba9166r			; 1.45756
	DD	03fbb2ecer			; 1.46237
	DD	03fbbccebr			; 1.46719
	DD	03fbc6bbfr			; 1.47204
	DD	03fbd0b4ar			; 1.47691
	DD	03fbdab90r			; 1.4818
	DD	03fbe4c90r			; 1.48671
	DD	03fbeee4dr			; 1.49165
	DD	03fbf90c7r			; 1.49661
	DD	03fc03401r			; 1.50159
	DD	03fc0d7fcr			; 1.50659
	DD	03fc17cb9r			; 1.51162
	DD	03fc2223br			; 1.51667
	DD	03fc2c882r			; 1.52174
	DD	03fc36f90r			; 1.52684
	DD	03fc41767r			; 1.53196
	DD	03fc4c009r			; 1.53711
	DD	03fc56976r			; 1.54228
	DD	03fc613b1r			; 1.54748
	DD	03fc6bebcr			; 1.5527
	DD	03fc76a98r			; 1.55794
	DD	03fc81746r			; 1.56321
	DD	03fc8c4c9r			; 1.56851
	DD	03fc97322r			; 1.57383
	DD	03fca2254r			; 1.57917
	DD	03fcad25fr			; 1.58455
	DD	03fcb8345r			; 1.58994
	DD	03fcc350ar			; 1.59537
	DD	03fcce7adr			; 1.60082
	DD	03fcd9b32r			; 1.6063
	DD	03fce4f99r			; 1.6118
	DD	03fcf04e6r			; 1.61734
	DD	03fcfbb19r			; 1.6229
	DD	03fd07236r			; 1.62849
	DD	03fd12a3dr			; 1.6341
	DD	03fd1e331r			; 1.63975
	DD	03fd29d13r			; 1.64542
	DD	03fd357e7r			; 1.65112
	DD	03fd413adr			; 1.65685
	DD	03fd4d069r			; 1.66261
	DD	03fd58e1br			; 1.6684
	DD	03fd64cc7r			; 1.67422
	DD	03fd70c6er			; 1.68007
	DD	03fd7cd12r			; 1.68595
	DD	03fd88eb6r			; 1.69186
	DD	03fd9515dr			; 1.6978
	DD	03fda1507r			; 1.70377
	DD	03fdad9b8r			; 1.70977
	DD	03fdb9f72r			; 1.7158
	DD	03fdc6637r			; 1.72187
	DD	03fdd2e09r			; 1.72797
	DD	03fddf6ecr			; 1.7341
	DD	03fdec0e0r			; 1.74026
	DD	03fdf8bear			; 1.74646
	DD	03fe0580br			; 1.75269
	DD	03fe12545r			; 1.75895
	DD	03fe1f39cr			; 1.76525
	DD	03fe2c312r			; 1.77158
	DD	03fe393a9r			; 1.77794
	DD	03fe46564r			; 1.78434
	DD	03fe53846r			; 1.79078
	DD	03fe60c51r			; 1.79725
	DD	03fe6e188r			; 1.80376
	DD	03fe7b7efr			; 1.8103
	DD	03fe88f87r			; 1.81688
	DD	03fe96853r			; 1.8235
	DD	03fea4257r			; 1.83015
	DD	03feb1d95r			; 1.83684
	DD	03febfa11r			; 1.84357
	DD	03fecd7ccr			; 1.85034
	DD	03fedb6cbr			; 1.85714
	DD	03fee9710r			; 1.86399
	DD	03fef789er			; 1.87087
	DD	03ff05b78r			; 1.87779
	DD	03ff13fa2r			; 1.88475
	DD	03ff2251fr			; 1.89176
	DD	03ff30bf2r			; 1.8988
	DD	03ff3f41dr			; 1.90589
	DD	03ff4dda6r			; 1.91301
	DD	03ff5c88er			; 1.92018
	DD	03ff6b4dar			; 1.92739
	DD	03ff7a28cr			; 1.93465
	DD	03ff891a9r			; 1.94195
	DD	03ff98234r			; 1.94929
	DD	03ffa7430r			; 1.95667
	DD	03ffb67a0r			; 1.9641
	DD	03ffc5c8ar			; 1.97157
	DD	03ffd52f0r			; 1.97909
	DD	03ffe4ad6r			; 1.98666
	DD	03fff4440r			; 1.99427
	DD	040001f99r			; 2.00193
	DD	040009dd8r			; 2.00963
	DD	040011cder			; 2.01739
	DD	040019cafr			; 2.02519
	DD	040021d4cr			; 2.03304
	DD	040029eb6r			; 2.04094
	DD	0400320f1r			; 2.04889
	DD	04003a3fer			; 2.05688
	DD	0400427dfr			; 2.06493
	DD	04004ac97r			; 2.07303
	DD	040053227r			; 2.08119
	DD	04005b893r			; 2.08939
	DD	040063fdcr			; 2.09765
	DD	04006c804r			; 2.10596
	DD	04007510fr			; 2.11432
	DD	04007dafdr			; 2.12274
	DD	0400865d3r			; 2.13121
	DD	04008f192r			; 2.13974
	DD	040097e3cr			; 2.14833
	DD	0400a0bd4r			; 2.15697
	DD	0400a9a5dr			; 2.16567
	DD	0400b29d9r			; 2.17443
	DD	0400bba4cr			; 2.18325
	DD	0400c4bb6r			; 2.19212
	DD	0400cde1cr			; 2.20106
	DD	0400d7180r			; 2.21005
	DD	0400e05e4r			; 2.21911
	DD	0400e9b4cr			; 2.22823
	DD	0400f31bbr			; 2.23741
	DD	0400fc932r			; 2.24665
	DD	0401061b6r			; 2.25596
	DD	04010fb49r			; 2.26534
	DD	0401195eer			; 2.27478
	DD	0401231a9r			; 2.28428
	DD	04012ce7cr			; 2.29385
	DD	040136c6ar			; 2.30349
	DD	040140b77r			; 2.3132
	DD	04014aba6r			; 2.32298
	DD	040154cfbr			; 2.33282
	DD	04015ef78r			; 2.34274
	DD	040169321r			; 2.35273
	DD	0401737f9r			; 2.36279
	DD	04017de05r			; 2.37293
	DD	040188547r			; 2.38313
	DD	040192dc3r			; 2.39342
	DD	04019d77er			; 2.40378
	DD	0401a827ar			; 2.41421
	DD	0401b2ebbr			; 2.42473
	DD	0401bdc46r			; 2.43532
	DD	0401c8b1dr			; 2.44599
	DD	0401d3b46r			; 2.45674
	DD	0401decc4r			; 2.46758
	DD	0401e9f9cr			; 2.47849
	DD	0401f53d1r			; 2.48949
	DD	040200967r			; 2.50057
	DD	04020c064r			; 2.51174
	DD	0402178cbr			; 2.523
	DD	0402232a0r			; 2.53434
	DD	04022ede9r			; 2.54577
	DD	04023aaaar			; 2.55729
	DD	0402468e8r			; 2.5689
	DD	0402528a7r			; 2.58061
	DD	04025e9ecr			; 2.5924
	DD	04026acbcr			; 2.60429
	DD	04027711dr			; 2.61628
	DD	040283712r			; 2.62836
	DD	04028fea2r			; 2.64054
	DD	04029c7d1r			; 2.65282
	DD	0402a92a6r			; 2.6652
	DD	0402b5f24r			; 2.67768
	DD	0402c2d52r			; 2.69027
	DD	0402cfd36r			; 2.70295
	DD	0402dced5r			; 2.71575
	DD	0402ea235r			; 2.72865
	DD	0402f775cr			; 2.74166
	DD	040304e50r			; 2.75478
	DD	040312717r			; 2.76801
	DD	0403201b7r			; 2.78135
	DD	04032de36r			; 2.79481
	DD	04033bc9cr			; 2.80839
	DD	040349cefr			; 2.82208
	DD	040357f34r			; 2.83589
	DD	040366375r			; 2.84982
	DD	0403749b6r			; 2.86387
	DD	0403831ffr			; 2.87805
	DD	040391c58r			; 2.89235
	DD	0403a08c7r			; 2.90679
	DD	0403af755r			; 2.92135
	DD	0403be808r			; 2.93604
	DD	0403cdae9r			; 2.95086
	DD	0403dd000r			; 2.96582
	DD	0403ec754r			; 2.98092
	DD	0403fc0edr			; 2.99615
	DD	04040bcd5r			; 3.01153
	DD	04041bb13r			; 3.02704
	DD	04042bbb1r			; 3.04271
	DD	04043beb7r			; 3.05852
	DD	04044c42er			; 3.07447
	DD	04045cc1fr			; 3.09058
	DD	04046d694r			; 3.10685
	DD	04047e396r			; 3.12327
	DD	04048f32fr			; 3.13984
	DD	0404a056ar			; 3.15658
	DD	0404b1a4fr			; 3.17348
	DD	0404c31ear			; 3.19055
	DD	0404d4c45r			; 3.20778
	DD	0404e696br			; 3.22518
	DD	0404f8967r			; 3.24276
	DD	04050ac44r			; 3.26051
	DD	04051d20dr			; 3.27845
	DD	04052facfr			; 3.29656
	DD	040542695r			; 3.31485
	DD	04055556cr			; 3.33334
	DD	04056875fr			; 3.35201
	DD	04057bc7cr			; 3.37088
	DD	04058f4d0r			; 3.38994
	DD	0405a3068r			; 3.4092
	DD	0405b6f51r			; 3.42867
	DD	0405cb199r			; 3.44834
	DD	0405df74fr			; 3.46822
	DD	0405f4081r			; 3.48831
	DD	040608d3er			; 3.50862
	DD	04061dd94r			; 3.52915
	DD	040633194r			; 3.5499
	DD	04064894dr			; 3.57088
	DD	04065e4cfr			; 3.59209
	DD	04067442br			; 3.61354
	DD	04068a772r			; 3.63522
	DD	0406a0eb5r			; 3.65715
	DD	0406b7a05r			; 3.67932
	DD	0406ce976r			; 3.70175
	DD	0406e5d19r			; 3.72443
	DD	0406fd501r			; 3.74738
	DD	040715142r			; 3.77058
	DD	04072d1efr			; 3.79406
	DD	04074571er			; 3.81782
	DD	04075e0e2r			; 3.84185
	DD	040776f52r			; 3.86617
	DD	040790282r			; 3.89078
	DD	0407a9a8br			; 3.91568
	DD	0407c3781r			; 3.94089
	DD	0407dd97er			; 3.9664
	DD	0407f8098r			; 3.99222
	DD	040809675r			; 4.01837
	DD	040816f46r			; 4.04483
	DD	040824acbr			; 4.07163
	DD	040832914r			; 4.09876
	DD	040840a2cr			; 4.12624
	DD	04084ee23r			; 4.15407
	DD	04085d506r			; 4.18225
	DD	04086bee4r			; 4.2108
	DD	04087abcdr			; 4.23972
	DD	040889bd0r			; 4.26902
	DD	040898efcr			; 4.2987
	DD	0408a8564r			; 4.32878
	DD	0408b7f16r			; 4.35926
	DD	0408c7c26r			; 4.39015
	DD	0408d7ca3r			; 4.42146
	DD	0408e80a2r			; 4.4532
	DD	0408f8834r			; 4.48538
	DD	04090936dr			; 4.518
	DD	04091a261r			; 4.55107
	DD	04092b524r			; 4.58461
	DD	04093cbccr			; 4.61863
	DD	04094e66er			; 4.65313
	DD	04096051fr			; 4.68813
	DD	0409727f9r			; 4.72363
	DD	040984f11r			; 4.75965
	DD	040997a80r			; 4.7962
	DD	0409aaa60r			; 4.8333
	DD	0409bdecar			; 4.87095
	DD	0409d17d8r			; 4.90916
	DD	0409e55a7r			; 4.94796
	DD	0409f9852r			; 4.98734
	DD	040a0dff7r			; 5.02734
	DD	040a22cb4r			; 5.06796
	DD	040a37ea7r			; 5.10921
	DD	040a4d5f1r			; 5.15112
	DD	040a632b4r			; 5.19369
	DD	040a79510r			; 5.23695
	DD	040a8fd29r			; 5.2809
	DD	040aa6b25r			; 5.32558
	DD	040abdf27r			; 5.37099
	DD	040ad5958r			; 5.41716
	DD	040aed9e0r			; 5.4641
	DD	040b060e8r			; 5.51183
	DD	040b1ee9br			; 5.56038
	DD	040b38325r			; 5.60976
	DD	040b51eb6r			; 5.66
	DD	040b6c17cr			; 5.71112
	DD	040b86ba9r			; 5.76314
	DD	040ba1d70r			; 5.81609
	DD	040bbd707r			; 5.87
	DD	040bd98a4r			; 5.92488
	DD	040bf6280r			; 5.98077
	DD	040c134d7r			; 6.0377
	DD	040c30fe6r			; 6.09569
	DD	040c4f3edr			; 6.15478
	DD	040c6e12er			; 6.21499
	DD	040c8d7eer			; 6.27636
	DD	040cad874r			; 6.33892
	DD	040cce30br			; 6.40272
	DD	040cef800r			; 6.46777
	DD	040d117a3r			; 6.53414
	DD	040d34249r			; 6.60184
	DD	040d57848r			; 6.67093
	DD	040d7b9far			; 6.74145
	DD	040da07c0r			; 6.81345
	DD	040dc61fbr			; 6.88696
	DD	040dec912r			; 6.96204
	DD	040e13d71r			; 7.03875
	DD	040e3bf88r			; 7.11713
	DD	040e64fcbr			; 7.19724
	DD	040e8eeb5r			; 7.27914
	DD	040eb9cc7r			; 7.36289
	DD	040ee5a85r			; 7.44855
	DD	040f1287br			; 7.53619
	DD	040f4073dr			; 7.62588
	DD	040f6f764r			; 7.7177
	DD	040f9f991r			; 7.81171
	DD	040fd0e6cr			; 7.90801
	DD	041001b53r			; 8.00667
	DD	04101b97er			; 8.10779
	DD	041036216r			; 8.21145
	DD	041051585r			; 8.31775
	DD	04106d434r			; 8.42681
	DD	041089e96r			; 8.53872
	DD	0410a7524r			; 8.6536
	DD	0410c585ar			; 8.77157
	DD	0410e48bfr			; 8.89276
	DD	0411046dfr			; 9.0173
	DD	04112534er			; 9.14534
	DD	041146eaar			; 9.27702
	DD	041169998r			; 9.4125
	DD	04118d4c9r			; 9.55195
	DD	0411b20f6r			; 9.69555
	DD	0411d7ee7r			; 9.84348
	DD	0411fef6br			; 9.99595
	DD	041227363r			; 10.1532
	DD	041250bbbr			; 10.3154
	DD	04127b970r			; 10.4828
	DD	0412a7d8fr			; 10.6557
	DD	0412d5937r			; 10.8343
	DD	041304d99r			; 11.0189
	DD	041335bfer			; 11.21
	DD	0413685c4r			; 11.4077
	DD	04139cc63r			; 11.6124
	DD	0413d316cr			; 11.8246
	DD	04140b692r			; 12.0446
	DD	041445da5r			; 12.2729
	DD	04148289ar			; 12.5099
	DD	0414c198dr			; 12.7562
	DD	0415032c7r			; 13.0124
	DD	0415476ber			; 13.279
	DD	04158e81er			; 13.5567
	DD	0415d89cer			; 13.8461
	DD	041625ef3r			; 14.1482
	DD	041676afcr			; 14.4636
	DD	0416cb1a8r			; 14.7934
	DD	04172370dr			; 15.1384
	DD	04177ffa7r			; 15.4999
	DD	0417e105fr			; 15.879
	DD	041823750r			; 16.277
	DD	041859030r			; 16.6954
	DD	04189161ar			; 17.1358
	DD	0418cccb7r			; 17.6
	DD	04190b815r			; 18.0899
	DD	04194dcbar			; 18.6078
	DD	041993fb2r			; 19.1561
	DD	0419de6a9r			; 19.7376
	DD	041a2d7ffr			; 20.3555
	DD	041a81ae7r			; 21.0131
	DD	041adb787r			; 21.7146
	DD	041b3b729r			; 22.4644
	DD	041ba2468r			; 23.2678
	DD	041c10b71r			; 24.1306
	DD	041c87a53r			; 25.0597
	DD	041d0815br			; 26.0632
	DD	041d9338dr			; 27.1502
	DD	041e2a73cr			; 28.3317
	DD	041ecf6ccr			; 29.6205
	DD	041f841a6r			; 31.0321
	DD	0420256bdr			; 32.5847
	DD	0420933f5r			; 34.3007
	DD	04210d45dr			; 36.2074
	DD	042195a68r			; 38.3383
	DD	04222f123r			; 40.7355
	DD	0422dcf18r			; 43.4522
	DD	0423a3a66r			; 46.557
	DD	042488ebfr			; 50.1394
	DD	042594667r			; 54.3188
	DD	0426d0814r			; 59.2579
	DD	042825e98r			; 65.1848
	DD	04290db6fr			; 72.4286
	DD	042a2f76br			; 81.4832
	DD	042ba3fe6r			; 93.1248
	DD	042d94b1dr			; 108.647
	DD	04302608er			; 130.377
	DD	04322f8fdr			; 162.973
	DD	043594c4br			; 217.298
	DD	043a2f962r			; 325.948
	DD	04422f97br			; 651.898
	DD	05a6816aar			; 1.63318e+16
	DD	0c422f97br			; -651.898
	DD	0c3a2f962r			; -325.948
	DD	0c3594c4br			; -217.298
	DD	0c322f8fdr			; -162.973
	DD	0c302608er			; -130.377
	DD	0c2d94b1dr			; -108.647
	DD	0c2ba3fe6r			; -93.1248
	DD	0c2a2f76br			; -81.4832
	DD	0c290db6fr			; -72.4286
	DD	0c2825e98r			; -65.1848
	DD	0c26d0814r			; -59.2579
	DD	0c2594667r			; -54.3188
	DD	0c2488ebfr			; -50.1394
	DD	0c23a3a66r			; -46.557
	DD	0c22dcf18r			; -43.4522
	DD	0c222f123r			; -40.7355
	DD	0c2195a68r			; -38.3383
	DD	0c210d45dr			; -36.2074
	DD	0c20933f5r			; -34.3007
	DD	0c20256bdr			; -32.5847
	DD	0c1f841a6r			; -31.0321
	DD	0c1ecf6ccr			; -29.6205
	DD	0c1e2a73cr			; -28.3317
	DD	0c1d9338dr			; -27.1502
	DD	0c1d0815br			; -26.0632
	DD	0c1c87a53r			; -25.0597
	DD	0c1c10b71r			; -24.1306
	DD	0c1ba2468r			; -23.2678
	DD	0c1b3b729r			; -22.4644
	DD	0c1adb787r			; -21.7146
	DD	0c1a81ae7r			; -21.0131
	DD	0c1a2d7ffr			; -20.3555
	DD	0c19de6a9r			; -19.7376
	DD	0c1993fb2r			; -19.1561
	DD	0c194dcbar			; -18.6078
	DD	0c190b815r			; -18.0899
	DD	0c18cccb7r			; -17.6
	DD	0c189161ar			; -17.1358
	DD	0c1859030r			; -16.6954
	DD	0c1823750r			; -16.277
	DD	0c17e105fr			; -15.879
	DD	0c177ffa7r			; -15.4999
	DD	0c172370dr			; -15.1384
	DD	0c16cb1a8r			; -14.7934
	DD	0c1676afcr			; -14.4636
	DD	0c1625ef3r			; -14.1482
	DD	0c15d89cer			; -13.8461
	DD	0c158e81er			; -13.5567
	DD	0c15476ber			; -13.279
	DD	0c15032c7r			; -13.0124
	DD	0c14c198dr			; -12.7562
	DD	0c148289ar			; -12.5099
	DD	0c1445da5r			; -12.2729
	DD	0c140b692r			; -12.0446
	DD	0c13d316cr			; -11.8246
	DD	0c139cc63r			; -11.6124
	DD	0c13685c4r			; -11.4077
	DD	0c1335bfer			; -11.21
	DD	0c1304d99r			; -11.0189
	DD	0c12d5937r			; -10.8343
	DD	0c12a7d8fr			; -10.6557
	DD	0c127b970r			; -10.4828
	DD	0c1250bbbr			; -10.3154
	DD	0c1227363r			; -10.1532
	DD	0c11fef6br			; -9.99595
	DD	0c11d7ee7r			; -9.84348
	DD	0c11b20f6r			; -9.69555
	DD	0c118d4c9r			; -9.55195
	DD	0c1169998r			; -9.4125
	DD	0c1146eaar			; -9.27702
	DD	0c112534er			; -9.14534
	DD	0c11046dfr			; -9.0173
	DD	0c10e48bfr			; -8.89276
	DD	0c10c585ar			; -8.77157
	DD	0c10a7524r			; -8.6536
	DD	0c1089e96r			; -8.53872
	DD	0c106d434r			; -8.42681
	DD	0c1051585r			; -8.31775
	DD	0c1036216r			; -8.21145
	DD	0c101b97er			; -8.10779
	DD	0c1001b53r			; -8.00667
	DD	0c0fd0e6cr			; -7.90801
	DD	0c0f9f991r			; -7.81171
	DD	0c0f6f764r			; -7.7177
	DD	0c0f4073dr			; -7.62588
	DD	0c0f1287br			; -7.53619
	DD	0c0ee5a85r			; -7.44855
	DD	0c0eb9cc7r			; -7.36289
	DD	0c0e8eeb5r			; -7.27914
	DD	0c0e64fcbr			; -7.19724
	DD	0c0e3bf88r			; -7.11713
	DD	0c0e13d71r			; -7.03875
	DD	0c0dec912r			; -6.96204
	DD	0c0dc61fbr			; -6.88696
	DD	0c0da07c0r			; -6.81345
	DD	0c0d7b9far			; -6.74145
	DD	0c0d57848r			; -6.67093
	DD	0c0d34249r			; -6.60184
	DD	0c0d117a3r			; -6.53414
	DD	0c0cef800r			; -6.46777
	DD	0c0cce30br			; -6.40272
	DD	0c0cad874r			; -6.33892
	DD	0c0c8d7eer			; -6.27636
	DD	0c0c6e12er			; -6.21499
	DD	0c0c4f3edr			; -6.15478
	DD	0c0c30fe6r			; -6.09569
	DD	0c0c134d7r			; -6.0377
	DD	0c0bf6280r			; -5.98077
	DD	0c0bd98a4r			; -5.92488
	DD	0c0bbd707r			; -5.87
	DD	0c0ba1d70r			; -5.81609
	DD	0c0b86ba9r			; -5.76314
	DD	0c0b6c17cr			; -5.71112
	DD	0c0b51eb6r			; -5.66
	DD	0c0b38325r			; -5.60976
	DD	0c0b1ee9br			; -5.56038
	DD	0c0b060e8r			; -5.51183
	DD	0c0aed9e0r			; -5.4641
	DD	0c0ad5958r			; -5.41716
	DD	0c0abdf27r			; -5.37099
	DD	0c0aa6b25r			; -5.32558
	DD	0c0a8fd29r			; -5.2809
	DD	0c0a79510r			; -5.23695
	DD	0c0a632b4r			; -5.19369
	DD	0c0a4d5f1r			; -5.15112
	DD	0c0a37ea7r			; -5.10921
	DD	0c0a22cb4r			; -5.06796
	DD	0c0a0dff7r			; -5.02734
	DD	0c09f9852r			; -4.98734
	DD	0c09e55a7r			; -4.94796
	DD	0c09d17d8r			; -4.90916
	DD	0c09bdecar			; -4.87095
	DD	0c09aaa60r			; -4.8333
	DD	0c0997a80r			; -4.7962
	DD	0c0984f11r			; -4.75965
	DD	0c09727f9r			; -4.72363
	DD	0c096051fr			; -4.68813
	DD	0c094e66er			; -4.65313
	DD	0c093cbccr			; -4.61863
	DD	0c092b524r			; -4.58461
	DD	0c091a261r			; -4.55107
	DD	0c090936dr			; -4.518
	DD	0c08f8834r			; -4.48538
	DD	0c08e80a2r			; -4.4532
	DD	0c08d7ca3r			; -4.42146
	DD	0c08c7c26r			; -4.39015
	DD	0c08b7f16r			; -4.35926
	DD	0c08a8564r			; -4.32878
	DD	0c0898efcr			; -4.2987
	DD	0c0889bd0r			; -4.26902
	DD	0c087abcdr			; -4.23972
	DD	0c086bee4r			; -4.2108
	DD	0c085d506r			; -4.18225
	DD	0c084ee23r			; -4.15407
	DD	0c0840a2cr			; -4.12624
	DD	0c0832914r			; -4.09876
	DD	0c0824acbr			; -4.07163
	DD	0c0816f46r			; -4.04483
	DD	0c0809675r			; -4.01837
	DD	0c07f8098r			; -3.99222
	DD	0c07dd97er			; -3.9664
	DD	0c07c3781r			; -3.94089
	DD	0c07a9a8br			; -3.91568
	DD	0c0790282r			; -3.89078
	DD	0c0776f52r			; -3.86617
	DD	0c075e0e2r			; -3.84185
	DD	0c074571er			; -3.81782
	DD	0c072d1efr			; -3.79406
	DD	0c0715142r			; -3.77058
	DD	0c06fd501r			; -3.74738
	DD	0c06e5d19r			; -3.72443
	DD	0c06ce976r			; -3.70175
	DD	0c06b7a05r			; -3.67932
	DD	0c06a0eb5r			; -3.65715
	DD	0c068a772r			; -3.63522
	DD	0c067442br			; -3.61354
	DD	0c065e4cfr			; -3.59209
	DD	0c064894dr			; -3.57088
	DD	0c0633194r			; -3.5499
	DD	0c061dd94r			; -3.52915
	DD	0c0608d3er			; -3.50862
	DD	0c05f4081r			; -3.48831
	DD	0c05df74fr			; -3.46822
	DD	0c05cb199r			; -3.44834
	DD	0c05b6f51r			; -3.42867
	DD	0c05a3068r			; -3.4092
	DD	0c058f4d0r			; -3.38994
	DD	0c057bc7cr			; -3.37088
	DD	0c056875fr			; -3.35201
	DD	0c055556cr			; -3.33334
	DD	0c0542695r			; -3.31485
	DD	0c052facfr			; -3.29656
	DD	0c051d20dr			; -3.27845
	DD	0c050ac44r			; -3.26051
	DD	0c04f8967r			; -3.24276
	DD	0c04e696br			; -3.22518
	DD	0c04d4c45r			; -3.20778
	DD	0c04c31ear			; -3.19055
	DD	0c04b1a4fr			; -3.17348
	DD	0c04a056ar			; -3.15658
	DD	0c048f32fr			; -3.13984
	DD	0c047e396r			; -3.12327
	DD	0c046d694r			; -3.10685
	DD	0c045cc1fr			; -3.09058
	DD	0c044c42er			; -3.07447
	DD	0c043beb7r			; -3.05852
	DD	0c042bbb1r			; -3.04271
	DD	0c041bb13r			; -3.02704
	DD	0c040bcd5r			; -3.01153
	DD	0c03fc0edr			; -2.99615
	DD	0c03ec754r			; -2.98092
	DD	0c03dd000r			; -2.96582
	DD	0c03cdae9r			; -2.95086
	DD	0c03be808r			; -2.93604
	DD	0c03af755r			; -2.92135
	DD	0c03a08c7r			; -2.90679
	DD	0c0391c58r			; -2.89235
	DD	0c03831ffr			; -2.87805
	DD	0c03749b6r			; -2.86387
	DD	0c0366375r			; -2.84982
	DD	0c0357f34r			; -2.83589
	DD	0c0349cefr			; -2.82208
	DD	0c033bc9cr			; -2.80839
	DD	0c032de36r			; -2.79481
	DD	0c03201b7r			; -2.78135
	DD	0c0312717r			; -2.76801
	DD	0c0304e50r			; -2.75478
	DD	0c02f775cr			; -2.74166
	DD	0c02ea235r			; -2.72865
	DD	0c02dced5r			; -2.71575
	DD	0c02cfd36r			; -2.70295
	DD	0c02c2d52r			; -2.69027
	DD	0c02b5f24r			; -2.67768
	DD	0c02a92a6r			; -2.6652
	DD	0c029c7d1r			; -2.65282
	DD	0c028fea2r			; -2.64054
	DD	0c0283712r			; -2.62836
	DD	0c027711dr			; -2.61628
	DD	0c026acbcr			; -2.60429
	DD	0c025e9ecr			; -2.5924
	DD	0c02528a7r			; -2.58061
	DD	0c02468e8r			; -2.5689
	DD	0c023aaaar			; -2.55729
	DD	0c022ede9r			; -2.54577
	DD	0c02232a0r			; -2.53434
	DD	0c02178cbr			; -2.523
	DD	0c020c064r			; -2.51174
	DD	0c0200967r			; -2.50057
	DD	0c01f53d1r			; -2.48949
	DD	0c01e9f9cr			; -2.47849
	DD	0c01decc4r			; -2.46758
	DD	0c01d3b46r			; -2.45674
	DD	0c01c8b1dr			; -2.44599
	DD	0c01bdc46r			; -2.43532
	DD	0c01b2ebbr			; -2.42473
	DD	0c01a827ar			; -2.41421
	DD	0c019d77er			; -2.40378
	DD	0c0192dc3r			; -2.39342
	DD	0c0188547r			; -2.38313
	DD	0c017de05r			; -2.37293
	DD	0c01737f9r			; -2.36279
	DD	0c0169321r			; -2.35273
	DD	0c015ef78r			; -2.34274
	DD	0c0154cfbr			; -2.33282
	DD	0c014aba6r			; -2.32298
	DD	0c0140b77r			; -2.3132
	DD	0c0136c6ar			; -2.30349
	DD	0c012ce7cr			; -2.29385
	DD	0c01231a9r			; -2.28428
	DD	0c01195eer			; -2.27478
	DD	0c010fb49r			; -2.26534
	DD	0c01061b6r			; -2.25596
	DD	0c00fc932r			; -2.24665
	DD	0c00f31bbr			; -2.23741
	DD	0c00e9b4cr			; -2.22823
	DD	0c00e05e4r			; -2.21911
	DD	0c00d7180r			; -2.21005
	DD	0c00cde1cr			; -2.20106
	DD	0c00c4bb6r			; -2.19212
	DD	0c00bba4cr			; -2.18325
	DD	0c00b29d9r			; -2.17443
	DD	0c00a9a5dr			; -2.16567
	DD	0c00a0bd4r			; -2.15697
	DD	0c0097e3cr			; -2.14833
	DD	0c008f192r			; -2.13974
	DD	0c00865d3r			; -2.13121
	DD	0c007dafdr			; -2.12274
	DD	0c007510fr			; -2.11432
	DD	0c006c804r			; -2.10596
	DD	0c0063fdcr			; -2.09765
	DD	0c005b893r			; -2.08939
	DD	0c0053227r			; -2.08119
	DD	0c004ac97r			; -2.07303
	DD	0c00427dfr			; -2.06493
	DD	0c003a3fer			; -2.05688
	DD	0c00320f1r			; -2.04889
	DD	0c0029eb6r			; -2.04094
	DD	0c0021d4cr			; -2.03304
	DD	0c0019cafr			; -2.02519
	DD	0c0011cder			; -2.01739
	DD	0c0009dd8r			; -2.00963
	DD	0c0001f99r			; -2.00193
	DD	0bfff4440r			; -1.99427
	DD	0bffe4ad6r			; -1.98666
	DD	0bffd52f0r			; -1.97909
	DD	0bffc5c8ar			; -1.97157
	DD	0bffb67a0r			; -1.9641
	DD	0bffa7430r			; -1.95667
	DD	0bff98234r			; -1.94929
	DD	0bff891a9r			; -1.94195
	DD	0bff7a28cr			; -1.93465
	DD	0bff6b4dar			; -1.92739
	DD	0bff5c88er			; -1.92018
	DD	0bff4dda6r			; -1.91301
	DD	0bff3f41dr			; -1.90589
	DD	0bff30bf2r			; -1.8988
	DD	0bff2251fr			; -1.89176
	DD	0bff13fa2r			; -1.88475
	DD	0bff05b78r			; -1.87779
	DD	0bfef789er			; -1.87087
	DD	0bfee9710r			; -1.86399
	DD	0bfedb6cbr			; -1.85714
	DD	0bfecd7ccr			; -1.85034
	DD	0bfebfa11r			; -1.84357
	DD	0bfeb1d95r			; -1.83684
	DD	0bfea4257r			; -1.83015
	DD	0bfe96853r			; -1.8235
	DD	0bfe88f87r			; -1.81688
	DD	0bfe7b7efr			; -1.8103
	DD	0bfe6e188r			; -1.80376
	DD	0bfe60c51r			; -1.79725
	DD	0bfe53846r			; -1.79078
	DD	0bfe46564r			; -1.78434
	DD	0bfe393a9r			; -1.77794
	DD	0bfe2c312r			; -1.77158
	DD	0bfe1f39cr			; -1.76525
	DD	0bfe12545r			; -1.75895
	DD	0bfe0580br			; -1.75269
	DD	0bfdf8bear			; -1.74646
	DD	0bfdec0e0r			; -1.74026
	DD	0bfddf6ecr			; -1.7341
	DD	0bfdd2e09r			; -1.72797
	DD	0bfdc6637r			; -1.72187
	DD	0bfdb9f72r			; -1.7158
	DD	0bfdad9b8r			; -1.70977
	DD	0bfda1507r			; -1.70377
	DD	0bfd9515dr			; -1.6978
	DD	0bfd88eb6r			; -1.69186
	DD	0bfd7cd12r			; -1.68595
	DD	0bfd70c6er			; -1.68007
	DD	0bfd64cc7r			; -1.67422
	DD	0bfd58e1br			; -1.6684
	DD	0bfd4d069r			; -1.66261
	DD	0bfd413adr			; -1.65685
	DD	0bfd357e7r			; -1.65112
	DD	0bfd29d13r			; -1.64542
	DD	0bfd1e331r			; -1.63975
	DD	0bfd12a3dr			; -1.6341
	DD	0bfd07236r			; -1.62849
	DD	0bfcfbb19r			; -1.6229
	DD	0bfcf04e6r			; -1.61734
	DD	0bfce4f99r			; -1.6118
	DD	0bfcd9b32r			; -1.6063
	DD	0bfcce7adr			; -1.60082
	DD	0bfcc350ar			; -1.59537
	DD	0bfcb8345r			; -1.58994
	DD	0bfcad25fr			; -1.58455
	DD	0bfca2254r			; -1.57917
	DD	0bfc97322r			; -1.57383
	DD	0bfc8c4c9r			; -1.56851
	DD	0bfc81746r			; -1.56321
	DD	0bfc76a98r			; -1.55794
	DD	0bfc6bebcr			; -1.5527
	DD	0bfc613b1r			; -1.54748
	DD	0bfc56976r			; -1.54228
	DD	0bfc4c009r			; -1.53711
	DD	0bfc41767r			; -1.53196
	DD	0bfc36f90r			; -1.52684
	DD	0bfc2c882r			; -1.52174
	DD	0bfc2223br			; -1.51667
	DD	0bfc17cb9r			; -1.51162
	DD	0bfc0d7fcr			; -1.50659
	DD	0bfc03401r			; -1.50159
	DD	0bfbf90c7r			; -1.49661
	DD	0bfbeee4dr			; -1.49165
	DD	0bfbe4c90r			; -1.48671
	DD	0bfbdab90r			; -1.4818
	DD	0bfbd0b4ar			; -1.47691
	DD	0bfbc6bbfr			; -1.47204
	DD	0bfbbccebr			; -1.46719
	DD	0bfbb2ecer			; -1.46237
	DD	0bfba9166r			; -1.45756
	DD	0bfb9f4b2r			; -1.45278
	DD	0bfb958b0r			; -1.44802
	DD	0bfb8bd5fr			; -1.44328
	DD	0bfb822ber			; -1.43856
	DD	0bfb788ccr			; -1.43386
	DD	0bfb6ef86r			; -1.42918
	DD	0bfb656ecr			; -1.42453
	DD	0bfb5befcr			; -1.41989
	DD	0bfb527b6r			; -1.41527
	DD	0bfb49117r			; -1.41068
	DD	0bfb3fb1er			; -1.4061
	DD	0bfb365cbr			; -1.40154
	DD	0bfb2d11cr			; -1.39701
	DD	0bfb23d10r			; -1.39249
	DD	0bfb1a9a5r			; -1.38799
	DD	0bfb116dbr			; -1.38351
	DD	0bfb084b0r			; -1.37905
	DD	0bfaff323r			; -1.37461
	DD	0bfaf6232r			; -1.37018
	DD	0bfaed1der			; -1.36578
	DD	0bfae4224r			; -1.36139
	DD	0bfadb303r			; -1.35703
	DD	0bfad247ar			; -1.35268
	DD	0bfac9689r			; -1.34834
	DD	0bfac092dr			; -1.34403
	DD	0bfab7c66r			; -1.33973
	DD	0bfaaf034r			; -1.33546
	DD	0bfaa6494r			; -1.33119
	DD	0bfa9d985r			; -1.32695
	DD	0bfa94f08r			; -1.32272
	DD	0bfa8c519r			; -1.31851
	DD	0bfa83bbar			; -1.31432
	DD	0bfa7b2e8r			; -1.31015
	DD	0bfa72aa2r			; -1.30599
	DD	0bfa6a2e8r			; -1.30185
	DD	0bfa61bb9r			; -1.29772
	DD	0bfa59513r			; -1.29361
	DD	0bfa50ef5r			; -1.28952
	DD	0bfa4895fr			; -1.28544
	DD	0bfa40450r			; -1.28138
	DD	0bfa37fc6r			; -1.27734
	DD	0bfa2fbc1r			; -1.27331
	DD	0bfa27840r			; -1.26929
	DD	0bfa1f541r			; -1.2653
	DD	0bfa172c5r			; -1.26131
	DD	0bfa0f0car			; -1.25735
	DD	0bfa06f4er			; -1.2534
	DD	0bf9fee52r			; -1.24946
	DD	0bf9f6dd4r			; -1.24554
	DD	0bf9eedd4r			; -1.24163
	DD	0bf9e6e50r			; -1.23774
	DD	0bf9def48r			; -1.23386
	DD	0bf9d70bbr			; -1.23
	DD	0bf9cf2a8r			; -1.22616
	DD	0bf9c750er			; -1.22232
	DD	0bf9bf7ecr			; -1.2185
	DD	0bf9b7b42r			; -1.2147
	DD	0bf9aff0fr			; -1.21091
	DD	0bf9a8352r			; -1.20713
	DD	0bf9a0809r			; -1.20337
	DD	0bf998d35r			; -1.19962
	DD	0bf9912d5r			; -1.19589
	DD	0bf9898e7r			; -1.19217
	DD	0bf981f6br			; -1.18846
	DD	0bf97a660r			; -1.18476
	DD	0bf972dc6r			; -1.18108
	DD	0bf96b59cr			; -1.17742
	DD	0bf963de0r			; -1.17376
	DD	0bf95c693r			; -1.17012
	DD	0bf954fb3r			; -1.16649
	DD	0bf94d93fr			; -1.16288
	DD	0bf946338r			; -1.15928
	DD	0bf93ed9cr			; -1.15569
	DD	0bf93786ar			; -1.15211
	DD	0bf9303a3r			; -1.14855
	DD	0bf928f44r			; -1.145
	DD	0bf921b4er			; -1.14146
	DD	0bf91a7c0r			; -1.13793
	DD	0bf913499r			; -1.13442
	DD	0bf90c1d8r			; -1.13092
	DD	0bf904f7dr			; -1.12743
	DD	0bf8fdd88r			; -1.12395
	DD	0bf8f6bf6r			; -1.12048
	DD	0bf8efac8r			; -1.11703
	DD	0bf8e89fer			; -1.11359
	DD	0bf8e1996r			; -1.11016
	DD	0bf8da990r			; -1.10674
	DD	0bf8d39ebr			; -1.10333
	DD	0bf8ccaa6r			; -1.09993
	DD	0bf8c5bc2r			; -1.09655
	DD	0bf8bed3dr			; -1.09318
	DD	0bf8b7f16r			; -1.08982
	DD	0bf8b114er			; -1.08647
	DD	0bf8aa3e3r			; -1.08313
	DD	0bf8a36d5r			; -1.0798
	DD	0bf89ca24r			; -1.07648
	DD	0bf895dcer			; -1.07318
	DD	0bf88f1d4r			; -1.06988
	DD	0bf888634r			; -1.0666
	DD	0bf881aeer			; -1.06332
	DD	0bf87b001r			; -1.06006
	DD	0bf87456dr			; -1.05681
	DD	0bf86db32r			; -1.05356
	DD	0bf86714fr			; -1.05033
	DD	0bf8607c2r			; -1.04711
	DD	0bf859e8cr			; -1.0439
	DD	0bf8535adr			; -1.0407
	DD	0bf84cd23r			; -1.03751
	DD	0bf8464eer			; -1.03433
	DD	0bf83fd0dr			; -1.03116
	DD	0bf839581r			; -1.028
	DD	0bf832e48r			; -1.02485
	DD	0bf82c762r			; -1.02171
	DD	0bf8260cer			; -1.01858
	DD	0bf81fa8dr			; -1.01546
	DD	0bf81949dr			; -1.01235
	DD	0bf812efdr			; -1.00925
	DD	0bf80c9aer			; -1.00615
	DD	0bf8064afr			; -1.00307
	DD	0bf800000r			; -1
	DD	0bf7f373fr			; -0.996937
	DD	0bf7e6f1br			; -0.993883
	DD	0bf7da793r			; -0.990838
	DD	0bf7ce0a6r			; -0.987803
	DD	0bf7c1a53r			; -0.984777
	DD	0bf7b5499r			; -0.98176
	DD	0bf7a8f77r			; -0.978752
	DD	0bf79caedr			; -0.975753
	DD	0bf7906f9r			; -0.972763
	DD	0bf78439br			; -0.969782
	DD	0bf7780d1r			; -0.966809
	DD	0bf76be9br			; -0.963846
	DD	0bf75fcf7r			; -0.960891
	DD	0bf753be6r			; -0.957945
	DD	0bf747b66r			; -0.955008
	DD	0bf73bb75r			; -0.952079
	DD	0bf72fc15r			; -0.949159
	DD	0bf723d42r			; -0.946247
	DD	0bf717efdr			; -0.943344
	DD	0bf70c145r			; -0.940449
	DD	0bf700419r			; -0.937563
	DD	0bf6f4778r			; -0.934684
	DD	0bf6e8b62r			; -0.931814
	DD	0bf6dcfd4r			; -0.928952
	DD	0bf6d14d0r			; -0.926099
	DD	0bf6c5a53r			; -0.923253
	DD	0bf6ba05dr			; -0.920416
	DD	0bf6ae6eer			; -0.917586
	DD	0bf6a2e04r			; -0.914765
	DD	0bf69759er			; -0.911951
	DD	0bf68bdbdr			; -0.909145
	DD	0bf68065er			; -0.906347
	DD	0bf674f82r			; -0.903557
	DD	0bf669928r			; -0.900774
	DD	0bf65e34er			; -0.898
	DD	0bf652df5r			; -0.895232
	DD	0bf64791ar			; -0.892473
	DD	0bf63c4bfr			; -0.889721
	DD	0bf6310e1r			; -0.886976
	DD	0bf625d80r			; -0.884239
	DD	0bf61aa9cr			; -0.88151
	DD	0bf60f834r			; -0.878787
	DD	0bf604646r			; -0.876072
	DD	0bf5f94d3r			; -0.873365
	DD	0bf5ee3d9r			; -0.870664
	DD	0bf5e3358r			; -0.867971
	DD	0bf5d834fr			; -0.865285
	DD	0bf5cd3ber			; -0.862606
	DD	0bf5c24a4r			; -0.859934
	DD	0bf5b75ffr			; -0.857269
	DD	0bf5ac7d0r			; -0.854611
	DD	0bf5a1a16r			; -0.851961
	DD	0bf596cd0r			; -0.849317
	DD	0bf58bffdr			; -0.84668
	DD	0bf58139er			; -0.844049
	DD	0bf5767b0r			; -0.841426
	DD	0bf56bc34r			; -0.838809
	DD	0bf561128r			; -0.836199
	DD	0bf55668dr			; -0.833596
	DD	0bf54bc61r			; -0.830999
	DD	0bf5412a4r			; -0.828409
	DD	0bf536956r			; -0.825826
	DD	0bf52c075r			; -0.823249
	DD	0bf521801r			; -0.820679
	DD	0bf516ffar			; -0.818115
	DD	0bf50c85fr			; -0.815557
	DD	0bf50212er			; -0.813006
	DD	0bf4f7a69r			; -0.810462
	DD	0bf4ed40dr			; -0.807923
	DD	0bf4e2e1br			; -0.805391
	DD	0bf4d8892r			; -0.802865
	DD	0bf4ce370r			; -0.800345
	DD	0bf4c3eb7r			; -0.797832
	DD	0bf4b9a65r			; -0.795325
	DD	0bf4af679r			; -0.792823
	DD	0bf4a52f3r			; -0.790328
	DD	0bf49afd3r			; -0.787839
	DD	0bf490d17r			; -0.785356
	DD	0bf486ac0r			; -0.782879
	DD	0bf47c8ccr			; -0.780408
	DD	0bf47273br			; -0.777942
	DD	0bf46860dr			; -0.775483
	DD	0bf45e541r			; -0.773029
	DD	0bf4544d7r			; -0.770582
	DD	0bf44a4cer			; -0.76814
	DD	0bf440525r			; -0.765703
	DD	0bf4365dcr			; -0.763273
	DD	0bf42c6f2r			; -0.760848
	DD	0bf422867r			; -0.758429
	DD	0bf418a3ar			; -0.756015
	DD	0bf40ec6cr			; -0.753608
	DD	0bf404efar			; -0.751205
	DD	0bf3fb1e6r			; -0.748808
	DD	0bf3f152dr			; -0.746417
	DD	0bf3e78d1r			; -0.744031
	DD	0bf3ddccfr			; -0.741651
	DD	0bf3d4129r			; -0.739276
	DD	0bf3ca5ddr			; -0.736906
	DD	0bf3c0aear			; -0.734542
	DD	0bf3b7051r			; -0.732183
	DD	0bf3ad610r			; -0.729829
	DD	0bf3a3c28r			; -0.72748
	DD	0bf39a298r			; -0.725137
	DD	0bf39095fr			; -0.722799
	DD	0bf38707dr			; -0.720466
	DD	0bf37d7f2r			; -0.718139
	DD	0bf373fbcr			; -0.715816
	DD	0bf36a7dcr			; -0.713499
	DD	0bf361051r			; -0.711186
	DD	0bf35791ar			; -0.708879
	DD	0bf34e238r			; -0.706577
	DD	0bf344ba9r			; -0.704279
	DD	0bf33b56dr			; -0.701987
	DD	0bf331f84r			; -0.6997
	DD	0bf3289edr			; -0.697417
	DD	0bf31f4a9r			; -0.695139
	DD	0bf315fb5r			; -0.692867
	DD	0bf30cb13r			; -0.690599
	DD	0bf3036c1r			; -0.688335
	DD	0bf2fa2bfr			; -0.686077
	DD	0bf2f0f0dr			; -0.683823
	DD	0bf2e7baar			; -0.681574
	DD	0bf2de896r			; -0.67933
	DD	0bf2d55d0r			; -0.677091
	DD	0bf2cc359r			; -0.674856
	DD	0bf2c312fr			; -0.672625
	DD	0bf2b9f52r			; -0.6704
	DD	0bf2b0dc1r			; -0.668179
	DD	0bf2a7c7dr			; -0.665962
	DD	0bf29eb85r			; -0.66375
	DD	0bf295ad9r			; -0.661542
	DD	0bf28ca77r			; -0.659339
	DD	0bf283a60r			; -0.657141
	DD	0bf27aa94r			; -0.654947
	DD	0bf271b11r			; -0.652757
	DD	0bf268bd8r			; -0.650571
	DD	0bf25fce8r			; -0.64839
	DD	0bf256e41r			; -0.646214
	DD	0bf24dfe2r			; -0.644041
	DD	0bf2451cbr			; -0.641873
	DD	0bf23c3fcr			; -0.639709
	DD	0bf233673r			; -0.63755
	DD	0bf22a932r			; -0.635394
	DD	0bf221c37r			; -0.633243
	DD	0bf218f82r			; -0.631096
	DD	0bf210313r			; -0.628953
	DD	0bf2076e9r			; -0.626814
	DD	0bf1feb03r			; -0.62468
	DD	0bf1f5f63r			; -0.622549
	DD	0bf1ed407r			; -0.620423
	DD	0bf1e48eer			; -0.6183
	DD	0bf1dbe19r			; -0.616182
	DD	0bf1d3387r			; -0.614067
	DD	0bf1ca938r			; -0.611957
	DD	0bf1c1f2cr			; -0.609851
	DD	0bf1b9561r			; -0.607748
	DD	0bf1b0bd8r			; -0.605649
	DD	0bf1a8291r			; -0.603555
	DD	0bf19f98ar			; -0.601464
	DD	0bf1970c4r			; -0.599377
	DD	0bf18e83fr			; -0.597294
	DD	0bf185ff9r			; -0.595214
	DD	0bf17d7f3r			; -0.593139
	DD	0bf17502dr			; -0.591067
	DD	0bf16c8a5r			; -0.588999
	DD	0bf16415cr			; -0.586935
	DD	0bf15ba52r			; -0.584874
	DD	0bf153385r			; -0.582817
	DD	0bf14acf6r			; -0.580764
	DD	0bf1426a4r			; -0.578715
	DD	0bf13a08fr			; -0.576669
	DD	0bf131ab7r			; -0.574626
	DD	0bf12951cr			; -0.572588
	DD	0bf120fbcr			; -0.570553
	DD	0bf118a98r			; -0.568521
	DD	0bf1105afr			; -0.566493
	DD	0bf108102r			; -0.564469
	DD	0bf0ffc8fr			; -0.562447
	DD	0bf0f7857r			; -0.56043
	DD	0bf0ef459r			; -0.558416
	DD	0bf0e7095r			; -0.556405
	DD	0bf0ded0ar			; -0.554398
	DD	0bf0d69b9r			; -0.552394
	DD	0bf0ce6a0r			; -0.550394
	DD	0bf0c63c0r			; -0.548397
	DD	0bf0be118r			; -0.546403
	DD	0bf0b5ea9r			; -0.544413
	DD	0bf0adc71r			; -0.542426
	DD	0bf0a5a70r			; -0.540442
	DD	0bf09d8a7r			; -0.538462
	DD	0bf095715r			; -0.536485
	DD	0bf08d5b9r			; -0.534511
	DD	0bf085493r			; -0.532541
	DD	0bf07d3a3r			; -0.530573
	DD	0bf0752e9r			; -0.528609
	DD	0bf06d265r			; -0.526648
	DD	0bf065215r			; -0.52469
	DD	0bf05d1fbr			; -0.522735
	DD	0bf055215r			; -0.520784
	DD	0bf04d263r			; -0.518835
	DD	0bf0452e5r			; -0.51689
	DD	0bf03d39br			; -0.514948
	DD	0bf035484r			; -0.513008
	DD	0bf02d5a1r			; -0.511072
	DD	0bf0256f0r			; -0.509139
	DD	0bf01d872r			; -0.507209
	DD	0bf015a26r			; -0.505282
	DD	0bf00dc0dr			; -0.503358
	DD	0bf005e25r			; -0.501437
	DD	0beffc0der			; -0.499518
	DD	0befec5d4r			; -0.497603
	DD	0befdcb2cr			; -0.495691
	DD	0befcd0e6r			; -0.493781
	DD	0befbd701r			; -0.491875
	DD	0befadd7cr			; -0.489971
	DD	0bef9e457r			; -0.48807
	DD	0bef8eb91r			; -0.486172
	DD	0bef7f32br			; -0.484277
	DD	0bef6fb23r			; -0.482385
	DD	0bef60378r			; -0.480495
	DD	0bef50c2cr			; -0.478608
	DD	0bef4153cr			; -0.476725
	DD	0bef31ea8r			; -0.474843
	DD	0bef22870r			; -0.472965
	DD	0bef13294r			; -0.471089
	DD	0bef03d13r			; -0.469216
	DD	0beef47ecr			; -0.467346
	DD	0beee531fr			; -0.465478
	DD	0beed5eabr			; -0.463613
	DD	0beec6a90r			; -0.461751
	DD	0beeb76cer			; -0.459891
	DD	0beea8364r			; -0.458034
	DD	0bee99051r			; -0.456179
	DD	0bee89d96r			; -0.454327
	DD	0bee7ab31r			; -0.452478
	DD	0bee6b922r			; -0.450631
	DD	0bee5c768r			; -0.448787
	DD	0bee4d604r			; -0.446945
	DD	0bee3e4f4r			; -0.445106
	DD	0bee2f439r			; -0.44327
	DD	0bee203d1r			; -0.441435
	DD	0bee113bdr			; -0.439604
	DD	0bee023fbr			; -0.437775
	DD	0bedf348cr			; -0.435948
	DD	0bede456fr			; -0.434123
	DD	0bedd56a3r			; -0.432302
	DD	0bedc6828r			; -0.430482
	DD	0bedb79fer			; -0.428665
	DD	0beda8c24r			; -0.42685
	DD	0bed99e9ar			; -0.425038
	DD	0bed8b15fr			; -0.423228
	DD	0bed7c473r			; -0.421421
	DD	0bed6d7d5r			; -0.419615
	DD	0bed5eb85r			; -0.417812
	DD	0bed4ff82r			; -0.416012
	DD	0bed413cdr			; -0.414214
	DD	0bed32864r			; -0.412418
	DD	0bed23d47r			; -0.410624
	DD	0bed15277r			; -0.408832
	DD	0bed067f1r			; -0.407043
	DD	0becf7db7r			; -0.405256
	DD	0bece93c7r			; -0.403471
	DD	0becdaa21r			; -0.401689
	DD	0beccc0c4r			; -0.399908
	DD	0becbd7b1r			; -0.39813
	DD	0becaeee7r			; -0.396354
	DD	0beca0666r			; -0.39458
	DD	0bec91e2cr			; -0.392808
	DD	0bec8363ar			; -0.391039
	DD	0bec74e8fr			; -0.389271
	DD	0bec6672ar			; -0.387506
	DD	0bec5800dr			; -0.385743
	DD	0bec49935r			; -0.383981
	DD	0bec3b2a3r			; -0.382222
	DD	0bec2cc56r			; -0.380465
	DD	0bec1e64dr			; -0.37871
	DD	0bec10089r			; -0.376957
	DD	0bec01b0ar			; -0.375206
	DD	0bebf35cdr			; -0.373457
	DD	0bebe50d4r			; -0.37171
	DD	0bebd6c1er			; -0.369965
	DD	0bebc87aar			; -0.368223
	DD	0bebba378r			; -0.366482
	DD	0bebabf88r			; -0.364743
	DD	0beb9dbd9r			; -0.363005
	DD	0beb8f86br			; -0.36127
	DD	0beb8153dr			; -0.359537
	DD	0beb73250r			; -0.357806
	DD	0beb64fa2r			; -0.356076
	DD	0beb56d34r			; -0.354349
	DD	0beb48b04r			; -0.352623
	DD	0beb3a913r			; -0.350899
	DD	0beb2c761r			; -0.349177
	DD	0beb1e5ecr			; -0.347457
	DD	0beb104b5r			; -0.345739
	DD	0beb023bbr			; -0.344023
	DD	0beaf42fer			; -0.342308
	DD	0beae627dr			; -0.340595
	DD	0bead8238r			; -0.338884
	DD	0beaca22fr			; -0.337175
	DD	0beabc261r			; -0.335467
	DD	0beaae2cer			; -0.333762
	DD	0beaa0375r			; -0.332058
	DD	0bea92457r			; -0.330355
	DD	0bea84573r			; -0.328655
	DD	0bea766c8r			; -0.326956
	DD	0bea68856r			; -0.325259
	DD	0bea5aa1dr			; -0.323563
	DD	0bea4cc1dr			; -0.32187
	DD	0bea3ee54r			; -0.320178
	DD	0bea310c4r			; -0.318487
	DD	0bea2336br			; -0.316799
	DD	0bea15648r			; -0.315111
	DD	0bea0795dr			; -0.313426
	DD	0be9f9ca8r			; -0.311742
	DD	0be9ec029r			; -0.31006
	DD	0be9de3dfr			; -0.308379
	DD	0be9d07cbr			; -0.3067
	DD	0be9c2becr			; -0.305023
	DD	0be9b5042r			; -0.303347
	DD	0be9a74ccr			; -0.301672
	DD	0be999989r			; -0.3
	DD	0be98be7br			; -0.298328
	DD	0be97e3a0r			; -0.296659
	DD	0be9708f7r			; -0.29499
	DD	0be962e82r			; -0.293324
	DD	0be95543er			; -0.291658
	DD	0be947a2dr			; -0.289995
	DD	0be93a04dr			; -0.288332
	DD	0be92c69fr			; -0.286672
	DD	0be91ed21r			; -0.285012
	DD	0be9113d5r			; -0.283354
	DD	0be903ab8r			; -0.281698
	DD	0be8f61ccr			; -0.280043
	DD	0be8e890fr			; -0.278389
	DD	0be8db082r			; -0.276737
	DD	0be8cd824r			; -0.275087
	DD	0be8bfff4r			; -0.273437
	DD	0be8b27f3r			; -0.271789
	DD	0be8a5020r			; -0.270143
	DD	0be89787br			; -0.268497
	DD	0be88a103r			; -0.266853
	DD	0be87c9b8r			; -0.265211
	DD	0be86f29ar			; -0.26357
	DD	0be861ba9r			; -0.26193
	DD	0be8544e4r			; -0.260291
	DD	0be846e4ar			; -0.258654
	DD	0be8397ddr			; -0.257018
	DD	0be82c19ar			; -0.255383
	DD	0be81eb83r			; -0.25375
	DD	0be811596r			; -0.252118
	DD	0be803fd4r			; -0.250487
	DD	0be7ed477r			; -0.248857
	DD	0be7d2999r			; -0.247229
	DD	0be7b7f0fr			; -0.245602
	DD	0be79d4d6r			; -0.243976
	DD	0be782af0r			; -0.242351
	DD	0be76815ar			; -0.240728
	DD	0be74d815r			; -0.239106
	DD	0be732f20r			; -0.237484
	DD	0be718679r			; -0.235865
	DD	0be6fde22r			; -0.234246
	DD	0be6e3619r			; -0.232628
	DD	0be6c8e5dr			; -0.231012
	DD	0be6ae6edr			; -0.229397
	DD	0be693fcbr			; -0.227782
	DD	0be6798f3r			; -0.226169
	DD	0be65f267r			; -0.224558
	DD	0be644c26r			; -0.222947
	DD	0be62a62er			; -0.221337
	DD	0be610080r			; -0.219728
	DD	0be5f5b1ar			; -0.218121
	DD	0be5db5fdr			; -0.216515
	DD	0be5c1127r			; -0.214909
	DD	0be5a6c98r			; -0.213305
	DD	0be58c84fr			; -0.211702
	DD	0be57244dr			; -0.210099
	DD	0be558090r			; -0.208498
	DD	0be53dd17r			; -0.206898
	DD	0be5239e3r			; -0.205299
	DD	0be5096f2r			; -0.203701
	DD	0be4ef444r			; -0.202104
	DD	0be4d51d9r			; -0.200508
	DD	0be4bafafr			; -0.198912
	DD	0be4a0dc7r			; -0.197318
	DD	0be486c1fr			; -0.195725
	DD	0be46cab8r			; -0.194133
	DD	0be452990r			; -0.192541
	DD	0be4388a8r			; -0.190951
	DD	0be41e7fer			; -0.189362
	DD	0be404791r			; -0.187773
	DD	0be3ea763r			; -0.186185
	DD	0be3d0771r			; -0.184599
	DD	0be3b67bbr			; -0.183013
	DD	0be39c841r			; -0.181428
	DD	0be382902r			; -0.179844
	DD	0be3689fer			; -0.178261
	DD	0be34eb34r			; -0.176678
	DD	0be334ca4r			; -0.175097
	DD	0be31ae4dr			; -0.173516
	DD	0be30102er			; -0.171937
	DD	0be2e7246r			; -0.170358
	DD	0be2cd497r			; -0.16878
	DD	0be2b371er			; -0.167202
	DD	0be2999dbr			; -0.165626
	DD	0be27fccer			; -0.16405
	DD	0be265ff7r			; -0.162475
	DD	0be24c354r			; -0.160901
	DD	0be2326e5r			; -0.159328
	DD	0be218aaar			; -0.157756
	DD	0be1feea1r			; -0.156184
	DD	0be1e52ccr			; -0.154613
	DD	0be1cb728r			; -0.153042
	DD	0be1b1bb6r			; -0.151473
	DD	0be198074r			; -0.149904
	DD	0be17e564r			; -0.148336
	DD	0be164a83r			; -0.146769
	DD	0be14afd1r			; -0.145202
	DD	0be13154er			; -0.143636
	DD	0be117afar			; -0.142071
	DD	0be0fe0d3r			; -0.140506
	DD	0be0e46d9r			; -0.138942
	DD	0be0cad0dr			; -0.137379
	DD	0be0b136cr			; -0.135816
	DD	0be0979f7r			; -0.134254
	DD	0be07e0aer			; -0.132693
	DD	0be06478fr			; -0.131132
	DD	0be04ae9ar			; -0.129572
	DD	0be0315cer			; -0.128013
	DD	0be017d2cr			; -0.126454
	DD	0bdffc965r			; -0.124896
	DD	0bdfc98c2r			; -0.123338
	DD	0bdf9686er			; -0.121781
	DD	0bdf63868r			; -0.120225
	DD	0bdf308afr			; -0.118669
	DD	0bdefd942r			; -0.117114
	DD	0bdecaa20r			; -0.115559
	DD	0bde97b48r			; -0.114005
	DD	0bde64cb9r			; -0.112451
	DD	0bde31e72r			; -0.110898
	DD	0bddff072r			; -0.109345
	DD	0bddcc2b7r			; -0.107793
	DD	0bdd99542r			; -0.106242
	DD	0bdd66810r			; -0.104691
	DD	0bdd33b22r			; -0.10314
	DD	0bdd00e75r			; -0.10159
	DD	0bdcce209r			; -0.100041
	DD	0bdc9b5dcr			; -0.0984914
	DD	0bdc689efr			; -0.0969428
	DD	0bdc35e3fr			; -0.0953946
	DD	0bdc032cdr			; -0.0938469
	DD	0bdbd0796r			; -0.0922996
	DD	0bdb9dc99r			; -0.0907528
	DD	0bdb6b1d7r			; -0.0892064
	DD	0bdb3874dr			; -0.0876604
	DD	0bdb05cfcr			; -0.0861149
	DD	0bdad32e1r			; -0.0845697
	DD	0bdaa08fbr			; -0.0830249
	DD	0bda6df4br			; -0.0814806
	DD	0bda3b5cfr			; -0.0799366
	DD	0bda08c85r			; -0.078393
	DD	0bd9d636dr			; -0.0768498
	DD	0bd9a3a86r			; -0.0753069
	DD	0bd9711cer			; -0.0737644
	DD	0bd93e946r			; -0.0722223
	DD	0bd90c0ebr			; -0.0706805
	DD	0bd8d98ber			; -0.069139
	DD	0bd8a70bcr			; -0.0675978
	DD	0bd8748e5r			; -0.066057
	DD	0bd842138r			; -0.0645165
	DD	0bd80f9b4r			; -0.0629763
	DD	0bd7ba4afr			; -0.0614364
	DD	0bd755645r			; -0.0598967
	DD	0bd6f0826r			; -0.0583574
	DD	0bd68ba52r			; -0.0568183
	DD	0bd626cc5r			; -0.0552795
	DD	0bd5c1f7fr			; -0.053741
	DD	0bd55d27dr			; -0.0522027
	DD	0bd4f85bcr			; -0.0506646
	DD	0bd49393cr			; -0.0491268
	DD	0bd42ecfar			; -0.0475893
	DD	0bd3ca0f5r			; -0.0460519
	DD	0bd36552ar			; -0.0445148
	DD	0bd300997r			; -0.0429779
	DD	0bd29be3ar			; -0.0414412
	DD	0bd237312r			; -0.0399047
	DD	0bd1d281cr			; -0.0383683
	DD	0bd16dd57r			; -0.0368322
	DD	0bd1092c1r			; -0.0352962
	DD	0bd0a4857r			; -0.0337604
	DD	0bd03fe18r			; -0.0322247
	DD	0bcfb6803r			; -0.0306892
	DD	0bceed424r			; -0.0291539
	DD	0bce2408er			; -0.0276187
	DD	0bcd5ad3fr			; -0.0260836
	DD	0bcc91a31r			; -0.0245486
	DD	0bcbc8762r			; -0.0230138
	DD	0bcaff4ccr			; -0.021479
	DD	0bca3626dr			; -0.0199444
	DD	0bc96d040r			; -0.0184098
	DD	0bc8a3e42r			; -0.0168754
	DD	0bc7b58ddr			; -0.015341
	DD	0bc623584r			; -0.0138067
	DD	0bc491270r			; -0.0122725
	DD	0bc2fef9ar			; -0.0107383
	DD	0bc16ccfbr			; -0.00920414
	DD	0bbfb5514r			; -0.00767005
	DD	0bbc91080r			; -0.006136
	DD	0bb96cc2ar			; -0.00460197
	DD	0bb491004r			; -0.00306797
	DD	0bac90fe5r			; -0.00153398
	DD	0a50d3000r			; -1.22461e-16
	DD	03ac90fe5r			; 0.00153398
	DD	03b491004r			; 0.00306797
	DD	03b96cc2ar			; 0.00460197
	DD	03bc91080r			; 0.006136
	DD	03bfb5514r			; 0.00767005
	DD	03c16ccfbr			; 0.00920414
	DD	03c2fef9ar			; 0.0107383
	DD	03c491270r			; 0.0122725
	DD	03c623584r			; 0.0138067
	DD	03c7b58ddr			; 0.015341
	DD	03c8a3e42r			; 0.0168754
	DD	03c96d040r			; 0.0184098
	DD	03ca3626dr			; 0.0199444
	DD	03caff4ccr			; 0.021479
	DD	03cbc8762r			; 0.0230138
	DD	03cc91a31r			; 0.0245486
	DD	03cd5ad3fr			; 0.0260836
	DD	03ce2408er			; 0.0276187
	DD	03ceed424r			; 0.0291539
	DD	03cfb6803r			; 0.0306892
	DD	03d03fe18r			; 0.0322247
	DD	03d0a4857r			; 0.0337604
	DD	03d1092c1r			; 0.0352962
	DD	03d16dd57r			; 0.0368322
	DD	03d1d281cr			; 0.0383683
	DD	03d237312r			; 0.0399047
	DD	03d29be3ar			; 0.0414412
	DD	03d300997r			; 0.0429779
	DD	03d36552ar			; 0.0445148
	DD	03d3ca0f5r			; 0.0460519
	DD	03d42ecfar			; 0.0475893
	DD	03d49393cr			; 0.0491268
	DD	03d4f85bcr			; 0.0506646
	DD	03d55d27dr			; 0.0522027
	DD	03d5c1f7fr			; 0.053741
	DD	03d626cc5r			; 0.0552795
	DD	03d68ba52r			; 0.0568183
	DD	03d6f0826r			; 0.0583574
	DD	03d755645r			; 0.0598967
	DD	03d7ba4afr			; 0.0614364
	DD	03d80f9b4r			; 0.0629763
	DD	03d842138r			; 0.0645165
	DD	03d8748e5r			; 0.066057
	DD	03d8a70bcr			; 0.0675978
	DD	03d8d98ber			; 0.069139
	DD	03d90c0ebr			; 0.0706805
	DD	03d93e946r			; 0.0722223
	DD	03d9711cer			; 0.0737644
	DD	03d9a3a86r			; 0.0753069
	DD	03d9d636dr			; 0.0768498
	DD	03da08c85r			; 0.078393
	DD	03da3b5cfr			; 0.0799366
	DD	03da6df4br			; 0.0814806
	DD	03daa08fbr			; 0.0830249
	DD	03dad32e1r			; 0.0845697
	DD	03db05cfcr			; 0.0861149
	DD	03db3874dr			; 0.0876604
	DD	03db6b1d7r			; 0.0892064
	DD	03db9dc99r			; 0.0907528
	DD	03dbd0796r			; 0.0922996
	DD	03dc032cdr			; 0.0938469
	DD	03dc35e3fr			; 0.0953946
	DD	03dc689efr			; 0.0969428
	DD	03dc9b5dcr			; 0.0984914
	DD	03dcce209r			; 0.100041
	DD	03dd00e75r			; 0.10159
	DD	03dd33b22r			; 0.10314
	DD	03dd66810r			; 0.104691
	DD	03dd99542r			; 0.106242
	DD	03ddcc2b7r			; 0.107793
	DD	03ddff072r			; 0.109345
	DD	03de31e72r			; 0.110898
	DD	03de64cb9r			; 0.112451
	DD	03de97b48r			; 0.114005
	DD	03decaa20r			; 0.115559
	DD	03defd942r			; 0.117114
	DD	03df308afr			; 0.118669
	DD	03df63868r			; 0.120225
	DD	03df9686er			; 0.121781
	DD	03dfc98c2r			; 0.123338
	DD	03dffc965r			; 0.124896
	DD	03e017d2cr			; 0.126454
	DD	03e0315cer			; 0.128013
	DD	03e04ae9ar			; 0.129572
	DD	03e06478fr			; 0.131132
	DD	03e07e0aer			; 0.132693
	DD	03e0979f7r			; 0.134254
	DD	03e0b136cr			; 0.135816
	DD	03e0cad0dr			; 0.137379
	DD	03e0e46d9r			; 0.138942
	DD	03e0fe0d3r			; 0.140506
	DD	03e117afar			; 0.142071
	DD	03e13154er			; 0.143636
	DD	03e14afd1r			; 0.145202
	DD	03e164a83r			; 0.146769
	DD	03e17e564r			; 0.148336
	DD	03e198074r			; 0.149904
	DD	03e1b1bb6r			; 0.151473
	DD	03e1cb728r			; 0.153042
	DD	03e1e52ccr			; 0.154613
	DD	03e1feea1r			; 0.156184
	DD	03e218aaar			; 0.157756
	DD	03e2326e5r			; 0.159328
	DD	03e24c354r			; 0.160901
	DD	03e265ff7r			; 0.162475
	DD	03e27fccer			; 0.16405
	DD	03e2999dbr			; 0.165626
	DD	03e2b371er			; 0.167202
	DD	03e2cd497r			; 0.16878
	DD	03e2e7246r			; 0.170358
	DD	03e30102er			; 0.171937
	DD	03e31ae4dr			; 0.173516
	DD	03e334ca4r			; 0.175097
	DD	03e34eb34r			; 0.176678
	DD	03e3689fer			; 0.178261
	DD	03e382902r			; 0.179844
	DD	03e39c841r			; 0.181428
	DD	03e3b67bbr			; 0.183013
	DD	03e3d0771r			; 0.184599
	DD	03e3ea763r			; 0.186185
	DD	03e404791r			; 0.187773
	DD	03e41e7fer			; 0.189362
	DD	03e4388a8r			; 0.190951
	DD	03e452990r			; 0.192541
	DD	03e46cab8r			; 0.194133
	DD	03e486c1fr			; 0.195725
	DD	03e4a0dc7r			; 0.197318
	DD	03e4bafafr			; 0.198912
	DD	03e4d51d9r			; 0.200508
	DD	03e4ef444r			; 0.202104
	DD	03e5096f2r			; 0.203701
	DD	03e5239e3r			; 0.205299
	DD	03e53dd17r			; 0.206898
	DD	03e558090r			; 0.208498
	DD	03e57244dr			; 0.210099
	DD	03e58c84fr			; 0.211702
	DD	03e5a6c98r			; 0.213305
	DD	03e5c1127r			; 0.214909
	DD	03e5db5fdr			; 0.216515
	DD	03e5f5b1ar			; 0.218121
	DD	03e610080r			; 0.219728
	DD	03e62a62er			; 0.221337
	DD	03e644c26r			; 0.222947
	DD	03e65f267r			; 0.224558
	DD	03e6798f3r			; 0.226169
	DD	03e693fcbr			; 0.227782
	DD	03e6ae6edr			; 0.229397
	DD	03e6c8e5dr			; 0.231012
	DD	03e6e3619r			; 0.232628
	DD	03e6fde22r			; 0.234246
	DD	03e718679r			; 0.235865
	DD	03e732f20r			; 0.237484
	DD	03e74d815r			; 0.239106
	DD	03e76815ar			; 0.240728
	DD	03e782af0r			; 0.242351
	DD	03e79d4d6r			; 0.243976
	DD	03e7b7f0fr			; 0.245602
	DD	03e7d2999r			; 0.247229
	DD	03e7ed477r			; 0.248857
	DD	03e803fd4r			; 0.250487
	DD	03e811596r			; 0.252118
	DD	03e81eb83r			; 0.25375
	DD	03e82c19ar			; 0.255383
	DD	03e8397ddr			; 0.257018
	DD	03e846e4ar			; 0.258654
	DD	03e8544e4r			; 0.260291
	DD	03e861ba9r			; 0.26193
	DD	03e86f29ar			; 0.26357
	DD	03e87c9b8r			; 0.265211
	DD	03e88a103r			; 0.266853
	DD	03e89787br			; 0.268497
	DD	03e8a5020r			; 0.270143
	DD	03e8b27f3r			; 0.271789
	DD	03e8bfff4r			; 0.273437
	DD	03e8cd824r			; 0.275087
	DD	03e8db082r			; 0.276737
	DD	03e8e890fr			; 0.278389
	DD	03e8f61ccr			; 0.280043
	DD	03e903ab8r			; 0.281698
	DD	03e9113d5r			; 0.283354
	DD	03e91ed21r			; 0.285012
	DD	03e92c69fr			; 0.286672
	DD	03e93a04dr			; 0.288332
	DD	03e947a2dr			; 0.289995
	DD	03e95543er			; 0.291658
	DD	03e962e82r			; 0.293324
	DD	03e9708f7r			; 0.29499
	DD	03e97e3a0r			; 0.296659
	DD	03e98be7br			; 0.298328
	DD	03e999989r			; 0.3
	DD	03e9a74ccr			; 0.301672
	DD	03e9b5042r			; 0.303347
	DD	03e9c2becr			; 0.305023
	DD	03e9d07cbr			; 0.3067
	DD	03e9de3dfr			; 0.308379
	DD	03e9ec029r			; 0.31006
	DD	03e9f9ca8r			; 0.311742
	DD	03ea0795dr			; 0.313426
	DD	03ea15648r			; 0.315111
	DD	03ea2336br			; 0.316799
	DD	03ea310c4r			; 0.318487
	DD	03ea3ee54r			; 0.320178
	DD	03ea4cc1dr			; 0.32187
	DD	03ea5aa1dr			; 0.323563
	DD	03ea68856r			; 0.325259
	DD	03ea766c8r			; 0.326956
	DD	03ea84573r			; 0.328655
	DD	03ea92457r			; 0.330355
	DD	03eaa0375r			; 0.332058
	DD	03eaae2cer			; 0.333762
	DD	03eabc261r			; 0.335467
	DD	03eaca22fr			; 0.337175
	DD	03ead8238r			; 0.338884
	DD	03eae627dr			; 0.340595
	DD	03eaf42fer			; 0.342308
	DD	03eb023bbr			; 0.344023
	DD	03eb104b5r			; 0.345739
	DD	03eb1e5ecr			; 0.347457
	DD	03eb2c761r			; 0.349177
	DD	03eb3a913r			; 0.350899
	DD	03eb48b04r			; 0.352623
	DD	03eb56d34r			; 0.354349
	DD	03eb64fa2r			; 0.356076
	DD	03eb73250r			; 0.357806
	DD	03eb8153dr			; 0.359537
	DD	03eb8f86br			; 0.36127
	DD	03eb9dbd9r			; 0.363005
	DD	03ebabf88r			; 0.364743
	DD	03ebba378r			; 0.366482
	DD	03ebc87aar			; 0.368223
	DD	03ebd6c1er			; 0.369965
	DD	03ebe50d4r			; 0.37171
	DD	03ebf35cdr			; 0.373457
	DD	03ec01b0ar			; 0.375206
	DD	03ec10089r			; 0.376957
	DD	03ec1e64dr			; 0.37871
	DD	03ec2cc56r			; 0.380465
	DD	03ec3b2a3r			; 0.382222
	DD	03ec49935r			; 0.383981
	DD	03ec5800dr			; 0.385743
	DD	03ec6672ar			; 0.387506
	DD	03ec74e8fr			; 0.389271
	DD	03ec8363ar			; 0.391039
	DD	03ec91e2cr			; 0.392808
	DD	03eca0666r			; 0.39458
	DD	03ecaeee7r			; 0.396354
	DD	03ecbd7b1r			; 0.39813
	DD	03eccc0c4r			; 0.399908
	DD	03ecdaa21r			; 0.401689
	DD	03ece93c7r			; 0.403471
	DD	03ecf7db7r			; 0.405256
	DD	03ed067f1r			; 0.407043
	DD	03ed15277r			; 0.408832
	DD	03ed23d47r			; 0.410624
	DD	03ed32864r			; 0.412418
	DD	03ed413cdr			; 0.414214
	DD	03ed4ff82r			; 0.416012
	DD	03ed5eb85r			; 0.417812
	DD	03ed6d7d5r			; 0.419615
	DD	03ed7c473r			; 0.421421
	DD	03ed8b15fr			; 0.423228
	DD	03ed99e9ar			; 0.425038
	DD	03eda8c24r			; 0.42685
	DD	03edb79fer			; 0.428665
	DD	03edc6828r			; 0.430482
	DD	03edd56a3r			; 0.432302
	DD	03ede456fr			; 0.434123
	DD	03edf348cr			; 0.435948
	DD	03ee023fbr			; 0.437775
	DD	03ee113bdr			; 0.439604
	DD	03ee203d1r			; 0.441435
	DD	03ee2f439r			; 0.44327
	DD	03ee3e4f4r			; 0.445106
	DD	03ee4d604r			; 0.446945
	DD	03ee5c768r			; 0.448787
	DD	03ee6b922r			; 0.450631
	DD	03ee7ab31r			; 0.452478
	DD	03ee89d96r			; 0.454327
	DD	03ee99051r			; 0.456179
	DD	03eea8364r			; 0.458034
	DD	03eeb76cer			; 0.459891
	DD	03eec6a90r			; 0.461751
	DD	03eed5eabr			; 0.463613
	DD	03eee531fr			; 0.465478
	DD	03eef47ecr			; 0.467346
	DD	03ef03d13r			; 0.469216
	DD	03ef13294r			; 0.471089
	DD	03ef22870r			; 0.472965
	DD	03ef31ea8r			; 0.474843
	DD	03ef4153cr			; 0.476725
	DD	03ef50c2cr			; 0.478608
	DD	03ef60378r			; 0.480495
	DD	03ef6fb23r			; 0.482385
	DD	03ef7f32br			; 0.484277
	DD	03ef8eb91r			; 0.486172
	DD	03ef9e457r			; 0.48807
	DD	03efadd7cr			; 0.489971
	DD	03efbd701r			; 0.491875
	DD	03efcd0e6r			; 0.493781
	DD	03efdcb2cr			; 0.495691
	DD	03efec5d4r			; 0.497603
	DD	03effc0der			; 0.499518
	DD	03f005e25r			; 0.501437
	DD	03f00dc0dr			; 0.503358
	DD	03f015a26r			; 0.505282
	DD	03f01d872r			; 0.507209
	DD	03f0256f0r			; 0.509139
	DD	03f02d5a1r			; 0.511072
	DD	03f035484r			; 0.513008
	DD	03f03d39br			; 0.514948
	DD	03f0452e5r			; 0.51689
	DD	03f04d263r			; 0.518835
	DD	03f055215r			; 0.520784
	DD	03f05d1fbr			; 0.522735
	DD	03f065215r			; 0.52469
	DD	03f06d265r			; 0.526648
	DD	03f0752e9r			; 0.528609
	DD	03f07d3a3r			; 0.530573
	DD	03f085493r			; 0.532541
	DD	03f08d5b9r			; 0.534511
	DD	03f095715r			; 0.536485
	DD	03f09d8a7r			; 0.538462
	DD	03f0a5a70r			; 0.540442
	DD	03f0adc71r			; 0.542426
	DD	03f0b5ea9r			; 0.544413
	DD	03f0be118r			; 0.546403
	DD	03f0c63c0r			; 0.548397
	DD	03f0ce6a0r			; 0.550394
	DD	03f0d69b9r			; 0.552394
	DD	03f0ded0ar			; 0.554398
	DD	03f0e7095r			; 0.556405
	DD	03f0ef459r			; 0.558416
	DD	03f0f7857r			; 0.56043
	DD	03f0ffc8fr			; 0.562447
	DD	03f108102r			; 0.564469
	DD	03f1105afr			; 0.566493
	DD	03f118a98r			; 0.568521
	DD	03f120fbcr			; 0.570553
	DD	03f12951cr			; 0.572588
	DD	03f131ab7r			; 0.574626
	DD	03f13a08fr			; 0.576669
	DD	03f1426a4r			; 0.578715
	DD	03f14acf6r			; 0.580764
	DD	03f153385r			; 0.582817
	DD	03f15ba52r			; 0.584874
	DD	03f16415cr			; 0.586935
	DD	03f16c8a5r			; 0.588999
	DD	03f17502dr			; 0.591067
	DD	03f17d7f3r			; 0.593139
	DD	03f185ff9r			; 0.595214
	DD	03f18e83fr			; 0.597294
	DD	03f1970c4r			; 0.599377
	DD	03f19f98ar			; 0.601464
	DD	03f1a8291r			; 0.603555
	DD	03f1b0bd8r			; 0.605649
	DD	03f1b9561r			; 0.607748
	DD	03f1c1f2cr			; 0.609851
	DD	03f1ca938r			; 0.611957
	DD	03f1d3387r			; 0.614067
	DD	03f1dbe19r			; 0.616182
	DD	03f1e48eer			; 0.6183
	DD	03f1ed407r			; 0.620423
	DD	03f1f5f63r			; 0.622549
	DD	03f1feb03r			; 0.62468
	DD	03f2076e9r			; 0.626814
	DD	03f210313r			; 0.628953
	DD	03f218f82r			; 0.631096
	DD	03f221c37r			; 0.633243
	DD	03f22a932r			; 0.635394
	DD	03f233673r			; 0.63755
	DD	03f23c3fcr			; 0.639709
	DD	03f2451cbr			; 0.641873
	DD	03f24dfe2r			; 0.644041
	DD	03f256e41r			; 0.646214
	DD	03f25fce8r			; 0.64839
	DD	03f268bd8r			; 0.650571
	DD	03f271b11r			; 0.652757
	DD	03f27aa94r			; 0.654947
	DD	03f283a60r			; 0.657141
	DD	03f28ca77r			; 0.659339
	DD	03f295ad9r			; 0.661542
	DD	03f29eb85r			; 0.66375
	DD	03f2a7c7dr			; 0.665962
	DD	03f2b0dc1r			; 0.668179
	DD	03f2b9f52r			; 0.6704
	DD	03f2c312fr			; 0.672625
	DD	03f2cc359r			; 0.674856
	DD	03f2d55d0r			; 0.677091
	DD	03f2de896r			; 0.67933
	DD	03f2e7baar			; 0.681574
	DD	03f2f0f0dr			; 0.683823
	DD	03f2fa2bfr			; 0.686077
	DD	03f3036c1r			; 0.688335
	DD	03f30cb13r			; 0.690599
	DD	03f315fb5r			; 0.692867
	DD	03f31f4a9r			; 0.695139
	DD	03f3289edr			; 0.697417
	DD	03f331f84r			; 0.6997
	DD	03f33b56dr			; 0.701987
	DD	03f344ba9r			; 0.704279
	DD	03f34e238r			; 0.706577
	DD	03f35791ar			; 0.708879
	DD	03f361051r			; 0.711186
	DD	03f36a7dcr			; 0.713499
	DD	03f373fbcr			; 0.715816
	DD	03f37d7f2r			; 0.718139
	DD	03f38707dr			; 0.720466
	DD	03f39095fr			; 0.722799
	DD	03f39a298r			; 0.725137
	DD	03f3a3c28r			; 0.72748
	DD	03f3ad610r			; 0.729829
	DD	03f3b7051r			; 0.732183
	DD	03f3c0aear			; 0.734542
	DD	03f3ca5ddr			; 0.736906
	DD	03f3d4129r			; 0.739276
	DD	03f3ddccfr			; 0.741651
	DD	03f3e78d1r			; 0.744031
	DD	03f3f152dr			; 0.746417
	DD	03f3fb1e6r			; 0.748808
	DD	03f404efar			; 0.751205
	DD	03f40ec6cr			; 0.753608
	DD	03f418a3ar			; 0.756015
	DD	03f422867r			; 0.758429
	DD	03f42c6f2r			; 0.760848
	DD	03f4365dcr			; 0.763273
	DD	03f440525r			; 0.765703
	DD	03f44a4cer			; 0.76814
	DD	03f4544d7r			; 0.770582
	DD	03f45e541r			; 0.773029
	DD	03f46860dr			; 0.775483
	DD	03f47273br			; 0.777942
	DD	03f47c8ccr			; 0.780408
	DD	03f486ac0r			; 0.782879
	DD	03f490d17r			; 0.785356
	DD	03f49afd3r			; 0.787839
	DD	03f4a52f3r			; 0.790328
	DD	03f4af679r			; 0.792823
	DD	03f4b9a65r			; 0.795325
	DD	03f4c3eb7r			; 0.797832
	DD	03f4ce370r			; 0.800345
	DD	03f4d8892r			; 0.802865
	DD	03f4e2e1br			; 0.805391
	DD	03f4ed40dr			; 0.807923
	DD	03f4f7a69r			; 0.810462
	DD	03f50212er			; 0.813006
	DD	03f50c85fr			; 0.815557
	DD	03f516ffar			; 0.818115
	DD	03f521801r			; 0.820679
	DD	03f52c075r			; 0.823249
	DD	03f536956r			; 0.825826
	DD	03f5412a4r			; 0.828409
	DD	03f54bc61r			; 0.830999
	DD	03f55668dr			; 0.833596
	DD	03f561128r			; 0.836199
	DD	03f56bc34r			; 0.838809
	DD	03f5767b0r			; 0.841426
	DD	03f58139er			; 0.844049
	DD	03f58bffdr			; 0.84668
	DD	03f596cd0r			; 0.849317
	DD	03f5a1a16r			; 0.851961
	DD	03f5ac7d0r			; 0.854611
	DD	03f5b75ffr			; 0.857269
	DD	03f5c24a4r			; 0.859934
	DD	03f5cd3ber			; 0.862606
	DD	03f5d834fr			; 0.865285
	DD	03f5e3358r			; 0.867971
	DD	03f5ee3d9r			; 0.870664
	DD	03f5f94d3r			; 0.873365
	DD	03f604646r			; 0.876072
	DD	03f60f834r			; 0.878787
	DD	03f61aa9cr			; 0.88151
	DD	03f625d80r			; 0.884239
	DD	03f6310e1r			; 0.886976
	DD	03f63c4bfr			; 0.889721
	DD	03f64791ar			; 0.892473
	DD	03f652df5r			; 0.895232
	DD	03f65e34er			; 0.898
	DD	03f669928r			; 0.900774
	DD	03f674f82r			; 0.903557
	DD	03f68065er			; 0.906347
	DD	03f68bdbdr			; 0.909145
	DD	03f69759er			; 0.911951
	DD	03f6a2e04r			; 0.914765
	DD	03f6ae6eer			; 0.917586
	DD	03f6ba05dr			; 0.920416
	DD	03f6c5a53r			; 0.923253
	DD	03f6d14d0r			; 0.926099
	DD	03f6dcfd4r			; 0.928952
	DD	03f6e8b62r			; 0.931814
	DD	03f6f4778r			; 0.934684
	DD	03f700419r			; 0.937563
	DD	03f70c145r			; 0.940449
	DD	03f717efdr			; 0.943344
	DD	03f723d42r			; 0.946247
	DD	03f72fc15r			; 0.949159
	DD	03f73bb75r			; 0.952079
	DD	03f747b66r			; 0.955008
	DD	03f753be6r			; 0.957945
	DD	03f75fcf7r			; 0.960891
	DD	03f76be9br			; 0.963846
	DD	03f7780d1r			; 0.966809
	DD	03f78439br			; 0.969782
	DD	03f7906f9r			; 0.972763
	DD	03f79caedr			; 0.975753
	DD	03f7a8f77r			; 0.978752
	DD	03f7b5499r			; 0.98176
	DD	03f7c1a53r			; 0.984777
	DD	03f7ce0a6r			; 0.987803
	DD	03f7da793r			; 0.990838
	DD	03f7e6f1br			; 0.993883
	DD	03f7f373fr			; 0.996937
	DD	03f800000r			; 1
	DD	03f8064afr			; 1.00307
	DD	03f80c9aer			; 1.00615
	DD	03f812efdr			; 1.00925
	DD	03f81949dr			; 1.01235
	DD	03f81fa8dr			; 1.01546
	DD	03f8260cer			; 1.01858
	DD	03f82c762r			; 1.02171
	DD	03f832e48r			; 1.02485
	DD	03f839581r			; 1.028
	DD	03f83fd0dr			; 1.03116
	DD	03f8464eer			; 1.03433
	DD	03f84cd23r			; 1.03751
	DD	03f8535adr			; 1.0407
	DD	03f859e8cr			; 1.0439
	DD	03f8607c2r			; 1.04711
	DD	03f86714fr			; 1.05033
	DD	03f86db32r			; 1.05356
	DD	03f87456dr			; 1.05681
	DD	03f87b001r			; 1.06006
	DD	03f881aeer			; 1.06332
	DD	03f888634r			; 1.0666
	DD	03f88f1d4r			; 1.06988
	DD	03f895dcer			; 1.07318
	DD	03f89ca24r			; 1.07648
	DD	03f8a36d5r			; 1.0798
	DD	03f8aa3e3r			; 1.08313
	DD	03f8b114er			; 1.08647
	DD	03f8b7f16r			; 1.08982
	DD	03f8bed3dr			; 1.09318
	DD	03f8c5bc2r			; 1.09655
	DD	03f8ccaa6r			; 1.09993
	DD	03f8d39ebr			; 1.10333
	DD	03f8da990r			; 1.10674
	DD	03f8e1996r			; 1.11016
	DD	03f8e89fer			; 1.11359
	DD	03f8efac8r			; 1.11703
	DD	03f8f6bf6r			; 1.12048
	DD	03f8fdd88r			; 1.12395
	DD	03f904f7dr			; 1.12743
	DD	03f90c1d8r			; 1.13092
	DD	03f913499r			; 1.13442
	DD	03f91a7c0r			; 1.13793
	DD	03f921b4er			; 1.14146
	DD	03f928f44r			; 1.145
	DD	03f9303a3r			; 1.14855
	DD	03f93786ar			; 1.15211
	DD	03f93ed9cr			; 1.15569
	DD	03f946338r			; 1.15928
	DD	03f94d93fr			; 1.16288
	DD	03f954fb3r			; 1.16649
	DD	03f95c693r			; 1.17012
	DD	03f963de0r			; 1.17376
	DD	03f96b59cr			; 1.17742
	DD	03f972dc6r			; 1.18108
	DD	03f97a660r			; 1.18476
	DD	03f981f6br			; 1.18846
	DD	03f9898e7r			; 1.19217
	DD	03f9912d5r			; 1.19589
	DD	03f998d35r			; 1.19962
	DD	03f9a0809r			; 1.20337
	DD	03f9a8352r			; 1.20713
	DD	03f9aff0fr			; 1.21091
	DD	03f9b7b42r			; 1.2147
	DD	03f9bf7ecr			; 1.2185
	DD	03f9c750er			; 1.22232
	DD	03f9cf2a8r			; 1.22616
	DD	03f9d70bbr			; 1.23
	DD	03f9def48r			; 1.23386
	DD	03f9e6e50r			; 1.23774
	DD	03f9eedd4r			; 1.24163
	DD	03f9f6dd4r			; 1.24554
	DD	03f9fee52r			; 1.24946
	DD	03fa06f4er			; 1.2534
	DD	03fa0f0car			; 1.25735
	DD	03fa172c5r			; 1.26131
	DD	03fa1f541r			; 1.2653
	DD	03fa27840r			; 1.26929
	DD	03fa2fbc1r			; 1.27331
	DD	03fa37fc6r			; 1.27734
	DD	03fa40450r			; 1.28138
	DD	03fa4895fr			; 1.28544
	DD	03fa50ef5r			; 1.28952
	DD	03fa59513r			; 1.29361
	DD	03fa61bb9r			; 1.29772
	DD	03fa6a2e8r			; 1.30185
	DD	03fa72aa2r			; 1.30599
	DD	03fa7b2e8r			; 1.31015
	DD	03fa83bbar			; 1.31432
	DD	03fa8c519r			; 1.31851
	DD	03fa94f08r			; 1.32272
	DD	03fa9d985r			; 1.32695
	DD	03faa6494r			; 1.33119
	DD	03faaf034r			; 1.33546
	DD	03fab7c66r			; 1.33973
	DD	03fac092dr			; 1.34403
	DD	03fac9689r			; 1.34834
	DD	03fad247ar			; 1.35268
	DD	03fadb303r			; 1.35703
	DD	03fae4224r			; 1.36139
	DD	03faed1der			; 1.36578
	DD	03faf6232r			; 1.37018
	DD	03faff323r			; 1.37461
	DD	03fb084b0r			; 1.37905
	DD	03fb116dbr			; 1.38351
	DD	03fb1a9a5r			; 1.38799
	DD	03fb23d10r			; 1.39249
	DD	03fb2d11cr			; 1.39701
	DD	03fb365cbr			; 1.40154
	DD	03fb3fb1er			; 1.4061
	DD	03fb49117r			; 1.41068
	DD	03fb527b6r			; 1.41527
	DD	03fb5befcr			; 1.41989
	DD	03fb656ecr			; 1.42453
	DD	03fb6ef86r			; 1.42918
	DD	03fb788ccr			; 1.43386
	DD	03fb822ber			; 1.43856
	DD	03fb8bd5fr			; 1.44328
	DD	03fb958b0r			; 1.44802
	DD	03fb9f4b2r			; 1.45278
	DD	03fba9166r			; 1.45756
	DD	03fbb2ecer			; 1.46237
	DD	03fbbccebr			; 1.46719
	DD	03fbc6bbfr			; 1.47204
	DD	03fbd0b4ar			; 1.47691
	DD	03fbdab90r			; 1.4818
	DD	03fbe4c90r			; 1.48671
	DD	03fbeee4dr			; 1.49165
	DD	03fbf90c7r			; 1.49661
	DD	03fc03401r			; 1.50159
	DD	03fc0d7fcr			; 1.50659
	DD	03fc17cb9r			; 1.51162
	DD	03fc2223br			; 1.51667
	DD	03fc2c882r			; 1.52174
	DD	03fc36f90r			; 1.52684
	DD	03fc41767r			; 1.53196
	DD	03fc4c009r			; 1.53711
	DD	03fc56976r			; 1.54228
	DD	03fc613b1r			; 1.54748
	DD	03fc6bebcr			; 1.5527
	DD	03fc76a98r			; 1.55794
	DD	03fc81746r			; 1.56321
	DD	03fc8c4c9r			; 1.56851
	DD	03fc97322r			; 1.57383
	DD	03fca2254r			; 1.57917
	DD	03fcad25fr			; 1.58455
	DD	03fcb8345r			; 1.58994
	DD	03fcc350ar			; 1.59537
	DD	03fcce7adr			; 1.60082
	DD	03fcd9b32r			; 1.6063
	DD	03fce4f99r			; 1.6118
	DD	03fcf04e6r			; 1.61734
	DD	03fcfbb19r			; 1.6229
	DD	03fd07236r			; 1.62849
	DD	03fd12a3dr			; 1.6341
	DD	03fd1e331r			; 1.63975
	DD	03fd29d13r			; 1.64542
	DD	03fd357e7r			; 1.65112
	DD	03fd413adr			; 1.65685
	DD	03fd4d069r			; 1.66261
	DD	03fd58e1br			; 1.6684
	DD	03fd64cc7r			; 1.67422
	DD	03fd70c6er			; 1.68007
	DD	03fd7cd12r			; 1.68595
	DD	03fd88eb6r			; 1.69186
	DD	03fd9515dr			; 1.6978
	DD	03fda1507r			; 1.70377
	DD	03fdad9b8r			; 1.70977
	DD	03fdb9f72r			; 1.7158
	DD	03fdc6637r			; 1.72187
	DD	03fdd2e09r			; 1.72797
	DD	03fddf6ecr			; 1.7341
	DD	03fdec0e0r			; 1.74026
	DD	03fdf8bear			; 1.74646
	DD	03fe0580br			; 1.75269
	DD	03fe12545r			; 1.75895
	DD	03fe1f39cr			; 1.76525
	DD	03fe2c312r			; 1.77158
	DD	03fe393a9r			; 1.77794
	DD	03fe46564r			; 1.78434
	DD	03fe53846r			; 1.79078
	DD	03fe60c51r			; 1.79725
	DD	03fe6e188r			; 1.80376
	DD	03fe7b7efr			; 1.8103
	DD	03fe88f87r			; 1.81688
	DD	03fe96853r			; 1.8235
	DD	03fea4257r			; 1.83015
	DD	03feb1d95r			; 1.83684
	DD	03febfa11r			; 1.84357
	DD	03fecd7ccr			; 1.85034
	DD	03fedb6cbr			; 1.85714
	DD	03fee9710r			; 1.86399
	DD	03fef789er			; 1.87087
	DD	03ff05b78r			; 1.87779
	DD	03ff13fa2r			; 1.88475
	DD	03ff2251fr			; 1.89176
	DD	03ff30bf2r			; 1.8988
	DD	03ff3f41dr			; 1.90589
	DD	03ff4dda6r			; 1.91301
	DD	03ff5c88er			; 1.92018
	DD	03ff6b4dar			; 1.92739
	DD	03ff7a28cr			; 1.93465
	DD	03ff891a9r			; 1.94195
	DD	03ff98234r			; 1.94929
	DD	03ffa7430r			; 1.95667
	DD	03ffb67a0r			; 1.9641
	DD	03ffc5c8ar			; 1.97157
	DD	03ffd52f0r			; 1.97909
	DD	03ffe4ad6r			; 1.98666
	DD	03fff4440r			; 1.99427
	DD	040001f99r			; 2.00193
	DD	040009dd8r			; 2.00963
	DD	040011cder			; 2.01739
	DD	040019cafr			; 2.02519
	DD	040021d4cr			; 2.03304
	DD	040029eb6r			; 2.04094
	DD	0400320f1r			; 2.04889
	DD	04003a3fer			; 2.05688
	DD	0400427dfr			; 2.06493
	DD	04004ac97r			; 2.07303
	DD	040053227r			; 2.08119
	DD	04005b893r			; 2.08939
	DD	040063fdcr			; 2.09765
	DD	04006c804r			; 2.10596
	DD	04007510fr			; 2.11432
	DD	04007dafdr			; 2.12274
	DD	0400865d3r			; 2.13121
	DD	04008f192r			; 2.13974
	DD	040097e3cr			; 2.14833
	DD	0400a0bd4r			; 2.15697
	DD	0400a9a5dr			; 2.16567
	DD	0400b29d9r			; 2.17443
	DD	0400bba4cr			; 2.18325
	DD	0400c4bb6r			; 2.19212
	DD	0400cde1cr			; 2.20106
	DD	0400d7180r			; 2.21005
	DD	0400e05e4r			; 2.21911
	DD	0400e9b4cr			; 2.22823
	DD	0400f31bbr			; 2.23741
	DD	0400fc932r			; 2.24665
	DD	0401061b6r			; 2.25596
	DD	04010fb49r			; 2.26534
	DD	0401195eer			; 2.27478
	DD	0401231a9r			; 2.28428
	DD	04012ce7cr			; 2.29385
	DD	040136c6ar			; 2.30349
	DD	040140b77r			; 2.3132
	DD	04014aba6r			; 2.32298
	DD	040154cfbr			; 2.33282
	DD	04015ef78r			; 2.34274
	DD	040169321r			; 2.35273
	DD	0401737f9r			; 2.36279
	DD	04017de05r			; 2.37293
	DD	040188547r			; 2.38313
	DD	040192dc3r			; 2.39342
	DD	04019d77er			; 2.40378
	DD	0401a827ar			; 2.41421
	DD	0401b2ebbr			; 2.42473
	DD	0401bdc46r			; 2.43532
	DD	0401c8b1dr			; 2.44599
	DD	0401d3b46r			; 2.45674
	DD	0401decc4r			; 2.46758
	DD	0401e9f9cr			; 2.47849
	DD	0401f53d1r			; 2.48949
	DD	040200967r			; 2.50057
	DD	04020c064r			; 2.51174
	DD	0402178cbr			; 2.523
	DD	0402232a0r			; 2.53434
	DD	04022ede9r			; 2.54577
	DD	04023aaaar			; 2.55729
	DD	0402468e8r			; 2.5689
	DD	0402528a7r			; 2.58061
	DD	04025e9ecr			; 2.5924
	DD	04026acbcr			; 2.60429
	DD	04027711dr			; 2.61628
	DD	040283712r			; 2.62836
	DD	04028fea2r			; 2.64054
	DD	04029c7d1r			; 2.65282
	DD	0402a92a6r			; 2.6652
	DD	0402b5f24r			; 2.67768
	DD	0402c2d52r			; 2.69027
	DD	0402cfd36r			; 2.70295
	DD	0402dced5r			; 2.71575
	DD	0402ea235r			; 2.72865
	DD	0402f775cr			; 2.74166
	DD	040304e50r			; 2.75478
	DD	040312717r			; 2.76801
	DD	0403201b7r			; 2.78135
	DD	04032de36r			; 2.79481
	DD	04033bc9cr			; 2.80839
	DD	040349cefr			; 2.82208
	DD	040357f34r			; 2.83589
	DD	040366375r			; 2.84982
	DD	0403749b6r			; 2.86387
	DD	0403831ffr			; 2.87805
	DD	040391c58r			; 2.89235
	DD	0403a08c7r			; 2.90679
	DD	0403af755r			; 2.92135
	DD	0403be808r			; 2.93604
	DD	0403cdae9r			; 2.95086
	DD	0403dd000r			; 2.96582
	DD	0403ec754r			; 2.98092
	DD	0403fc0edr			; 2.99615
	DD	04040bcd5r			; 3.01153
	DD	04041bb13r			; 3.02704
	DD	04042bbb1r			; 3.04271
	DD	04043beb7r			; 3.05852
	DD	04044c42er			; 3.07447
	DD	04045cc1fr			; 3.09058
	DD	04046d694r			; 3.10685
	DD	04047e396r			; 3.12327
	DD	04048f32fr			; 3.13984
	DD	0404a056ar			; 3.15658
	DD	0404b1a4fr			; 3.17348
	DD	0404c31ear			; 3.19055
	DD	0404d4c45r			; 3.20778
	DD	0404e696br			; 3.22518
	DD	0404f8967r			; 3.24276
	DD	04050ac44r			; 3.26051
	DD	04051d20dr			; 3.27845
	DD	04052facfr			; 3.29656
	DD	040542695r			; 3.31485
	DD	04055556cr			; 3.33334
	DD	04056875fr			; 3.35201
	DD	04057bc7cr			; 3.37088
	DD	04058f4d0r			; 3.38994
	DD	0405a3068r			; 3.4092
	DD	0405b6f51r			; 3.42867
	DD	0405cb199r			; 3.44834
	DD	0405df74fr			; 3.46822
	DD	0405f4081r			; 3.48831
	DD	040608d3er			; 3.50862
	DD	04061dd94r			; 3.52915
	DD	040633194r			; 3.5499
	DD	04064894dr			; 3.57088
	DD	04065e4cfr			; 3.59209
	DD	04067442br			; 3.61354
	DD	04068a772r			; 3.63522
	DD	0406a0eb5r			; 3.65715
	DD	0406b7a05r			; 3.67932
	DD	0406ce976r			; 3.70175
	DD	0406e5d19r			; 3.72443
	DD	0406fd501r			; 3.74738
	DD	040715142r			; 3.77058
	DD	04072d1efr			; 3.79406
	DD	04074571er			; 3.81782
	DD	04075e0e2r			; 3.84185
	DD	040776f52r			; 3.86617
	DD	040790282r			; 3.89078
	DD	0407a9a8br			; 3.91568
	DD	0407c3781r			; 3.94089
	DD	0407dd97er			; 3.9664
	DD	0407f8098r			; 3.99222
	DD	040809675r			; 4.01837
	DD	040816f46r			; 4.04483
	DD	040824acbr			; 4.07163
	DD	040832914r			; 4.09876
	DD	040840a2cr			; 4.12624
	DD	04084ee23r			; 4.15407
	DD	04085d506r			; 4.18225
	DD	04086bee4r			; 4.2108
	DD	04087abcdr			; 4.23972
	DD	040889bd0r			; 4.26902
	DD	040898efcr			; 4.2987
	DD	0408a8564r			; 4.32878
	DD	0408b7f16r			; 4.35926
	DD	0408c7c26r			; 4.39015
	DD	0408d7ca3r			; 4.42146
	DD	0408e80a2r			; 4.4532
	DD	0408f8834r			; 4.48538
	DD	04090936dr			; 4.518
	DD	04091a261r			; 4.55107
	DD	04092b524r			; 4.58461
	DD	04093cbccr			; 4.61863
	DD	04094e66er			; 4.65313
	DD	04096051fr			; 4.68813
	DD	0409727f9r			; 4.72363
	DD	040984f11r			; 4.75965
	DD	040997a80r			; 4.7962
	DD	0409aaa60r			; 4.8333
	DD	0409bdecar			; 4.87095
	DD	0409d17d8r			; 4.90916
	DD	0409e55a7r			; 4.94796
	DD	0409f9852r			; 4.98734
	DD	040a0dff7r			; 5.02734
	DD	040a22cb4r			; 5.06796
	DD	040a37ea7r			; 5.10921
	DD	040a4d5f1r			; 5.15112
	DD	040a632b4r			; 5.19369
	DD	040a79510r			; 5.23695
	DD	040a8fd29r			; 5.2809
	DD	040aa6b25r			; 5.32558
	DD	040abdf27r			; 5.37099
	DD	040ad5958r			; 5.41716
	DD	040aed9e0r			; 5.4641
	DD	040b060e8r			; 5.51183
	DD	040b1ee9br			; 5.56038
	DD	040b38325r			; 5.60976
	DD	040b51eb6r			; 5.66
	DD	040b6c17cr			; 5.71112
	DD	040b86ba9r			; 5.76314
	DD	040ba1d70r			; 5.81609
	DD	040bbd707r			; 5.87
	DD	040bd98a4r			; 5.92488
	DD	040bf6280r			; 5.98077
	DD	040c134d7r			; 6.0377
	DD	040c30fe6r			; 6.09569
	DD	040c4f3edr			; 6.15478
	DD	040c6e12er			; 6.21499
	DD	040c8d7eer			; 6.27636
	DD	040cad874r			; 6.33892
	DD	040cce30br			; 6.40272
	DD	040cef800r			; 6.46777
	DD	040d117a3r			; 6.53414
	DD	040d34249r			; 6.60184
	DD	040d57848r			; 6.67093
	DD	040d7b9far			; 6.74145
	DD	040da07c0r			; 6.81345
	DD	040dc61fbr			; 6.88696
	DD	040dec912r			; 6.96204
	DD	040e13d71r			; 7.03875
	DD	040e3bf88r			; 7.11713
	DD	040e64fcbr			; 7.19724
	DD	040e8eeb5r			; 7.27914
	DD	040eb9cc7r			; 7.36289
	DD	040ee5a85r			; 7.44855
	DD	040f1287br			; 7.53619
	DD	040f4073dr			; 7.62588
	DD	040f6f764r			; 7.7177
	DD	040f9f991r			; 7.81171
	DD	040fd0e6cr			; 7.90801
	DD	041001b53r			; 8.00667
	DD	04101b97er			; 8.10779
	DD	041036216r			; 8.21145
	DD	041051585r			; 8.31775
	DD	04106d434r			; 8.42681
	DD	041089e96r			; 8.53872
	DD	0410a7524r			; 8.6536
	DD	0410c585ar			; 8.77157
	DD	0410e48bfr			; 8.89276
	DD	0411046dfr			; 9.0173
	DD	04112534er			; 9.14534
	DD	041146eaar			; 9.27702
	DD	041169998r			; 9.4125
	DD	04118d4c9r			; 9.55195
	DD	0411b20f6r			; 9.69555
	DD	0411d7ee7r			; 9.84348
	DD	0411fef6br			; 9.99595
	DD	041227363r			; 10.1532
	DD	041250bbbr			; 10.3154
	DD	04127b970r			; 10.4828
	DD	0412a7d8fr			; 10.6557
	DD	0412d5937r			; 10.8343
	DD	041304d99r			; 11.0189
	DD	041335bfer			; 11.21
	DD	0413685c4r			; 11.4077
	DD	04139cc63r			; 11.6124
	DD	0413d316cr			; 11.8246
	DD	04140b692r			; 12.0446
	DD	041445da5r			; 12.2729
	DD	04148289ar			; 12.5099
	DD	0414c198dr			; 12.7562
	DD	0415032c7r			; 13.0124
	DD	0415476ber			; 13.279
	DD	04158e81er			; 13.5567
	DD	0415d89cer			; 13.8461
	DD	041625ef3r			; 14.1482
	DD	041676afcr			; 14.4636
	DD	0416cb1a8r			; 14.7934
	DD	04172370dr			; 15.1384
	DD	04177ffa7r			; 15.4999
	DD	0417e105fr			; 15.879
	DD	041823750r			; 16.277
	DD	041859030r			; 16.6954
	DD	04189161ar			; 17.1358
	DD	0418cccb7r			; 17.6
	DD	04190b815r			; 18.0899
	DD	04194dcbar			; 18.6078
	DD	041993fb2r			; 19.1561
	DD	0419de6a9r			; 19.7376
	DD	041a2d7ffr			; 20.3555
	DD	041a81ae7r			; 21.0131
	DD	041adb787r			; 21.7146
	DD	041b3b729r			; 22.4644
	DD	041ba2468r			; 23.2678
	DD	041c10b71r			; 24.1306
	DD	041c87a53r			; 25.0597
	DD	041d0815br			; 26.0632
	DD	041d9338dr			; 27.1502
	DD	041e2a73cr			; 28.3317
	DD	041ecf6ccr			; 29.6205
	DD	041f841a6r			; 31.0321
	DD	0420256bdr			; 32.5847
	DD	0420933f5r			; 34.3007
	DD	04210d45dr			; 36.2074
	DD	042195a68r			; 38.3383
	DD	04222f123r			; 40.7355
	DD	0422dcf18r			; 43.4522
	DD	0423a3a66r			; 46.557
	DD	042488ebfr			; 50.1394
	DD	042594667r			; 54.3188
	DD	0426d0814r			; 59.2579
	DD	042825e98r			; 65.1848
	DD	04290db6fr			; 72.4286
	DD	042a2f76br			; 81.4832
	DD	042ba3fe6r			; 93.1248
	DD	042d94b1dr			; 108.647
	DD	04302608er			; 130.377
	DD	04322f8fdr			; 162.973
	DD	043594c4br			; 217.298
	DD	043a2f962r			; 325.948
	DD	04422f97br			; 651.898
	DD	0599ab9c7r			; 5.44393e+15
	DD	0c422f97br			; -651.898
	DD	0c3a2f962r			; -325.948
	DD	0c3594c4br			; -217.298
	DD	0c322f8fdr			; -162.973
	DD	0c302608er			; -130.377
	DD	0c2d94b1dr			; -108.647
	DD	0c2ba3fe6r			; -93.1248
	DD	0c2a2f76br			; -81.4832
	DD	0c290db6fr			; -72.4286
	DD	0c2825e98r			; -65.1848
	DD	0c26d0814r			; -59.2579
	DD	0c2594667r			; -54.3188
	DD	0c2488ebfr			; -50.1394
	DD	0c23a3a66r			; -46.557
	DD	0c22dcf18r			; -43.4522
	DD	0c222f123r			; -40.7355
	DD	0c2195a68r			; -38.3383
	DD	0c210d45dr			; -36.2074
	DD	0c20933f5r			; -34.3007
	DD	0c20256bdr			; -32.5847
	DD	0c1f841a6r			; -31.0321
	DD	0c1ecf6ccr			; -29.6205
	DD	0c1e2a73cr			; -28.3317
	DD	0c1d9338dr			; -27.1502
	DD	0c1d0815br			; -26.0632
	DD	0c1c87a53r			; -25.0597
	DD	0c1c10b71r			; -24.1306
	DD	0c1ba2468r			; -23.2678
	DD	0c1b3b729r			; -22.4644
	DD	0c1adb787r			; -21.7146
	DD	0c1a81ae7r			; -21.0131
	DD	0c1a2d7ffr			; -20.3555
	DD	0c19de6a9r			; -19.7376
	DD	0c1993fb2r			; -19.1561
	DD	0c194dcbar			; -18.6078
	DD	0c190b815r			; -18.0899
	DD	0c18cccb7r			; -17.6
	DD	0c189161ar			; -17.1358
	DD	0c1859030r			; -16.6954
	DD	0c1823750r			; -16.277
	DD	0c17e105fr			; -15.879
	DD	0c177ffa7r			; -15.4999
	DD	0c172370dr			; -15.1384
	DD	0c16cb1a8r			; -14.7934
	DD	0c1676afcr			; -14.4636
	DD	0c1625ef3r			; -14.1482
	DD	0c15d89cer			; -13.8461
	DD	0c158e81er			; -13.5567
	DD	0c15476ber			; -13.279
	DD	0c15032c7r			; -13.0124
	DD	0c14c198dr			; -12.7562
	DD	0c148289ar			; -12.5099
	DD	0c1445da5r			; -12.2729
	DD	0c140b692r			; -12.0446
	DD	0c13d316cr			; -11.8246
	DD	0c139cc63r			; -11.6124
	DD	0c13685c4r			; -11.4077
	DD	0c1335bfer			; -11.21
	DD	0c1304d99r			; -11.0189
	DD	0c12d5937r			; -10.8343
	DD	0c12a7d8fr			; -10.6557
	DD	0c127b970r			; -10.4828
	DD	0c1250bbbr			; -10.3154
	DD	0c1227363r			; -10.1532
	DD	0c11fef6br			; -9.99595
	DD	0c11d7ee7r			; -9.84348
	DD	0c11b20f6r			; -9.69555
	DD	0c118d4c9r			; -9.55195
	DD	0c1169998r			; -9.4125
	DD	0c1146eaar			; -9.27702
	DD	0c112534er			; -9.14534
	DD	0c11046dfr			; -9.0173
	DD	0c10e48bfr			; -8.89276
	DD	0c10c585ar			; -8.77157
	DD	0c10a7524r			; -8.6536
	DD	0c1089e96r			; -8.53872
	DD	0c106d434r			; -8.42681
	DD	0c1051585r			; -8.31775
	DD	0c1036216r			; -8.21145
	DD	0c101b97er			; -8.10779
	DD	0c1001b53r			; -8.00667
	DD	0c0fd0e6cr			; -7.90801
	DD	0c0f9f991r			; -7.81171
	DD	0c0f6f764r			; -7.7177
	DD	0c0f4073dr			; -7.62588
	DD	0c0f1287br			; -7.53619
	DD	0c0ee5a85r			; -7.44855
	DD	0c0eb9cc7r			; -7.36289
	DD	0c0e8eeb5r			; -7.27914
	DD	0c0e64fcbr			; -7.19724
	DD	0c0e3bf88r			; -7.11713
	DD	0c0e13d71r			; -7.03875
	DD	0c0dec912r			; -6.96204
	DD	0c0dc61fbr			; -6.88696
	DD	0c0da07c0r			; -6.81345
	DD	0c0d7b9far			; -6.74145
	DD	0c0d57848r			; -6.67093
	DD	0c0d34249r			; -6.60184
	DD	0c0d117a3r			; -6.53414
	DD	0c0cef800r			; -6.46777
	DD	0c0cce30br			; -6.40272
	DD	0c0cad874r			; -6.33892
	DD	0c0c8d7eer			; -6.27636
	DD	0c0c6e12er			; -6.21499
	DD	0c0c4f3edr			; -6.15478
	DD	0c0c30fe6r			; -6.09569
	DD	0c0c134d7r			; -6.0377
	DD	0c0bf6280r			; -5.98077
	DD	0c0bd98a4r			; -5.92488
	DD	0c0bbd707r			; -5.87
	DD	0c0ba1d70r			; -5.81609
	DD	0c0b86ba9r			; -5.76314
	DD	0c0b6c17cr			; -5.71112
	DD	0c0b51eb6r			; -5.66
	DD	0c0b38325r			; -5.60976
	DD	0c0b1ee9br			; -5.56038
	DD	0c0b060e8r			; -5.51183
	DD	0c0aed9e0r			; -5.4641
	DD	0c0ad5958r			; -5.41716
	DD	0c0abdf27r			; -5.37099
	DD	0c0aa6b25r			; -5.32558
	DD	0c0a8fd29r			; -5.2809
	DD	0c0a79510r			; -5.23695
	DD	0c0a632b4r			; -5.19369
	DD	0c0a4d5f1r			; -5.15112
	DD	0c0a37ea7r			; -5.10921
	DD	0c0a22cb4r			; -5.06796
	DD	0c0a0dff7r			; -5.02734
	DD	0c09f9852r			; -4.98734
	DD	0c09e55a7r			; -4.94796
	DD	0c09d17d8r			; -4.90916
	DD	0c09bdecar			; -4.87095
	DD	0c09aaa60r			; -4.8333
	DD	0c0997a80r			; -4.7962
	DD	0c0984f11r			; -4.75965
	DD	0c09727f9r			; -4.72363
	DD	0c096051fr			; -4.68813
	DD	0c094e66er			; -4.65313
	DD	0c093cbccr			; -4.61863
	DD	0c092b524r			; -4.58461
	DD	0c091a261r			; -4.55107
	DD	0c090936dr			; -4.518
	DD	0c08f8834r			; -4.48538
	DD	0c08e80a2r			; -4.4532
	DD	0c08d7ca3r			; -4.42146
	DD	0c08c7c26r			; -4.39015
	DD	0c08b7f16r			; -4.35926
	DD	0c08a8564r			; -4.32878
	DD	0c0898efcr			; -4.2987
	DD	0c0889bd0r			; -4.26902
	DD	0c087abcdr			; -4.23972
	DD	0c086bee4r			; -4.2108
	DD	0c085d506r			; -4.18225
	DD	0c084ee23r			; -4.15407
	DD	0c0840a2cr			; -4.12624
	DD	0c0832914r			; -4.09876
	DD	0c0824acbr			; -4.07163
	DD	0c0816f46r			; -4.04483
	DD	0c0809675r			; -4.01837
	DD	0c07f8098r			; -3.99222
	DD	0c07dd97er			; -3.9664
	DD	0c07c3781r			; -3.94089
	DD	0c07a9a8br			; -3.91568
	DD	0c0790282r			; -3.89078
	DD	0c0776f52r			; -3.86617
	DD	0c075e0e2r			; -3.84185
	DD	0c074571er			; -3.81782
	DD	0c072d1efr			; -3.79406
	DD	0c0715142r			; -3.77058
	DD	0c06fd501r			; -3.74738
	DD	0c06e5d19r			; -3.72443
	DD	0c06ce976r			; -3.70175
	DD	0c06b7a05r			; -3.67932
	DD	0c06a0eb5r			; -3.65715
	DD	0c068a772r			; -3.63522
	DD	0c067442br			; -3.61354
	DD	0c065e4cfr			; -3.59209
	DD	0c064894dr			; -3.57088
	DD	0c0633194r			; -3.5499
	DD	0c061dd94r			; -3.52915
	DD	0c0608d3er			; -3.50862
	DD	0c05f4081r			; -3.48831
	DD	0c05df74fr			; -3.46822
	DD	0c05cb199r			; -3.44834
	DD	0c05b6f51r			; -3.42867
	DD	0c05a3068r			; -3.4092
	DD	0c058f4d0r			; -3.38994
	DD	0c057bc7cr			; -3.37088
	DD	0c056875fr			; -3.35201
	DD	0c055556cr			; -3.33334
	DD	0c0542695r			; -3.31485
	DD	0c052facfr			; -3.29656
	DD	0c051d20dr			; -3.27845
	DD	0c050ac44r			; -3.26051
	DD	0c04f8967r			; -3.24276
	DD	0c04e696br			; -3.22518
	DD	0c04d4c45r			; -3.20778
	DD	0c04c31ear			; -3.19055
	DD	0c04b1a4fr			; -3.17348
	DD	0c04a056ar			; -3.15658
	DD	0c048f32fr			; -3.13984
	DD	0c047e396r			; -3.12327
	DD	0c046d694r			; -3.10685
	DD	0c045cc1fr			; -3.09058
	DD	0c044c42er			; -3.07447
	DD	0c043beb7r			; -3.05852
	DD	0c042bbb1r			; -3.04271
	DD	0c041bb13r			; -3.02704
	DD	0c040bcd5r			; -3.01153
	DD	0c03fc0edr			; -2.99615
	DD	0c03ec754r			; -2.98092
	DD	0c03dd000r			; -2.96582
	DD	0c03cdae9r			; -2.95086
	DD	0c03be808r			; -2.93604
	DD	0c03af755r			; -2.92135
	DD	0c03a08c7r			; -2.90679
	DD	0c0391c58r			; -2.89235
	DD	0c03831ffr			; -2.87805
	DD	0c03749b6r			; -2.86387
	DD	0c0366375r			; -2.84982
	DD	0c0357f34r			; -2.83589
	DD	0c0349cefr			; -2.82208
	DD	0c033bc9cr			; -2.80839
	DD	0c032de36r			; -2.79481
	DD	0c03201b7r			; -2.78135
	DD	0c0312717r			; -2.76801
	DD	0c0304e50r			; -2.75478
	DD	0c02f775cr			; -2.74166
	DD	0c02ea235r			; -2.72865
	DD	0c02dced5r			; -2.71575
	DD	0c02cfd36r			; -2.70295
	DD	0c02c2d52r			; -2.69027
	DD	0c02b5f24r			; -2.67768
	DD	0c02a92a6r			; -2.6652
	DD	0c029c7d1r			; -2.65282
	DD	0c028fea2r			; -2.64054
	DD	0c0283712r			; -2.62836
	DD	0c027711dr			; -2.61628
	DD	0c026acbcr			; -2.60429
	DD	0c025e9ecr			; -2.5924
	DD	0c02528a7r			; -2.58061
	DD	0c02468e8r			; -2.5689
	DD	0c023aaaar			; -2.55729
	DD	0c022ede9r			; -2.54577
	DD	0c02232a0r			; -2.53434
	DD	0c02178cbr			; -2.523
	DD	0c020c064r			; -2.51174
	DD	0c0200967r			; -2.50057
	DD	0c01f53d1r			; -2.48949
	DD	0c01e9f9cr			; -2.47849
	DD	0c01decc4r			; -2.46758
	DD	0c01d3b46r			; -2.45674
	DD	0c01c8b1dr			; -2.44599
	DD	0c01bdc46r			; -2.43532
	DD	0c01b2ebbr			; -2.42473
	DD	0c01a827ar			; -2.41421
	DD	0c019d77er			; -2.40378
	DD	0c0192dc3r			; -2.39342
	DD	0c0188547r			; -2.38313
	DD	0c017de05r			; -2.37293
	DD	0c01737f9r			; -2.36279
	DD	0c0169321r			; -2.35273
	DD	0c015ef78r			; -2.34274
	DD	0c0154cfbr			; -2.33282
	DD	0c014aba6r			; -2.32298
	DD	0c0140b77r			; -2.3132
	DD	0c0136c6ar			; -2.30349
	DD	0c012ce7cr			; -2.29385
	DD	0c01231a9r			; -2.28428
	DD	0c01195eer			; -2.27478
	DD	0c010fb49r			; -2.26534
	DD	0c01061b6r			; -2.25596
	DD	0c00fc932r			; -2.24665
	DD	0c00f31bbr			; -2.23741
	DD	0c00e9b4cr			; -2.22823
	DD	0c00e05e4r			; -2.21911
	DD	0c00d7180r			; -2.21005
	DD	0c00cde1cr			; -2.20106
	DD	0c00c4bb6r			; -2.19212
	DD	0c00bba4cr			; -2.18325
	DD	0c00b29d9r			; -2.17443
	DD	0c00a9a5dr			; -2.16567
	DD	0c00a0bd4r			; -2.15697
	DD	0c0097e3cr			; -2.14833
	DD	0c008f192r			; -2.13974
	DD	0c00865d3r			; -2.13121
	DD	0c007dafdr			; -2.12274
	DD	0c007510fr			; -2.11432
	DD	0c006c804r			; -2.10596
	DD	0c0063fdcr			; -2.09765
	DD	0c005b893r			; -2.08939
	DD	0c0053227r			; -2.08119
	DD	0c004ac97r			; -2.07303
	DD	0c00427dfr			; -2.06493
	DD	0c003a3fer			; -2.05688
	DD	0c00320f1r			; -2.04889
	DD	0c0029eb6r			; -2.04094
	DD	0c0021d4cr			; -2.03304
	DD	0c0019cafr			; -2.02519
	DD	0c0011cder			; -2.01739
	DD	0c0009dd8r			; -2.00963
	DD	0c0001f99r			; -2.00193
	DD	0bfff4440r			; -1.99427
	DD	0bffe4ad6r			; -1.98666
	DD	0bffd52f0r			; -1.97909
	DD	0bffc5c8ar			; -1.97157
	DD	0bffb67a0r			; -1.9641
	DD	0bffa7430r			; -1.95667
	DD	0bff98234r			; -1.94929
	DD	0bff891a9r			; -1.94195
	DD	0bff7a28cr			; -1.93465
	DD	0bff6b4dar			; -1.92739
	DD	0bff5c88er			; -1.92018
	DD	0bff4dda6r			; -1.91301
	DD	0bff3f41dr			; -1.90589
	DD	0bff30bf2r			; -1.8988
	DD	0bff2251fr			; -1.89176
	DD	0bff13fa2r			; -1.88475
	DD	0bff05b78r			; -1.87779
	DD	0bfef789er			; -1.87087
	DD	0bfee9710r			; -1.86399
	DD	0bfedb6cbr			; -1.85714
	DD	0bfecd7ccr			; -1.85034
	DD	0bfebfa11r			; -1.84357
	DD	0bfeb1d95r			; -1.83684
	DD	0bfea4257r			; -1.83015
	DD	0bfe96853r			; -1.8235
	DD	0bfe88f87r			; -1.81688
	DD	0bfe7b7efr			; -1.8103
	DD	0bfe6e188r			; -1.80376
	DD	0bfe60c51r			; -1.79725
	DD	0bfe53846r			; -1.79078
	DD	0bfe46564r			; -1.78434
	DD	0bfe393a9r			; -1.77794
	DD	0bfe2c312r			; -1.77158
	DD	0bfe1f39cr			; -1.76525
	DD	0bfe12545r			; -1.75895
	DD	0bfe0580br			; -1.75269
	DD	0bfdf8bear			; -1.74646
	DD	0bfdec0e0r			; -1.74026
	DD	0bfddf6ecr			; -1.7341
	DD	0bfdd2e09r			; -1.72797
	DD	0bfdc6637r			; -1.72187
	DD	0bfdb9f72r			; -1.7158
	DD	0bfdad9b8r			; -1.70977
	DD	0bfda1507r			; -1.70377
	DD	0bfd9515dr			; -1.6978
	DD	0bfd88eb6r			; -1.69186
	DD	0bfd7cd12r			; -1.68595
	DD	0bfd70c6er			; -1.68007
	DD	0bfd64cc7r			; -1.67422
	DD	0bfd58e1br			; -1.6684
	DD	0bfd4d069r			; -1.66261
	DD	0bfd413adr			; -1.65685
	DD	0bfd357e7r			; -1.65112
	DD	0bfd29d13r			; -1.64542
	DD	0bfd1e331r			; -1.63975
	DD	0bfd12a3dr			; -1.6341
	DD	0bfd07236r			; -1.62849
	DD	0bfcfbb19r			; -1.6229
	DD	0bfcf04e6r			; -1.61734
	DD	0bfce4f99r			; -1.6118
	DD	0bfcd9b32r			; -1.6063
	DD	0bfcce7adr			; -1.60082
	DD	0bfcc350ar			; -1.59537
	DD	0bfcb8345r			; -1.58994
	DD	0bfcad25fr			; -1.58455
	DD	0bfca2254r			; -1.57917
	DD	0bfc97322r			; -1.57383
	DD	0bfc8c4c9r			; -1.56851
	DD	0bfc81746r			; -1.56321
	DD	0bfc76a98r			; -1.55794
	DD	0bfc6bebcr			; -1.5527
	DD	0bfc613b1r			; -1.54748
	DD	0bfc56976r			; -1.54228
	DD	0bfc4c009r			; -1.53711
	DD	0bfc41767r			; -1.53196
	DD	0bfc36f90r			; -1.52684
	DD	0bfc2c882r			; -1.52174
	DD	0bfc2223br			; -1.51667
	DD	0bfc17cb9r			; -1.51162
	DD	0bfc0d7fcr			; -1.50659
	DD	0bfc03401r			; -1.50159
	DD	0bfbf90c7r			; -1.49661
	DD	0bfbeee4dr			; -1.49165
	DD	0bfbe4c90r			; -1.48671
	DD	0bfbdab90r			; -1.4818
	DD	0bfbd0b4ar			; -1.47691
	DD	0bfbc6bbfr			; -1.47204
	DD	0bfbbccebr			; -1.46719
	DD	0bfbb2ecer			; -1.46237
	DD	0bfba9166r			; -1.45756
	DD	0bfb9f4b2r			; -1.45278
	DD	0bfb958b0r			; -1.44802
	DD	0bfb8bd5fr			; -1.44328
	DD	0bfb822ber			; -1.43856
	DD	0bfb788ccr			; -1.43386
	DD	0bfb6ef86r			; -1.42918
	DD	0bfb656ecr			; -1.42453
	DD	0bfb5befcr			; -1.41989
	DD	0bfb527b6r			; -1.41527
	DD	0bfb49117r			; -1.41068
	DD	0bfb3fb1er			; -1.4061
	DD	0bfb365cbr			; -1.40154
	DD	0bfb2d11cr			; -1.39701
	DD	0bfb23d10r			; -1.39249
	DD	0bfb1a9a5r			; -1.38799
	DD	0bfb116dbr			; -1.38351
	DD	0bfb084b0r			; -1.37905
	DD	0bfaff323r			; -1.37461
	DD	0bfaf6232r			; -1.37018
	DD	0bfaed1der			; -1.36578
	DD	0bfae4224r			; -1.36139
	DD	0bfadb303r			; -1.35703
	DD	0bfad247ar			; -1.35268
	DD	0bfac9689r			; -1.34834
	DD	0bfac092dr			; -1.34403
	DD	0bfab7c66r			; -1.33973
	DD	0bfaaf034r			; -1.33546
	DD	0bfaa6494r			; -1.33119
	DD	0bfa9d985r			; -1.32695
	DD	0bfa94f08r			; -1.32272
	DD	0bfa8c519r			; -1.31851
	DD	0bfa83bbar			; -1.31432
	DD	0bfa7b2e8r			; -1.31015
	DD	0bfa72aa2r			; -1.30599
	DD	0bfa6a2e8r			; -1.30185
	DD	0bfa61bb9r			; -1.29772
	DD	0bfa59513r			; -1.29361
	DD	0bfa50ef5r			; -1.28952
	DD	0bfa4895fr			; -1.28544
	DD	0bfa40450r			; -1.28138
	DD	0bfa37fc6r			; -1.27734
	DD	0bfa2fbc1r			; -1.27331
	DD	0bfa27840r			; -1.26929
	DD	0bfa1f541r			; -1.2653
	DD	0bfa172c5r			; -1.26131
	DD	0bfa0f0car			; -1.25735
	DD	0bfa06f4er			; -1.2534
	DD	0bf9fee52r			; -1.24946
	DD	0bf9f6dd4r			; -1.24554
	DD	0bf9eedd4r			; -1.24163
	DD	0bf9e6e50r			; -1.23774
	DD	0bf9def48r			; -1.23386
	DD	0bf9d70bbr			; -1.23
	DD	0bf9cf2a8r			; -1.22616
	DD	0bf9c750er			; -1.22232
	DD	0bf9bf7ecr			; -1.2185
	DD	0bf9b7b42r			; -1.2147
	DD	0bf9aff0fr			; -1.21091
	DD	0bf9a8352r			; -1.20713
	DD	0bf9a0809r			; -1.20337
	DD	0bf998d35r			; -1.19962
	DD	0bf9912d5r			; -1.19589
	DD	0bf9898e7r			; -1.19217
	DD	0bf981f6br			; -1.18846
	DD	0bf97a660r			; -1.18476
	DD	0bf972dc6r			; -1.18108
	DD	0bf96b59cr			; -1.17742
	DD	0bf963de0r			; -1.17376
	DD	0bf95c693r			; -1.17012
	DD	0bf954fb3r			; -1.16649
	DD	0bf94d93fr			; -1.16288
	DD	0bf946338r			; -1.15928
	DD	0bf93ed9cr			; -1.15569
	DD	0bf93786ar			; -1.15211
	DD	0bf9303a3r			; -1.14855
	DD	0bf928f44r			; -1.145
	DD	0bf921b4er			; -1.14146
	DD	0bf91a7c0r			; -1.13793
	DD	0bf913499r			; -1.13442
	DD	0bf90c1d8r			; -1.13092
	DD	0bf904f7dr			; -1.12743
	DD	0bf8fdd88r			; -1.12395
	DD	0bf8f6bf6r			; -1.12048
	DD	0bf8efac8r			; -1.11703
	DD	0bf8e89fer			; -1.11359
	DD	0bf8e1996r			; -1.11016
	DD	0bf8da990r			; -1.10674
	DD	0bf8d39ebr			; -1.10333
	DD	0bf8ccaa6r			; -1.09993
	DD	0bf8c5bc2r			; -1.09655
	DD	0bf8bed3dr			; -1.09318
	DD	0bf8b7f16r			; -1.08982
	DD	0bf8b114er			; -1.08647
	DD	0bf8aa3e3r			; -1.08313
	DD	0bf8a36d5r			; -1.0798
	DD	0bf89ca24r			; -1.07648
	DD	0bf895dcer			; -1.07318
	DD	0bf88f1d4r			; -1.06988
	DD	0bf888634r			; -1.0666
	DD	0bf881aeer			; -1.06332
	DD	0bf87b001r			; -1.06006
	DD	0bf87456dr			; -1.05681
	DD	0bf86db32r			; -1.05356
	DD	0bf86714fr			; -1.05033
	DD	0bf8607c2r			; -1.04711
	DD	0bf859e8cr			; -1.0439
	DD	0bf8535adr			; -1.0407
	DD	0bf84cd23r			; -1.03751
	DD	0bf8464eer			; -1.03433
	DD	0bf83fd0dr			; -1.03116
	DD	0bf839581r			; -1.028
	DD	0bf832e48r			; -1.02485
	DD	0bf82c762r			; -1.02171
	DD	0bf8260cer			; -1.01858
	DD	0bf81fa8dr			; -1.01546
	DD	0bf81949dr			; -1.01235
	DD	0bf812efdr			; -1.00925
	DD	0bf80c9aer			; -1.00615
	DD	0bf8064afr			; -1.00307
	DD	0bf800000r			; -1
	DD	0bf7f373fr			; -0.996937
	DD	0bf7e6f1br			; -0.993883
	DD	0bf7da793r			; -0.990838
	DD	0bf7ce0a6r			; -0.987803
	DD	0bf7c1a53r			; -0.984777
	DD	0bf7b5499r			; -0.98176
	DD	0bf7a8f77r			; -0.978752
	DD	0bf79caedr			; -0.975753
	DD	0bf7906f9r			; -0.972763
	DD	0bf78439br			; -0.969782
	DD	0bf7780d1r			; -0.966809
	DD	0bf76be9br			; -0.963846
	DD	0bf75fcf7r			; -0.960891
	DD	0bf753be6r			; -0.957945
	DD	0bf747b66r			; -0.955008
	DD	0bf73bb75r			; -0.952079
	DD	0bf72fc15r			; -0.949159
	DD	0bf723d42r			; -0.946247
	DD	0bf717efdr			; -0.943344
	DD	0bf70c145r			; -0.940449
	DD	0bf700419r			; -0.937563
	DD	0bf6f4778r			; -0.934684
	DD	0bf6e8b62r			; -0.931814
	DD	0bf6dcfd4r			; -0.928952
	DD	0bf6d14d0r			; -0.926099
	DD	0bf6c5a53r			; -0.923253
	DD	0bf6ba05dr			; -0.920416
	DD	0bf6ae6eer			; -0.917586
	DD	0bf6a2e04r			; -0.914765
	DD	0bf69759er			; -0.911951
	DD	0bf68bdbdr			; -0.909145
	DD	0bf68065er			; -0.906347
	DD	0bf674f82r			; -0.903557
	DD	0bf669928r			; -0.900774
	DD	0bf65e34er			; -0.898
	DD	0bf652df5r			; -0.895232
	DD	0bf64791ar			; -0.892473
	DD	0bf63c4bfr			; -0.889721
	DD	0bf6310e1r			; -0.886976
	DD	0bf625d80r			; -0.884239
	DD	0bf61aa9cr			; -0.88151
	DD	0bf60f834r			; -0.878787
	DD	0bf604646r			; -0.876072
	DD	0bf5f94d3r			; -0.873365
	DD	0bf5ee3d9r			; -0.870664
	DD	0bf5e3358r			; -0.867971
	DD	0bf5d834fr			; -0.865285
	DD	0bf5cd3ber			; -0.862606
	DD	0bf5c24a4r			; -0.859934
	DD	0bf5b75ffr			; -0.857269
	DD	0bf5ac7d0r			; -0.854611
	DD	0bf5a1a16r			; -0.851961
	DD	0bf596cd0r			; -0.849317
	DD	0bf58bffdr			; -0.84668
	DD	0bf58139er			; -0.844049
	DD	0bf5767b0r			; -0.841426
	DD	0bf56bc34r			; -0.838809
	DD	0bf561128r			; -0.836199
	DD	0bf55668dr			; -0.833596
	DD	0bf54bc61r			; -0.830999
	DD	0bf5412a4r			; -0.828409
	DD	0bf536956r			; -0.825826
	DD	0bf52c075r			; -0.823249
	DD	0bf521801r			; -0.820679
	DD	0bf516ffar			; -0.818115
	DD	0bf50c85fr			; -0.815557
	DD	0bf50212er			; -0.813006
	DD	0bf4f7a69r			; -0.810462
	DD	0bf4ed40dr			; -0.807923
	DD	0bf4e2e1br			; -0.805391
	DD	0bf4d8892r			; -0.802865
	DD	0bf4ce370r			; -0.800345
	DD	0bf4c3eb7r			; -0.797832
	DD	0bf4b9a65r			; -0.795325
	DD	0bf4af679r			; -0.792823
	DD	0bf4a52f3r			; -0.790328
	DD	0bf49afd3r			; -0.787839
	DD	0bf490d17r			; -0.785356
	DD	0bf486ac0r			; -0.782879
	DD	0bf47c8ccr			; -0.780408
	DD	0bf47273br			; -0.777942
	DD	0bf46860dr			; -0.775483
	DD	0bf45e541r			; -0.773029
	DD	0bf4544d7r			; -0.770582
	DD	0bf44a4cer			; -0.76814
	DD	0bf440525r			; -0.765703
	DD	0bf4365dcr			; -0.763273
	DD	0bf42c6f2r			; -0.760848
	DD	0bf422867r			; -0.758429
	DD	0bf418a3ar			; -0.756015
	DD	0bf40ec6cr			; -0.753608
	DD	0bf404efar			; -0.751205
	DD	0bf3fb1e6r			; -0.748808
	DD	0bf3f152dr			; -0.746417
	DD	0bf3e78d1r			; -0.744031
	DD	0bf3ddccfr			; -0.741651
	DD	0bf3d4129r			; -0.739276
	DD	0bf3ca5ddr			; -0.736906
	DD	0bf3c0aear			; -0.734542
	DD	0bf3b7051r			; -0.732183
	DD	0bf3ad610r			; -0.729829
	DD	0bf3a3c28r			; -0.72748
	DD	0bf39a298r			; -0.725137
	DD	0bf39095fr			; -0.722799
	DD	0bf38707dr			; -0.720466
	DD	0bf37d7f2r			; -0.718139
	DD	0bf373fbcr			; -0.715816
	DD	0bf36a7dcr			; -0.713499
	DD	0bf361051r			; -0.711186
	DD	0bf35791ar			; -0.708879
	DD	0bf34e238r			; -0.706577
	DD	0bf344ba9r			; -0.704279
	DD	0bf33b56dr			; -0.701987
	DD	0bf331f84r			; -0.6997
	DD	0bf3289edr			; -0.697417
	DD	0bf31f4a9r			; -0.695139
	DD	0bf315fb5r			; -0.692867
	DD	0bf30cb13r			; -0.690599
	DD	0bf3036c1r			; -0.688335
	DD	0bf2fa2bfr			; -0.686077
	DD	0bf2f0f0dr			; -0.683823
	DD	0bf2e7baar			; -0.681574
	DD	0bf2de896r			; -0.67933
	DD	0bf2d55d0r			; -0.677091
	DD	0bf2cc359r			; -0.674856
	DD	0bf2c312fr			; -0.672625
	DD	0bf2b9f52r			; -0.6704
	DD	0bf2b0dc1r			; -0.668179
	DD	0bf2a7c7dr			; -0.665962
	DD	0bf29eb85r			; -0.66375
	DD	0bf295ad9r			; -0.661542
	DD	0bf28ca77r			; -0.659339
	DD	0bf283a60r			; -0.657141
	DD	0bf27aa94r			; -0.654947
	DD	0bf271b11r			; -0.652757
	DD	0bf268bd8r			; -0.650571
	DD	0bf25fce8r			; -0.64839
	DD	0bf256e41r			; -0.646214
	DD	0bf24dfe2r			; -0.644041
	DD	0bf2451cbr			; -0.641873
	DD	0bf23c3fcr			; -0.639709
	DD	0bf233673r			; -0.63755
	DD	0bf22a932r			; -0.635394
	DD	0bf221c37r			; -0.633243
	DD	0bf218f82r			; -0.631096
	DD	0bf210313r			; -0.628953
	DD	0bf2076e9r			; -0.626814
	DD	0bf1feb03r			; -0.62468
	DD	0bf1f5f63r			; -0.622549
	DD	0bf1ed407r			; -0.620423
	DD	0bf1e48eer			; -0.6183
	DD	0bf1dbe19r			; -0.616182
	DD	0bf1d3387r			; -0.614067
	DD	0bf1ca938r			; -0.611957
	DD	0bf1c1f2cr			; -0.609851
	DD	0bf1b9561r			; -0.607748
	DD	0bf1b0bd8r			; -0.605649
	DD	0bf1a8291r			; -0.603555
	DD	0bf19f98ar			; -0.601464
	DD	0bf1970c4r			; -0.599377
	DD	0bf18e83fr			; -0.597294
	DD	0bf185ff9r			; -0.595214
	DD	0bf17d7f3r			; -0.593139
	DD	0bf17502dr			; -0.591067
	DD	0bf16c8a5r			; -0.588999
	DD	0bf16415cr			; -0.586935
	DD	0bf15ba52r			; -0.584874
	DD	0bf153385r			; -0.582817
	DD	0bf14acf6r			; -0.580764
	DD	0bf1426a4r			; -0.578715
	DD	0bf13a08fr			; -0.576669
	DD	0bf131ab7r			; -0.574626
	DD	0bf12951cr			; -0.572588
	DD	0bf120fbcr			; -0.570553
	DD	0bf118a98r			; -0.568521
	DD	0bf1105afr			; -0.566493
	DD	0bf108102r			; -0.564469
	DD	0bf0ffc8fr			; -0.562447
	DD	0bf0f7857r			; -0.56043
	DD	0bf0ef459r			; -0.558416
	DD	0bf0e7095r			; -0.556405
	DD	0bf0ded0ar			; -0.554398
	DD	0bf0d69b9r			; -0.552394
	DD	0bf0ce6a0r			; -0.550394
	DD	0bf0c63c0r			; -0.548397
	DD	0bf0be118r			; -0.546403
	DD	0bf0b5ea9r			; -0.544413
	DD	0bf0adc71r			; -0.542426
	DD	0bf0a5a70r			; -0.540442
	DD	0bf09d8a7r			; -0.538462
	DD	0bf095715r			; -0.536485
	DD	0bf08d5b9r			; -0.534511
	DD	0bf085493r			; -0.532541
	DD	0bf07d3a3r			; -0.530573
	DD	0bf0752e9r			; -0.528609
	DD	0bf06d265r			; -0.526648
	DD	0bf065215r			; -0.52469
	DD	0bf05d1fbr			; -0.522735
	DD	0bf055215r			; -0.520784
	DD	0bf04d263r			; -0.518835
	DD	0bf0452e5r			; -0.51689
	DD	0bf03d39br			; -0.514948
	DD	0bf035484r			; -0.513008
	DD	0bf02d5a1r			; -0.511072
	DD	0bf0256f0r			; -0.509139
	DD	0bf01d872r			; -0.507209
	DD	0bf015a26r			; -0.505282
	DD	0bf00dc0dr			; -0.503358
	DD	0bf005e25r			; -0.501437
	DD	0beffc0der			; -0.499518
	DD	0befec5d4r			; -0.497603
	DD	0befdcb2cr			; -0.495691
	DD	0befcd0e6r			; -0.493781
	DD	0befbd701r			; -0.491875
	DD	0befadd7cr			; -0.489971
	DD	0bef9e457r			; -0.48807
	DD	0bef8eb91r			; -0.486172
	DD	0bef7f32br			; -0.484277
	DD	0bef6fb23r			; -0.482385
	DD	0bef60378r			; -0.480495
	DD	0bef50c2cr			; -0.478608
	DD	0bef4153cr			; -0.476725
	DD	0bef31ea8r			; -0.474843
	DD	0bef22870r			; -0.472965
	DD	0bef13294r			; -0.471089
	DD	0bef03d13r			; -0.469216
	DD	0beef47ecr			; -0.467346
	DD	0beee531fr			; -0.465478
	DD	0beed5eabr			; -0.463613
	DD	0beec6a90r			; -0.461751
	DD	0beeb76cer			; -0.459891
	DD	0beea8364r			; -0.458034
	DD	0bee99051r			; -0.456179
	DD	0bee89d96r			; -0.454327
	DD	0bee7ab31r			; -0.452478
	DD	0bee6b922r			; -0.450631
	DD	0bee5c768r			; -0.448787
	DD	0bee4d604r			; -0.446945
	DD	0bee3e4f4r			; -0.445106
	DD	0bee2f439r			; -0.44327
	DD	0bee203d1r			; -0.441435
	DD	0bee113bdr			; -0.439604
	DD	0bee023fbr			; -0.437775
	DD	0bedf348cr			; -0.435948
	DD	0bede456fr			; -0.434123
	DD	0bedd56a3r			; -0.432302
	DD	0bedc6828r			; -0.430482
	DD	0bedb79fer			; -0.428665
	DD	0beda8c24r			; -0.42685
	DD	0bed99e9ar			; -0.425038
	DD	0bed8b15fr			; -0.423228
	DD	0bed7c473r			; -0.421421
	DD	0bed6d7d5r			; -0.419615
	DD	0bed5eb85r			; -0.417812
	DD	0bed4ff82r			; -0.416012
	DD	0bed413cdr			; -0.414214
	DD	0bed32864r			; -0.412418
	DD	0bed23d47r			; -0.410624
	DD	0bed15277r			; -0.408832
	DD	0bed067f1r			; -0.407043
	DD	0becf7db7r			; -0.405256
	DD	0bece93c7r			; -0.403471
	DD	0becdaa21r			; -0.401689
	DD	0beccc0c4r			; -0.399908
	DD	0becbd7b1r			; -0.39813
	DD	0becaeee7r			; -0.396354
	DD	0beca0666r			; -0.39458
	DD	0bec91e2cr			; -0.392808
	DD	0bec8363ar			; -0.391039
	DD	0bec74e8fr			; -0.389271
	DD	0bec6672ar			; -0.387506
	DD	0bec5800dr			; -0.385743
	DD	0bec49935r			; -0.383981
	DD	0bec3b2a3r			; -0.382222
	DD	0bec2cc56r			; -0.380465
	DD	0bec1e64dr			; -0.37871
	DD	0bec10089r			; -0.376957
	DD	0bec01b0ar			; -0.375206
	DD	0bebf35cdr			; -0.373457
	DD	0bebe50d4r			; -0.37171
	DD	0bebd6c1er			; -0.369965
	DD	0bebc87aar			; -0.368223
	DD	0bebba378r			; -0.366482
	DD	0bebabf88r			; -0.364743
	DD	0beb9dbd9r			; -0.363005
	DD	0beb8f86br			; -0.36127
	DD	0beb8153dr			; -0.359537
	DD	0beb73250r			; -0.357806
	DD	0beb64fa2r			; -0.356076
	DD	0beb56d34r			; -0.354349
	DD	0beb48b04r			; -0.352623
	DD	0beb3a913r			; -0.350899
	DD	0beb2c761r			; -0.349177
	DD	0beb1e5ecr			; -0.347457
	DD	0beb104b5r			; -0.345739
	DD	0beb023bbr			; -0.344023
	DD	0beaf42fer			; -0.342308
	DD	0beae627dr			; -0.340595
	DD	0bead8238r			; -0.338884
	DD	0beaca22fr			; -0.337175
	DD	0beabc261r			; -0.335467
	DD	0beaae2cer			; -0.333762
	DD	0beaa0375r			; -0.332058
	DD	0bea92457r			; -0.330355
	DD	0bea84573r			; -0.328655
	DD	0bea766c8r			; -0.326956
	DD	0bea68856r			; -0.325259
	DD	0bea5aa1dr			; -0.323563
	DD	0bea4cc1dr			; -0.32187
	DD	0bea3ee54r			; -0.320178
	DD	0bea310c4r			; -0.318487
	DD	0bea2336br			; -0.316799
	DD	0bea15648r			; -0.315111
	DD	0bea0795dr			; -0.313426
	DD	0be9f9ca8r			; -0.311742
	DD	0be9ec029r			; -0.31006
	DD	0be9de3dfr			; -0.308379
	DD	0be9d07cbr			; -0.3067
	DD	0be9c2becr			; -0.305023
	DD	0be9b5042r			; -0.303347
	DD	0be9a74ccr			; -0.301672
	DD	0be999989r			; -0.3
	DD	0be98be7br			; -0.298328
	DD	0be97e3a0r			; -0.296659
	DD	0be9708f7r			; -0.29499
	DD	0be962e82r			; -0.293324
	DD	0be95543er			; -0.291658
	DD	0be947a2dr			; -0.289995
	DD	0be93a04dr			; -0.288332
	DD	0be92c69fr			; -0.286672
	DD	0be91ed21r			; -0.285012
	DD	0be9113d5r			; -0.283354
	DD	0be903ab8r			; -0.281698
	DD	0be8f61ccr			; -0.280043
	DD	0be8e890fr			; -0.278389
	DD	0be8db082r			; -0.276737
	DD	0be8cd824r			; -0.275087
	DD	0be8bfff4r			; -0.273437
	DD	0be8b27f3r			; -0.271789
	DD	0be8a5020r			; -0.270143
	DD	0be89787br			; -0.268497
	DD	0be88a103r			; -0.266853
	DD	0be87c9b8r			; -0.265211
	DD	0be86f29ar			; -0.26357
	DD	0be861ba9r			; -0.26193
	DD	0be8544e4r			; -0.260291
	DD	0be846e4ar			; -0.258654
	DD	0be8397ddr			; -0.257018
	DD	0be82c19ar			; -0.255383
	DD	0be81eb83r			; -0.25375
	DD	0be811596r			; -0.252118
	DD	0be803fd4r			; -0.250487
	DD	0be7ed477r			; -0.248857
	DD	0be7d2999r			; -0.247229
	DD	0be7b7f0fr			; -0.245602
	DD	0be79d4d6r			; -0.243976
	DD	0be782af0r			; -0.242351
	DD	0be76815ar			; -0.240728
	DD	0be74d815r			; -0.239106
	DD	0be732f20r			; -0.237484
	DD	0be718679r			; -0.235865
	DD	0be6fde22r			; -0.234246
	DD	0be6e3619r			; -0.232628
	DD	0be6c8e5dr			; -0.231012
	DD	0be6ae6edr			; -0.229397
	DD	0be693fcbr			; -0.227782
	DD	0be6798f3r			; -0.226169
	DD	0be65f267r			; -0.224558
	DD	0be644c26r			; -0.222947
	DD	0be62a62er			; -0.221337
	DD	0be610080r			; -0.219728
	DD	0be5f5b1ar			; -0.218121
	DD	0be5db5fdr			; -0.216515
	DD	0be5c1127r			; -0.214909
	DD	0be5a6c98r			; -0.213305
	DD	0be58c84fr			; -0.211702
	DD	0be57244dr			; -0.210099
	DD	0be558090r			; -0.208498
	DD	0be53dd17r			; -0.206898
	DD	0be5239e3r			; -0.205299
	DD	0be5096f2r			; -0.203701
	DD	0be4ef444r			; -0.202104
	DD	0be4d51d9r			; -0.200508
	DD	0be4bafafr			; -0.198912
	DD	0be4a0dc7r			; -0.197318
	DD	0be486c1fr			; -0.195725
	DD	0be46cab8r			; -0.194133
	DD	0be452990r			; -0.192541
	DD	0be4388a8r			; -0.190951
	DD	0be41e7fer			; -0.189362
	DD	0be404791r			; -0.187773
	DD	0be3ea763r			; -0.186185
	DD	0be3d0771r			; -0.184599
	DD	0be3b67bbr			; -0.183013
	DD	0be39c841r			; -0.181428
	DD	0be382902r			; -0.179844
	DD	0be3689fer			; -0.178261
	DD	0be34eb34r			; -0.176678
	DD	0be334ca4r			; -0.175097
	DD	0be31ae4dr			; -0.173516
	DD	0be30102er			; -0.171937
	DD	0be2e7246r			; -0.170358
	DD	0be2cd497r			; -0.16878
	DD	0be2b371er			; -0.167202
	DD	0be2999dbr			; -0.165626
	DD	0be27fccer			; -0.16405
	DD	0be265ff7r			; -0.162475
	DD	0be24c354r			; -0.160901
	DD	0be2326e5r			; -0.159328
	DD	0be218aaar			; -0.157756
	DD	0be1feea1r			; -0.156184
	DD	0be1e52ccr			; -0.154613
	DD	0be1cb728r			; -0.153042
	DD	0be1b1bb6r			; -0.151473
	DD	0be198074r			; -0.149904
	DD	0be17e564r			; -0.148336
	DD	0be164a83r			; -0.146769
	DD	0be14afd1r			; -0.145202
	DD	0be13154er			; -0.143636
	DD	0be117afar			; -0.142071
	DD	0be0fe0d3r			; -0.140506
	DD	0be0e46d9r			; -0.138942
	DD	0be0cad0dr			; -0.137379
	DD	0be0b136cr			; -0.135816
	DD	0be0979f7r			; -0.134254
	DD	0be07e0aer			; -0.132693
	DD	0be06478fr			; -0.131132
	DD	0be04ae9ar			; -0.129572
	DD	0be0315cer			; -0.128013
	DD	0be017d2cr			; -0.126454
	DD	0bdffc965r			; -0.124896
	DD	0bdfc98c2r			; -0.123338
	DD	0bdf9686er			; -0.121781
	DD	0bdf63868r			; -0.120225
	DD	0bdf308afr			; -0.118669
	DD	0bdefd942r			; -0.117114
	DD	0bdecaa20r			; -0.115559
	DD	0bde97b48r			; -0.114005
	DD	0bde64cb9r			; -0.112451
	DD	0bde31e72r			; -0.110898
	DD	0bddff072r			; -0.109345
	DD	0bddcc2b7r			; -0.107793
	DD	0bdd99542r			; -0.106242
	DD	0bdd66810r			; -0.104691
	DD	0bdd33b22r			; -0.10314
	DD	0bdd00e75r			; -0.10159
	DD	0bdcce209r			; -0.100041
	DD	0bdc9b5dcr			; -0.0984914
	DD	0bdc689efr			; -0.0969428
	DD	0bdc35e3fr			; -0.0953946
	DD	0bdc032cdr			; -0.0938469
	DD	0bdbd0796r			; -0.0922996
	DD	0bdb9dc99r			; -0.0907528
	DD	0bdb6b1d7r			; -0.0892064
	DD	0bdb3874dr			; -0.0876604
	DD	0bdb05cfcr			; -0.0861149
	DD	0bdad32e1r			; -0.0845697
	DD	0bdaa08fbr			; -0.0830249
	DD	0bda6df4br			; -0.0814806
	DD	0bda3b5cfr			; -0.0799366
	DD	0bda08c85r			; -0.078393
	DD	0bd9d636dr			; -0.0768498
	DD	0bd9a3a86r			; -0.0753069
	DD	0bd9711cer			; -0.0737644
	DD	0bd93e946r			; -0.0722223
	DD	0bd90c0ebr			; -0.0706805
	DD	0bd8d98ber			; -0.069139
	DD	0bd8a70bcr			; -0.0675978
	DD	0bd8748e5r			; -0.066057
	DD	0bd842138r			; -0.0645165
	DD	0bd80f9b4r			; -0.0629763
	DD	0bd7ba4afr			; -0.0614364
	DD	0bd755645r			; -0.0598967
	DD	0bd6f0826r			; -0.0583574
	DD	0bd68ba52r			; -0.0568183
	DD	0bd626cc5r			; -0.0552795
	DD	0bd5c1f7fr			; -0.053741
	DD	0bd55d27dr			; -0.0522027
	DD	0bd4f85bcr			; -0.0506646
	DD	0bd49393cr			; -0.0491268
	DD	0bd42ecfar			; -0.0475893
	DD	0bd3ca0f5r			; -0.0460519
	DD	0bd36552ar			; -0.0445148
	DD	0bd300997r			; -0.0429779
	DD	0bd29be3ar			; -0.0414412
	DD	0bd237312r			; -0.0399047
	DD	0bd1d281cr			; -0.0383683
	DD	0bd16dd57r			; -0.0368322
	DD	0bd1092c1r			; -0.0352962
	DD	0bd0a4857r			; -0.0337604
	DD	0bd03fe18r			; -0.0322247
	DD	0bcfb6803r			; -0.0306892
	DD	0bceed424r			; -0.0291539
	DD	0bce2408er			; -0.0276187
	DD	0bcd5ad3fr			; -0.0260836
	DD	0bcc91a31r			; -0.0245486
	DD	0bcbc8762r			; -0.0230138
	DD	0bcaff4ccr			; -0.021479
	DD	0bca3626dr			; -0.0199444
	DD	0bc96d040r			; -0.0184098
	DD	0bc8a3e42r			; -0.0168754
	DD	0bc7b58ddr			; -0.015341
	DD	0bc623584r			; -0.0138067
	DD	0bc491270r			; -0.0122725
	DD	0bc2fef9ar			; -0.0107383
	DD	0bc16ccfbr			; -0.00920414
	DD	0bbfb5514r			; -0.00767005
	DD	0bbc91080r			; -0.006136
	DD	0bb96cc2ar			; -0.00460197
	DD	0bb491004r			; -0.00306797
	DD	0bac90fe5r			; -0.00153398
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	___local_stdio_printf_options
PUBLIC	___local_stdio_scanf_options
PUBLIC	__vsnprintf_l
PUBLIC	_vsprintf
PUBLIC	__vsscanf_l
PUBLIC	_sscanf
PUBLIC	??0exception@std@@QAE@QBDH@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@AAE@QBD@Z			; std::bad_alloc::bad_alloc
PUBLIC	??1bad_alloc@std@@UAE@XZ			; std::bad_alloc::~bad_alloc
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?max@?$numeric_limits@H@std@@SAHXZ		; std::numeric_limits<int>::max
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
PUBLIC	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
PUBLIC	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators
PUBLIC	?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
PUBLIC	?_Swap_proxy_and_iterators_unlocked@_Container_base12@std@@AAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators_unlocked
PUBLIC	?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_locked_v3
PUBLIC	?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators_locked
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt_unlocked
PUBLIC	?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt_locked
PUBLIC	?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked_v3
PUBLIC	?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_locked_v3
PUBLIC	??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>
PUBLIC	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release
PUBLIC	??0_Basic_container_proxy_ptr12@std@@IAE@XZ	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
PUBLIC	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z	; std::_Char_traits<char,int>::copy
PUBLIC	?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z	; std::_Char_traits<char,int>::move
PUBLIC	?compare@?$_Narrow_char_traits@DH@std@@SAHQBD0I@Z ; std::_Narrow_char_traits<char,int>::compare
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXQADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
PUBLIC	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_mode_engaged
PUBLIC	?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Switch_to_buf
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAAV?$allocator@D@2@QADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Deallocate_for_capacity
PUBLIC	?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_empty
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??BCVec@@QBEPBMXZ				; CVec::operator float const *
PUBLIC	??ACVec@@QAEAAMH@Z				; CVec::operator[]
PUBLIC	??_GCVec@@QAEPAXI@Z				; CVec::`scalar deleting destructor'
PUBLIC	?VecInterpolate@@YAMMMM@Z			; VecInterpolate
PUBLIC	??0CIdvBezierSpline@@QAE@XZ			; CIdvBezierSpline::CIdvBezierSpline
PUBLIC	??0CIdvBezierSpline@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CIdvBezierSpline::CIdvBezierSpline
PUBLIC	??0CIdvBezierSpline@@QAE@ABV0@@Z		; CIdvBezierSpline::CIdvBezierSpline
PUBLIC	??1CIdvBezierSpline@@QAE@XZ			; CIdvBezierSpline::~CIdvBezierSpline
PUBLIC	?Evaluate@CIdvBezierSpline@@QBEMM@Z		; CIdvBezierSpline::Evaluate
PUBLIC	?Parse@CIdvBezierSpline@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CIdvBezierSpline::Parse
PUBLIC	?Save@CIdvBezierSpline@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ; CIdvBezierSpline::Save
PUBLIC	?ScaledVariance@CIdvBezierSpline@@QBEMM@Z	; CIdvBezierSpline::ScaledVariance
PUBLIC	?ClearCache@CIdvBezierSpline@@SAXXZ		; CIdvBezierSpline::ClearCache
PUBLIC	?AddControlPoint@CIdvBezierSpline@@AAEXQAM0M@Z	; CIdvBezierSpline::AddControlPoint
PUBLIC	?CreateEvenlySpacedPoints@CIdvBezierSpline@@AAEXI@Z ; CIdvBezierSpline::CreateEvenlySpacedPoints
PUBLIC	?EvaluateRawPoint@CIdvBezierSpline@@AAE?AVCVec@@M@Z ; CIdvBezierSpline::EvaluateRawPoint
PUBLIC	?SplineInterpolate@CIdvBezierSpline@@AAE?AVCVec@@ABV2@000M@Z ; CIdvBezierSpline::SplineInterpolate
PUBLIC	??0?$allocator@VCVec@@@std@@QAE@XZ		; std::allocator<CVec>::allocator<CVec>
PUBLIC	?deallocate@?$allocator@VCVec@@@std@@QAEXQAVCVec@@I@Z ; std::allocator<CVec>::deallocate
PUBLIC	?allocate@?$allocator@VCVec@@@std@@QAEPAVCVec@@I@Z ; std::allocator<CVec>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAIABV?$allocator@VCVec@@@2@@Z ; std::_Default_allocator_traits<std::allocator<CVec> >::max_size
PUBLIC	??0?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::vector<CVec,std::allocator<CVec> >
PUBLIC	??1?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::~vector<CVec,std::allocator<CVec> >
PUBLIC	?push_back@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEXABVCVec@@@Z ; std::vector<CVec,std::allocator<CVec> >::push_back
PUBLIC	?push_back@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEX$$QAVCVec@@@Z ; std::vector<CVec,std::allocator<CVec> >::push_back
PUBLIC	??4?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CVec,std::allocator<CVec> >::operator=
PUBLIC	?resize@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEXI@Z ; std::vector<CVec,std::allocator<CVec> >::resize
PUBLIC	?_Clear_and_reserve_geometric@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXI@Z ; std::vector<CVec,std::allocator<CVec> >::_Clear_and_reserve_geometric
PUBLIC	?clear@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEXXZ ; std::vector<CVec,std::allocator<CVec> >::clear
PUBLIC	?empty@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBE_NXZ ; std::vector<CVec,std::allocator<CVec> >::empty
PUBLIC	?size@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ ; std::vector<CVec,std::allocator<CVec> >::size
PUBLIC	?max_size@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ ; std::vector<CVec,std::allocator<CVec> >::max_size
PUBLIC	?capacity@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ ; std::vector<CVec,std::allocator<CVec> >::capacity
PUBLIC	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
PUBLIC	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEABVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
PUBLIC	?_Calculate_growth@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEII@Z ; std::vector<CVec,std::allocator<CVec> >::_Calculate_growth
PUBLIC	?_Buy_raw@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXI@Z ; std::vector<CVec,std::allocator<CVec> >::_Buy_raw
PUBLIC	?_Change_array@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXQAVCVec@@II@Z ; std::vector<CVec,std::allocator<CVec> >::_Change_array
PUBLIC	?_Tidy@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXXZ ; std::vector<CVec,std::allocator<CVec> >::_Tidy
PUBLIC	?_Xlength@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@CAXXZ ; std::vector<CVec,std::allocator<CVec> >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z ; std::vector<CVec,std::allocator<CVec> >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z ; std::vector<CVec,std::allocator<CVec> >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z ; std::vector<CVec,std::allocator<CVec> >::_Orphan_range
PUBLIC	?_Getal@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAV?$allocator@VCVec@@@2@XZ ; std::vector<CVec,std::allocator<CVec> >::_Getal
PUBLIC	?_Getal@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEABV?$allocator@VCVec@@@2@XZ ; std::vector<CVec,std::allocator<CVec> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@VCVec@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CVec> >::_Vector_val<std::_Simple_types<CVec> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@VCVec@@@std@@V?$_Vector_val@U?$_Simple_types@VCVec@@@std@@@2@$00@std@@QAEAAV?$allocator@VCVec@@@2@XZ ; std::_Compressed_pair<std::allocator<CVec>,std::_Vector_val<std::_Simple_types<CVec> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@VCVec@@@std@@V?$_Vector_val@U?$_Simple_types@VCVec@@@std@@@2@$00@std@@QBEABV?$allocator@VCVec@@@2@XZ ; std::_Compressed_pair<std::allocator<CVec>,std::_Vector_val<std::_Simple_types<CVec> >,1>::_Get_first
PUBLIC	??0?$allocator@M@std@@QAE@XZ			; std::allocator<float>::allocator<float>
PUBLIC	?deallocate@?$allocator@M@std@@QAEXQAMI@Z	; std::allocator<float>::deallocate
PUBLIC	?allocate@?$allocator@M@std@@QAEPAMI@Z		; std::allocator<float>::allocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAIABV?$allocator@M@2@@Z ; std::_Default_allocator_traits<std::allocator<float> >::max_size
PUBLIC	??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ	; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >
PUBLIC	??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ	; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
PUBLIC	?push_back@?$vector@MV?$allocator@M@std@@@std@@QAEXABM@Z ; std::vector<float,std::allocator<float> >::push_back
PUBLIC	??4?$vector@MV?$allocator@M@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<float,std::allocator<float> >::operator=
PUBLIC	?_Clear_and_reserve_geometric@?$vector@MV?$allocator@M@std@@@std@@AAEXI@Z ; std::vector<float,std::allocator<float> >::_Clear_and_reserve_geometric
PUBLIC	?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::max_size
PUBLIC	?capacity@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::capacity
PUBLIC	??A?$vector@MV?$allocator@M@std@@@std@@QAEAAMI@Z ; std::vector<float,std::allocator<float> >::operator[]
PUBLIC	??A?$vector@MV?$allocator@M@std@@@std@@QBEABMI@Z ; std::vector<float,std::allocator<float> >::operator[]
PUBLIC	?_Calculate_growth@?$vector@MV?$allocator@M@std@@@std@@ABEII@Z ; std::vector<float,std::allocator<float> >::_Calculate_growth
PUBLIC	?_Buy_raw@?$vector@MV?$allocator@M@std@@@std@@AAEXI@Z ; std::vector<float,std::allocator<float> >::_Buy_raw
PUBLIC	?_Change_array@?$vector@MV?$allocator@M@std@@@std@@AAEXQAMII@Z ; std::vector<float,std::allocator<float> >::_Change_array
PUBLIC	?_Tidy@?$vector@MV?$allocator@M@std@@@std@@AAEXXZ ; std::vector<float,std::allocator<float> >::_Tidy
PUBLIC	?_Xlength@?$vector@MV?$allocator@M@std@@@std@@CAXXZ ; std::vector<float,std::allocator<float> >::_Xlength
PUBLIC	?_Orphan_range_unlocked@?$vector@MV?$allocator@M@std@@@std@@ABEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Orphan_range_unlocked
PUBLIC	?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@ABEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Orphan_range_locked
PUBLIC	?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@ABEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Orphan_range
PUBLIC	?_Getal@?$vector@MV?$allocator@M@std@@@std@@AAEAAV?$allocator@M@2@XZ ; std::vector<float,std::allocator<float> >::_Getal
PUBLIC	?_Getal@?$vector@MV?$allocator@M@std@@@std@@ABEABV?$allocator@M@2@XZ ; std::vector<float,std::allocator<float> >::_Getal
PUBLIC	??0?$_Vector_val@U?$_Simple_types@M@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<float> >::_Vector_val<std::_Simple_types<float> >
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QAEAAV?$allocator@M@2@XZ ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QBEABV?$allocator@M@2@XZ ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Get_first
PUBLIC	??4CIdvBezierSpline@@QAEAAV0@ABV0@@Z		; CIdvBezierSpline::operator=
PUBLIC	??_GCIdvBezierSpline@@QAEPAXI@Z			; CIdvBezierSpline::`scalar deleting destructor'
PUBLIC	??0?$tuple@$$V@std@@QAE@ABV01@@Z		; std::tuple<>::tuple<>
PUBLIC	?_Throw_tree_length_error@std@@YAXXZ		; std::_Throw_tree_length_error
PUBLIC	??0?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >
PUBLIC	?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >::deallocate
PUBLIC	?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >::allocate
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::deallocate
PUBLIC	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::max_size
PUBLIC	??0?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >
PUBLIC	??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::~_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >
PUBLIC	?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::begin
PUBLIC	?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::end
PUBLIC	?max_size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::max_size
PUBLIC	?clear@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::clear
PUBLIC	?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Check_grow_by_1
PUBLIC	?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Alloc_sentinel_and_proxy
PUBLIC	?_Getcomp@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Getcomp
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Getal
PUBLIC	?_Getal@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Getal
PUBLIC	?_Get_scary@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Get_scary
PUBLIC	?_Get_scary@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Get_scary
PUBLIC	??R?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z ; std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::operator()
PUBLIC	??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >
PUBLIC	?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Min
PUBLIC	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Lrotate
PUBLIC	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Rrotate
PUBLIC	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Insert_node
PUBLIC	?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Orphan_ptr
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>,1>::_Get_first
PUBLIC	??0?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@QAE@XZ ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >
PUBLIC	??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@QAEAAPAVCIdvBezierSpline@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::operator[]
PUBLIC	??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@QAE@XZ ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >
PUBLIC	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,std::_Iterator_base12>
PUBLIC	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,std::_Iterator_base12>::operator++
PUBLIC	??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,std::_Iterator_base12>
PUBLIC	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator*
PUBLIC	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator++
PUBLIC	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator==
PUBLIC	??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator!=
PUBLIC	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >
PUBLIC	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@1@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >
PUBLIC	??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator*
PUBLIC	??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator->
PUBLIC	??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator++
PUBLIC	??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::~_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >
PUBLIC	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@1@@Z ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >
PUBLIC	??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@QAE@XZ ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>
PUBLIC	??_G?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@QAEPAXI@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>::`scalar deleting destructor'
PUBLIC	?pointer_to@?$pointer_traits@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@SAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@2@AAU32@@Z ; std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> *>::pointer_to
PUBLIC	??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Try_emplace<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
PUBLIC	??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	??$?0U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >
PUBLIC	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
PUBLIC	??$addressof@$$CBV?$vector@MV?$allocator@M@std@@@std@@@std@@YAPBV?$vector@MV?$allocator@M@std@@@0@ABV10@@Z ; std::addressof<std::vector<float,std::allocator<float> > const >
PUBLIC	??$_Pocca@V?$allocator@M@std@@@std@@YAXAAV?$allocator@M@0@ABV10@@Z ; std::_Pocca<std::allocator<float> >
PUBLIC	??$_Assign_counted_range@PAM@?$vector@MV?$allocator@M@std@@@std@@AAEXPAMI@Z ; std::vector<float,std::allocator<float> >::_Assign_counted_range<float *>
PUBLIC	??$_Emplace_one_at_back@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEAAMABM@Z ; std::vector<float,std::allocator<float> >::_Emplace_one_at_back<float const &>
PUBLIC	??$?0M@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@M@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><float>
PUBLIC	??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1><>
PUBLIC	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Destroy_range@V?$allocator@VCVec@@@std@@@std@@YAXPAVCVec@@QAV1@AAV?$allocator@VCVec@@@0@@Z ; std::_Destroy_range<std::allocator<CVec> >
PUBLIC	??$_Resize@U_Value_init_tag@std@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<CVec,std::allocator<CVec> >::_Resize<std::_Value_init_tag>
PUBLIC	??$addressof@$$CBV?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@@std@@YAPBV?$vector@VCVec@@V?$allocator@VCVec@@@std@@@0@ABV10@@Z ; std::addressof<std::vector<CVec,std::allocator<CVec> > const >
PUBLIC	??$_Pocca@V?$allocator@VCVec@@@std@@@std@@YAXAAV?$allocator@VCVec@@@0@ABV10@@Z ; std::_Pocca<std::allocator<CVec> >
PUBLIC	??$_Assign_counted_range@PAVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXPAVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::_Assign_counted_range<CVec *>
PUBLIC	??$move@AAVCVec@@@std@@YA$$QAVCVec@@AAV1@@Z	; std::move<CVec &>
PUBLIC	??$_Emplace_one_at_back@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAVCVec@@$$QAV2@@Z ; std::vector<CVec,std::allocator<CVec> >::_Emplace_one_at_back<CVec>
PUBLIC	??$_Emplace_one_at_back@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAVCVec@@ABV2@@Z ; std::vector<CVec,std::allocator<CVec> >::_Emplace_one_at_back<CVec const &>
PUBLIC	??$?0VCVec@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@VCVec@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><CVec>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@VCVec@@@std@@V?$_Vector_val@U?$_Simple_types@VCVec@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<CVec>,std::_Vector_val<std::_Simple_types<CVec> >,1>::_Compressed_pair<std::allocator<CVec>,std::_Vector_val<std::_Simple_types<CVec> >,1><>
PUBLIC	??$min@I@std@@YAABIABI0@Z			; std::min<unsigned int>
PUBLIC	??$_Convert_size@II@std@@YAII@Z			; std::_Convert_size<unsigned int,unsigned int>
PUBLIC	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
PUBLIC	??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
PUBLIC	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<2,char const *>
PUBLIC	??$addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@0@AAU10@@Z ; std::addressof<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >
PUBLIC	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >
PUBLIC	??$?0ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>,1>::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>,1><std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &,std::_Zero_then_variadic_args_t>
PUBLIC	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1><>
PUBLIC	??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAMQAMAAV?$allocator@M@0@@Z ; std::_Destroy_range<std::allocator<float> >
PUBLIC	??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()
PUBLIC	??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
PUBLIC	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??$_Construct_in_place@PADAAPAD@std@@YAXAAPAD0@Z ; std::_Construct_in_place<char *,char * &>
PUBLIC	??$_Unfancy@D@std@@YAPADPAD@Z			; std::_Unfancy<char>
PUBLIC	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
PUBLIC	??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z ; std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
PUBLIC	??$max@I@std@@YAABIABI0@Z			; std::max<unsigned int>
PUBLIC	??$_Deallocate@$07@std@@YAXPAXI@Z		; std::_Deallocate<8>
PUBLIC	??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
PUBLIC	??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
PUBLIC	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z	; std::_Destroy_in_place<char *>
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
PUBLIC	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
PUBLIC	??$_Get_size_of_n@$07@std@@YAII@Z		; std::_Get_size_of_n<8>
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits>
PUBLIC	??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$_Lower_bound_duplicate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Lower_bound_duplicate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
PUBLIC	??$?0ABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N@std@@QAE@ABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,bool>::pair<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,bool><std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * const &,bool,0>
PUBLIC	??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$forward_as_tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::forward_as_tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??0?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAV01@@Z ; std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ ; std::forward_as_tuple<>
PUBLIC	??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
PUBLIC	?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::_Release
PUBLIC	?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAEXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::_Allocate
PUBLIC	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
PUBLIC	??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
PUBLIC	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
PUBLIC	??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
PUBLIC	??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > ><std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
PUBLIC	??$?0PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,bool>::pair<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,bool><std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,bool,0>
PUBLIC	??$exchange@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@0@Z ; std::exchange<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * &>
PUBLIC	??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
PUBLIC	??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
PUBLIC	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
PUBLIC	??$move@AAPAM@std@@YA$$QAPAMAAPAM@Z		; std::move<float * &>
PUBLIC	??$_Uninitialized_copy_n@PAMV?$allocator@M@std@@@std@@YAPAMPAMI0AAV?$allocator@M@0@@Z ; std::_Uninitialized_copy_n<float *,std::allocator<float> >
PUBLIC	??$_Copy_memmove_n@PAMPAM@std@@YAPAMPAMI0@Z	; std::_Copy_memmove_n<float *,float *>
PUBLIC	??$_Copy_n_unchecked4@PAMIPAM@std@@YAPAMPAMI0@Z	; std::_Copy_n_unchecked4<float *,unsigned int,float *>
PUBLIC	??$forward@ABM@std@@YAABMABM@Z			; std::forward<float const &>
PUBLIC	??$_Emplace_back_with_unused_capacity@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEAAMABM@Z ; std::vector<float,std::allocator<float> >::_Emplace_back_with_unused_capacity<float const &>
PUBLIC	??$_Emplace_reallocate@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEPAMQAMABM@Z ; std::vector<float,std::allocator<float> >::_Emplace_reallocate<float const &>
PUBLIC	??$_Unfancy@VCVec@@@std@@YAPAVCVec@@PAV1@@Z	; std::_Unfancy<CVec>
PUBLIC	??$destroy@VCVec@@@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@@Z ; std::_Default_allocator_traits<std::allocator<CVec> >::destroy<CVec>
PUBLIC	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<CVec,std::allocator<CVec> >::_Resize_reallocate<std::_Value_init_tag>
PUBLIC	??$_Uninitialized_value_construct_n@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@IAAV?$allocator@VCVec@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<CVec> >
PUBLIC	??$move@AAPAVCVec@@@std@@YA$$QAPAVCVec@@AAPAV1@@Z ; std::move<CVec * &>
PUBLIC	??$_Uninitialized_copy_n@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@I0AAV?$allocator@VCVec@@@0@@Z ; std::_Uninitialized_copy_n<CVec *,std::allocator<CVec> >
PUBLIC	??$_Copy_memmove_n@PAVCVec@@PAV1@@std@@YAPAVCVec@@PAV1@I0@Z ; std::_Copy_memmove_n<CVec *,CVec *>
PUBLIC	??$_Copy_n_unchecked4@PAVCVec@@IPAV1@@std@@YAPAVCVec@@PAV1@I0@Z ; std::_Copy_n_unchecked4<CVec *,unsigned int,CVec *>
PUBLIC	??$forward@VCVec@@@std@@YA$$QAVCVec@@AAV1@@Z	; std::forward<CVec>
PUBLIC	??$_Emplace_back_with_unused_capacity@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAVCVec@@$$QAV2@@Z ; std::vector<CVec,std::allocator<CVec> >::_Emplace_back_with_unused_capacity<CVec>
PUBLIC	??$_Emplace_reallocate@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@$$QAV2@@Z ; std::vector<CVec,std::allocator<CVec> >::_Emplace_reallocate<CVec>
PUBLIC	??$forward@ABVCVec@@@std@@YAABVCVec@@ABV1@@Z	; std::forward<CVec const &>
PUBLIC	??$_Emplace_back_with_unused_capacity@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAVCVec@@ABV2@@Z ; std::vector<CVec,std::allocator<CVec> >::_Emplace_back_with_unused_capacity<CVec const &>
PUBLIC	??$_Emplace_reallocate@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@ABV2@@Z ; std::vector<CVec,std::allocator<CVec> >::_Emplace_reallocate<CVec const &>
PUBLIC	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
PUBLIC	??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPADAAV?$allocator@D@1@AAI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Allocate_for_capacity<0>
PUBLIC	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
PUBLIC	??$forward@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABU10@@Z ; std::forward<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &>
PUBLIC	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
PUBLIC	??$addressof@PAD@std@@YAPAPADAAPAD@Z		; std::addressof<char *>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * const &>
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *>
PUBLIC	??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >
PUBLIC	??$exchange@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,std::nullptr_t>
PUBLIC	??$_Get_size_of_n@$0DA@@std@@YAII@Z		; std::_Get_size_of_n<48>
PUBLIC	??$_Allocate_at_least_helper@V?$allocator@M@std@@@std@@YAPAMAAV?$allocator@M@0@AAI@Z ; std::_Allocate_at_least_helper<std::allocator<float> >
PUBLIC	??$_Allocate_at_least_helper@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@AAV?$allocator@VCVec@@@0@AAI@Z ; std::_Allocate_at_least_helper<std::allocator<CVec> >
PUBLIC	??$_Kfn@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@SAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@@Z ; std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0>::_Kfn<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>
PUBLIC	??$_Debug_lt_pred@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@$0A@@std@@YA_NABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,0>
PUBLIC	??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??$forward@ABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@ABQAU10@@Z ; std::forward<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * const &>
PUBLIC	??$forward@_N@std@@YA$$QA_NAA_N@Z		; std::forward<bool>
PUBLIC	??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,0>
PUBLIC	??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
PUBLIC	??$forward@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::forward<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> >
PUBLIC	??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
PUBLIC	??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
PUBLIC	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * &>
PUBLIC	??$forward@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *>
PUBLIC	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$_Get_unwrapped@PAM@std@@YA?A_T$$QAPAM@Z	; std::_Get_unwrapped<float *>
PUBLIC	??$_Unfancy@M@std@@YAPAMPAM@Z			; std::_Unfancy<float>
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAE@PAMAAV?$allocator@M@1@@Z ; std::_Uninitialized_backout_al<std::allocator<float> >::_Uninitialized_backout_al<std::allocator<float> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<float> >::~_Uninitialized_backout_al<std::allocator<float> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAEPAMXZ ; std::_Uninitialized_backout_al<std::allocator<float> >::_Release
PUBLIC	??$_Emplace_back@AAM@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAEXAAM@Z ; std::_Uninitialized_backout_al<std::allocator<float> >::_Emplace_back<float &>
PUBLIC	??$_Copy_memmove@PAMPAM@std@@YAPAMPAM00@Z	; std::_Copy_memmove<float *,float *>
PUBLIC	??$_Construct_in_place@MABM@std@@YAXAAMABM@Z	; std::_Construct_in_place<float,float const &>
PUBLIC	??$construct@MABM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAAV?$allocator@M@1@QAMABM@Z ; std::_Default_allocator_traits<std::allocator<float> >::construct<float,float const &>
PUBLIC	??$_Uninitialized_move@PAMV?$allocator@M@std@@@std@@YAPAMQAM0PAMAAV?$allocator@M@0@@Z ; std::_Uninitialized_move<float *,std::allocator<float> >
PUBLIC	??$_Uninitialized_move@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@QAV1@0PAV1@AAV?$allocator@VCVec@@@0@@Z ; std::_Uninitialized_move<CVec *,std::allocator<CVec> >
PUBLIC	??0?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAE@PAVCVec@@AAV?$allocator@VCVec@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Uninitialized_backout_al<std::allocator<CVec> >
PUBLIC	??1?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<CVec> >::~_Uninitialized_backout_al<std::allocator<CVec> >
PUBLIC	?_Release@?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAEPAVCVec@@XZ ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Release
PUBLIC	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAEXXZ ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Emplace_back<>
PUBLIC	??$_Get_unwrapped@PAVCVec@@@std@@YA?A_T$$QAPAVCVec@@@Z ; std::_Get_unwrapped<CVec *>
PUBLIC	??$_Emplace_back@AAVCVec@@@?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAEXAAVCVec@@@Z ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Emplace_back<CVec &>
PUBLIC	??$_Copy_memmove@PAVCVec@@PAV1@@std@@YAPAVCVec@@PAV1@00@Z ; std::_Copy_memmove<CVec *,CVec *>
PUBLIC	??$_Construct_in_place@VCVec@@V1@@std@@YAXAAVCVec@@$$QAV1@@Z ; std::_Construct_in_place<CVec,CVec>
PUBLIC	??$construct@VCVec@@V1@@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@$$QAV3@@Z ; std::_Default_allocator_traits<std::allocator<CVec> >::construct<CVec,CVec>
PUBLIC	??$_Construct_in_place@VCVec@@ABV1@@std@@YAXAAVCVec@@ABV1@@Z ; std::_Construct_in_place<CVec,CVec const &>
PUBLIC	??$construct@VCVec@@ABV1@@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@ABV3@@Z ; std::_Default_allocator_traits<std::allocator<CVec> >::construct<CVec,CVec const &>
PUBLIC	??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPADAAV?$allocator@D@0@AAI@Z ; std::_Allocate_at_least_helper<std::allocator<char> >
PUBLIC	??$forward@ABQAD@std@@YAABQADABQAD@Z		; std::forward<char * const &>
PUBLIC	??$addressof@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *>
PUBLIC	??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@0@ABV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > const >
PUBLIC	??$_Get_size_of_n@$03@std@@YAII@Z		; std::_Get_size_of_n<4>
PUBLIC	??$_Get_size_of_n@$0BI@@std@@YAII@Z		; std::_Get_size_of_n<24>
PUBLIC	??$?0U_Exact_args_t@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$V$0A@@?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@U_Exact_args_t@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &><std::_Exact_args_t,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,0>
PUBLIC	??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$forward@AAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * &>
PUBLIC	??$forward@AAM@std@@YAAAMAAM@Z			; std::forward<float &>
PUBLIC	??$construct@MAAM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAAV?$allocator@M@1@QAMAAM@Z ; std::_Default_allocator_traits<std::allocator<float> >::construct<float,float &>
PUBLIC	??$_To_address@PAM@std@@YA?A_PABQAM@Z		; std::_To_address<float *>
PUBLIC	??$addressof@M@std@@YAPAMAAM@Z			; std::addressof<float>
PUBLIC	??$_Get_unwrapped@ABQAM@std@@YA?A_TABQAM@Z	; std::_Get_unwrapped<float * const &>
PUBLIC	??$move@AAM@std@@YA$$QAMAAM@Z			; std::move<float &>
PUBLIC	??$_Emplace_back@M@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAEX$$QAM@Z ; std::_Uninitialized_backout_al<std::allocator<float> >::_Emplace_back<float>
PUBLIC	??$_Get_unwrapped@ABQAVCVec@@@std@@YA?A_TABQAVCVec@@@Z ; std::_Get_unwrapped<CVec * const &>
PUBLIC	??$_Emplace_back@VCVec@@@?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAEX$$QAVCVec@@@Z ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Emplace_back<CVec>
PUBLIC	??$construct@VCVec@@$$V@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@@Z ; std::_Default_allocator_traits<std::allocator<CVec> >::construct<CVec>
PUBLIC	??$forward@AAVCVec@@@std@@YAAAVCVec@@AAV1@@Z	; std::forward<CVec &>
PUBLIC	??$construct@VCVec@@AAV1@@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@AAV3@@Z ; std::_Default_allocator_traits<std::allocator<CVec> >::construct<CVec,CVec &>
PUBLIC	??$_To_address@PAVCVec@@@std@@YA?A_PABQAVCVec@@@Z ; std::_To_address<CVec *>
PUBLIC	??$addressof@VCVec@@@std@@YAPAVCVec@@AAV1@@Z	; std::addressof<CVec>
PUBLIC	??$_Get_size_of_n@$00@std@@YAII@Z		; std::_Get_size_of_n<1>
PUBLIC	??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z ; std::tuple<>::tuple<><std::_Exact_args_t,0>
PUBLIC	??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tuple_val@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tuple_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::_Tuple_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *><std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<>,0>
PUBLIC	??$forward@M@std@@YA$$QAMAAM@Z			; std::forward<float>
PUBLIC	??$construct@MM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAAV?$allocator@M@1@QAM$$QAM@Z ; std::_Default_allocator_traits<std::allocator<float> >::construct<float,float>
PUBLIC	??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
PUBLIC	??$move@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::move<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> &>
PUBLIC	??$_Tuple_get@$0A@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QA_P$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Tuple_get<0,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA ; `std::_Adjust_manually_vector_aligned'::`1'::__LINE__Var
PUBLIC	??_C@_0BB@FCMFBGOM@invalid?5argument@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0GC@GDGMGNBP@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1ME@KJJNLLPL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_11LOCGONAA@@				; `string'
PUBLIC	??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ ; `string'
PUBLIC	??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ ; `string'
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_C@_0BB@GCADKGJO@map?1set?5too?5long@		; `string'
PUBLIC	??_C@_0N@NGFFEKI@BezierSpline@			; `string'
PUBLIC	??_C@_0O@ENIEGKCM@BezierSpline?5@		; `string'
PUBLIC	??_C@_09BNFLLNNI@?$CFg?5?$CFg?5?$CFg?6@		; `string'
PUBLIC	??_C@_02KCPFEJNG@?$HL?6@			; `string'
PUBLIC	??_C@_04BGBALOOJ@?7?$CFd?6@			; `string'
PUBLIC	??_C@_0BB@FLLCMGDC@?7?$CFg?5?$CFg?5?$CFg?5?$CFg?5?$CFg?6@ ; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_02KGHIDFGE@?$HN?6@			; `string'
PUBLIC	??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ ; `string'
PUBLIC	??_C@_0GB@FNOFBLAA@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1MC@PMNMOCLC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ ; `string'
PUBLIC	??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@ ; `string'
PUBLIC	??_C@_0GA@FLCPNMJP@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1MA@PBGFLPAL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_0DE@DMNPKCGM@cannot?5increment?5value?9initiali@ ; `string'
PUBLIC	??_C@_1GM@BJMCGEGI@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0CG@NLEHEOHN@cannot?5increment?5end?5map?1set?5it@ ; `string'
PUBLIC	??_C@_1FA@KLFCDGNE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ ; `string'
PUBLIC	??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@ ; `string'
PUBLIC	??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@ ; `string'
PUBLIC	??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ ; `string'
PUBLIC	??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ ; `string'
PUBLIC	??_C@_0GD@EOJAGFMI@C?3?2Program?5Files?2Microsoft?5Visu@ ; `string'
PUBLIC	??_C@_1MG@KGDLNGON@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_0BA@FOIKENOD@vector?5too?5long@		; `string'
PUBLIC	??_C@_0BD@FEEMDEPI@invalid?5comparator@		; `string'
PUBLIC	??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ ; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	__real@3b0355ad
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@43f98000
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	__imp___invalid_parameter:PROC
EXTRN	__imp___CrtDbgReport:PROC
EXTRN	__imp_??0_Lockit@std@@QAE@H@Z:PROC
EXTRN	__imp_??1_Lockit@std@@QAE@XZ:PROC
EXTRN	__imp__atof:PROC
EXTRN	__imp__atoi:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp____stdio_common_vsscanf:PROC
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_strcmp:PROC
EXTRN	_strlen:PROC
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	__imp__isspace:PROC
EXTRN	??0CVec@@QAE@XZ:PROC				; CVec::CVec
EXTRN	??0CVec@@QAE@H@Z:PROC				; CVec::CVec
EXTRN	??0CVec@@QAE@MM@Z:PROC				; CVec::CVec
EXTRN	??0CVec@@QAE@MMMMM@Z:PROC			; CVec::CVec
EXTRN	??1CVec@@QAE@XZ:PROC				; CVec::~CVec
EXTRN	?Normalize@CVec@@QAEXXZ:PROC			; CVec::Normalize
EXTRN	??HCVec@@QBE?AV0@ABV0@@Z:PROC			; CVec::operator+
EXTRN	??GCVec@@QBE?AV0@ABV0@@Z:PROC			; CVec::operator-
EXTRN	??DCVec@@QBE?AV0@M@Z:PROC			; CVec::operator*
EXTRN	??0CIdvRandom@@QAE@XZ:PROC			; CIdvRandom::CIdvRandom
EXTRN	??1CIdvRandom@@QAE@XZ:PROC			; CIdvRandom::~CIdvRandom
EXTRN	?GetUniform@CIdvRandom@@QAEMMM@Z:PROC		; CIdvRandom::GetUniform
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?g_mSplineCache@@3V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@A DB 0cH DUP (?) ; g_mSplineCache
?cRandom@?4??Evaluate@CIdvBezierSpline@@QBEMM@Z@4VCIdvRandom@@A DB 01H DUP (?) ; `CIdvBezierSpline::Evaluate'::`5'::cRandom
	ALIGN	4

?$TSS0@?4??Evaluate@CIdvBezierSpline@@QBEMM@Z@4HA DD 01H DUP (?) ; `CIdvBezierSpline::Evaluate'::`5'::$TSS0
?cRandom@?4??ScaledVariance@CIdvBezierSpline@@QBEMM@Z@4VCIdvRandom@@A DB 01H DUP (?) ; `CIdvBezierSpline::ScaledVariance'::`5'::cRandom
	ALIGN	4

?$TSS0@?4??ScaledVariance@CIdvBezierSpline@@QBEMM@Z@4HA DD 01H DUP (?) ; `CIdvBezierSpline::ScaledVariance'::`5'::$TSS0
_BSS	ENDS
CRT$XCU	SEGMENT
?g_mSplineCache$initializer$@@3P6AXXZA DD FLAT:??__Eg_mSplineCache@@YAXXZ ; g_mSplineCache$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@43f98000
CONST	SEGMENT
__real@43f98000 DD 043f98000r			; 499
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3b0355ad
CONST	SEGMENT
__real@3b0355ad DD 03b0355adr			; 0.00200401
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
CONST	SEGMENT
??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FEEMDEPI@invalid?5comparator@
CONST	SEGMENT
??_C@_0BD@FEEMDEPI@invalid?5comparator@ DB 'invalid comparator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FOIKENOD@vector?5too?5long@
CONST	SEGMENT
??_C@_0BA@FOIKENOD@vector?5too?5long@ DB 'vector too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MG@KGDLNGON@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MG@KGDLNGON@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '4', 00H, '0', 00H, '.', 00H, '3', 00H, '3', 00H, '8'
	DB	00H, '0', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'u'
	DB	00H, 't', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0GD@EOJAGFMI@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GD@EOJAGFMI@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'40.33807\include\xutility', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
CONST	SEGMENT
??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@ DB '"'
	DB	00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'p', 00H
	DB	'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'b', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, 'o', 00H, 'f'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'z', 00H
	DB	'e', 00H, 'r', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
CONST	SEGMENT
??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@ DB 'null pointe'
	DB	'r cannot point to a block of non-zero size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'p'
	DB	00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@
CONST	SEGMENT
??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@ DB 'cannot deref'
	DB	'erence end map/set iterator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
CONST	SEGMENT
??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'e'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a'
	DB	00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@
CONST	SEGMENT
??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@ DB 'cannot derefer'
	DB	'ence value-initialized map/set iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@KLFCDGNE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
CONST	SEGMENT
??_C@_1FA@KLFCDGNE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'p', 00H, '/', 00H, 's'
	DB	00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NLEHEOHN@cannot?5increment?5end?5map?1set?5it@
CONST	SEGMENT
??_C@_0CG@NLEHEOHN@cannot?5increment?5end?5map?1set?5it@ DB 'cannot incre'
	DB	'ment end map/set iterator', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@BJMCGEGI@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
CONST	SEGMENT
??_C@_1GM@BJMCGEGI@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@ DB '"'
	DB	00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'a', 00H
	DB	'l', 00H, 'u', 00H, 'e', 00H, '-', 00H, 'i', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'p', 00H, '/'
	DB	00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@DMNPKCGM@cannot?5increment?5value?9initiali@
CONST	SEGMENT
??_C@_0DE@DMNPKCGM@cannot?5increment?5value?9initiali@ DB 'cannot increme'
	DB	'nt value-initialized map/set iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
CONST	SEGMENT
??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@ DB '"'
	DB	00H, 'm', 00H, 'a', 00H, 'p', 00H, '/', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, ' ', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'a'
	DB	00H, 't', 00H, 'o', 00H, 'r', 00H, 's', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't'
	DB	00H, 'i', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MA@PBGFLPAL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MA@PBGFLPAL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '4', 00H, '0', 00H, '.', 00H, '3', 00H, '3', 00H, '8'
	DB	00H, '0', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 't'
	DB	00H, 'r', 00H, 'e', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GA@FLCPNMJP@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GA@FLCPNMJP@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'40.33807\include\xtree', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@
CONST	SEGMENT
??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@ DB 'map/set iterato'
	DB	'rs incompatible', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
CONST	SEGMENT
??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@ DB '"'
	DB	00H, 'v', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H
	DB	't', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'r', 00H, 'a'
	DB	00H, 'n', 00H, 'g', 00H, 'e', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MC@PMNMOCLC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1MC@PMNMOCLC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '4', 00H, '0', 00H, '.', 00H, '3', 00H, '3', 00H, '8'
	DB	00H, '0', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'v', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@FNOFBLAA@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GB@FNOFBLAA@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'40.33807\include\vector', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
CONST	SEGMENT
??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@ DB 'vector subscrip'
	DB	't out of range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KGHIDFGE@?$HN?6@
CONST	SEGMENT
??_C@_02KGHIDFGE@?$HN?6@ DB '}', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FLLCMGDC@?7?$CFg?5?$CFg?5?$CFg?5?$CFg?5?$CFg?6@
CONST	SEGMENT
??_C@_0BB@FLLCMGDC@?7?$CFg?5?$CFg?5?$CFg?5?$CFg?5?$CFg?6@ DB 09H, '%g %g '
	DB	'%g %g %g', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04BGBALOOJ@?7?$CFd?6@
CONST	SEGMENT
??_C@_04BGBALOOJ@?7?$CFd?6@ DB 09H, '%d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02KCPFEJNG@?$HL?6@
CONST	SEGMENT
??_C@_02KCPFEJNG@?$HL?6@ DB '{', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09BNFLLNNI@?$CFg?5?$CFg?5?$CFg?6@
CONST	SEGMENT
??_C@_09BNFLLNNI@?$CFg?5?$CFg?5?$CFg?6@ DB '%g %g %g', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ENIEGKCM@BezierSpline?5@
CONST	SEGMENT
??_C@_0O@ENIEGKCM@BezierSpline?5@ DB 'BezierSpline ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NGFFEKI@BezierSpline@
CONST	SEGMENT
??_C@_0N@NGFFEKI@BezierSpline@ DB 'BezierSpline', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
CONST	SEGMENT
??_C@_0BB@GCADKGJO@map?1set?5too?5long@ DB 'map/set too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
CONST	SEGMENT
??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@ DB '"'
	DB	00H, 'I', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H
	DB	'O', 00H, 'R', 00H, ' ', 00H, 'L', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, ' ', 00H, 'C', 00H, 'O', 00H, 'R', 00H, 'R', 00H, 'U', 00H
	DB	'P', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '!', 00H, '"', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
CONST	SEGMENT
??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@ DB 'ITERATOR LIST CORRU'
	DB	'PTED!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
CONST	SEGMENT
??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@ DB '"'
	DB	00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_11LOCGONAA@@
CONST	SEGMENT
??_C@_11LOCGONAA@@ DB 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1ME@KJJNLLPL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
CONST	SEGMENT
??_C@_1ME@KJJNLLPL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, '\', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'r', 00H, 'o', 00H, 's', 00H, 'o', 00H, 'f', 00H, 't', 00H, ' '
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'S', 00H, 't', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, '2', 00H, '0', 00H, '2', 00H, '2', 00H, '\', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'm', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'y', 00H, '\', 00H, 'V', 00H, 'C', 00H, '\', 00H
	DB	'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 's', 00H, '\', 00H, 'M'
	DB	00H, 'S', 00H, 'V', 00H, 'C', 00H, '\', 00H, '1', 00H, '4', 00H
	DB	'.', 00H, '4', 00H, '0', 00H, '.', 00H, '3', 00H, '3', 00H, '8'
	DB	00H, '0', 00H, '7', 00H, '\', 00H, 'i', 00H, 'n', 00H, 'c', 00H
	DB	'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'x', 00H, 'm'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@GDGMGNBP@C?3?2Program?5Files?2Microsoft?5Visu@
CONST	SEGMENT
??_C@_0GC@GDGMGNBP@C?3?2Program?5Files?2Microsoft?5Visu@ DB 'C:\Program F'
	DB	'iles\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.'
	DB	'40.33807\include\xmemory', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCMFBGOM@invalid?5argument@
CONST	SEGMENT
??_C@_0BB@FCMFBGOM@invalid?5argument@ DB 'invalid argument', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA DD 0a9H ; `std::_Adjust_manually_vector_aligned'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_move@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@QAV1@0PAV1@AAV?$allocator@VCVec@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@QAV1@0PAV1@AAV?$allocator@VCVec@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_move@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@QAV1@0PAV1@AAV?$allocator@VCVec@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_move@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@QAV1@0PAV1@AAV?$allocator@VCVec@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_move@PAMV?$allocator@M@std@@@std@@YAPAMQAM0PAMAAV?$allocator@M@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_move@PAMV?$allocator@M@std@@@std@@YAPAMQAM0PAMAAV?$allocator@M@0@@Z$0
__ehfuncinfo$??$_Uninitialized_move@PAMV?$allocator@M@std@@@std@@YAPAMQAM0PAMAAV?$allocator@M@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_move@PAMV?$allocator@M@std@@@std@@YAPAMQAM0PAMAAV?$allocator@M@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@ABV2@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@ABV2@@Z$0
__unwindtable$??$_Emplace_reallocate@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@ABV2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@ABV2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@ABV2@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@ABV2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@ABV2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@ABV2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@$$QAV2@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@$$QAV2@@Z$0
__unwindtable$??$_Emplace_reallocate@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@$$QAV2@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@$$QAV2@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@$$QAV2@@Z$2
__ehfuncinfo$??$_Emplace_reallocate@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@$$QAV2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@$$QAV2@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@$$QAV2@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy_n@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@I0AAV?$allocator@VCVec@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy_n@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@I0AAV?$allocator@VCVec@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_copy_n@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@I0AAV?$allocator@VCVec@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy_n@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@I0AAV?$allocator@VCVec@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_value_construct_n@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@IAAV?$allocator@VCVec@@@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_value_construct_n@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@IAAV?$allocator@VCVec@@@0@@Z$0
__ehfuncinfo$??$_Uninitialized_value_construct_n@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@IAAV?$allocator@VCVec@@@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_value_construct_n@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@IAAV?$allocator@VCVec@@@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$0
__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$2
__ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Emplace_reallocate@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEPAMQAMABM@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Emplace_reallocate@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEPAMQAMABM@Z$0
__unwindtable$??$_Emplace_reallocate@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEPAMQAMABM@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$_Emplace_reallocate@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEPAMQAMABM@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$_Emplace_reallocate@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEPAMQAMABM@Z$2
__ehfuncinfo$??$_Emplace_reallocate@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEPAMQAMABM@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$_Emplace_reallocate@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEPAMQAMABM@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Emplace_reallocate@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEPAMQAMABM@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Uninitialized_copy_n@PAMV?$allocator@M@std@@@std@@YAPAMPAMI0AAV?$allocator@M@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Uninitialized_copy_n@PAMV?$allocator@M@std@@@std@@YAPAMPAMI0AAV?$allocator@M@0@@Z$0
__ehfuncinfo$??$_Uninitialized_copy_n@PAMV?$allocator@M@std@@@std@@YAPAMPAMI0AAV?$allocator@M@0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Uninitialized_copy_n@PAMV?$allocator@M@std@@@std@@YAPAMPAMI0AAV?$allocator@M@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$0
__ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z$0
__ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Deallocate@$07@std@@YAXPAXI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z$0
__ehfuncinfo$??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z$0
__ehfuncinfo$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$_Destroy_range@V?$allocator@VCVec@@@std@@@std@@YAXPAVCVec@@QAV1@AAV?$allocator@VCVec@@@0@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEXXZ$0
__ehfuncinfo$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	025H
	DB	084H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	020H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@ABEXPAM0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@ABEXPAM0@Z$0
__ehfuncinfo$?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@ABEXPAM0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@ABEXPAM0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@MV?$allocator@M@std@@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	020H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Orphan_range_locked@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Orphan_range_locked@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z$0
__ehfuncinfo$?_Orphan_range_locked@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Orphan_range_locked@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Tidy@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
	DB	023H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	035H
	DW	02baH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?EvaluateRawPoint@CIdvBezierSpline@@AAE?AVCVec@@M@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EvaluateRawPoint@CIdvBezierSpline@@AAE?AVCVec@@M@Z$0
__ehfuncinfo$?EvaluateRawPoint@CIdvBezierSpline@@AAE?AVCVec@@M@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?EvaluateRawPoint@CIdvBezierSpline@@AAE?AVCVec@@M@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	021H
	DB	02eH
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	035H
	DW	048bH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?CreateEvenlySpacedPoints@CIdvBezierSpline@@AAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateEvenlySpacedPoints@CIdvBezierSpline@@AAEXI@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CreateEvenlySpacedPoints@CIdvBezierSpline@@AAEXI@Z$2
__ehfuncinfo$?CreateEvenlySpacedPoints@CIdvBezierSpline@@AAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateEvenlySpacedPoints@CIdvBezierSpline@@AAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	04aH
	DB	057H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	035H
	DW	02a7H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?AddControlPoint@CIdvBezierSpline@@AAEXQAM0M@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?AddControlPoint@CIdvBezierSpline@@AAEXQAM0M@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?AddControlPoint@CIdvBezierSpline@@AAEXQAM0M@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddControlPoint@CIdvBezierSpline@@AAEXQAM0M@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?AddControlPoint@CIdvBezierSpline@@AAEXQAM0M@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?AddControlPoint@CIdvBezierSpline@@AAEXQAM0M@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?AddControlPoint@CIdvBezierSpline@@AAEXQAM0M@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?AddControlPoint@CIdvBezierSpline@@AAEXQAM0M@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?AddControlPoint@CIdvBezierSpline@@AAEXQAM0M@Z$5
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01aH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ScaledVariance@CIdvBezierSpline@@QBEMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ScaledVariance@CIdvBezierSpline@@QBEMM@Z$0
__ehfuncinfo$?ScaledVariance@CIdvBezierSpline@@QBEMM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ScaledVariance@CIdvBezierSpline@@QBEMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	037H
	DB	044H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	035H
	DW	02ebH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Save@CIdvBezierSpline@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Save@CIdvBezierSpline@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Save@CIdvBezierSpline@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1
	DD	00H
	DD	FLAT:__unwindfunclet$?Save@CIdvBezierSpline@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?Save@CIdvBezierSpline@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$3
__ehfuncinfo$?Save@CIdvBezierSpline@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?Save@CIdvBezierSpline@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	027H
	DW	0334H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	01aH
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Evaluate@CIdvBezierSpline@@QBEMM@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Evaluate@CIdvBezierSpline@@QBEMM@Z$0
__ehfuncinfo$?Evaluate@CIdvBezierSpline@@QBEMM@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Evaluate@CIdvBezierSpline@@QBEMM@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	045H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CIdvBezierSpline@@QAE@ABV0@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??0CIdvBezierSpline@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CIdvBezierSpline@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CIdvBezierSpline@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CIdvBezierSpline@@QAE@ABV0@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CIdvBezierSpline@@QAE@ABV0@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CIdvBezierSpline@@QAE@ABV0@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CIdvBezierSpline@@QAE@ABV0@@Z$4
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	057H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CIdvBezierSpline@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$??0CIdvBezierSpline@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CIdvBezierSpline@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CIdvBezierSpline@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CIdvBezierSpline@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CIdvBezierSpline@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CIdvBezierSpline@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CIdvBezierSpline@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CIdvBezierSpline@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$5
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAAV?$allocator@D@2@QADI@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	09H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\tuple
;	COMDAT ??$_Tuple_get@$0A@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QA_P$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z
_TEXT	SEGMENT
__Tuple$ = 8						; size = 4
??$_Tuple_get@$0A@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QA_P$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z PROC ; std::_Tuple_get<0,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT

; 958  : _NODISCARD constexpr auto&& _Tuple_get(tuple<_Types...>&& _Tuple) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 959  :     // used by pair's piecewise constructor
; 960  :     using _Ty    = tuple_element_t<_Index, tuple<_Types...>>;
; 961  :     using _Ttype = typename tuple_element<_Index, tuple<_Types...>>::_Ttype;
; 962  :     return static_cast<_Ty&&>(static_cast<_Ttype&>(_Tuple)._Myfirst._Val);

	mov	eax, DWORD PTR __Tuple$[ebp]
	mov	eax, DWORD PTR [eax]

; 963  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Tuple_get@$0A@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QA_P$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ENDP ; std::_Tuple_get<0,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$move@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z PROC ; std::move<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> &>, COMDAT

; 1547 : _NODISCARD _MSVC_INTRINSIC constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1548 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1549 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ENDP ; std::move<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z
_TEXT	SEGMENT
__Ans$ = -8						; size = 4
__Left$ = 8						; size = 4
__Left_size$ = 12					; size = 4
__Right$ = 16						; size = 4
__Right_size$ = 20					; size = 4
??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z PROC ; std::_Traits_compare<std::char_traits<char> >, COMDAT

; 551  :     _In_reads_(_Right_size) const _Traits_ptr_t<_Traits> _Right, const size_t _Right_size) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 552  :     // compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) using _Traits
; 553  :     const int _Ans = _Traits::compare(_Left, _Right, (_STD min)(_Left_size, _Right_size));

	lea	eax, DWORD PTR __Right_size$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Left_size$[ebp]
	push	ecx
	call	??$min@I@std@@YAABIABI0@Z		; std::min<unsigned int>
	add	esp, 8
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	?compare@?$_Narrow_char_traits@DH@std@@SAHQBD0I@Z ; std::_Narrow_char_traits<char,int>::compare
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Ans$[ebp], eax

; 554  : 
; 555  :     if (_Ans != 0) {

	cmp	DWORD PTR __Ans$[ebp], 0
	je	SHORT $LN2@Traits_com

; 556  :         return _Ans;

	mov	eax, DWORD PTR __Ans$[ebp]
	jmp	SHORT $LN1@Traits_com
$LN2@Traits_com:

; 557  :     }
; 558  : 
; 559  :     if (_Left_size < _Right_size) {

	mov	eax, DWORD PTR __Left_size$[ebp]
	cmp	eax, DWORD PTR __Right_size$[ebp]
	jae	SHORT $LN3@Traits_com

; 560  :         return -1;

	or	eax, -1
	jmp	SHORT $LN1@Traits_com
$LN3@Traits_com:

; 561  :     }
; 562  : 
; 563  :     if (_Left_size > _Right_size) {

	mov	eax, DWORD PTR __Left_size$[ebp]
	cmp	eax, DWORD PTR __Right_size$[ebp]
	jbe	SHORT $LN4@Traits_com

; 564  :         return 1;

	mov	eax, 1
	jmp	SHORT $LN1@Traits_com
$LN4@Traits_com:

; 565  :     }
; 566  : 
; 567  :     return 0;

	xor	eax, eax
$LN1@Traits_com:

; 568  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ENDP ; std::_Traits_compare<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$construct@MM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAAV?$allocator@M@1@QAM$$QAM@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@MM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAAV?$allocator@M@1@QAM$$QAM@Z PROC ; std::_Default_allocator_traits<std::allocator<float> >::construct<float,float>, COMDAT

; 696  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 697  : #if _HAS_CXX20
; 698  :         _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 699  : #else // ^^^ _HAS_CXX20 / !_HAS_CXX20 vvv
; 700  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@M@std@@YA$$QAMAAM@Z		; std::forward<float>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 701  : #endif // ^^^ !_HAS_CXX20 ^^^
; 702  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@MM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAAV?$allocator@M@1@QAM$$QAM@Z ENDP ; std::_Default_allocator_traits<std::allocator<float> >::construct<float,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$forward@M@std@@YA$$QAMAAM@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@M@std@@YA$$QAMAAM@Z PROC			; std::forward<float>, COMDAT

; 1536 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1537 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1538 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@M@std@@YA$$QAMAAM@Z ENDP			; std::forward<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\utility
;	COMDAT ??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
___formal$ = 16						; size = 1
___formal$ = 20						; size = 1
??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *><std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<>,0>, COMDAT
; _this$ = ecx

; 307  :         : first(_Tuple_get<_Indices1>(_STD move(_Val1))...), second(_Tuple_get<_Indices2>(_STD move(_Val2))...) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$move@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::move<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> &>
	add	esp, 4
	push	eax
	call	??$_Tuple_get@$0A@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QA_P$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@@Z ; std::_Tuple_get<0,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *><std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<>,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\tuple
;	COMDAT ??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tuple_val@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Arg$ = 8						; size = 4
??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tuple_val@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Tuple_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::_Tuple_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 143  :     constexpr _Tuple_val(_Other&& _Arg) : _Val(_STD forward<_Other>(_Arg)) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Arg$[ebp]
	push	eax
	call	??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tuple_val@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Tuple_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::_Tuple_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z PROC ; std::tuple<>::tuple<><std::_Exact_args_t,0>, COMDAT
; _this$ = ecx

; 247  :     constexpr tuple(_Tag) noexcept /* strengthened */ {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z ENDP ; std::tuple<>::tuple<><std::_Exact_args_t,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Get_size_of_n@$00@std@@YAII@Z
_TEXT	SEGMENT
__Overflow_is_possible$ = -5				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$00@std@@YAII@Z PROC			; std::_Get_size_of_n<1>, COMDAT

; 79   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi

; 80   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR __Overflow_is_possible$[ebp], 0

; 81   : 
; 82   :     if constexpr (_Overflow_is_possible) {
; 83   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;
; 84   :         if (_Count > _Max_possible) {
; 85   :             _Throw_bad_array_new_length(); // multiply overflow
; 86   :         }
; 87   :     }
; 88   : 
; 89   :     return _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]

; 90   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$00@std@@YAII@Z ENDP			; std::_Get_size_of_n<1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$addressof@VCVec@@@std@@YAPAVCVec@@AAV1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@VCVec@@@std@@YAPAVCVec@@AAV1@@Z PROC	; std::addressof<CVec>, COMDAT

; 1559 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1560 :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 1561 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@VCVec@@@std@@YAPAVCVec@@AAV1@@Z ENDP	; std::addressof<CVec>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xutility
;	COMDAT ??$_To_address@PAVCVec@@@std@@YA?A_PABQAVCVec@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_To_address@PAVCVec@@@std@@YA?A_PABQAVCVec@@@Z PROC	; std::_To_address<CVec *>, COMDAT

; 4491 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 4492 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 4493 :     return _Val;

	mov	eax, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [eax]

; 4494 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_To_address@PAVCVec@@@std@@YA?A_PABQAVCVec@@@Z ENDP	; std::_To_address<CVec *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$construct@VCVec@@AAV1@@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@AAV3@@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@VCVec@@AAV1@@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@AAV3@@Z PROC ; std::_Default_allocator_traits<std::allocator<CVec> >::construct<CVec,CVec &>, COMDAT

; 696  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 697  : #if _HAS_CXX20
; 698  :         _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 699  : #else // ^^^ _HAS_CXX20 / !_HAS_CXX20 vvv
; 700  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	24					; 00000018H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAVCVec@@@std@@YAAAVCVec@@AAV1@@Z ; std::forward<CVec &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], eax

; 701  : #endif // ^^^ !_HAS_CXX20 ^^^
; 702  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@VCVec@@AAV1@@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@AAV3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CVec> >::construct<CVec,CVec &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$forward@AAVCVec@@@std@@YAAAVCVec@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAVCVec@@@std@@YAAAVCVec@@AAV1@@Z PROC	; std::forward<CVec &>, COMDAT

; 1536 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1537 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1538 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@AAVCVec@@@std@@YAAAVCVec@@AAV1@@Z ENDP	; std::forward<CVec &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$construct@VCVec@@$$V@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$construct@VCVec@@$$V@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@@Z PROC ; std::_Default_allocator_traits<std::allocator<CVec> >::construct<CVec>, COMDAT

; 696  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 697  : #if _HAS_CXX20
; 698  :         _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 699  : #else // ^^^ _HAS_CXX20 / !_HAS_CXX20 vvv
; 700  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	24					; 00000018H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0CVec@@QAE@XZ				; CVec::CVec
	npad	1

; 701  : #endif // ^^^ !_HAS_CXX20 ^^^
; 702  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@VCVec@@$$V@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CVec> >::construct<CVec>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Emplace_back@VCVec@@@?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAEX$$QAVCVec@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@VCVec@@@?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAEX$$QAVCVec@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Emplace_back<CVec>, COMDAT
; _this$ = ecx

; 1779 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1780 :         allocator_traits<_Alloc>::construct(_Al, _STD _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR _<_Vals_0>$[ebp]
	push	eax
	call	??$forward@VCVec@@@std@@YA$$QAVCVec@@AAV1@@Z ; std::forward<CVec>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$_Unfancy@VCVec@@@std@@YAPAVCVec@@PAV1@@Z ; std::_Unfancy<CVec>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	??$construct@VCVec@@V1@@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@$$QAV3@@Z ; std::_Default_allocator_traits<std::allocator<CVec> >::construct<CVec,CVec>
	add	esp, 12					; 0000000cH

; 1781 :         ++_Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1782 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back@VCVec@@@?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAEX$$QAVCVec@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Emplace_back<CVec>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAVCVec@@@std@@YA?A_TABQAVCVec@@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Get_unwrapped@ABQAVCVec@@@std@@YA?A_TABQAVCVec@@@Z PROC ; std::_Get_unwrapped<CVec * const &>, COMDAT

; 1304 :     !_Unwrappable_v<_Iter> || _Has_nothrow_unwrapped<_Iter>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1305 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1306 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1307 :         return _It + 0;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1308 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1309 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1310 :     } else {
; 1311 :         return static_cast<_Iter&&>(_It);
; 1312 :     }
; 1313 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_unwrapped@ABQAVCVec@@@std@@YA?A_TABQAVCVec@@@Z ENDP ; std::_Get_unwrapped<CVec * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Emplace_back@M@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAEX$$QAM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@M@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAEX$$QAM@Z PROC ; std::_Uninitialized_backout_al<std::allocator<float> >::_Emplace_back<float>, COMDAT
; _this$ = ecx

; 1779 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1780 :         allocator_traits<_Alloc>::construct(_Al, _STD _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR _<_Vals_0>$[ebp]
	push	eax
	call	??$forward@M@std@@YA$$QAMAAM@Z		; std::forward<float>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$_Unfancy@M@std@@YAPAMPAM@Z		; std::_Unfancy<float>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	??$construct@MM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAAV?$allocator@M@1@QAM$$QAM@Z ; std::_Default_allocator_traits<std::allocator<float> >::construct<float,float>
	add	esp, 12					; 0000000cH

; 1781 :         ++_Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1782 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back@M@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAEX$$QAM@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<float> >::_Emplace_back<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$move@AAM@std@@YA$$QAMAAM@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAM@std@@YA$$QAMAAM@Z PROC			; std::move<float &>, COMDAT

; 1547 : _NODISCARD _MSVC_INTRINSIC constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1548 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1549 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAM@std@@YA$$QAMAAM@Z ENDP			; std::move<float &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xutility
;	COMDAT ??$_Get_unwrapped@ABQAM@std@@YA?A_TABQAM@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Get_unwrapped@ABQAM@std@@YA?A_TABQAM@Z PROC		; std::_Get_unwrapped<float * const &>, COMDAT

; 1304 :     !_Unwrappable_v<_Iter> || _Has_nothrow_unwrapped<_Iter>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1305 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1306 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1307 :         return _It + 0;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1308 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1309 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1310 :     } else {
; 1311 :         return static_cast<_Iter&&>(_It);
; 1312 :     }
; 1313 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_unwrapped@ABQAM@std@@YA?A_TABQAM@Z ENDP		; std::_Get_unwrapped<float * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$addressof@M@std@@YAPAMAAM@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@M@std@@YAPAMAAM@Z PROC			; std::addressof<float>, COMDAT

; 1559 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1560 :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 1561 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@M@std@@YAPAMAAM@Z ENDP			; std::addressof<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xutility
;	COMDAT ??$_To_address@PAM@std@@YA?A_PABQAM@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_To_address@PAM@std@@YA?A_PABQAM@Z PROC		; std::_To_address<float *>, COMDAT

; 4491 : _NODISCARD constexpr auto _To_address(const _Iter& _Val) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 4492 :     _STL_INTERNAL_STATIC_ASSERT(is_pointer_v<_Iter>);
; 4493 :     return _Val;

	mov	eax, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [eax]

; 4494 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_To_address@PAM@std@@YA?A_PABQAM@Z ENDP		; std::_To_address<float *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$construct@MAAM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAAV?$allocator@M@1@QAMAAM@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@MAAM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAAV?$allocator@M@1@QAMAAM@Z PROC ; std::_Default_allocator_traits<std::allocator<float> >::construct<float,float &>, COMDAT

; 696  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 697  : #if _HAS_CXX20
; 698  :         _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 699  : #else // ^^^ _HAS_CXX20 / !_HAS_CXX20 vvv
; 700  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAM@std@@YAAAMAAM@Z		; std::forward<float &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 701  : #endif // ^^^ !_HAS_CXX20 ^^^
; 702  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@MAAM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAAV?$allocator@M@1@QAMAAM@Z ENDP ; std::_Default_allocator_traits<std::allocator<float> >::construct<float,float &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$forward@AAM@std@@YAAAMAAM@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAM@std@@YAAAMAAM@Z PROC			; std::forward<float &>, COMDAT

; 1536 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1537 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1538 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@AAM@std@@YAAAMAAM@Z ENDP			; std::forward<float &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$forward@AAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * &>, COMDAT

; 1536 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1537 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1538 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@AAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\utility
;	COMDAT ??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z
_TEXT	SEGMENT
$T1 = -221						; size = 1
$T2 = -209						; size = 1
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
__Val2$ = 16						; size = 1
??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 311  :         : pair(_Val1, _Val2, index_sequence_for<_Types1...>{}, index_sequence_for<_Types2...>{}) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	BYTE PTR $T2[ebp], al
	xor	ecx, ecx
	mov	BYTE PTR $T1[ebp], cl
	movzx	edx, BYTE PTR $T2[ebp]
	push	edx
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	lea	ecx, DWORD PTR __Val2$[ebp]
	push	ecx
	lea	edx, DWORD PTR __Val1$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@QAE@AAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@AAV?$tuple@$$V@1@U?$integer_sequence@I$0A@@1@U?$integer_sequence@I$S@1@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *><std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<>,0>
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\tuple
;	COMDAT ??$?0U_Exact_args_t@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$V$0A@@?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@U_Exact_args_t@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
__This_arg$ = 12					; size = 4
??$?0U_Exact_args_t@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$V$0A@@?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@U_Exact_args_t@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &><std::_Exact_args_t,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,0>, COMDAT
; _this$ = ecx

; 313  :         : _Mybase(_Exact_args_t{}, _STD forward<_Rest2>(_Rest_arg)...), _Myfirst(_STD forward<_This2>(_This_arg)) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@QAE@U_Exact_args_t@1@@Z ; std::tuple<>::tuple<><std::_Exact_args_t,0>
	npad	1
	mov	eax, DWORD PTR __This_arg$[ebp]
	push	eax
	call	??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tuple_val@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tuple_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::_Tuple_val<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0U_Exact_args_t@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$V$0A@@?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@U_Exact_args_t@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &><std::_Exact_args_t,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0BI@@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -20					; size = 4
__Overflow_is_possible$ = -5				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$0BI@@std@@YAII@Z PROC		; std::_Get_size_of_n<24>, COMDAT

; 79   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 80   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR __Overflow_is_possible$[ebp], 1

; 81   : 
; 82   :     if constexpr (_Overflow_is_possible) {
; 83   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$1[ebp], 178956970 ; 0aaaaaaaH

; 84   :         if (_Count > _Max_possible) {

	cmp	DWORD PTR __Count$[ebp], 178956970	; 0aaaaaaaH
	jbe	SHORT $LN2@Get_size_o

; 85   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
	npad	1
$LN2@Get_size_o:

; 86   :         }
; 87   :     }
; 88   : 
; 89   :     return _Count * _Ty_size;

	imul	eax, DWORD PTR __Count$[ebp], 24
$LN1@Get_size_o:

; 90   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$0BI@@std@@YAII@Z ENDP		; std::_Get_size_of_n<24>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Get_size_of_n@$03@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -20					; size = 4
__Overflow_is_possible$ = -5				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$03@std@@YAII@Z PROC			; std::_Get_size_of_n<4>, COMDAT

; 79   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 80   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR __Overflow_is_possible$[ebp], 1

; 81   : 
; 82   :     if constexpr (_Overflow_is_possible) {
; 83   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$1[ebp], 1073741823 ; 3fffffffH

; 84   :         if (_Count > _Max_possible) {

	cmp	DWORD PTR __Count$[ebp], 1073741823	; 3fffffffH
	jbe	SHORT $LN2@Get_size_o

; 85   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
	npad	1
$LN2@Get_size_o:

; 86   :         }
; 87   :     }
; 88   : 
; 89   :     return _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
$LN1@Get_size_o:

; 90   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$03@std@@YAII@Z ENDP			; std::_Get_size_of_n<4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@0@ABV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > const >, COMDAT

; 1559 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1560 :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 1561 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@0@ABV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$addressof@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@@Z PROC ; std::addressof<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *>, COMDAT

; 1559 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1560 :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 1561 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::addressof<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$forward@ABQAD@std@@YAABQADABQAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAD@std@@YAABQADABQAD@Z PROC		; std::forward<char * const &>, COMDAT

; 1536 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1537 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1538 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@ABQAD@std@@YAABQADABQAD@Z ENDP		; std::forward<char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPADAAV?$allocator@D@0@AAI@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPADAAV?$allocator@D@0@AAI@Z PROC ; std::_Allocate_at_least_helper<std::allocator<char> >, COMDAT

; 2177 :     _Alloc& _Al, _CRT_GUARDOVERFLOW typename allocator_traits<_Alloc>::size_type& _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2178 : #if _HAS_CXX23
; 2179 :     if constexpr (_Should_allocate_at_least<_Alloc>) {
; 2180 :         auto [_Ptr, _Allocated] = _Al.allocate_at_least(_Count);
; 2181 :         _Count                  = _Allocated;
; 2182 :         return _Ptr;
; 2183 :     } else
; 2184 : #endif // _HAS_CXX23
; 2185 :     {
; 2186 :         return _Al.allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@D@std@@QAEPADI@Z	; std::allocator<char>::allocate

; 2187 :     }
; 2188 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPADAAV?$allocator@D@0@AAI@Z ENDP ; std::_Allocate_at_least_helper<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$construct@VCVec@@ABV1@@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@ABV3@@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@VCVec@@ABV1@@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@ABV3@@Z PROC ; std::_Default_allocator_traits<std::allocator<CVec> >::construct<CVec,CVec const &>, COMDAT

; 696  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 697  : #if _HAS_CXX20
; 698  :         _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 699  : #else // ^^^ _HAS_CXX20 / !_HAS_CXX20 vvv
; 700  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	24					; 00000018H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@ABVCVec@@@std@@YAABVCVec@@ABV1@@Z ; std::forward<CVec const &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], eax

; 701  : #endif // ^^^ !_HAS_CXX20 ^^^
; 702  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@VCVec@@ABV1@@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@ABV3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CVec> >::construct<CVec,CVec const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xutility
;	COMDAT ??$_Construct_in_place@VCVec@@ABV1@@std@@YAXAAVCVec@@ABV1@@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@VCVec@@ABV1@@std@@YAXAAVCVec@@ABV1@@Z PROC ; std::_Construct_in_place<CVec,CVec const &>, COMDAT

; 381  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 382  : #if _HAS_CXX20
; 383  :     if (_STD is_constant_evaluated()) {
; 384  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 385  :     } else
; 386  : #endif // _HAS_CXX20
; 387  :     {
; 388  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@VCVec@@@std@@YAPAVCVec@@AAV1@@Z ; std::addressof<CVec>
	add	esp, 4
	push	eax
	push	24					; 00000018H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@ABVCVec@@@std@@YAABVCVec@@ABV1@@Z ; std::forward<CVec const &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], eax

; 389  :     }
; 390  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@VCVec@@ABV1@@std@@YAXAAVCVec@@ABV1@@Z ENDP ; std::_Construct_in_place<CVec,CVec const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$construct@VCVec@@V1@@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@$$QAV3@@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@VCVec@@V1@@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@$$QAV3@@Z PROC ; std::_Default_allocator_traits<std::allocator<CVec> >::construct<CVec,CVec>, COMDAT

; 696  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 697  : #if _HAS_CXX20
; 698  :         _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 699  : #else // ^^^ _HAS_CXX20 / !_HAS_CXX20 vvv
; 700  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	24					; 00000018H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@VCVec@@@std@@YA$$QAVCVec@@AAV1@@Z ; std::forward<CVec>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], eax

; 701  : #endif // ^^^ !_HAS_CXX20 ^^^
; 702  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@VCVec@@V1@@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@$$QAV3@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CVec> >::construct<CVec,CVec>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xutility
;	COMDAT ??$_Construct_in_place@VCVec@@V1@@std@@YAXAAVCVec@@$$QAV1@@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@VCVec@@V1@@std@@YAXAAVCVec@@$$QAV1@@Z PROC ; std::_Construct_in_place<CVec,CVec>, COMDAT

; 381  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 382  : #if _HAS_CXX20
; 383  :     if (_STD is_constant_evaluated()) {
; 384  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 385  :     } else
; 386  : #endif // _HAS_CXX20
; 387  :     {
; 388  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@VCVec@@@std@@YAPAVCVec@@AAV1@@Z ; std::addressof<CVec>
	add	esp, 4
	push	eax
	push	24					; 00000018H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@VCVec@@@std@@YA$$QAVCVec@@AAV1@@Z ; std::forward<CVec>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], eax

; 389  :     }
; 390  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@VCVec@@V1@@std@@YAXAAVCVec@@$$QAV1@@Z ENDP ; std::_Construct_in_place<CVec,CVec>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xutility
;	COMDAT ??$_Copy_memmove@PAVCVec@@PAV1@@std@@YAPAVCVec@@PAV1@00@Z
_TEXT	SEGMENT
__Count$ = -80						; size = 4
__Dest_ch$ = -68					; size = 4
__Last_ch$ = -56					; size = 4
__First_ch$ = -44					; size = 4
__DestPtr$ = -32					; size = 4
__LastPtr$ = -20					; size = 4
__FirstPtr$ = -8					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAVCVec@@PAV1@@std@@YAPAVCVec@@PAV1@00@Z PROC ; std::_Copy_memmove<CVec *,CVec *>, COMDAT

; 4613 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4614 :     auto _FirstPtr              = _STD _To_address(_First);

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_To_address@PAVCVec@@@std@@YA?A_PABQAVCVec@@@Z ; std::_To_address<CVec *>
	add	esp, 4
	mov	DWORD PTR __FirstPtr$[ebp], eax

; 4615 :     auto _LastPtr               = _STD _To_address(_Last);

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_To_address@PAVCVec@@@std@@YA?A_PABQAVCVec@@@Z ; std::_To_address<CVec *>
	add	esp, 4
	mov	DWORD PTR __LastPtr$[ebp], eax

; 4616 :     auto _DestPtr               = _STD _To_address(_Dest);

	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_To_address@PAVCVec@@@std@@YA?A_PABQAVCVec@@@Z ; std::_To_address<CVec *>
	add	esp, 4
	mov	DWORD PTR __DestPtr$[ebp], eax

; 4617 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	eax, DWORD PTR __FirstPtr$[ebp]
	mov	DWORD PTR __First_ch$[ebp], eax

; 4618 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	eax, DWORD PTR __LastPtr$[ebp]
	mov	DWORD PTR __Last_ch$[ebp], eax

; 4619 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	eax, DWORD PTR __DestPtr$[ebp]
	mov	DWORD PTR __Dest_ch$[ebp], eax

; 4620 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	eax, DWORD PTR __Last_ch$[ebp]
	sub	eax, DWORD PTR __First_ch$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 4621 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First_ch$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest_ch$[ebp]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH

; 4622 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4623 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	eax, DWORD PTR __Dest_ch$[ebp]
	add	eax, DWORD PTR __Count$[ebp]

; 4624 :     } else {
; 4625 :         return _Dest + (_LastPtr - _FirstPtr);
; 4626 :     }
; 4627 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_memmove@PAVCVec@@PAV1@@std@@YAPAVCVec@@PAV1@00@Z ENDP ; std::_Copy_memmove<CVec *,CVec *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Emplace_back@AAVCVec@@@?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAEXAAVCVec@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@AAVCVec@@@?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAEXAAVCVec@@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Emplace_back<CVec &>, COMDAT
; _this$ = ecx

; 1779 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1780 :         allocator_traits<_Alloc>::construct(_Al, _STD _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR _<_Vals_0>$[ebp]
	push	eax
	call	??$forward@AAVCVec@@@std@@YAAAVCVec@@AAV1@@Z ; std::forward<CVec &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$_Unfancy@VCVec@@@std@@YAPAVCVec@@PAV1@@Z ; std::_Unfancy<CVec>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	??$construct@VCVec@@AAV1@@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@AAV3@@Z ; std::_Default_allocator_traits<std::allocator<CVec> >::construct<CVec,CVec &>
	add	esp, 12					; 0000000cH

; 1781 :         ++_Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1782 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back@AAVCVec@@@?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAEXAAVCVec@@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Emplace_back<CVec &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xutility
;	COMDAT ??$_Get_unwrapped@PAVCVec@@@std@@YA?A_T$$QAPAVCVec@@@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Get_unwrapped@PAVCVec@@@std@@YA?A_T$$QAPAVCVec@@@Z PROC ; std::_Get_unwrapped<CVec *>, COMDAT

; 1304 :     !_Unwrappable_v<_Iter> || _Has_nothrow_unwrapped<_Iter>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1305 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1306 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1307 :         return _It + 0;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1308 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1309 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1310 :     } else {
; 1311 :         return static_cast<_Iter&&>(_It);
; 1312 :     }
; 1313 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_unwrapped@PAVCVec@@@std@@YA?A_T$$QAPAVCVec@@@Z ENDP ; std::_Get_unwrapped<CVec *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAEXXZ PROC ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Emplace_back<>, COMDAT
; _this$ = ecx

; 1779 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1780 :         allocator_traits<_Alloc>::construct(_Al, _STD _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	??$_Unfancy@VCVec@@@std@@YAPAVCVec@@PAV1@@Z ; std::_Unfancy<CVec>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	??$construct@VCVec@@$$V@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@@Z ; std::_Default_allocator_traits<std::allocator<CVec> >::construct<CVec>
	add	esp, 8

; 1781 :         ++_Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1782 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAEXXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Emplace_back<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAEPAVCVec@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Release@?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAEPAVCVec@@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Release, COMDAT
; _this$ = ecx

; 1784 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1785 :         _First = _Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1786 :         return _Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 1787 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAEPAVCVec@@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<CVec> >::~_Uninitialized_backout_al<std::allocator<CVec> >, COMDAT
; _this$ = ecx

; 1774 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1775 :         _STD _Destroy_range(_First, _Last, _Al);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Destroy_range@V?$allocator@VCVec@@@std@@@std@@YAXPAVCVec@@QAV1@AAV?$allocator@VCVec@@@0@@Z ; std::_Destroy_range<std::allocator<CVec> >
	add	esp, 12					; 0000000cH

; 1776 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<CVec> >::~_Uninitialized_backout_al<std::allocator<CVec> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAE@PAVCVec@@AAV?$allocator@VCVec@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAE@PAVCVec@@AAV?$allocator@VCVec@@@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Uninitialized_backout_al<std::allocator<CVec> >, COMDAT
; _this$ = ecx

; 1769 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAE@PAVCVec@@AAV?$allocator@VCVec@@@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Uninitialized_backout_al<std::allocator<CVec> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@QAV1@0PAV1@AAV?$allocator@VCVec@@@0@@Z
_TEXT	SEGMENT
$T2 = -256						; size = 4
__Backout$ = -52					; size = 12
__ULast$ = -32						; size = 4
__UFirst$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@QAV1@0PAV1@AAV?$allocator@VCVec@@@0@@Z PROC ; std::_Uninitialized_move<CVec *,std::allocator<CVec> >, COMDAT

; 1905 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_move@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@QAV1@0PAV1@AAV?$allocator@VCVec@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1906 :     // move [_First, _Last) to raw _Dest, using _Al
; 1907 :     // note: only called internally from elsewhere in the STL
; 1908 :     using _Ptrval     = typename _Alloc::value_type*;
; 1909 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Get_unwrapped@ABQAVCVec@@@std@@YA?A_TABQAVCVec@@@Z ; std::_Get_unwrapped<CVec * const &>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 1910 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Get_unwrapped@ABQAVCVec@@@std@@YA?A_TABQAVCVec@@@Z ; std::_Get_unwrapped<CVec * const &>
	add	esp, 4
	mov	DWORD PTR __ULast$[ebp], eax

; 1911 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1912 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1913 : #if _HAS_CXX20
; 1914 :         if (!_STD is_constant_evaluated())
; 1915 : #endif // _HAS_CXX20
; 1916 :         {
; 1917 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));
; 1918 :             return _Dest + (_ULast - _UFirst);
; 1919 :         }
; 1920 :     }
; 1921 : 
; 1922 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAE@PAVCVec@@AAV?$allocator@VCVec@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Uninitialized_backout_al<std::allocator<CVec> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1923 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	eax, DWORD PTR __UFirst$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR __UFirst$[ebp], eax
$LN4@Uninitiali:
	mov	eax, DWORD PTR __UFirst$[ebp]
	cmp	eax, DWORD PTR __ULast$[ebp]
	je	SHORT $LN3@Uninitiali

; 1924 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$move@AAVCVec@@@std@@YA$$QAVCVec@@AAV1@@Z ; std::move<CVec &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??$_Emplace_back@VCVec@@@?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAEX$$QAVCVec@@@Z ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Emplace_back<CVec>
	npad	1

; 1925 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1926 : 
; 1927 :     return _Backout._Release();

	lea	ecx, DWORD PTR __Backout$[ebp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAEPAVCVec@@XZ ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Release
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<CVec> >::~_Uninitialized_backout_al<std::allocator<CVec> >
	mov	eax, DWORD PTR $T2[ebp]

; 1928 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@Uninitiali:
	DD	1
	DD	$LN9@Uninitiali
$LN9@Uninitiali:
	DD	-52					; ffffffccH
	DD	12					; 0000000cH
	DD	$LN7@Uninitiali
$LN7@Uninitiali:
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@QAV1@0PAV1@AAV?$allocator@VCVec@@@0@@Z$0:
	lea	ecx, DWORD PTR __Backout$[ebp]
	jmp	??1?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<CVec> >::~_Uninitialized_backout_al<std::allocator<CVec> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$_Uninitialized_move@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@QAV1@0PAV1@AAV?$allocator@VCVec@@@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-264]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_move@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@QAV1@0PAV1@AAV?$allocator@VCVec@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@QAV1@0PAV1@AAV?$allocator@VCVec@@@0@@Z ENDP ; std::_Uninitialized_move<CVec *,std::allocator<CVec> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAMV?$allocator@M@std@@@std@@YAPAMQAM0PAMAAV?$allocator@M@0@@Z
_TEXT	SEGMENT
$T2 = -256						; size = 4
__Backout$ = -52					; size = 12
__ULast$ = -32						; size = 4
__UFirst$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAMV?$allocator@M@std@@@std@@YAPAMQAM0PAMAAV?$allocator@M@0@@Z PROC ; std::_Uninitialized_move<float *,std::allocator<float> >, COMDAT

; 1905 :     const _InIt _First, const _InIt _Last, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_move@PAMV?$allocator@M@std@@@std@@YAPAMQAM0PAMAAV?$allocator@M@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1906 :     // move [_First, _Last) to raw _Dest, using _Al
; 1907 :     // note: only called internally from elsewhere in the STL
; 1908 :     using _Ptrval     = typename _Alloc::value_type*;
; 1909 :     auto _UFirst      = _Get_unwrapped(_First);

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Get_unwrapped@ABQAM@std@@YA?A_TABQAM@Z ; std::_Get_unwrapped<float * const &>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 1910 :     const auto _ULast = _Get_unwrapped(_Last);

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_Get_unwrapped@ABQAM@std@@YA?A_TABQAM@Z ; std::_Get_unwrapped<float * const &>
	add	esp, 4
	mov	DWORD PTR __ULast$[ebp], eax

; 1911 :     if constexpr (conjunction_v<bool_constant<_Iter_move_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1912 :                       _Uses_default_construct<_Alloc, _Ptrval, decltype(_STD move(*_UFirst))>>) {
; 1913 : #if _HAS_CXX20
; 1914 :         if (!_STD is_constant_evaluated())
; 1915 : #endif // _HAS_CXX20
; 1916 :         {
; 1917 :             _Copy_memmove(_UFirst, _ULast, _Unfancy(_Dest));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Unfancy@M@std@@YAPAMPAM@Z		; std::_Unfancy<float>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __ULast$[ebp]
	push	ecx
	mov	edx, DWORD PTR __UFirst$[ebp]
	push	edx
	call	??$_Copy_memmove@PAMPAM@std@@YAPAMPAM00@Z ; std::_Copy_memmove<float *,float *>
	add	esp, 12					; 0000000cH

; 1918 :             return _Dest + (_ULast - _UFirst);

	mov	eax, DWORD PTR __ULast$[ebp]
	sub	eax, DWORD PTR __UFirst$[ebp]
	sar	eax, 2
	mov	ecx, DWORD PTR __Dest$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	jmp	SHORT $LN1@Uninitiali

; 1919 :         }
; 1920 :     }
; 1921 : 
; 1922 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAE@PAMAAV?$allocator@M@1@@Z ; std::_Uninitialized_backout_al<std::allocator<float> >::_Uninitialized_backout_al<std::allocator<float> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1923 :     for (; _UFirst != _ULast; ++_UFirst) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	eax, DWORD PTR __UFirst$[ebp]
	add	eax, 4
	mov	DWORD PTR __UFirst$[ebp], eax
$LN4@Uninitiali:
	mov	eax, DWORD PTR __UFirst$[ebp]
	cmp	eax, DWORD PTR __ULast$[ebp]
	je	SHORT $LN3@Uninitiali

; 1924 :         _Backout._Emplace_back(_STD move(*_UFirst));

	mov	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	call	??$move@AAM@std@@YA$$QAMAAM@Z		; std::move<float &>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??$_Emplace_back@M@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAEX$$QAM@Z ; std::_Uninitialized_backout_al<std::allocator<float> >::_Emplace_back<float>
	npad	1

; 1925 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1926 : 
; 1927 :     return _Backout._Release();

	lea	ecx, DWORD PTR __Backout$[ebp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAEPAMXZ ; std::_Uninitialized_backout_al<std::allocator<float> >::_Release
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<float> >::~_Uninitialized_backout_al<std::allocator<float> >
	mov	eax, DWORD PTR $T2[ebp]
$LN1@Uninitiali:

; 1928 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@Uninitiali:
	DD	1
	DD	$LN9@Uninitiali
$LN9@Uninitiali:
	DD	-52					; ffffffccH
	DD	12					; 0000000cH
	DD	$LN7@Uninitiali
$LN7@Uninitiali:
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_move@PAMV?$allocator@M@std@@@std@@YAPAMQAM0PAMAAV?$allocator@M@0@@Z$0:
	lea	ecx, DWORD PTR __Backout$[ebp]
	jmp	??1?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<float> >::~_Uninitialized_backout_al<std::allocator<float> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$_Uninitialized_move@PAMV?$allocator@M@std@@@std@@YAPAMQAM0PAMAAV?$allocator@M@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-264]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_move@PAMV?$allocator@M@std@@@std@@YAPAMQAM0PAMAAV?$allocator@M@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_move@PAMV?$allocator@M@std@@@std@@YAPAMQAM0PAMAAV?$allocator@M@0@@Z ENDP ; std::_Uninitialized_move<float *,std::allocator<float> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$construct@MABM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAAV?$allocator@M@1@QAMABM@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@MABM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAAV?$allocator@M@1@QAMABM@Z PROC ; std::_Default_allocator_traits<std::allocator<float> >::construct<float,float const &>, COMDAT

; 696  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 697  : #if _HAS_CXX20
; 698  :         _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 699  : #else // ^^^ _HAS_CXX20 / !_HAS_CXX20 vvv
; 700  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@ABM@std@@YAABMABM@Z		; std::forward<float const &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 701  : #endif // ^^^ !_HAS_CXX20 ^^^
; 702  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@MABM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAAV?$allocator@M@1@QAMABM@Z ENDP ; std::_Default_allocator_traits<std::allocator<float> >::construct<float,float const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xutility
;	COMDAT ??$_Construct_in_place@MABM@std@@YAXAAMABM@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@MABM@std@@YAXAAMABM@Z PROC	; std::_Construct_in_place<float,float const &>, COMDAT

; 381  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 382  : #if _HAS_CXX20
; 383  :     if (_STD is_constant_evaluated()) {
; 384  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 385  :     } else
; 386  : #endif // _HAS_CXX20
; 387  :     {
; 388  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@M@std@@YAPAMAAM@Z		; std::addressof<float>
	add	esp, 4
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@ABM@std@@YAABMABM@Z		; std::forward<float const &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 389  :     }
; 390  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@MABM@std@@YAXAAMABM@Z ENDP	; std::_Construct_in_place<float,float const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xutility
;	COMDAT ??$_Copy_memmove@PAMPAM@std@@YAPAMPAM00@Z
_TEXT	SEGMENT
__Count$ = -80						; size = 4
__Dest_ch$ = -68					; size = 4
__Last_ch$ = -56					; size = 4
__First_ch$ = -44					; size = 4
__DestPtr$ = -32					; size = 4
__LastPtr$ = -20					; size = 4
__FirstPtr$ = -8					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAMPAM@std@@YAPAMPAM00@Z PROC		; std::_Copy_memmove<float *,float *>, COMDAT

; 4613 : _OutCtgIt _Copy_memmove(_CtgIt _First, _CtgIt _Last, _OutCtgIt _Dest) {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4614 :     auto _FirstPtr              = _STD _To_address(_First);

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_To_address@PAM@std@@YA?A_PABQAM@Z	; std::_To_address<float *>
	add	esp, 4
	mov	DWORD PTR __FirstPtr$[ebp], eax

; 4615 :     auto _LastPtr               = _STD _To_address(_Last);

	lea	eax, DWORD PTR __Last$[ebp]
	push	eax
	call	??$_To_address@PAM@std@@YA?A_PABQAM@Z	; std::_To_address<float *>
	add	esp, 4
	mov	DWORD PTR __LastPtr$[ebp], eax

; 4616 :     auto _DestPtr               = _STD _To_address(_Dest);

	lea	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_To_address@PAM@std@@YA?A_PABQAM@Z	; std::_To_address<float *>
	add	esp, 4
	mov	DWORD PTR __DestPtr$[ebp], eax

; 4617 :     const char* const _First_ch = const_cast<const char*>(reinterpret_cast<const volatile char*>(_FirstPtr));

	mov	eax, DWORD PTR __FirstPtr$[ebp]
	mov	DWORD PTR __First_ch$[ebp], eax

; 4618 :     const char* const _Last_ch  = const_cast<const char*>(reinterpret_cast<const volatile char*>(_LastPtr));

	mov	eax, DWORD PTR __LastPtr$[ebp]
	mov	DWORD PTR __Last_ch$[ebp], eax

; 4619 :     char* const _Dest_ch        = const_cast<char*>(reinterpret_cast<const volatile char*>(_DestPtr));

	mov	eax, DWORD PTR __DestPtr$[ebp]
	mov	DWORD PTR __Dest_ch$[ebp], eax

; 4620 :     const auto _Count           = static_cast<size_t>(_Last_ch - _First_ch);

	mov	eax, DWORD PTR __Last_ch$[ebp]
	sub	eax, DWORD PTR __First_ch$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 4621 :     _CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First_ch$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Dest_ch$[ebp]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH

; 4622 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4623 :         return reinterpret_cast<_OutCtgIt>(_Dest_ch + _Count);

	mov	eax, DWORD PTR __Dest_ch$[ebp]
	add	eax, DWORD PTR __Count$[ebp]

; 4624 :     } else {
; 4625 :         return _Dest + (_LastPtr - _FirstPtr);
; 4626 :     }
; 4627 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_memmove@PAMPAM@std@@YAPAMPAM00@Z ENDP		; std::_Copy_memmove<float *,float *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Emplace_back@AAM@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAEXAAM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_<_Vals_0>$ = 8						; size = 4
??$_Emplace_back@AAM@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAEXAAM@Z PROC ; std::_Uninitialized_backout_al<std::allocator<float> >::_Emplace_back<float &>, COMDAT
; _this$ = ecx

; 1779 :     _CONSTEXPR20 void _Emplace_back(_Types&&... _Vals) { // construct a new element at *_Last and increment

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1780 :         allocator_traits<_Alloc>::construct(_Al, _STD _Unfancy(_Last), _STD forward<_Types>(_Vals)...);

	mov	eax, DWORD PTR _<_Vals_0>$[ebp]
	push	eax
	call	??$forward@AAM@std@@YAAAMAAM@Z		; std::forward<float &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$_Unfancy@M@std@@YAPAMPAM@Z		; std::_Unfancy<float>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	??$construct@MAAM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAAV?$allocator@M@1@QAMAAM@Z ; std::_Default_allocator_traits<std::allocator<float> >::construct<float,float &>
	add	esp, 12					; 0000000cH

; 1781 :         ++_Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 1782 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back@AAM@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAEXAAM@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<float> >::_Emplace_back<float &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Release@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAEPAMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Release@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAEPAMXZ PROC ; std::_Uninitialized_backout_al<std::allocator<float> >::_Release, COMDAT
; _this$ = ecx

; 1784 :     constexpr pointer _Release() { // suppress any exception handling backout and return _Last

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1785 :         _First = _Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1786 :         return _Last;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]

; 1787 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAEPAMXZ ENDP ; std::_Uninitialized_backout_al<std::allocator<float> >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??1?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAE@XZ PROC ; std::_Uninitialized_backout_al<std::allocator<float> >::~_Uninitialized_backout_al<std::allocator<float> >, COMDAT
; _this$ = ecx

; 1774 :     _CONSTEXPR20 ~_Uninitialized_backout_al() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1775 :         _STD _Destroy_range(_First, _Last, _Al);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAMQAMAAV?$allocator@M@0@@Z ; std::_Destroy_range<std::allocator<float> >
	add	esp, 12					; 0000000cH

; 1776 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAE@XZ ENDP ; std::_Uninitialized_backout_al<std::allocator<float> >::~_Uninitialized_backout_al<std::allocator<float> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??0?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAE@PAMAAV?$allocator@M@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Dest$ = 8						; size = 4
__Al_$ = 12						; size = 4
??0?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAE@PAMAAV?$allocator@M@1@@Z PROC ; std::_Uninitialized_backout_al<std::allocator<float> >::_Uninitialized_backout_al<std::allocator<float> >, COMDAT
; _this$ = ecx

; 1769 :     _CONSTEXPR20 _Uninitialized_backout_al(pointer _Dest, _Alloc& _Al_) : _First(_Dest), _Last(_Dest), _Al(_Al_) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAE@PAMAAV?$allocator@M@1@@Z ENDP ; std::_Uninitialized_backout_al<std::allocator<float> >::_Uninitialized_backout_al<std::allocator<float> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Unfancy@M@std@@YAPAMPAM@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@M@std@@YAPAMPAM@Z PROC			; std::_Unfancy<float>, COMDAT

; 35   : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 36   :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 37   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unfancy@M@std@@YAPAMPAM@Z ENDP			; std::_Unfancy<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xutility
;	COMDAT ??$_Get_unwrapped@PAM@std@@YA?A_T$$QAPAM@Z
_TEXT	SEGMENT
__It$ = 8						; size = 4
??$_Get_unwrapped@PAM@std@@YA?A_T$$QAPAM@Z PROC		; std::_Get_unwrapped<float *>, COMDAT

; 1304 :     !_Unwrappable_v<_Iter> || _Has_nothrow_unwrapped<_Iter>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1305 :     // unwrap an iterator previously subjected to _Adl_verify_range or otherwise validated
; 1306 :     if constexpr (is_pointer_v<decay_t<_Iter>>) { // special-case pointers and arrays
; 1307 :         return _It + 0;

	mov	eax, DWORD PTR __It$[ebp]
	mov	eax, DWORD PTR [eax]

; 1308 :     } else if constexpr (_Unwrappable_v<_Iter>) {
; 1309 :         return static_cast<_Iter&&>(_It)._Unwrapped();
; 1310 :     } else {
; 1311 :         return static_cast<_Iter&&>(_It);
; 1312 :     }
; 1313 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_unwrapped@PAM@std@@YA?A_T$$QAPAM@Z ENDP		; std::_Get_unwrapped<float *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate, COMDAT

; 682  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 683  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 684  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 685  :         if (_STD is_constant_evaluated()) {
; 686  :             _Al.deallocate(_Ptr, _Count);
; 687  :         } else
; 688  : #endif // _HAS_CXX20
; 689  :         {
; 690  :             (void) _Al;
; 691  :             _STD _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07@std@@YAXPAXI@Z	; std::_Deallocate<8>
	add	esp, 8

; 692  :         }
; 693  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$forward@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *>, COMDAT

; 1536 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1537 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1538 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xutility
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@0@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@0@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * &>, COMDAT

; 381  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 382  : #if _HAS_CXX20
; 383  :     if (_STD is_constant_evaluated()) {
; 384  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 385  :     } else
; 386  : #endif // _HAS_CXX20
; 387  :     {
; 388  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *>
	add	esp, 4
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 389  :     }
; 390  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@0@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
_<_Args_2>$ = 24					; size = 4
??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >, COMDAT

; 696  :     static _CONSTEXPR20 void construct(_Alloc&, _Objty* const _Ptr, _Types&&... _Args) {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 697  : #if _HAS_CXX20
; 698  :         _STD construct_at(_Ptr, _STD forward<_Types>(_Args)...);
; 699  : #else // ^^^ _HAS_CXX20 / !_HAS_CXX20 vvv
; 700  :         ::new (const_cast<void*>(static_cast<const volatile void*>(_Ptr))) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	push	32					; 00000020H
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	push	ecx
	mov	esi, esp
	mov	ecx, DWORD PTR _<_Args_2>$[ebp]
	push	ecx
	call	??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
	add	esp, 4
	push	eax
	mov	ecx, esi
	call	??0?$tuple@$$V@std@@QAE@ABV01@@Z	; std::tuple<>::tuple<>
	push	ecx
	mov	esi, esp
	mov	edx, DWORD PTR _<_Args_1>$[ebp]
	push	edx
	call	??$forward@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::forward<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> >
	add	esp, 4
	push	eax
	mov	ecx, esi
	call	??0?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAV01@@Z ; std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
	add	esp, 4
	mov	cl, BYTE PTR [eax]
	movzx	edx, cl
	push	edx
	mov	ecx, DWORD PTR $T1[ebp]
	call	??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@QAE@Upiecewise_construct_t@1@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@Z ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
	npad	1

; 701  : #endif // ^^^ !_HAS_CXX20 ^^^
; 702  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z PROC ; std::forward<std::tuple<> >, COMDAT

; 1536 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1537 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1538 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ENDP ; std::forward<std::tuple<> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$forward@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z PROC ; std::forward<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> >, COMDAT

; 1536 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1537 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1538 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ENDP ; std::forward<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z PROC ; std::forward<std::piecewise_construct_t const &>, COMDAT

; 1536 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1537 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1538 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ENDP ; std::forward<std::piecewise_construct_t const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\tuple
;	COMDAT ??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
$T2 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__This_arg$ = 8						; size = 4
??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,0>, COMDAT
; _this$ = ecx

; 351  :         : tuple(_Exact_args_t{}, _This_arg, _Rest_arg...) {}

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __This_arg$[ebp]
	push	eax
	movzx	ecx, BYTE PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0U_Exact_args_t@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@$$V$0A@@?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@U_Exact_args_t@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &><std::_Exact_args_t,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,0>
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,0>
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$forward@_N@std@@YA$$QA_NAA_N@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			; std::forward<bool>, COMDAT

; 1536 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1537 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1538 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@_N@std@@YA$$QA_NAA_N@Z ENDP			; std::forward<bool>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$forward@ABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@ABQAU10@@Z PROC ; std::forward<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * const &>, COMDAT

; 1536 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1537 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1538 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@ABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@ABQAU10@@Z ENDP ; std::forward<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z
_TEXT	SEGMENT
tv68 = -196						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z PROC ; std::operator<<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 5093 :     const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-4]
	mov	ecx, 1
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 5094 :     return _Left.compare(_Right) < 0;

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	call	?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
	test	eax, eax
	jge	SHORT $LN3@operator
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv68[ebp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv68[ebp]

; 5095 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ENDP ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xutility
;	COMDAT ??$_Debug_lt_pred@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@$0A@@std@@YA_NABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z
_TEXT	SEGMENT
__Result$ = -5						; size = 1
__Pred$ = 8						; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$_Debug_lt_pred@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@$0A@@std@@YA_NABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z PROC ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,0>, COMDAT

; 1501 :     noexcept(_Pred(_Left, _Right)) && noexcept(_Pred(_Right, _Left))) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1502 :     // test if _Pred(_Left, _Right) and _Pred is strict weak ordering, when the arguments are the cv-same-type
; 1503 :     const auto _Result = static_cast<bool>(_Pred(_Left, _Right));

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Pred$[ebp]
	call	??R?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z ; std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::operator()
	mov	BYTE PTR __Result$[ebp], al

; 1504 :     if (_Result) {

	movzx	eax, BYTE PTR __Result$[ebp]
	test	eax, eax
	je	SHORT $LN3@Debug_lt_p
$LN4@Debug_lt_p:

; 1505 :         _STL_VERIFY(!_Pred(_Right, _Left), "invalid comparator");

	mov	eax, DWORD PTR __Left$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Right$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Pred$[ebp]
	call	??R?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z ; std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::operator()
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN9@Debug_lt_p
	jmp	SHORT $LN6@Debug_lt_p
$LN9@Debug_lt_p:
	mov	esi, esp
	push	OFFSET ??_C@_0BD@FEEMDEPI@invalid?5comparator@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1505					; 000005e1H
	push	OFFSET ??_C@_0GD@EOJAGFMI@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN12@Debug_lt_p
	int	3
$LN12@Debug_lt_p:
	mov	esi, esp
	push	0
	push	1505					; 000005e1H
	push	OFFSET ??_C@_1MG@KGDLNGON@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1CK@NDNHPKPI@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	xor	eax, eax
	jne	SHORT $LN9@Debug_lt_p
$LN6@Debug_lt_p:
	xor	eax, eax
	jne	SHORT $LN4@Debug_lt_p
$LN3@Debug_lt_p:

; 1506 :     }
; 1507 : 
; 1508 :     return _Result;

	movzx	eax, BYTE PTR __Result$[ebp]

; 1509 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Debug_lt_pred@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@$0A@@std@@YA_NABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z ENDP ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\map
;	COMDAT ??$_Kfn@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@SAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$_Kfn@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@SAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@@Z PROC ; std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0>::_Kfn<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>, COMDAT

; 66   :     static const _Kty& _Kfn(const pair<_Ty1, _Ty2>& _Val) { // extract key from element value

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 67   :         return _Val.first;

	mov	eax, DWORD PTR __Val$[ebp]

; 68   :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Kfn@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@SAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@@Z ENDP ; std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0>::_Kfn<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Allocate_at_least_helper@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@AAV?$allocator@VCVec@@@0@AAI@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Allocate_at_least_helper@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@AAV?$allocator@VCVec@@@0@AAI@Z PROC ; std::_Allocate_at_least_helper<std::allocator<CVec> >, COMDAT

; 2177 :     _Alloc& _Al, _CRT_GUARDOVERFLOW typename allocator_traits<_Alloc>::size_type& _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2178 : #if _HAS_CXX23
; 2179 :     if constexpr (_Should_allocate_at_least<_Alloc>) {
; 2180 :         auto [_Ptr, _Allocated] = _Al.allocate_at_least(_Count);
; 2181 :         _Count                  = _Allocated;
; 2182 :         return _Ptr;
; 2183 :     } else
; 2184 : #endif // _HAS_CXX23
; 2185 :     {
; 2186 :         return _Al.allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@VCVec@@@std@@QAEPAVCVec@@I@Z ; std::allocator<CVec>::allocate

; 2187 :     }
; 2188 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate_at_least_helper@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@AAV?$allocator@VCVec@@@0@AAI@Z ENDP ; std::_Allocate_at_least_helper<std::allocator<CVec> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Allocate_at_least_helper@V?$allocator@M@std@@@std@@YAPAMAAV?$allocator@M@0@AAI@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Allocate_at_least_helper@V?$allocator@M@std@@@std@@YAPAMAAV?$allocator@M@0@AAI@Z PROC ; std::_Allocate_at_least_helper<std::allocator<float> >, COMDAT

; 2177 :     _Alloc& _Al, _CRT_GUARDOVERFLOW typename allocator_traits<_Alloc>::size_type& _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2178 : #if _HAS_CXX23
; 2179 :     if constexpr (_Should_allocate_at_least<_Alloc>) {
; 2180 :         auto [_Ptr, _Allocated] = _Al.allocate_at_least(_Count);
; 2181 :         _Count                  = _Allocated;
; 2182 :         return _Ptr;
; 2183 :     } else
; 2184 : #endif // _HAS_CXX23
; 2185 :     {
; 2186 :         return _Al.allocate(_Count);

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@M@std@@QAEPAMI@Z	; std::allocator<float>::allocate

; 2187 :     }
; 2188 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate_at_least_helper@V?$allocator@M@std@@@std@@YAPAMAAV?$allocator@M@0@AAI@Z ENDP ; std::_Allocate_at_least_helper<std::allocator<float> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Get_size_of_n@$0DA@@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -20					; size = 4
__Overflow_is_possible$ = -5				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$0DA@@std@@YAII@Z PROC		; std::_Get_size_of_n<48>, COMDAT

; 79   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 80   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR __Overflow_is_possible$[ebp], 1

; 81   : 
; 82   :     if constexpr (_Overflow_is_possible) {
; 83   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$1[ebp], 89478485 ; 05555555H

; 84   :         if (_Count > _Max_possible) {

	cmp	DWORD PTR __Count$[ebp], 89478485	; 05555555H
	jbe	SHORT $LN2@Get_size_o

; 85   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
	npad	1
$LN2@Get_size_o:

; 86   :         }
; 87   :     }
; 88   : 
; 89   :     return _Count * _Ty_size;

	imul	eax, DWORD PTR __Count$[ebp], 48
$LN1@Get_size_o:

; 90   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$0DA@@std@@YAII@Z ENDP		; std::_Get_size_of_n<48>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\utility
;	COMDAT ??$exchange@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -8						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,std::nullptr_t>, COMDAT

; 754  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi

; 755  :     // assign _New_val to _Val, return previous _Val
; 756  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old_val$[ebp], ecx

; 757  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR __New_val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 758  :     return _Old_val;

	mov	eax, DWORD PTR __Old_val$[ebp]

; 759  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$exchange@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >, COMDAT

; 705  :     static _CONSTEXPR20 void destroy(_Alloc&, _Uty* const _Ptr) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 706  : #if _HAS_CXX20
; 707  :         _STD destroy_at(_Ptr);
; 708  : #else // ^^^ _HAS_CXX20 / !_HAS_CXX20 vvv
; 709  :         _Ptr->~_Uty();

	push	0
	mov	ecx, DWORD PTR __Ptr$[ebp]
	call	??_G?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@QAEPAXI@Z
	npad	1

; 710  : #endif // ^^^ !_HAS_CXX20 ^^^
; 711  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@@Z PROC ; std::_Destroy_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *>, COMDAT

; 289  : _CONSTEXPR20 void _Destroy_in_place(_Ty& _Obj) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 290  :     if constexpr (is_array_v<_Ty>) {
; 291  :         _STD _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 292  :     } else {
; 293  :         _Obj.~_Ty();
; 294  :     }
; 295  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@@Z ENDP ; std::_Destroy_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Ptr$ = -32						; size = 4
__Ptr_container$ = -20					; size = 4
__Block_size$ = -8					; size = 4
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 151  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 152  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 153  :     const size_t _Block_size = _Non_user_size + _Bytes;

	mov	eax, DWORD PTR __Bytes$[ebp]
	add	eax, 39					; 00000027H
	mov	DWORD PTR __Block_size$[ebp], eax

; 154  :     if (_Block_size <= _Bytes) {

	mov	eax, DWORD PTR __Block_size$[ebp]
	cmp	eax, DWORD PTR __Bytes$[ebp]
	ja	SHORT $LN8@Allocate_m

; 155  :         _Throw_bad_array_new_length(); // add overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
	npad	1
$LN8@Allocate_m:

; 156  :     }
; 157  : 
; 158  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

	mov	eax, DWORD PTR __Block_size$[ebp]
	push	eax
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
	mov	DWORD PTR __Ptr_container$[ebp], eax
$LN4@Allocate_m:

; 159  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

	cmp	DWORD PTR __Ptr_container$[ebp], 0
	je	SHORT $LN9@Allocate_m
	jmp	SHORT $LN6@Allocate_m
$LN9@Allocate_m:
	mov	esi, esp
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	159					; 0000009fH
	push	OFFSET ??_C@_0GC@GDGMGNBP@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN12@Allocate_m
	int	3
$LN12@Allocate_m:
	mov	esi, esp
	push	0
	push	159					; 0000009fH
	push	OFFSET ??_C@_1ME@KJJNLLPL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	xor	eax, eax
	jne	SHORT $LN9@Allocate_m
$LN6@Allocate_m:
	xor	eax, eax
	jne	SHORT $LN4@Allocate_m

; 160  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

	mov	eax, DWORD PTR __Ptr_container$[ebp]
	add	eax, 39					; 00000027H
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR __Ptr$[ebp], eax

; 161  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 162  : 
; 163  : #ifdef _DEBUG
; 164  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;

	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx+ecx], -84215046		; fafafafaH

; 165  : #endif // defined(_DEBUG)
; 166  :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
$LN1@Allocate_m:

; 167  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z PROC ; std::forward<std::_Container_base12 *>, COMDAT

; 1536 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1537 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1538 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ENDP ; std::forward<std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 1559 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1560 :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 1561 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xutility
;	COMDAT ??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@ABQAU10@@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@ABQAU10@@Z PROC ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * const &>, COMDAT

; 381  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 382  : #if _HAS_CXX20
; 383  :     if (_STD is_constant_evaluated()) {
; 384  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 385  :     } else
; 386  : #endif // _HAS_CXX20
; 387  :     {
; 388  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAPAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@@Z ; std::addressof<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *>
	add	esp, 4
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@ABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@ABQAU10@@Z ; std::forward<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * const &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 389  :     }
; 390  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@ABQAU10@@Z ENDP ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1536 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1537 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1538 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT

; 1559 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1560 :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 1561 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z PROC ; std::forward<std::_Zero_then_variadic_args_t>, COMDAT

; 1536 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1537 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1538 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ENDP ; std::forward<std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$forward@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABU10@@Z PROC ; std::forward<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &>, COMDAT

; 1536 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1537 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1538 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABU10@@Z ENDP ; std::forward<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xutility
;	COMDAT ??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z PROC ; std::_Construct_in_place<char *,char * const &>, COMDAT

; 381  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 382  : #if _HAS_CXX20
; 383  :     if (_STD is_constant_evaluated()) {
; 384  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 385  :     } else
; 386  : #endif // _HAS_CXX20
; 387  :     {
; 388  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@PAD@std@@YAPAPADAAPAD@Z	; std::addressof<char *>
	add	esp, 4
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@ABQAD@std@@YAABQADABQAD@Z	; std::forward<char * const &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 389  :     }
; 390  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ENDP ; std::_Construct_in_place<char *,char * const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPADAAV?$allocator@D@1@AAI@Z
_TEXT	SEGMENT
__Fancy_ptr$ = -8					; size = 4
__Al$ = 8						; size = 4
__Capacity$ = 12					; size = 4
??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPADAAV?$allocator@D@1@AAI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Allocate_for_capacity<0>, COMDAT

; 2614 :     _NODISCARD static _CONSTEXPR20 pointer _Allocate_for_capacity(_Alty& _Al, size_type& _Capacity) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2615 :         _STL_INTERNAL_CHECK(_Capacity > _Small_string_capacity);
; 2616 :         ++_Capacity; // Take null terminator into consideration

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR [edx], ecx

; 2617 : 
; 2618 :         pointer _Fancy_ptr;
; 2619 :         if constexpr (_Policy == _Allocation_policy::_At_least) {
; 2620 :             _Fancy_ptr = _Allocate_at_least_helper(_Al, _Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Allocate_at_least_helper@V?$allocator@D@std@@@std@@YAPADAAV?$allocator@D@0@AAI@Z ; std::_Allocate_at_least_helper<std::allocator<char> >
	add	esp, 8
	mov	DWORD PTR __Fancy_ptr$[ebp], eax

; 2621 :         } else {
; 2622 :             _STL_INTERNAL_STATIC_ASSERT(_Policy == _Allocation_policy::_Exactly);
; 2623 :             _Fancy_ptr = _Al.allocate(_Capacity);
; 2624 :         }
; 2625 : 
; 2626 : #if _HAS_CXX20
; 2627 :         // Start element lifetimes to avoid UB. This is a more general mechanism than _String_val::_Activate_SSO_buffer,
; 2628 :         // but likely more impactful to throughput.
; 2629 :         if (_STD is_constant_evaluated()) {
; 2630 :             _Elem* const _Ptr = _Unfancy(_Fancy_ptr);
; 2631 :             for (size_type _Idx = 0; _Idx < _Capacity; ++_Idx) {
; 2632 :                 _STD construct_at(_Ptr + _Idx);
; 2633 :             }
; 2634 :         }
; 2635 : #endif // _HAS_CXX20
; 2636 :         --_Capacity;

	mov	eax, DWORD PTR __Capacity$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR [edx], ecx

; 2637 :         return _Fancy_ptr;

	mov	eax, DWORD PTR __Fancy_ptr$[ebp]

; 2638 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPADAAV?$allocator@D@1@AAI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Allocate_for_capacity<0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::forward<std::allocator<char> >, COMDAT

; 1536 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1537 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1538 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::forward<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??$_Emplace_reallocate@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@ABV2@@Z
_TEXT	SEGMENT
__Constructed_first$ = -156				; size = 4
__Constructed_last$ = -144				; size = 4
__Newvec$ = -132					; size = 4
__Newcapacity$ = -120					; size = 4
__Newsize$ = -108					; size = 4
__Oldsize$ = -96					; size = 4
__Whereoff$ = -84					; size = 4
__Mylast$ = -72						; size = 4
__Myfirst$ = -60					; size = 4
__My_data$ = -48					; size = 4
__Al$ = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@ABV2@@Z PROC ; std::vector<CVec,std::allocator<CVec> >::_Emplace_reallocate<CVec const &>, COMDAT
; _this$ = ecx

; 806  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Emplace_reallocate@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@ABV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-160]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 807  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 808  :         _Alty& _Al        = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAV?$allocator@VCVec@@@2@XZ ; std::vector<CVec,std::allocator<CVec> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 809  :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 810  :         pointer& _Myfirst = _My_data._Myfirst;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	mov	DWORD PTR __Myfirst$[ebp], eax

; 811  :         pointer& _Mylast  = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 812  : 
; 813  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 814  : 
; 815  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	eax, ecx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR __Whereoff$[ebp], eax

; 816  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR __Oldsize$[ebp], eax

; 817  : 
; 818  :         if (_Oldsize == max_size()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ ; std::vector<CVec,std::allocator<CVec> >::max_size
	cmp	DWORD PTR __Oldsize$[ebp], eax
	jne	SHORT $LN2@Emplace_re

; 819  :             _Xlength();

	call	?_Xlength@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@CAXXZ ; std::vector<CVec,std::allocator<CVec> >::_Xlength
	npad	1
$LN2@Emplace_re:

; 820  :         }
; 821  : 
; 822  :         const size_type _Newsize = _Oldsize + 1;

	mov	eax, DWORD PTR __Oldsize$[ebp]
	add	eax, 1
	mov	DWORD PTR __Newsize$[ebp], eax

; 823  :         size_type _Newcapacity   = _Calculate_growth(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEII@Z ; std::vector<CVec,std::allocator<CVec> >::_Calculate_growth
	mov	DWORD PTR __Newcapacity$[ebp], eax

; 824  : 
; 825  :         const pointer _Newvec           = _Allocate_at_least_helper(_Al, _Newcapacity);

	lea	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Allocate_at_least_helper@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@AAV?$allocator@VCVec@@@0@AAI@Z ; std::_Allocate_at_least_helper<std::allocator<CVec> >
	add	esp, 8
	mov	DWORD PTR __Newvec$[ebp], eax

; 826  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	imul	eax, DWORD PTR __Whereoff$[ebp], 24
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax+24]
	mov	DWORD PTR __Constructed_last$[ebp], edx

; 827  :         pointer _Constructed_first      = _Constructed_last;

	mov	eax, DWORD PTR __Constructed_last$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], eax

; 828  : 
; 829  :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 830  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@ABVCVec@@@std@@YAABVCVec@@ABV1@@Z ; std::forward<CVec const &>
	add	esp, 4
	push	eax
	imul	ecx, DWORD PTR __Whereoff$[ebp], 24
	add	ecx, DWORD PTR __Newvec$[ebp]
	push	ecx
	call	??$_Unfancy@VCVec@@@std@@YAPAVCVec@@PAV1@@Z ; std::_Unfancy<CVec>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$construct@VCVec@@ABV1@@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@ABV3@@Z ; std::_Default_allocator_traits<std::allocator<CVec> >::construct<CVec,CVec const &>
	add	esp, 12					; 0000000cH

; 831  :         _Constructed_first = _Newvec + _Whereoff;

	imul	eax, DWORD PTR __Whereoff$[ebp], 24
	add	eax, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], eax

; 832  : 
; 833  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN4@Emplace_re

; 834  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 835  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Uninitialized_move@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@QAV1@0PAV1@AAV?$allocator@VCVec@@@0@@Z ; std::_Uninitialized_move<CVec *,std::allocator<CVec> >
	add	esp, 16					; 00000010H

; 836  :             } else {
; 837  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 838  :             }
; 839  :         } else { // provide basic guarantee

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 840  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Whereptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Uninitialized_move@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@QAV1@0PAV1@AAV?$allocator@VCVec@@@0@@Z ; std::_Uninitialized_move<CVec *,std::allocator<CVec> >
	add	esp, 16					; 00000010H

; 841  :             _Constructed_first = _Newvec;

	mov	eax, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], eax

; 842  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	imul	ecx, DWORD PTR __Whereoff$[ebp], 24
	mov	edx, DWORD PTR __Newvec$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24]
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __Whereptr$[ebp]
	push	eax
	call	??$_Uninitialized_move@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@QAV1@0PAV1@AAV?$allocator@VCVec@@@0@@Z ; std::_Uninitialized_move<CVec *,std::allocator<CVec> >
	add	esp, 16					; 00000010H
$LN5@Emplace_re:
	jmp	SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@ABV2@@Z$0:

; 843  :         }
; 844  :         _CATCH_ALL
; 845  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Constructed_last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Constructed_first$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@VCVec@@@std@@@std@@YAXPAVCVec@@QAV1@AAV?$allocator@VCVec@@@0@@Z ; std::_Destroy_range<std::allocator<CVec> >
	add	esp, 12					; 0000000cH

; 846  :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@VCVec@@@std@@QAEXQAVCVec@@I@Z ; std::allocator<CVec>::deallocate
	npad	1

; 847  :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
	npad	1

; 848  :         _CATCH_END

	mov	eax, $LN10@Emplace_re
	ret	0
$LN7@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN9@Emplace_re
$LN10@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Emplace_re:

; 849  : 
; 850  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Change_array@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXQAVCVec@@II@Z ; std::vector<CVec,std::allocator<CVec> >::_Change_array
	npad	1

; 851  :         return _Newvec + _Whereoff;

	imul	eax, DWORD PTR __Whereoff$[ebp], 24
	add	eax, DWORD PTR __Newvec$[ebp]
$LN1@Emplace_re:

; 852  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@Emplace_re
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN14@Emplace_re:
	DD	1
	DD	$LN13@Emplace_re
$LN13@Emplace_re:
	DD	-120					; ffffff88H
	DD	4
	DD	$LN11@Emplace_re
$LN11@Emplace_re:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@ABV2@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-356]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@ABV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@ABV2@@Z ENDP ; std::vector<CVec,std::allocator<CVec> >::_Emplace_reallocate<CVec const &>
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAVCVec@@ABV2@@Z
_TEXT	SEGMENT
__Result$ = -44						; size = 4
__Mylast$ = -32						; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAVCVec@@ABV2@@Z PROC ; std::vector<CVec,std::allocator<CVec> >::_Emplace_back_with_unused_capacity<CVec const &>, COMDAT
; _this$ = ecx

; 783  :     _CONSTEXPR20 _Ty& _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 784  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 785  :         auto& _My_data   = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 786  :         pointer& _Mylast = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 787  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 788  :         if constexpr (conjunction_v<is_nothrow_constructible<_Ty, _Valty...>,
; 789  :                           _Uses_default_construct<_Alloc, _Ty*, _Valty...>>) {
; 790  :             _ASAN_VECTOR_MODIFY(1);
; 791  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@ABVCVec@@@std@@YAABVCVec@@ABV1@@Z ; std::forward<CVec const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Construct_in_place@VCVec@@ABV1@@std@@YAXAAVCVec@@ABV1@@Z ; std::_Construct_in_place<CVec,CVec const &>
	add	esp, 8

; 792  :         } else {
; 793  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 794  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 795  :             _ASAN_VECTOR_RELEASE_GUARD;
; 796  :         }
; 797  : 
; 798  :         _Orphan_range(_Mylast, _Mylast);

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z ; std::vector<CVec,std::allocator<CVec> >::_Orphan_range
	npad	1

; 799  :         _Ty& _Result = *_Mylast;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Result$[ebp], ecx

; 800  :         ++_Mylast;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [edx], ecx

; 801  : 
; 802  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 803  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back_with_unused_capacity@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAVCVec@@ABV2@@Z ENDP ; std::vector<CVec,std::allocator<CVec> >::_Emplace_back_with_unused_capacity<CVec const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$forward@ABVCVec@@@std@@YAABVCVec@@ABV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABVCVec@@@std@@YAABVCVec@@ABV1@@Z PROC	; std::forward<CVec const &>, COMDAT

; 1536 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1537 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1538 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@ABVCVec@@@std@@YAABVCVec@@ABV1@@Z ENDP	; std::forward<CVec const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??$_Emplace_reallocate@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@$$QAV2@@Z
_TEXT	SEGMENT
__Constructed_first$ = -156				; size = 4
__Constructed_last$ = -144				; size = 4
__Newvec$ = -132					; size = 4
__Newcapacity$ = -120					; size = 4
__Newsize$ = -108					; size = 4
__Oldsize$ = -96					; size = 4
__Whereoff$ = -84					; size = 4
__Mylast$ = -72						; size = 4
__Myfirst$ = -60					; size = 4
__My_data$ = -48					; size = 4
__Al$ = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@$$QAV2@@Z PROC ; std::vector<CVec,std::allocator<CVec> >::_Emplace_reallocate<CVec>, COMDAT
; _this$ = ecx

; 806  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Emplace_reallocate@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@$$QAV2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-160]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 807  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 808  :         _Alty& _Al        = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAV?$allocator@VCVec@@@2@XZ ; std::vector<CVec,std::allocator<CVec> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 809  :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 810  :         pointer& _Myfirst = _My_data._Myfirst;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	mov	DWORD PTR __Myfirst$[ebp], eax

; 811  :         pointer& _Mylast  = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 812  : 
; 813  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 814  : 
; 815  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	eax, ecx
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR __Whereoff$[ebp], eax

; 816  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR __Oldsize$[ebp], eax

; 817  : 
; 818  :         if (_Oldsize == max_size()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ ; std::vector<CVec,std::allocator<CVec> >::max_size
	cmp	DWORD PTR __Oldsize$[ebp], eax
	jne	SHORT $LN2@Emplace_re

; 819  :             _Xlength();

	call	?_Xlength@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@CAXXZ ; std::vector<CVec,std::allocator<CVec> >::_Xlength
	npad	1
$LN2@Emplace_re:

; 820  :         }
; 821  : 
; 822  :         const size_type _Newsize = _Oldsize + 1;

	mov	eax, DWORD PTR __Oldsize$[ebp]
	add	eax, 1
	mov	DWORD PTR __Newsize$[ebp], eax

; 823  :         size_type _Newcapacity   = _Calculate_growth(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEII@Z ; std::vector<CVec,std::allocator<CVec> >::_Calculate_growth
	mov	DWORD PTR __Newcapacity$[ebp], eax

; 824  : 
; 825  :         const pointer _Newvec           = _Allocate_at_least_helper(_Al, _Newcapacity);

	lea	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Allocate_at_least_helper@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@AAV?$allocator@VCVec@@@0@AAI@Z ; std::_Allocate_at_least_helper<std::allocator<CVec> >
	add	esp, 8
	mov	DWORD PTR __Newvec$[ebp], eax

; 826  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	imul	eax, DWORD PTR __Whereoff$[ebp], 24
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax+24]
	mov	DWORD PTR __Constructed_last$[ebp], edx

; 827  :         pointer _Constructed_first      = _Constructed_last;

	mov	eax, DWORD PTR __Constructed_last$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], eax

; 828  : 
; 829  :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 830  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@VCVec@@@std@@YA$$QAVCVec@@AAV1@@Z ; std::forward<CVec>
	add	esp, 4
	push	eax
	imul	ecx, DWORD PTR __Whereoff$[ebp], 24
	add	ecx, DWORD PTR __Newvec$[ebp]
	push	ecx
	call	??$_Unfancy@VCVec@@@std@@YAPAVCVec@@PAV1@@Z ; std::_Unfancy<CVec>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$construct@VCVec@@V1@@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@$$QAV3@@Z ; std::_Default_allocator_traits<std::allocator<CVec> >::construct<CVec,CVec>
	add	esp, 12					; 0000000cH

; 831  :         _Constructed_first = _Newvec + _Whereoff;

	imul	eax, DWORD PTR __Whereoff$[ebp], 24
	add	eax, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], eax

; 832  : 
; 833  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN4@Emplace_re

; 834  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 835  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Uninitialized_move@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@QAV1@0PAV1@AAV?$allocator@VCVec@@@0@@Z ; std::_Uninitialized_move<CVec *,std::allocator<CVec> >
	add	esp, 16					; 00000010H

; 836  :             } else {
; 837  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 838  :             }
; 839  :         } else { // provide basic guarantee

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 840  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Whereptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Uninitialized_move@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@QAV1@0PAV1@AAV?$allocator@VCVec@@@0@@Z ; std::_Uninitialized_move<CVec *,std::allocator<CVec> >
	add	esp, 16					; 00000010H

; 841  :             _Constructed_first = _Newvec;

	mov	eax, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], eax

; 842  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	imul	ecx, DWORD PTR __Whereoff$[ebp], 24
	mov	edx, DWORD PTR __Newvec$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24]
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __Whereptr$[ebp]
	push	eax
	call	??$_Uninitialized_move@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@QAV1@0PAV1@AAV?$allocator@VCVec@@@0@@Z ; std::_Uninitialized_move<CVec *,std::allocator<CVec> >
	add	esp, 16					; 00000010H
$LN5@Emplace_re:
	jmp	SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@$$QAV2@@Z$0:

; 843  :         }
; 844  :         _CATCH_ALL
; 845  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Constructed_last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Constructed_first$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@VCVec@@@std@@@std@@YAXPAVCVec@@QAV1@AAV?$allocator@VCVec@@@0@@Z ; std::_Destroy_range<std::allocator<CVec> >
	add	esp, 12					; 0000000cH

; 846  :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@VCVec@@@std@@QAEXQAVCVec@@I@Z ; std::allocator<CVec>::deallocate
	npad	1

; 847  :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
	npad	1

; 848  :         _CATCH_END

	mov	eax, $LN10@Emplace_re
	ret	0
$LN7@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN9@Emplace_re
$LN10@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Emplace_re:

; 849  : 
; 850  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Change_array@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXQAVCVec@@II@Z ; std::vector<CVec,std::allocator<CVec> >::_Change_array
	npad	1

; 851  :         return _Newvec + _Whereoff;

	imul	eax, DWORD PTR __Whereoff$[ebp], 24
	add	eax, DWORD PTR __Newvec$[ebp]
$LN1@Emplace_re:

; 852  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@Emplace_re
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN14@Emplace_re:
	DD	1
	DD	$LN13@Emplace_re
$LN13@Emplace_re:
	DD	-120					; ffffff88H
	DD	4
	DD	$LN11@Emplace_re
$LN11@Emplace_re:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@$$QAV2@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-356]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@$$QAV2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@$$QAV2@@Z ENDP ; std::vector<CVec,std::allocator<CVec> >::_Emplace_reallocate<CVec>
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAVCVec@@$$QAV2@@Z
_TEXT	SEGMENT
__Result$ = -44						; size = 4
__Mylast$ = -32						; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAVCVec@@$$QAV2@@Z PROC ; std::vector<CVec,std::allocator<CVec> >::_Emplace_back_with_unused_capacity<CVec>, COMDAT
; _this$ = ecx

; 783  :     _CONSTEXPR20 _Ty& _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 784  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 785  :         auto& _My_data   = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 786  :         pointer& _Mylast = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 787  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 788  :         if constexpr (conjunction_v<is_nothrow_constructible<_Ty, _Valty...>,
; 789  :                           _Uses_default_construct<_Alloc, _Ty*, _Valty...>>) {
; 790  :             _ASAN_VECTOR_MODIFY(1);
; 791  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@VCVec@@@std@@YA$$QAVCVec@@AAV1@@Z ; std::forward<CVec>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Construct_in_place@VCVec@@V1@@std@@YAXAAVCVec@@$$QAV1@@Z ; std::_Construct_in_place<CVec,CVec>
	add	esp, 8

; 792  :         } else {
; 793  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 794  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 795  :             _ASAN_VECTOR_RELEASE_GUARD;
; 796  :         }
; 797  : 
; 798  :         _Orphan_range(_Mylast, _Mylast);

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z ; std::vector<CVec,std::allocator<CVec> >::_Orphan_range
	npad	1

; 799  :         _Ty& _Result = *_Mylast;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Result$[ebp], ecx

; 800  :         ++_Mylast;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 24					; 00000018H
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [edx], ecx

; 801  : 
; 802  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 803  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back_with_unused_capacity@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAVCVec@@$$QAV2@@Z ENDP ; std::vector<CVec,std::allocator<CVec> >::_Emplace_back_with_unused_capacity<CVec>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$forward@VCVec@@@std@@YA$$QAVCVec@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@VCVec@@@std@@YA$$QAVCVec@@AAV1@@Z PROC	; std::forward<CVec>, COMDAT

; 1536 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1537 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1538 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@VCVec@@@std@@YA$$QAVCVec@@AAV1@@Z ENDP	; std::forward<CVec>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xutility
;	COMDAT ??$_Copy_n_unchecked4@PAVCVec@@IPAV1@@std@@YAPAVCVec@@PAV1@I0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_n_unchecked4@PAVCVec@@IPAV1@@std@@YAPAVCVec@@PAV1@I0@Z PROC ; std::_Copy_n_unchecked4<CVec *,unsigned int,CVec *>, COMDAT

; 4655 : _CONSTEXPR20 _OutIt _Copy_n_unchecked4(_InIt _First, _SizeTy _Count, _OutIt _Dest) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4656 :     // copy _First + [0, _Count) to _Dest + [0, _Count), returning _Dest + _Count
; 4657 :     // note: has callers outside the copy family
; 4658 : #if _HAS_CXX20
; 4659 :     _STL_INTERNAL_STATIC_ASSERT(_Integer_like<_SizeTy>);
; 4660 : #endif // _HAS_CXX20
; 4661 : 
; 4662 :     if constexpr (_Iter_copy_cat<_InIt, _OutIt>::_Bitcopy_assignable) {
; 4663 : #if _HAS_CXX20
; 4664 :         if (!_STD is_constant_evaluated())
; 4665 : #endif // _HAS_CXX20
; 4666 :         {
; 4667 :             return _Copy_memmove_n(_First, static_cast<size_t>(_Count), _Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_memmove_n@PAVCVec@@PAV1@@std@@YAPAVCVec@@PAV1@I0@Z ; std::_Copy_memmove_n<CVec *,CVec *>
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@Copy_n_unc

; 4668 :         }
; 4669 :     }
; 4670 : 
; 4671 :     for (; _Count != 0; ++_Dest, (void) ++_First, --_Count) {

	jmp	SHORT $LN4@Copy_n_unc
$LN2@Copy_n_unc:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR __First$[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, 1
	mov	DWORD PTR __Count$[ebp], edx
$LN4@Copy_n_unc:
	cmp	DWORD PTR __Count$[ebp], 0
	je	SHORT $LN3@Copy_n_unc

; 4672 :         *_Dest = *_First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax

; 4673 :     }

	jmp	SHORT $LN2@Copy_n_unc
$LN3@Copy_n_unc:

; 4674 : 
; 4675 :     return _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
$LN1@Copy_n_unc:

; 4676 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_n_unchecked4@PAVCVec@@IPAV1@@std@@YAPAVCVec@@PAV1@I0@Z ENDP ; std::_Copy_n_unchecked4<CVec *,unsigned int,CVec *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xutility
;	COMDAT ??$_Copy_memmove_n@PAVCVec@@PAV1@@std@@YAPAVCVec@@PAV1@I0@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove_n@PAVCVec@@PAV1@@std@@YAPAVCVec@@PAV1@I0@Z PROC ; std::_Copy_memmove_n<CVec *,CVec *>, COMDAT

; 4630 : _OutCtgIt _Copy_memmove_n(_CtgIt _First, const size_t _Count, _OutCtgIt _Dest) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4631 :     const auto _Result = _STD _Copy_memmove(_First, _First + _Count, _Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	imul	ecx, DWORD PTR __Count$[ebp], 24
	add	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_memmove@PAVCVec@@PAV1@@std@@YAPAVCVec@@PAV1@00@Z ; std::_Copy_memmove<CVec *,CVec *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Result$[ebp], eax

; 4632 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4633 :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 4634 :     } else { // _Result is unused so the compiler can optimize it away
; 4635 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Count);
; 4636 :     }
; 4637 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_memmove_n@PAVCVec@@PAV1@@std@@YAPAVCVec@@PAV1@I0@Z ENDP ; std::_Copy_memmove_n<CVec *,CVec *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Uninitialized_copy_n@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@I0AAV?$allocator@VCVec@@@0@@Z
_TEXT	SEGMENT
$T2 = -256						; size = 4
__Backout$ = -52					; size = 12
__Can_memmove$ = -29					; size = 1
__UFirst$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy_n@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@I0AAV?$allocator@VCVec@@@0@@Z PROC ; std::_Uninitialized_copy_n<CVec *,std::allocator<CVec> >, COMDAT

; 1842 :     _InIt _First, size_t _Count, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_copy_n@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@I0AAV?$allocator@VCVec@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1843 :     // copy _First + [0, _Count) to raw _Dest, using _Al
; 1844 :     // note: only called internally from elsewhere in the STL
; 1845 :     using _Ptrval = typename _Alloc::value_type*;
; 1846 : 
; 1847 :     auto _UFirst = _STD _Get_unwrapped(_STD move(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$move@AAPAVCVec@@@std@@YA$$QAPAVCVec@@AAPAV1@@Z ; std::move<CVec * &>
	add	esp, 4
	push	eax
	call	??$_Get_unwrapped@PAVCVec@@@std@@YA?A_T$$QAPAVCVec@@@Z ; std::_Get_unwrapped<CVec *>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 1848 : 
; 1849 :     constexpr bool _Can_memmove =

	mov	BYTE PTR __Can_memmove$[ebp], 0

; 1850 :         conjunction_v<bool_constant<_Iter_copy_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1851 :             _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>;
; 1852 : 
; 1853 :     if constexpr (_Can_memmove) {
; 1854 : #if _HAS_CXX20
; 1855 :         if (!_STD is_constant_evaluated())
; 1856 : #endif // _HAS_CXX20
; 1857 :         {
; 1858 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));
; 1859 :             _Dest += _Count;
; 1860 :             return _Dest;
; 1861 :         }
; 1862 :     }
; 1863 : 
; 1864 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAE@PAVCVec@@AAV?$allocator@VCVec@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Uninitialized_backout_al<std::allocator<CVec> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1865 :     for (; _Count != 0; ++_UFirst, (void) --_Count) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	eax, DWORD PTR __UFirst$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR __UFirst$[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
$LN4@Uninitiali:
	cmp	DWORD PTR __Count$[ebp], 0
	je	SHORT $LN3@Uninitiali

; 1866 :         _Backout._Emplace_back(*_UFirst);

	mov	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??$_Emplace_back@AAVCVec@@@?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAEXAAVCVec@@@Z ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Emplace_back<CVec &>
	npad	1

; 1867 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1868 : 
; 1869 :     return _Backout._Release();

	lea	ecx, DWORD PTR __Backout$[ebp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAEPAVCVec@@XZ ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Release
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<CVec> >::~_Uninitialized_backout_al<std::allocator<CVec> >
	mov	eax, DWORD PTR $T2[ebp]

; 1870 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@Uninitiali:
	DD	1
	DD	$LN9@Uninitiali
$LN9@Uninitiali:
	DD	-52					; ffffffccH
	DD	12					; 0000000cH
	DD	$LN7@Uninitiali
$LN7@Uninitiali:
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_copy_n@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@I0AAV?$allocator@VCVec@@@0@@Z$0:
	lea	ecx, DWORD PTR __Backout$[ebp]
	jmp	??1?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<CVec> >::~_Uninitialized_backout_al<std::allocator<CVec> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$_Uninitialized_copy_n@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@I0AAV?$allocator@VCVec@@@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-264]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy_n@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@I0AAV?$allocator@VCVec@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_copy_n@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@I0AAV?$allocator@VCVec@@@0@@Z ENDP ; std::_Uninitialized_copy_n<CVec *,std::allocator<CVec> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$move@AAPAVCVec@@@std@@YA$$QAPAVCVec@@AAPAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAVCVec@@@std@@YA$$QAPAVCVec@@AAPAV1@@Z PROC	; std::move<CVec * &>, COMDAT

; 1547 : _NODISCARD _MSVC_INTRINSIC constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1548 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1549 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAPAVCVec@@@std@@YA$$QAPAVCVec@@AAPAV1@@Z ENDP	; std::move<CVec * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Uninitialized_value_construct_n@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@IAAV?$allocator@VCVec@@@0@@Z
_TEXT	SEGMENT
$T2 = -232						; size = 4
__Backout$ = -28					; size = 12
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_value_construct_n@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@IAAV?$allocator@VCVec@@@0@@Z PROC ; std::_Uninitialized_value_construct_n<std::allocator<CVec> >, COMDAT

; 2004 :     _Alloc_ptr_t<_Alloc> _First, _Alloc_size_t<_Alloc> _Count, _Alloc& _Al) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_value_construct_n@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@IAAV?$allocator@VCVec@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2005 :     // value-initialize _Count objects to raw _First, using _Al
; 2006 :     using _Ptrty = typename _Alloc::value_type*;
; 2007 :     if constexpr (_Use_memset_value_construct_v<_Ptrty> && _Uses_default_construct<_Alloc, _Ptrty>::value) {
; 2008 : #if _HAS_CXX20
; 2009 :         if (!_STD is_constant_evaluated())
; 2010 : #endif // _HAS_CXX20
; 2011 :         {
; 2012 :             auto _PFirst = _Unfancy(_First);
; 2013 :             _Zero_range(_PFirst, _PFirst + _Count);
; 2014 :             return _First + _Count;
; 2015 :         }
; 2016 :     }
; 2017 : 
; 2018 :     _Uninitialized_backout_al<_Alloc> _Backout{_First, _Al};

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAE@PAVCVec@@AAV?$allocator@VCVec@@@1@@Z ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Uninitialized_backout_al<std::allocator<CVec> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2019 :     for (; 0 < _Count; --_Count) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	eax, DWORD PTR __Count$[ebp]
	sub	eax, 1
	mov	DWORD PTR __Count$[ebp], eax
$LN4@Uninitiali:
	cmp	DWORD PTR __Count$[ebp], 0
	jbe	SHORT $LN3@Uninitiali

; 2020 :         _Backout._Emplace_back();

	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??$_Emplace_back@$$V@?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAEXXZ ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Emplace_back<>
	npad	1

; 2021 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 2022 : 
; 2023 :     return _Backout._Release();

	lea	ecx, DWORD PTR __Backout$[ebp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAEPAVCVec@@XZ ; std::_Uninitialized_backout_al<std::allocator<CVec> >::_Release
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<CVec> >::~_Uninitialized_backout_al<std::allocator<CVec> >
	mov	eax, DWORD PTR $T2[ebp]

; 2024 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 236				; 000000ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@Uninitiali:
	DD	1
	DD	$LN9@Uninitiali
$LN9@Uninitiali:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN7@Uninitiali
$LN7@Uninitiali:
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_value_construct_n@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@IAAV?$allocator@VCVec@@@0@@Z$0:
	lea	ecx, DWORD PTR __Backout$[ebp]
	jmp	??1?$_Uninitialized_backout_al@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<CVec> >::~_Uninitialized_backout_al<std::allocator<CVec> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$_Uninitialized_value_construct_n@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@IAAV?$allocator@VCVec@@@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-240]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_value_construct_n@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@IAAV?$allocator@VCVec@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_value_construct_n@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@IAAV?$allocator@VCVec@@@0@@Z ENDP ; std::_Uninitialized_value_construct_n<std::allocator<CVec> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
tv137 = -332						; size = 4
__Appended_last$ = -132					; size = 4
__Appended_first$ = -120				; size = 4
__Newvec$ = -108					; size = 4
__Newcapacity$ = -96					; size = 4
__Oldsize$ = -84					; size = 4
__Mylast$ = -72						; size = 4
__Myfirst$ = -60					; size = 4
__My_data$ = -48					; size = 4
__Al$ = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<CVec,std::allocator<CVec> >::_Resize_reallocate<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1505 :     _CONSTEXPR20 void _Resize_reallocate(const size_type _Newsize, const _Ty2& _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-140]
	mov	ecx, 31					; 0000001fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 1506 :         if (_Newsize > max_size()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ ; std::vector<CVec,std::allocator<CVec> >::max_size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jbe	SHORT $LN2@Resize_rea

; 1507 :             _Xlength();

	call	?_Xlength@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@CAXXZ ; std::vector<CVec,std::allocator<CVec> >::_Xlength
	npad	1
$LN2@Resize_rea:

; 1508 :         }
; 1509 : 
; 1510 :         auto& _Al         = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAV?$allocator@VCVec@@@2@XZ ; std::vector<CVec,std::allocator<CVec> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 1511 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1512 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	mov	DWORD PTR __Myfirst$[ebp], eax

; 1513 :         pointer& _Mylast  = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 1514 : 
; 1515 :         const auto _Oldsize    = static_cast<size_type>(_Mylast - _Myfirst);

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR __Oldsize$[ebp], eax

; 1516 :         size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEII@Z ; std::vector<CVec,std::allocator<CVec> >::_Calculate_growth
	mov	DWORD PTR __Newcapacity$[ebp], eax

; 1517 : 
; 1518 :         const pointer _Newvec         = _Allocate_at_least_helper(_Al, _Newcapacity);

	lea	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Allocate_at_least_helper@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@AAV?$allocator@VCVec@@@0@AAI@Z ; std::_Allocate_at_least_helper<std::allocator<CVec> >
	add	esp, 8
	mov	DWORD PTR __Newvec$[ebp], eax

; 1519 :         const pointer _Appended_first = _Newvec + _Oldsize;

	imul	eax, DWORD PTR __Oldsize$[ebp], 24
	add	eax, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Appended_first$[ebp], eax

; 1520 :         pointer _Appended_last        = _Appended_first;

	mov	eax, DWORD PTR __Appended_first$[ebp]
	mov	DWORD PTR __Appended_last$[ebp], eax

; 1521 : 
; 1522 :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 1523 :         if constexpr (is_same_v<_Ty2, _Ty>) {
; 1524 :             _Appended_last = _Uninitialized_fill_n(_Appended_first, _Newsize - _Oldsize, _Val, _Al);
; 1525 :         } else {
; 1526 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1527 :             _Appended_last = _Uninitialized_value_construct_n(_Appended_first, _Newsize - _Oldsize, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, DWORD PTR __Oldsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Appended_first$[ebp]
	push	edx
	call	??$_Uninitialized_value_construct_n@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@IAAV?$allocator@VCVec@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<CVec> >
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv137[ebp], eax
	mov	eax, DWORD PTR tv137[ebp]
	mov	DWORD PTR __Appended_last$[ebp], eax

; 1528 :         }
; 1529 : 
; 1530 :         if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 1531 :             _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Uninitialized_move@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@QAV1@0PAV1@AAV?$allocator@VCVec@@@0@@Z ; std::_Uninitialized_move<CVec *,std::allocator<CVec> >
	add	esp, 16					; 00000010H
	jmp	SHORT $LN5@Resize_rea
__catch$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z$0:

; 1532 :         } else {
; 1533 :             _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 1534 :         }
; 1535 :         _CATCH_ALL
; 1536 :         _Destroy_range(_Appended_first, _Appended_last, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Appended_last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Appended_first$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@VCVec@@@std@@@std@@YAXPAVCVec@@QAV1@AAV?$allocator@VCVec@@@0@@Z ; std::_Destroy_range<std::allocator<CVec> >
	add	esp, 12					; 0000000cH

; 1537 :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@VCVec@@@std@@QAEXQAVCVec@@I@Z ; std::allocator<CVec>::deallocate
	npad	1

; 1538 :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
	npad	1

; 1539 :         _CATCH_END

	mov	eax, $LN8@Resize_rea
	ret	0
$LN5@Resize_rea:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN7@Resize_rea
$LN8@Resize_rea:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN7@Resize_rea:

; 1540 : 
; 1541 :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Change_array@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXQAVCVec@@II@Z ; std::vector<CVec,std::allocator<CVec> >::_Change_array
	npad	1
$LN1@Resize_rea:

; 1542 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Resize_rea
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN12@Resize_rea:
	DD	1
	DD	$LN11@Resize_rea
$LN11@Resize_rea:
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN9@Resize_rea
$LN9@Resize_rea:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-336]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<CVec,std::allocator<CVec> >::_Resize_reallocate<std::_Value_init_tag>
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$destroy@VCVec@@@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@VCVec@@@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@@Z PROC ; std::_Default_allocator_traits<std::allocator<CVec> >::destroy<CVec>, COMDAT

; 705  :     static _CONSTEXPR20 void destroy(_Alloc&, _Uty* const _Ptr) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 706  : #if _HAS_CXX20
; 707  :         _STD destroy_at(_Ptr);
; 708  : #else // ^^^ _HAS_CXX20 / !_HAS_CXX20 vvv
; 709  :         _Ptr->~_Uty();

	push	0
	mov	ecx, DWORD PTR __Ptr$[ebp]
	call	??_GCVec@@QAEPAXI@Z
	npad	1

; 710  : #endif // ^^^ !_HAS_CXX20 ^^^
; 711  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$destroy@VCVec@@@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CVec> >::destroy<CVec>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Unfancy@VCVec@@@std@@YAPAVCVec@@PAV1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@VCVec@@@std@@YAPAVCVec@@PAV1@@Z PROC	; std::_Unfancy<CVec>, COMDAT

; 35   : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 36   :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 37   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unfancy@VCVec@@@std@@YAPAVCVec@@PAV1@@Z ENDP	; std::_Unfancy<CVec>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??$_Emplace_reallocate@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEPAMQAMABM@Z
_TEXT	SEGMENT
__Constructed_first$ = -156				; size = 4
__Constructed_last$ = -144				; size = 4
__Newvec$ = -132					; size = 4
__Newcapacity$ = -120					; size = 4
__Newsize$ = -108					; size = 4
__Oldsize$ = -96					; size = 4
__Whereoff$ = -84					; size = 4
__Mylast$ = -72						; size = 4
__Myfirst$ = -60					; size = 4
__My_data$ = -48					; size = 4
__Al$ = -36						; size = 4
_this$ = -24						; size = 4
__$EHRec$ = -16						; size = 16
__Whereptr$ = 8						; size = 4
_<_Val_0>$ = 12						; size = 4
??$_Emplace_reallocate@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEPAMQAMABM@Z PROC ; std::vector<float,std::allocator<float> >::_Emplace_reallocate<float const &>, COMDAT
; _this$ = ecx

; 806  :     _CONSTEXPR20 pointer _Emplace_reallocate(const pointer _Whereptr, _Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Emplace_reallocate@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEPAMQAMABM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-160]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx

; 807  :         // reallocate and insert by perfectly forwarding _Val at _Whereptr
; 808  :         _Alty& _Al        = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@MV?$allocator@M@std@@@std@@AAEAAV?$allocator@M@2@XZ ; std::vector<float,std::allocator<float> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 809  :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 810  :         pointer& _Myfirst = _My_data._Myfirst;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	mov	DWORD PTR __Myfirst$[ebp], eax

; 811  :         pointer& _Mylast  = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 812  : 
; 813  :         _STL_INTERNAL_CHECK(_Mylast == _My_data._Myend); // check that we have no unused capacity
; 814  : 
; 815  :         const auto _Whereoff = static_cast<size_type>(_Whereptr - _Myfirst);

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 2
	mov	DWORD PTR __Whereoff$[ebp], ecx

; 816  :         const auto _Oldsize  = static_cast<size_type>(_Mylast - _Myfirst);

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 2
	mov	DWORD PTR __Oldsize$[ebp], edx

; 817  : 
; 818  :         if (_Oldsize == max_size()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::max_size
	cmp	DWORD PTR __Oldsize$[ebp], eax
	jne	SHORT $LN2@Emplace_re

; 819  :             _Xlength();

	call	?_Xlength@?$vector@MV?$allocator@M@std@@@std@@CAXXZ ; std::vector<float,std::allocator<float> >::_Xlength
	npad	1
$LN2@Emplace_re:

; 820  :         }
; 821  : 
; 822  :         const size_type _Newsize = _Oldsize + 1;

	mov	eax, DWORD PTR __Oldsize$[ebp]
	add	eax, 1
	mov	DWORD PTR __Newsize$[ebp], eax

; 823  :         size_type _Newcapacity   = _Calculate_growth(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$vector@MV?$allocator@M@std@@@std@@ABEII@Z ; std::vector<float,std::allocator<float> >::_Calculate_growth
	mov	DWORD PTR __Newcapacity$[ebp], eax

; 824  : 
; 825  :         const pointer _Newvec           = _Allocate_at_least_helper(_Al, _Newcapacity);

	lea	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Allocate_at_least_helper@V?$allocator@M@std@@@std@@YAPAMAAV?$allocator@M@0@AAI@Z ; std::_Allocate_at_least_helper<std::allocator<float> >
	add	esp, 8
	mov	DWORD PTR __Newvec$[ebp], eax

; 826  :         const pointer _Constructed_last = _Newvec + _Whereoff + 1;

	mov	eax, DWORD PTR __Whereoff$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+4]
	mov	DWORD PTR __Constructed_last$[ebp], edx

; 827  :         pointer _Constructed_first      = _Constructed_last;

	mov	eax, DWORD PTR __Constructed_last$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], eax

; 828  : 
; 829  :         _TRY_BEGIN

	mov	DWORD PTR __$EHRec$[ebp+12], 0

; 830  :         _Alty_traits::construct(_Al, _Unfancy(_Newvec + _Whereoff), _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@ABM@std@@YAABMABM@Z		; std::forward<float const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Whereoff$[ebp]
	mov	edx, DWORD PTR __Newvec$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	??$_Unfancy@M@std@@YAPAMPAM@Z		; std::_Unfancy<float>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$construct@MABM@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAXAAV?$allocator@M@1@QAMABM@Z ; std::_Default_allocator_traits<std::allocator<float> >::construct<float,float const &>
	add	esp, 12					; 0000000cH

; 831  :         _Constructed_first = _Newvec + _Whereoff;

	mov	eax, DWORD PTR __Whereoff$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Constructed_first$[ebp], edx

; 832  : 
; 833  :         if (_Whereptr == _Mylast) { // at back, provide strong guarantee

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __Whereptr$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN4@Emplace_re

; 834  :             if constexpr (is_nothrow_move_constructible_v<_Ty> || !is_copy_constructible_v<_Ty>) {
; 835  :                 _Uninitialized_move(_Myfirst, _Mylast, _Newvec, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Uninitialized_move@PAMV?$allocator@M@std@@@std@@YAPAMQAM0PAMAAV?$allocator@M@0@@Z ; std::_Uninitialized_move<float *,std::allocator<float> >
	add	esp, 16					; 00000010H

; 836  :             } else {
; 837  :                 _Uninitialized_copy(_Myfirst, _Mylast, _Newvec, _Al);
; 838  :             }
; 839  :         } else { // provide basic guarantee

	jmp	SHORT $LN5@Emplace_re
$LN4@Emplace_re:

; 840  :             _Uninitialized_move(_Myfirst, _Whereptr, _Newvec, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Whereptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Uninitialized_move@PAMV?$allocator@M@std@@@std@@YAPAMQAM0PAMAAV?$allocator@M@0@@Z ; std::_Uninitialized_move<float *,std::allocator<float> >
	add	esp, 16					; 00000010H

; 841  :             _Constructed_first = _Newvec;

	mov	eax, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR __Constructed_first$[ebp], eax

; 842  :             _Uninitialized_move(_Whereptr, _Mylast, _Newvec + _Whereoff + 1, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Whereoff$[ebp]
	mov	edx, DWORD PTR __Newvec$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+4]
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __Whereptr$[ebp]
	push	eax
	call	??$_Uninitialized_move@PAMV?$allocator@M@std@@@std@@YAPAMQAM0PAMAAV?$allocator@M@0@@Z ; std::_Uninitialized_move<float *,std::allocator<float> >
	add	esp, 16					; 00000010H
$LN5@Emplace_re:
	jmp	SHORT $LN7@Emplace_re
__catch$??$_Emplace_reallocate@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEPAMQAMABM@Z$0:

; 843  :         }
; 844  :         _CATCH_ALL
; 845  :         _Destroy_range(_Constructed_first, _Constructed_last, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Constructed_last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Constructed_first$[ebp]
	push	edx
	call	??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAMQAMAAV?$allocator@M@0@@Z ; std::_Destroy_range<std::allocator<float> >
	add	esp, 12					; 0000000cH

; 846  :         _Al.deallocate(_Newvec, _Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newvec$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@M@std@@QAEXQAMI@Z ; std::allocator<float>::deallocate
	npad	1

; 847  :         _RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
	npad	1

; 848  :         _CATCH_END

	mov	eax, $LN10@Emplace_re
	ret	0
$LN7@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN9@Emplace_re
$LN10@Emplace_re:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
$LN9@Emplace_re:

; 849  : 
; 850  :         _Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Newvec$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Change_array@?$vector@MV?$allocator@M@std@@@std@@AAEXQAMII@Z ; std::vector<float,std::allocator<float> >::_Change_array
	npad	1

; 851  :         return _Newvec + _Whereoff;

	mov	eax, DWORD PTR __Whereoff$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
$LN1@Emplace_re:

; 852  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@Emplace_re
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 352				; 00000160H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN14@Emplace_re:
	DD	1
	DD	$LN13@Emplace_re
$LN13@Emplace_re:
	DD	-120					; ffffff88H
	DD	4
	DD	$LN11@Emplace_re
$LN11@Emplace_re:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Emplace_reallocate@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEPAMQAMABM@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-356]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Emplace_reallocate@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEPAMQAMABM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Emplace_reallocate@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEPAMQAMABM@Z ENDP ; std::vector<float,std::allocator<float> >::_Emplace_reallocate<float const &>
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEAAMABM@Z
_TEXT	SEGMENT
__Result$ = -44						; size = 4
__Mylast$ = -32						; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEAAMABM@Z PROC ; std::vector<float,std::allocator<float> >::_Emplace_back_with_unused_capacity<float const &>, COMDAT
; _this$ = ecx

; 783  :     _CONSTEXPR20 _Ty& _Emplace_back_with_unused_capacity(_Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 784  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 785  :         auto& _My_data   = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 786  :         pointer& _Mylast = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 787  :         _STL_INTERNAL_CHECK(_Mylast != _My_data._Myend); // check that we have unused capacity
; 788  :         if constexpr (conjunction_v<is_nothrow_constructible<_Ty, _Valty...>,
; 789  :                           _Uses_default_construct<_Alloc, _Ty*, _Valty...>>) {
; 790  :             _ASAN_VECTOR_MODIFY(1);
; 791  :             _Construct_in_place(*_Mylast, _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@ABM@std@@YAABMABM@Z		; std::forward<float const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	??$_Construct_in_place@MABM@std@@YAXAAMABM@Z ; std::_Construct_in_place<float,float const &>
	add	esp, 8

; 792  :         } else {
; 793  :             _ASAN_VECTOR_EXTEND_GUARD(static_cast<size_type>(_Mylast - _My_data._Myfirst) + 1);
; 794  :             _Alty_traits::construct(_Getal(), _Unfancy(_Mylast), _STD forward<_Valty>(_Val)...);
; 795  :             _ASAN_VECTOR_RELEASE_GUARD;
; 796  :         }
; 797  : 
; 798  :         _Orphan_range(_Mylast, _Mylast);

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@ABEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Orphan_range
	npad	1

; 799  :         _Ty& _Result = *_Mylast;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Result$[ebp], ecx

; 800  :         ++_Mylast;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	edx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [edx], ecx

; 801  : 
; 802  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 803  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_back_with_unused_capacity@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEAAMABM@Z ENDP ; std::vector<float,std::allocator<float> >::_Emplace_back_with_unused_capacity<float const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$forward@ABM@std@@YAABMABM@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABM@std@@YAABMABM@Z PROC			; std::forward<float const &>, COMDAT

; 1536 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1537 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1538 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@ABM@std@@YAABMABM@Z ENDP			; std::forward<float const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xutility
;	COMDAT ??$_Copy_n_unchecked4@PAMIPAM@std@@YAPAMPAMI0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_n_unchecked4@PAMIPAM@std@@YAPAMPAMI0@Z PROC	; std::_Copy_n_unchecked4<float *,unsigned int,float *>, COMDAT

; 4655 : _CONSTEXPR20 _OutIt _Copy_n_unchecked4(_InIt _First, _SizeTy _Count, _OutIt _Dest) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4656 :     // copy _First + [0, _Count) to _Dest + [0, _Count), returning _Dest + _Count
; 4657 :     // note: has callers outside the copy family
; 4658 : #if _HAS_CXX20
; 4659 :     _STL_INTERNAL_STATIC_ASSERT(_Integer_like<_SizeTy>);
; 4660 : #endif // _HAS_CXX20
; 4661 : 
; 4662 :     if constexpr (_Iter_copy_cat<_InIt, _OutIt>::_Bitcopy_assignable) {
; 4663 : #if _HAS_CXX20
; 4664 :         if (!_STD is_constant_evaluated())
; 4665 : #endif // _HAS_CXX20
; 4666 :         {
; 4667 :             return _Copy_memmove_n(_First, static_cast<size_t>(_Count), _Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Copy_memmove_n@PAMPAM@std@@YAPAMPAMI0@Z ; std::_Copy_memmove_n<float *,float *>
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@Copy_n_unc

; 4668 :         }
; 4669 :     }
; 4670 : 
; 4671 :     for (; _Count != 0; ++_Dest, (void) ++_First, --_Count) {

	jmp	SHORT $LN4@Copy_n_unc
$LN2@Copy_n_unc:
	mov	eax, DWORD PTR __Dest$[ebp]
	add	eax, 4
	mov	DWORD PTR __Dest$[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 4
	mov	DWORD PTR __First$[ebp], ecx
	mov	edx, DWORD PTR __Count$[ebp]
	sub	edx, 1
	mov	DWORD PTR __Count$[ebp], edx
$LN4@Copy_n_unc:
	cmp	DWORD PTR __Count$[ebp], 0
	je	SHORT $LN3@Copy_n_unc

; 4672 :         *_Dest = *_First;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 4673 :     }

	jmp	SHORT $LN2@Copy_n_unc
$LN3@Copy_n_unc:

; 4674 : 
; 4675 :     return _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
$LN1@Copy_n_unc:

; 4676 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_n_unchecked4@PAMIPAM@std@@YAPAMPAMI0@Z ENDP	; std::_Copy_n_unchecked4<float *,unsigned int,float *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xutility
;	COMDAT ??$_Copy_memmove_n@PAMPAM@std@@YAPAMPAMI0@Z
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove_n@PAMPAM@std@@YAPAMPAMI0@Z PROC	; std::_Copy_memmove_n<float *,float *>, COMDAT

; 4630 : _OutCtgIt _Copy_memmove_n(_CtgIt _First, const size_t _Count, _OutCtgIt _Dest) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4631 :     const auto _Result = _STD _Copy_memmove(_First, _First + _Count, _Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __First$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Copy_memmove@PAMPAM@std@@YAPAMPAM00@Z ; std::_Copy_memmove<float *,float *>
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __Result$[ebp], eax

; 4632 :     if constexpr (is_pointer_v<_OutCtgIt>) {
; 4633 :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 4634 :     } else { // _Result is unused so the compiler can optimize it away
; 4635 :         return _Dest + static_cast<_Iter_diff_t<_OutCtgIt>>(_Count);
; 4636 :     }
; 4637 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Copy_memmove_n@PAMPAM@std@@YAPAMPAMI0@Z ENDP	; std::_Copy_memmove_n<float *,float *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Uninitialized_copy_n@PAMV?$allocator@M@std@@@std@@YAPAMPAMI0AAV?$allocator@M@0@@Z
_TEXT	SEGMENT
$T2 = -256						; size = 4
__Backout$ = -52					; size = 12
__Can_memmove$ = -29					; size = 1
__UFirst$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy_n@PAMV?$allocator@M@std@@@std@@YAPAMPAMI0AAV?$allocator@M@0@@Z PROC ; std::_Uninitialized_copy_n<float *,std::allocator<float> >, COMDAT

; 1842 :     _InIt _First, size_t _Count, _Alloc_ptr_t<_Alloc> _Dest, _Alloc& _Al) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Uninitialized_copy_n@PAMV?$allocator@M@std@@@std@@YAPAMPAMI0AAV?$allocator@M@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1843 :     // copy _First + [0, _Count) to raw _Dest, using _Al
; 1844 :     // note: only called internally from elsewhere in the STL
; 1845 :     using _Ptrval = typename _Alloc::value_type*;
; 1846 : 
; 1847 :     auto _UFirst = _STD _Get_unwrapped(_STD move(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$move@AAPAM@std@@YA$$QAPAMAAPAM@Z	; std::move<float * &>
	add	esp, 4
	push	eax
	call	??$_Get_unwrapped@PAM@std@@YA?A_T$$QAPAM@Z ; std::_Get_unwrapped<float *>
	add	esp, 4
	mov	DWORD PTR __UFirst$[ebp], eax

; 1848 : 
; 1849 :     constexpr bool _Can_memmove =

	mov	BYTE PTR __Can_memmove$[ebp], 1

; 1850 :         conjunction_v<bool_constant<_Iter_copy_cat<decltype(_UFirst), _Ptrval>::_Bitcopy_constructible>,
; 1851 :             _Uses_default_construct<_Alloc, _Ptrval, decltype(*_UFirst)>>;
; 1852 : 
; 1853 :     if constexpr (_Can_memmove) {
; 1854 : #if _HAS_CXX20
; 1855 :         if (!_STD is_constant_evaluated())
; 1856 : #endif // _HAS_CXX20
; 1857 :         {
; 1858 :             _STD _Copy_memmove_n(_UFirst, _Count, _STD _Unfancy(_Dest));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	??$_Unfancy@M@std@@YAPAMPAM@Z		; std::_Unfancy<float>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __UFirst$[ebp]
	push	edx
	call	??$_Copy_memmove_n@PAMPAM@std@@YAPAMPAMI0@Z ; std::_Copy_memmove_n<float *,float *>
	add	esp, 12					; 0000000cH

; 1859 :             _Dest += _Count;

	mov	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR __Dest$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __Dest$[ebp], edx

; 1860 :             return _Dest;

	mov	eax, DWORD PTR __Dest$[ebp]
	jmp	SHORT $LN1@Uninitiali

; 1861 :         }
; 1862 :     }
; 1863 : 
; 1864 :     _Uninitialized_backout_al<_Alloc> _Backout{_Dest, _Al};

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??0?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAE@PAMAAV?$allocator@M@1@@Z ; std::_Uninitialized_backout_al<std::allocator<float> >::_Uninitialized_backout_al<std::allocator<float> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1865 :     for (; _Count != 0; ++_UFirst, (void) --_Count) {

	jmp	SHORT $LN4@Uninitiali
$LN2@Uninitiali:
	mov	eax, DWORD PTR __UFirst$[ebp]
	add	eax, 4
	mov	DWORD PTR __UFirst$[ebp], eax
	mov	ecx, DWORD PTR __Count$[ebp]
	sub	ecx, 1
	mov	DWORD PTR __Count$[ebp], ecx
$LN4@Uninitiali:
	cmp	DWORD PTR __Count$[ebp], 0
	je	SHORT $LN3@Uninitiali

; 1866 :         _Backout._Emplace_back(*_UFirst);

	mov	eax, DWORD PTR __UFirst$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??$_Emplace_back@AAM@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAEXAAM@Z ; std::_Uninitialized_backout_al<std::allocator<float> >::_Emplace_back<float &>
	npad	1

; 1867 :     }

	jmp	SHORT $LN2@Uninitiali
$LN3@Uninitiali:

; 1868 : 
; 1869 :     return _Backout._Release();

	lea	ecx, DWORD PTR __Backout$[ebp]
	call	?_Release@?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAEPAMXZ ; std::_Uninitialized_backout_al<std::allocator<float> >::_Release
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Backout$[ebp]
	call	??1?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<float> >::~_Uninitialized_backout_al<std::allocator<float> >
	mov	eax, DWORD PTR $T2[ebp]
$LN1@Uninitiali:

; 1870 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@Uninitiali
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@Uninitiali:
	DD	1
	DD	$LN9@Uninitiali
$LN9@Uninitiali:
	DD	-52					; ffffffccH
	DD	12					; 0000000cH
	DD	$LN7@Uninitiali
$LN7@Uninitiali:
	DB	95					; 0000005fH
	DB	66					; 00000042H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Uninitialized_copy_n@PAMV?$allocator@M@std@@@std@@YAPAMPAMI0AAV?$allocator@M@0@@Z$0:
	lea	ecx, DWORD PTR __Backout$[ebp]
	jmp	??1?$_Uninitialized_backout_al@V?$allocator@M@std@@@std@@QAE@XZ ; std::_Uninitialized_backout_al<std::allocator<float> >::~_Uninitialized_backout_al<std::allocator<float> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$_Uninitialized_copy_n@PAMV?$allocator@M@std@@@std@@YAPAMPAMI0AAV?$allocator@M@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-264]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy_n@PAMV?$allocator@M@std@@@std@@YAPAMPAMI0AAV?$allocator@M@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Uninitialized_copy_n@PAMV?$allocator@M@std@@@std@@YAPAMPAMI0AAV?$allocator@M@0@@Z ENDP ; std::_Uninitialized_copy_n<float *,std::allocator<float> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$move@AAPAM@std@@YA$$QAPAMAAPAM@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAPAM@std@@YA$$QAPAMAAPAM@Z PROC		; std::move<float * &>, COMDAT

; 1547 : _NODISCARD _MSVC_INTRINSIC constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1548 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1549 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAPAM@std@@YA$$QAPAMAAPAM@Z ENDP		; std::move<float * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >, COMDAT

; 1100 : _CONSTEXPR20 void _Deallocate_plain(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1101 :     // deallocate a plain pointer using an allocator
; 1102 :     using _Alloc_traits = allocator_traits<_Alloc>;
; 1103 :     if constexpr (is_same_v<_Alloc_ptr_t<_Alloc>, typename _Alloc::value_type*>) {
; 1104 :         _Alloc_traits::deallocate(_Al, _Ptr, 1);

	push	1
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@2@QAU_Container_proxy@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Container_proxy> >::deallocate
	add	esp, 12					; 0000000cH

; 1105 :     } else {
; 1106 :         using _Ptr_traits = pointer_traits<_Alloc_ptr_t<_Alloc>>;
; 1107 :         _Alloc_traits::deallocate(_Al, _Ptr_traits::pointer_to(*_Ptr), 1);
; 1108 :     }
; 1109 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >, COMDAT

; 370  :     static void _Freenode0(_Alloc& _Al, _Nodeptr _Ptr) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 371  :         static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Freenode0 call");
; 372  :         _Destroy_in_place(_Ptr->_Left);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *>
	add	esp, 4

; 373  :         _Destroy_in_place(_Ptr->_Parent);

	mov	eax, DWORD PTR __Ptr$[ebp]
	add	eax, 4
	push	eax
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *>
	add	esp, 4

; 374  :         _Destroy_in_place(_Ptr->_Right);

	mov	eax, DWORD PTR __Ptr$[ebp]
	add	eax, 8
	push	eax
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *>
	add	esp, 4

; 375  :         allocator_traits<_Alloc>::deallocate(_Al, _Ptr, 1);

	push	1
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@I@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::deallocate
	add	esp, 12					; 0000000cH

; 376  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU01@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU01@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU01@@Z PROC ; std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >, COMDAT

; 379  :     static void _Freenode(_Alloc& _Al, _Nodeptr _Ptr) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 380  :         static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Freenode call");
; 381  :         allocator_traits<_Alloc>::destroy(_Al, _STD addressof(_Ptr->_Myval));

	mov	eax, DWORD PTR __Ptr$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	call	??$addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@0@AAU10@@Z ; std::addressof<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >
	add	esp, 8

; 382  :         _Freenode0(_Al, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
	add	esp, 8

; 383  :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU01@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU01@@Z ENDP ; std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\utility
;	COMDAT ??$exchange@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@0@Z
_TEXT	SEGMENT
__Old_val$ = -8						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@0@Z PROC ; std::exchange<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * &>, COMDAT

; 754  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi

; 755  :     // assign _New_val to _Val, return previous _Val
; 756  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old_val$[ebp], ecx

; 757  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR __New_val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 758  :     return _Old_val;

	mov	eax, DWORD PTR __Old_val$[ebp]

; 759  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$exchange@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@0@Z ENDP ; std::exchange<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\utility
;	COMDAT ??$?0PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@$$QA_N@Z PROC ; std::pair<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,bool>::pair<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,bool><std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,bool,0>, COMDAT
; _this$ = ecx

; 247  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YA$$QAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@@Z ; std::forward<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@_N@std@@YA$$QA_NAA_N@Z	; std::forward<bool>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+4], dl

; 248  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,bool>::pair<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,bool><std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Al_$ = 8						; size = 4
__Myhead$ = 12						; size = 4
_<_Vals_0>$ = 16					; size = 4
_<_Vals_1>$ = 20					; size = 4
_<_Vals_2>$ = 24					; size = 4
??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > ><std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >, COMDAT
; _this$ = ecx

; 805  :         : _Tree_temp_node_alloc<_Alnode>(_Al_) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Al_$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 806  :         _Alnode_traits::construct(this->_Al, _STD addressof(this->_Ptr->_Myval), _STD forward<_Valtys>(_Vals)...);

	mov	eax, DWORD PTR _<_Vals_2>$[ebp]
	push	eax
	call	??$forward@V?$tuple@$$V@std@@@std@@YA$$QAV?$tuple@$$V@0@AAV10@@Z ; std::forward<std::tuple<> >
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _<_Vals_1>$[ebp]
	push	ecx
	call	??$forward@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YA$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@AAV10@@Z ; std::forward<std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &> >
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _<_Vals_0>$[ebp]
	push	edx
	call	??$forward@ABUpiecewise_construct_t@std@@@std@@YAABUpiecewise_construct_t@0@ABU10@@Z ; std::forward<std::piecewise_construct_t const &>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 16					; 00000010H
	push	ecx
	call	??$addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@0@AAU10@@Z ; std::addressof<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$construct@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@ABUpiecewise_construct_t@2@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::construct<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
	add	esp, 20					; 00000014H

; 807  :         _Construct_in_place(this->_Ptr->_Left, _Myhead);

	lea	eax, DWORD PTR __Myhead$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * &>
	add	esp, 8

; 808  :         _Construct_in_place(this->_Ptr->_Parent, _Myhead);

	lea	eax, DWORD PTR __Myhead$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 4
	push	edx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * &>
	add	esp, 8

; 809  :         _Construct_in_place(this->_Ptr->_Right, _Myhead);

	lea	eax, DWORD PTR __Myhead$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 8
	push	edx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@AAPAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@0@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * &>
	add	esp, 8

; 810  :         this->_Ptr->_Color = _Red;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 0

; 811  :         this->_Ptr->_Isnil = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+13], 0

; 812  :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > ><std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >, COMDAT
; _this$ = ecx

; 817  :     ~_Tree_temp_node() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 818  :         if (this->_Ptr) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Tree_temp_

; 819  :             _Destroy_in_place(this->_Ptr->_Left);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *>
	add	esp, 4

; 820  :             _Destroy_in_place(this->_Ptr->_Parent);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	push	ecx
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *>
	add	esp, 4

; 821  :             _Destroy_in_place(this->_Ptr->_Right);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 8
	push	ecx
	call	??$_Destroy_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@@Z ; std::_Destroy_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *>
	add	esp, 4

; 822  :             _Alnode_traits::destroy(this->_Al, _STD addressof(this->_Ptr->_Myval));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 16					; 00000010H
	push	ecx
	call	??$addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@0@AAU10@@Z ; std::addressof<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$destroy@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@QAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::destroy<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >
	add	esp, 8
$LN2@Tree_temp_:

; 823  :         }
; 824  :     }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ
	npad	1
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
	npad	1
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::~_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Al_$ = 8						; size = 4
??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z PROC ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >, COMDAT
; _this$ = ecx

; 784  :     explicit _Tree_temp_node_alloc(_Alnode& _Al_) : _Alloc_construct_ptr<_Alnode>(_Al_) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Al_$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 785  :         _Alloc_construct_ptr<_Alnode>::_Allocate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAEXXZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::_Allocate
	npad	1

; 786  :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$_Tree_temp_node_alloc@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::_Tree_temp_node_alloc<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >, COMDAT
; _this$ = ecx

; 1136 :     _CONSTEXPR20 ~_Alloc_construct_ptr() { // if this instance is engaged, deallocate storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1137 :         if (_Ptr) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN2@Alloc_cons

; 1138 :             _Al.deallocate(_Ptr, 1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >::deallocate
	npad	1
$LN2@Alloc_cons:

; 1139 :         }
; 1140 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::~_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAEXXZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::_Allocate, COMDAT
; _this$ = ecx

; 1131 :     _CONSTEXPR20 void _Allocate() { // disengage *this, then allocate a new memory block

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1132 :         _Ptr = nullptr; // if allocate throws, prevents double-free

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1133 :         _Ptr = _Al.allocate(1);

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >::allocate
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1134 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Allocate@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAEXXZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@XZ PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::_Release, COMDAT
; _this$ = ecx

; 1127 :     _NODISCARD _CONSTEXPR20 pointer _Release() noexcept { // disengage *this and return contained pointer

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1128 :         return _STD exchange(_Ptr, nullptr);

	mov	DWORD PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	??$exchange@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@$$T@std@@YAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,std::nullptr_t>
	add	esp, 8

; 1129 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@XZ ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Al_$ = 8						; size = 4
??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z PROC ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >, COMDAT
; _this$ = ecx

; 1125 :     _CONSTEXPR20 explicit _Alloc_construct_ptr(_Alloc& _Al_) : _Al(_Al_), _Ptr(nullptr) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z ENDP ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\tuple
;	COMDAT ??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ PROC	; std::forward_as_tuple<>, COMDAT

; 1013 : _NODISCARD constexpr tuple<_Types&&...> forward_as_tuple(_Types&&... _Args) noexcept { // forward arguments in a tuple

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1014 :     return tuple<_Types&&...>(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1015 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ ENDP	; std::forward_as_tuple<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\tuple
;	COMDAT ??0?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 362  :     tuple(tuple&&)      = default;

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$tuple@$$V@std@@QAE@ABV01@@Z	; std::tuple<>::tuple<>
	npad	1
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\tuple
;	COMDAT ??$forward_as_tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_<_Args_0>$ = 12					; size = 4
??$forward_as_tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z PROC ; std::forward_as_tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT

; 1013 : _NODISCARD constexpr tuple<_Types&&...> forward_as_tuple(_Types&&... _Args) noexcept { // forward arguments in a tuple

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1014 :     return tuple<_Types&&...>(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	call	??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$0A@@?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &><std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,0>
	npad	1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1015 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward_as_tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ENDP ; std::forward_as_tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z PROC ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT

; 1536 : _NODISCARD _MSVC_INTRINSIC constexpr _Ty&& forward(remove_reference_t<_Ty>& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1537 :     return static_cast<_Ty&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1538 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ENDP ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\utility
;	COMDAT ??$?0ABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N@std@@QAE@ABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@$$QA_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val1$ = 8						; size = 4
__Val2$ = 12						; size = 4
??$?0ABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N@std@@QAE@ABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@$$QA_N@Z PROC ; std::pair<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,bool>::pair<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,bool><std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * const &,bool,0>, COMDAT
; _this$ = ecx

; 247  :         : first(_STD forward<_Other1>(_Val1)), second(_STD forward<_Other2>(_Val2)) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@ABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@YAABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@ABQAU10@@Z ; std::forward<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * const &>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR __Val2$[ebp]
	push	eax
	call	??$forward@_N@std@@YA$$QA_NAA_N@Z	; std::forward<bool>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR [ecx+4], dl

; 248  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0ABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N@std@@QAE@ABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@$$QA_N@Z ENDP ; std::pair<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,bool>::pair<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,bool><std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * const &,bool,0>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ??$_Lower_bound_duplicate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
tv78 = -208						; size = 4
_this$ = -8						; size = 4
__Bound$ = 8						; size = 4
__Keyval$ = 12						; size = 4
??$_Lower_bound_duplicate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Lower_bound_duplicate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1599 :     bool _Lower_bound_duplicate(const _Nodeptr _Bound, const _Keyty& _Keyval) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-16]
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1600 :         return !_Bound->_Isnil && !_DEBUG_LT_PRED(_Getcomp(), _Keyval, _Traits::_Kfn(_Bound->_Myval));

	mov	eax, DWORD PTR __Bound$[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Lower_boun
	mov	edx, DWORD PTR __Bound$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	??$_Kfn@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@SAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@@Z ; std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0>::_Kfn<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcomp@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Getcomp
	push	eax
	call	??$_Debug_lt_pred@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@$0A@@std@@YA_NABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,0>
	add	esp, 12					; 0000000cH
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@Lower_boun
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN4@Lower_boun
$LN3@Lower_boun:
	mov	DWORD PTR tv78[ebp], 0
$LN4@Lower_boun:
	movzx	eax, BYTE PTR tv78[ebp]

; 1601 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Lower_bound_duplicate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Lower_bound_duplicate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Trynode$ = -52					; size = 4
__Result$ = -40						; size = 12
__Scary$ = -20						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1604 :     _Tree_find_result<_Nodeptr> _Find_lower_bound(const _Keyty& _Keyval) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 248				; 000000f8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1605 :         const auto _Scary = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 1606 :         _Tree_find_result<_Nodeptr> _Result{{_Scary->_Myhead->_Parent, _Tree_child::_Right}, _Scary->_Myhead};

	mov	eax, DWORD PTR __Scary$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Result$[ebp], edx
	mov	DWORD PTR __Result$[ebp+4], 0
	mov	eax, DWORD PTR __Scary$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Result$[ebp+8], ecx

; 1607 :         _Nodeptr _Trynode = _Result._Location._Parent;

	mov	eax, DWORD PTR __Result$[ebp]
	mov	DWORD PTR __Trynode$[ebp], eax
$LN2@Find_lower:

; 1608 :         while (!_Trynode->_Isnil) {

	mov	eax, DWORD PTR __Trynode$[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Find_lower

; 1609 :             _Result._Location._Parent = _Trynode;

	mov	eax, DWORD PTR __Trynode$[ebp]
	mov	DWORD PTR __Result$[ebp], eax

; 1610 :             if (_DEBUG_LT_PRED(_Getcomp(), _Traits::_Kfn(_Trynode->_Myval), _Keyval)) {

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Trynode$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	??$_Kfn@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@SAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@ABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@@Z ; std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0>::_Kfn<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcomp@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Getcomp
	push	eax
	call	??$_Debug_lt_pred@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@ABV32@$0A@@std@@YA_NABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@1@Z ; std::_Debug_lt_pred<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &,0>
	add	esp, 12					; 0000000cH
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN4@Find_lower

; 1611 :                 _Result._Location._Child = _Tree_child::_Right;

	mov	DWORD PTR __Result$[ebp+4], 0

; 1612 :                 _Trynode                 = _Trynode->_Right;

	mov	eax, DWORD PTR __Trynode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Trynode$[ebp], ecx

; 1613 :             } else {

	jmp	SHORT $LN5@Find_lower
$LN4@Find_lower:

; 1614 :                 _Result._Location._Child = _Tree_child::_Left;

	mov	DWORD PTR __Result$[ebp+4], 1

; 1615 :                 _Result._Bound           = _Trynode;

	mov	eax, DWORD PTR __Trynode$[ebp]
	mov	DWORD PTR __Result$[ebp+8], eax

; 1616 :                 _Trynode                 = _Trynode->_Left;

	mov	eax, DWORD PTR __Trynode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Trynode$[ebp], ecx
$LN5@Find_lower:

; 1617 :             }
; 1618 :         }

	jmp	SHORT $LN2@Find_lower
$LN3@Find_lower:

; 1619 : 
; 1620 :         return _Result;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR __Result$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR __Result$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR __Result$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1621 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Find_lower
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 248				; 000000f8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN9@Find_lower:
	DD	1
	DD	$LN8@Find_lower
$LN8@Find_lower:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN7@Find_lower
$LN7@Find_lower:
	DB	95					; 0000005fH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	0
??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits>, COMDAT

; 194  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 195  :     // allocate _Bytes
; 196  :     if (_Bytes == 0) {

	cmp	DWORD PTR __Bytes$[ebp], 0
	jne	SHORT $LN2@Allocate

; 197  :         return nullptr;

	xor	eax, eax
	jmp	SHORT $LN1@Allocate
$LN2@Allocate:

; 198  :     }
; 199  : 
; 200  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 201  :     if (_STD is_constant_evaluated()) {
; 202  :         return _Traits::_Allocate(_Bytes);
; 203  :     }
; 204  : #endif // _HAS_CXX20
; 205  : 
; 206  : #ifdef __cpp_aligned_new
; 207  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 208  :         size_t _Passed_align = _Align;
; 209  : #if defined(_M_IX86) || defined(_M_X64)
; 210  :         if (_Bytes >= _Big_allocation_threshold) {
; 211  :             // boost the alignment of big allocations to help autovectorization
; 212  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 213  :         }
; 214  : #endif // defined(_M_IX86) || defined(_M_X64)
; 215  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 216  :     } else
; 217  : #endif // defined(__cpp_aligned_new)
; 218  :     {
; 219  : #if defined(_M_IX86) || defined(_M_X64)
; 220  :         if (_Bytes >= _Big_allocation_threshold) {

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN3@Allocate

; 221  :             // boost the alignment of big allocations to help autovectorization
; 222  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
	add	esp, 4
	jmp	SHORT $LN1@Allocate
$LN3@Allocate:

; 223  :         }
; 224  : #endif // defined(_M_IX86) || defined(_M_X64)
; 225  :         return _Traits::_Allocate(_Bytes);

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ; std::_Default_allocate_traits::_Allocate
	add	esp, 4
$LN1@Allocate:

; 226  :     }
; 227  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Get_size_of_n@$07@std@@YAII@Z
_TEXT	SEGMENT
__Max_possible$1 = -20					; size = 4
__Overflow_is_possible$ = -5				; size = 1
__Count$ = 8						; size = 4
??$_Get_size_of_n@$07@std@@YAII@Z PROC			; std::_Get_size_of_n<8>, COMDAT

; 79   : _NODISCARD constexpr size_t _Get_size_of_n(const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 80   :     constexpr bool _Overflow_is_possible = _Ty_size > 1;

	mov	BYTE PTR __Overflow_is_possible$[ebp], 1

; 81   : 
; 82   :     if constexpr (_Overflow_is_possible) {
; 83   :         constexpr size_t _Max_possible = static_cast<size_t>(-1) / _Ty_size;

	mov	DWORD PTR __Max_possible$1[ebp], 536870911 ; 1fffffffH

; 84   :         if (_Count > _Max_possible) {

	cmp	DWORD PTR __Count$[ebp], 536870911	; 1fffffffH
	jbe	SHORT $LN2@Get_size_o

; 85   :             _Throw_bad_array_new_length(); // multiply overflow

	call	?_Throw_bad_array_new_length@std@@YAXXZ	; std::_Throw_bad_array_new_length
	npad	1
$LN2@Get_size_o:

; 86   :         }
; 87   :     }
; 88   : 
; 89   :     return _Count * _Ty_size;

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 3
$LN1@Get_size_o:

; 90   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Get_size_of_n@$07@std@@YAII@Z ENDP			; std::_Get_size_of_n<8>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xutility
;	COMDAT ??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z PROC ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>, COMDAT

; 381  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 382  : #if _HAS_CXX20
; 383  :     if (_STD is_constant_evaluated()) {
; 384  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 385  :     } else
; 386  : #endif // _HAS_CXX20
; 387  :     {
; 388  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
	add	esp, 4
	push	eax
	push	8
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@PAU_Container_base12@std@@@std@@YA$$QAPAU_Container_base12@0@AAPAU10@@Z ; std::forward<std::_Container_base12 *>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ; std::_Container_proxy::_Container_proxy
	npad	1

; 389  :     }
; 390  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ENDP ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z PROC ; std::addressof<std::_Container_base12>, COMDAT

; 1559 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1560 :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 1561 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ENDP ; std::addressof<std::_Container_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 35   : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 36   :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 37   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z
_TEXT	SEGMENT
__Obj$ = 8						; size = 4
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z PROC		; std::_Destroy_in_place<char *>, COMDAT

; 289  : _CONSTEXPR20 void _Destroy_in_place(_Ty& _Obj) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 290  :     if constexpr (is_array_v<_Ty>) {
; 291  :         _STD _Destroy_range(_Obj, _Obj + extent_v<_Ty>);
; 292  :     } else {
; 293  :         _Obj.~_Ty();
; 294  :     }
; 295  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ENDP		; std::_Destroy_in_place<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z
_TEXT	SEGMENT
__New_ptr$ = -56					; size = 4
__Al$ = -44						; size = 4
__New_capacity$ = -32					; size = 4
__Old_capacity$ = -20					; size = 4
_this$ = -8						; size = 4
__New_size$ = 8						; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>, COMDAT
; _this$ = ecx

; 4780 :     _CONSTEXPR20 basic_string& _Reallocate_for(const size_type _New_size, _Fty _Fn, _ArgTys... _Args) {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4781 :         // reallocate to store exactly _New_size elements, new buffer prepared by
; 4782 :         // _Fn(_New_ptr, _New_size, _Args...)
; 4783 :         if (_New_size > max_size()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	DWORD PTR __New_size$[ebp], eax
	jbe	SHORT $LN2@Reallocate

; 4784 :             _Xlen_string(); // result too long

	call	?_Xlen_string@std@@YAXXZ		; std::_Xlen_string
	npad	1
$LN2@Reallocate:

; 4785 :         }
; 4786 : 
; 4787 :         const size_type _Old_capacity = _Mypair._Myval2._Myres;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR __Old_capacity$[ebp], ecx

; 4788 :         size_type _New_capacity       = _Calculate_growth(_New_size);

	mov	eax, DWORD PTR __New_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	mov	DWORD PTR __New_capacity$[ebp], eax

; 4789 :         auto& _Al                     = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 4790 :         const pointer _New_ptr        = _Allocate_for_capacity(_Al, _New_capacity); // throws

	lea	eax, DWORD PTR __New_capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPADAAV?$allocator@D@1@AAI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Allocate_for_capacity<0>
	add	esp, 8
	mov	DWORD PTR __New_ptr$[ebp], eax

; 4791 : 
; 4792 :         _Mypair._Myval2._Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
	npad	1

; 4793 :         _ASAN_STRING_REMOVE(*this);
; 4794 :         _Mypair._Myval2._Mysize = _New_size;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __New_size$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 4795 :         _Mypair._Myval2._Myres  = _New_capacity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __New_capacity$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 4796 :         _Fn(_Unfancy(_New_ptr), _New_size, _Args...);

	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	push	eax
	mov	ecx, DWORD PTR __New_size$[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_ptr$[ebp]
	push	edx
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR __Fn$[ebp]
	call	??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
	npad	1

; 4797 :         if (_Old_capacity > _Small_string_capacity) {

	cmp	DWORD PTR __Old_capacity$[ebp], 15	; 0000000fH
	jbe	SHORT $LN3@Reallocate

; 4798 :             _Deallocate_for_capacity(_Al, _Mypair._Myval2._Bx._Ptr, _Old_capacity);

	mov	eax, DWORD PTR __Old_capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	call	?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAAV?$allocator@D@2@QADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Deallocate_for_capacity
	add	esp, 12					; 0000000cH

; 4799 :             _Mypair._Myval2._Bx._Ptr = _New_ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __New_ptr$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 4800 :         } else {

	jmp	SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4801 :             _Construct_in_place(_Mypair._Myval2._Bx._Ptr, _New_ptr);

	lea	eax, DWORD PTR __New_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	call	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
	add	esp, 8
$LN4@Reallocate:

; 4802 :         }
; 4803 : 
; 4804 :         _ASAN_STRING_CREATE(*this);
; 4805 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]
$LN1@Reallocate:

; 4806 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Reallocate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN9@Reallocate:
	DD	2
	DD	$LN8@Reallocate
$LN8@Reallocate:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN6@Reallocate
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN7@Reallocate
$LN7@Reallocate:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN6@Reallocate:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	0
??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__New_ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z PROC ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator(), COMDAT
; _this$ = ecx

; 3430 :             },

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3428 :                 _Traits::copy(_New_ptr, _Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_ptr$[ebp]
	push	edx
	call	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::copy
	add	esp, 12					; 0000000cH

; 3429 :                 _Traits::assign(_New_ptr[_Count], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __New_ptr$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 3430 :             },

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??R<lambda_9366063389c5f42a00a5088cf24e69de>@@QBE@QADIQBD@Z ENDP ; <lambda_9366063389c5f42a00a5088cf24e69de>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Deallocate@$07@std@@YAXPAXI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
??$_Deallocate@$07@std@@YAXPAXI@Z PROC			; std::_Deallocate<8>, COMDAT

; 230  : _CONSTEXPR20 void _Deallocate(void* _Ptr, size_t _Bytes) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Deallocate@$07@std@@YAXPAXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 231  :     // deallocate storage allocated by _Allocate
; 232  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 233  :     if (_STD is_constant_evaluated()) {
; 234  :         ::operator delete(_Ptr);
; 235  :         return;
; 236  :     }
; 237  : #endif // _HAS_CXX20
; 238  : 
; 239  : #ifdef __cpp_aligned_new
; 240  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 241  :         size_t _Passed_align = _Align;
; 242  : #if defined(_M_IX86) || defined(_M_X64)
; 243  :         if (_Bytes >= _Big_allocation_threshold) {
; 244  :             // boost the alignment of big allocations to help autovectorization
; 245  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 246  :         }
; 247  : #endif // defined(_M_IX86) || defined(_M_X64)
; 248  :         ::operator delete(_Ptr, _Bytes, align_val_t{_Passed_align});
; 249  :     } else
; 250  : #endif // defined(__cpp_aligned_new)
; 251  :     {
; 252  : #if defined(_M_IX86) || defined(_M_X64)
; 253  :         if (_Bytes >= _Big_allocation_threshold) {

	cmp	DWORD PTR __Bytes$[ebp], 4096		; 00001000H
	jb	SHORT $LN2@Deallocate

; 254  :             // boost the alignment of big allocations to help autovectorization
; 255  :             _Adjust_manually_vector_aligned(_Ptr, _Bytes);

	lea	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ; std::_Adjust_manually_vector_aligned
	add	esp, 8
$LN2@Deallocate:

; 256  :         }
; 257  : #endif // defined(_M_IX86) || defined(_M_X64)
; 258  :         ::operator delete(_Ptr, _Bytes);

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8

; 259  :     }
; 260  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Deallocate@$07@std@@YAXPAXI@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Deallocate@$07@std@@YAXPAXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Deallocate@$07@std@@YAXPAXI@Z ENDP			; std::_Deallocate<8>
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\utility
;	COMDAT ??$max@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
$T1 = -200						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@I@std@@YAABIABI0@Z PROC				; std::max<unsigned int>, COMDAT

; 72   :     (max) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Left < _Right)) /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi

; 73   :     // return larger of _Left and _Right
; 74   :     return _Left < _Right ? _Right : _Left;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN3@max
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@max
$LN3@max:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
$LN4@max:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]

; 75   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$max@I@std@@YAABIABI0@Z ENDP				; std::max<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
__Pnode$ = -8						; size = 4
__Al$ = 8						; size = 4
??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z PROC ; std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >, COMDAT

; 343  :     static _Nodeptr _Buyheadnode(_Alloc& _Al) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 344  :         static_assert(is_same_v<typename _Alloc::value_type, _Tree_node>, "Bad _Buyheadnode call");
; 345  :         const auto _Pnode = _Al.allocate(1);

	push	1
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@I@Z ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >::allocate
	mov	DWORD PTR __Pnode$[ebp], eax

; 346  :         _Construct_in_place(_Pnode->_Left, _Pnode);

	lea	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	push	ecx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * const &>
	add	esp, 8

; 347  :         _Construct_in_place(_Pnode->_Parent, _Pnode);

	lea	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	add	ecx, 4
	push	ecx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * const &>
	add	esp, 8

; 348  :         _Construct_in_place(_Pnode->_Right, _Pnode);

	lea	eax, DWORD PTR __Pnode$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Pnode$[ebp]
	add	ecx, 8
	push	ecx
	call	??$_Construct_in_place@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@ABQAU12@@std@@YAXAAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@ABQAU10@@Z ; std::_Construct_in_place<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * const &>
	add	esp, 8

; 349  :         _Pnode->_Color = _Black;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [eax+12], 1

; 350  :         _Pnode->_Isnil = true;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	BYTE PTR [eax+13], 1

; 351  :         return _Pnode;

	mov	eax, DWORD PTR __Pnode$[ebp]

; 352  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Buyheadnod
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@Buyheadnod:
	DD	1
	DD	$LN4@Buyheadnod
$LN4@Buyheadnod:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@Buyheadnod
$LN3@Buyheadnod:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1460 :     _CONSTEXPR20 ~_Container_proxy_ptr12() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1461 :         if (_Ptr) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Container_

; 1462 :             _Delete_plain_internal(_Al, _Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
	add	esp, 8
$LN2@Container_:

; 1463 :         }
; 1464 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
__Al_$ = 8						; size = 4
__Mycont$ = 12						; size = 4
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z PROC ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1446 :     _CONSTEXPR20 _Container_proxy_ptr12(_Alloc& _Al_, _Container_base12& _Mycont) : _Al(_Al_) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Basic_container_proxy_ptr12@std@@IAE@XZ ; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Al_$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1447 :         // create a new _Container_proxy pointing at _Mycont
; 1448 :         _Ptr = _Unfancy(_Al_.allocate(1));

	push	1
	mov	ecx, DWORD PTR __Al_$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 1449 :         _Construct_in_place(*_Ptr, _STD addressof(_Mycont));

	mov	eax, DWORD PTR __Mycont$[ebp]
	push	eax
	call	??$addressof@U_Container_base12@std@@@std@@YAPAU_Container_base12@0@AAU10@@Z ; std::addressof<std::_Container_base12>
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
	add	esp, 8

; 1450 :         _Mycont._Myproxy = _Ptr;

	mov	eax, DWORD PTR __Mycont$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 1451 :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ENDP ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 35   : _NODISCARD constexpr _Ty* _Unfancy(_Ty* _Ptr) noexcept { // do nothing for plain pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 36   :     return _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]

; 37   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xutility
;	COMDAT ??$_Construct_in_place@PADAAPAD@std@@YAXAAPAD0@Z
_TEXT	SEGMENT
$T1 = -200						; size = 4
__Obj$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$_Construct_in_place@PADAAPAD@std@@YAXAAPAD0@Z PROC	; std::_Construct_in_place<char *,char * &>, COMDAT

; 381  :     is_nothrow_constructible_v<_Ty, _Types...>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 382  : #if _HAS_CXX20
; 383  :     if (_STD is_constant_evaluated()) {
; 384  :         _STD construct_at(_STD addressof(_Obj), _STD forward<_Types>(_Args)...);
; 385  :     } else
; 386  : #endif // _HAS_CXX20
; 387  :     {
; 388  :         ::new (static_cast<void*>(_STD addressof(_Obj))) _Ty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Obj$[ebp]
	push	eax
	call	??$addressof@PAD@std@@YAPAPADAAPAD@Z	; std::addressof<char *>
	add	esp, 4
	push	eax
	push	4
	call	??2@YAPAXIPAX@Z				; operator new
	add	esp, 8
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	; std::forward<char * &>
	add	esp, 4
	mov	edx, DWORD PTR $T1[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [edx], eax

; 389  :     }
; 390  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Construct_in_place@PADAAPAD@std@@YAXAAPAD0@Z ENDP	; std::_Construct_in_place<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 1559 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1560 :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 1561 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z
_TEXT	SEGMENT
__Old_ptr$1 = -116					; size = 4
__Raw_new$ = -104					; size = 4
__New_ptr$ = -92					; size = 4
__Al$ = -80						; size = 4
__New_capacity$ = -68					; size = 4
__Old_capacity$ = -56					; size = 4
__New_size$ = -44					; size = 4
__Old_size$ = -32					; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Size_increase$ = 8					; size = 4
__Fn$ = 12						; size = 1
_<_Args_0>$ = 16					; size = 4
_<_Args_1>$ = 20					; size = 4
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>, COMDAT
; _this$ = ecx

; 4809 :     _CONSTEXPR20 basic_string& _Reallocate_grow_by(const size_type _Size_increase, _Fty _Fn, _ArgTys... _Args) {

	push	ebp
	mov	ebp, esp
	sub	esp, 312				; 00000138H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-120]
	mov	ecx, 30					; 0000001eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4810 :         // reallocate to increase size by _Size_increase elements, new buffer prepared by
; 4811 :         // _Fn(_New_ptr, _Old_ptr, _Old_size, _Args...)
; 4812 :         auto& _My_data            = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 4813 :         const size_type _Old_size = _My_data._Mysize;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR __Old_size$[ebp], ecx

; 4814 :         if (max_size() - _Old_size < _Size_increase) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	sub	eax, DWORD PTR __Old_size$[ebp]
	cmp	eax, DWORD PTR __Size_increase$[ebp]
	jae	SHORT $LN2@Reallocate

; 4815 :             _Xlen_string(); // result too long

	call	?_Xlen_string@std@@YAXXZ		; std::_Xlen_string
	npad	1
$LN2@Reallocate:

; 4816 :         }
; 4817 : 
; 4818 :         const size_type _New_size     = _Old_size + _Size_increase;

	mov	eax, DWORD PTR __Old_size$[ebp]
	add	eax, DWORD PTR __Size_increase$[ebp]
	mov	DWORD PTR __New_size$[ebp], eax

; 4819 :         const size_type _Old_capacity = _My_data._Myres;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR __Old_capacity$[ebp], ecx

; 4820 :         size_type _New_capacity       = _Calculate_growth(_New_size);

	mov	eax, DWORD PTR __New_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	mov	DWORD PTR __New_capacity$[ebp], eax

; 4821 :         auto& _Al                     = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 4822 :         const pointer _New_ptr        = _Allocate_for_capacity(_Al, _New_capacity); // throws

	lea	eax, DWORD PTR __New_capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPADAAV?$allocator@D@1@AAI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Allocate_for_capacity<0>
	add	esp, 8
	mov	DWORD PTR __New_ptr$[ebp], eax

; 4823 : 
; 4824 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
	npad	1

; 4825 :         _ASAN_STRING_REMOVE(*this);
; 4826 :         _My_data._Mysize      = _New_size;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __New_size$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 4827 :         _My_data._Myres       = _New_capacity;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __New_capacity$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 4828 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

	mov	eax, DWORD PTR __New_ptr$[ebp]
	push	eax
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	mov	DWORD PTR __Raw_new$[ebp], eax

; 4829 :         if (_Old_capacity > _Small_string_capacity) {

	cmp	DWORD PTR __Old_capacity$[ebp], 15	; 0000000fH
	jbe	SHORT $LN3@Reallocate

; 4830 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Old_ptr$1[ebp], ecx

; 4831 :             _Fn(_Raw_new, _Unfancy(_Old_ptr), _Old_size, _Args...);

	mov	eax, DWORD PTR _<_Args_1>$[ebp]
	push	eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Old_size$[ebp]
	push	edx
	mov	eax, DWORD PTR __Old_ptr$1[ebp]
	push	eax
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Raw_new$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Fn$[ebp]
	call	??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()
	npad	1

; 4832 :             _Deallocate_for_capacity(_Al, _Old_ptr, _Old_capacity);

	mov	eax, DWORD PTR __Old_capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Old_ptr$1[ebp]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAAV?$allocator@D@2@QADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Deallocate_for_capacity
	add	esp, 12					; 0000000cH

; 4833 :             _My_data._Bx._Ptr = _New_ptr;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __New_ptr$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 4834 :         } else {

	jmp	SHORT $LN4@Reallocate
$LN3@Reallocate:

; 4835 :             _Fn(_Raw_new, _My_data._Bx._Buf, _Old_size, _Args...);

	mov	eax, DWORD PTR _<_Args_1>$[ebp]
	push	eax
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Old_size$[ebp]
	push	edx
	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Raw_new$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Fn$[ebp]
	call	??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()
	npad	1

; 4836 :             _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

	lea	eax, DWORD PTR __New_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	push	ecx
	call	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
	add	esp, 8
$LN4@Reallocate:

; 4837 :         }
; 4838 : 
; 4839 :         _ASAN_STRING_CREATE(*this);
; 4840 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]
$LN1@Reallocate:

; 4841 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@Reallocate
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 312				; 00000138H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN9@Reallocate:
	DD	2
	DD	$LN8@Reallocate
$LN8@Reallocate:
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN6@Reallocate
	DD	-92					; ffffffa4H
	DD	4
	DD	$LN7@Reallocate
$LN7@Reallocate:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN6@Reallocate:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	0
??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__New_ptr$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Old_size$ = 16					; size = 4
__Ptr$ = 20						; size = 4
__Count$ = 24						; size = 4
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z PROC ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator(), COMDAT
; _this$ = ecx

; 3326 :             },

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3323 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);

	mov	eax, DWORD PTR __Old_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Old_ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_ptr$[ebp]
	push	edx
	call	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::copy
	add	esp, 12					; 0000000cH

; 3324 :                 _Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_ptr$[ebp]
	add	edx, DWORD PTR __Old_size$[ebp]
	push	edx
	call	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::copy
	add	esp, 12					; 0000000cH

; 3325 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Old_size$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	add	ecx, DWORD PTR __New_ptr$[ebp]
	push	ecx
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 3326 :             },

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??R<lambda_ab246b20b9526e2ef7792587e4298a77>@@QBE@QADQBDI1I@Z ENDP ; <lambda_ab246b20b9526e2ef7792587e4298a77>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAMQAMAAV?$allocator@M@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAMQAMAAV?$allocator@M@0@@Z PROC ; std::_Destroy_range<std::allocator<float> >, COMDAT

; 1063 : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1064 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1065 :     using _Ty = typename _Alloc::value_type;
; 1066 :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1067 :         for (; _First != _Last; ++_First) {
; 1068 :             allocator_traits<_Alloc>::destroy(_Al, _STD _Unfancy(_First));
; 1069 :         }
; 1070 :     }
; 1071 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAMQAMAAV?$allocator@M@0@@Z ENDP ; std::_Destroy_range<std::allocator<float> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1><>, COMDAT
; _this$ = ecx

; 1496 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@QAE@XZ ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >
	npad	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAE@XZ ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$?0ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
_<_Val2_0>$ = 16					; size = 4
??$?0ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>,1>::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>,1><std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &,std::_Zero_then_variadic_args_t>, COMDAT
; _this$ = ecx

; 1501 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@YAABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABU10@@Z ; std::forward<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &>
	add	esp, 4
	mov	eax, DWORD PTR _<_Val2_0>$[ebp]
	push	eax
	call	??$forward@U_Zero_then_variadic_args_t@std@@@std@@YA$$QAU_Zero_then_variadic_args_t@0@AAU10@@Z ; std::forward<std::_Zero_then_variadic_args_t>
	add	esp, 4
	mov	cl, BYTE PTR [eax]
	movzx	edx, cl
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1><>
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$?0ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>,1>::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>,1><std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &,std::_Zero_then_variadic_args_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >, COMDAT

; 1559 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1560 :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 1561 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@0@AAU10@@Z PROC ; std::addressof<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >, COMDAT

; 1559 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1560 :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 1561 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@0@AAU10@@Z ENDP ; std::addressof<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
__New_ptr$ = -108					; size = 4
__New_capacity$ = -96					; size = 4
__Proxy$ = -84						; size = 8
_$S15$ = -65						; size = 1
__Alproxy$ = -56					; size = 4
__Al$ = -44						; size = 4
__My_data$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Arg$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<2,char const *>, COMDAT
; _this$ = ecx

; 2662 :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 292				; 00000124H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2663 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 2664 :         _STL_INTERNAL_CHECK(!_My_data._Large_mode_engaged());
; 2665 : 
; 2666 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2667 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 2668 :         } else {
; 2669 :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 2670 :         }
; 2671 : 
; 2672 :         if (_Count > max_size()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	DWORD PTR __Count$[ebp], eax
	jbe	SHORT $LN2@Construct

; 2673 :             _Xlen_string(); // result too long

	call	?_Xlen_string@std@@YAXXZ		; std::_Xlen_string
	npad	1
$LN2@Construct:

; 2674 :         }
; 2675 : 
; 2676 :         auto& _Al       = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 2677 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	lea	ecx, DWORD PTR _$S15$[ebp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
	lea	ecx, DWORD PTR _$S15$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], ecx

; 2678 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

	mov	eax, DWORD PTR __My_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Alproxy$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2679 : 
; 2680 :         if (_Count <= _Small_string_capacity) {

	cmp	DWORD PTR __Count$[ebp], 15		; 0000000fH
	ja	SHORT $LN3@Construct

; 2681 :             _My_data._Mysize = _Count;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 2682 :             _My_data._Myres  = _Small_string_capacity;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [eax+24], 15			; 0000000fH

; 2683 : 
; 2684 :             if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2685 :                 _Traits::assign(_My_data._Bx._Buf, _Count, _Arg);
; 2686 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 2687 :             } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2688 :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count);
; 2689 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 2690 :             } else { // _Strat == _Construct_strategy::_From_string
; 2691 : #ifdef _INSERT_STRING_ANNOTATION
; 2692 :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count + 1);
; 2693 : #else // ^^^ _INSERT_STRING_ANNOTATION / !_INSERT_STRING_ANNOTATION vvv
; 2694 :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _BUF_SIZE);

	push	16					; 00000010H
	mov	eax, DWORD PTR __Arg$[ebp]
	push	eax
	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	push	ecx
	call	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::copy
	add	esp, 12					; 0000000cH

; 2695 : #endif // ^^^ !_INSERT_STRING_ANNOTATION ^^^
; 2696 :             }
; 2697 : 
; 2698 :             _Proxy._Release();

	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release
	npad	1

; 2699 :             return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	npad	1
	jmp	$LN1@Construct
$LN3@Construct:

; 2700 :         }
; 2701 : 
; 2702 :         size_type _New_capacity = _Calculate_growth(_Count, _Small_string_capacity, max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	push	eax
	push	15					; 0000000fH
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __New_capacity$[ebp], eax

; 2703 :         const pointer _New_ptr  = _Allocate_for_capacity(_Al, _New_capacity); // throws

	lea	eax, DWORD PTR __New_capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPADAAV?$allocator@D@1@AAI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Allocate_for_capacity<0>
	add	esp, 8
	mov	DWORD PTR __New_ptr$[ebp], eax

; 2704 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

	lea	eax, DWORD PTR __New_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	push	ecx
	call	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
	add	esp, 8

; 2705 : 
; 2706 :         _My_data._Mysize = _Count;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 2707 :         _My_data._Myres  = _New_capacity;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __New_capacity$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 2708 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2709 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2710 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2711 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2712 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 2713 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2714 :         } else { // _Strat == _Construct_strategy::_From_string
; 2715 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

	mov	eax, DWORD PTR __Count$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR __Arg$[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_ptr$[ebp]
	push	edx
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	push	eax
	call	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::copy
	add	esp, 12					; 0000000cH

; 2716 :         }
; 2717 : 
; 2718 :         _ASAN_STRING_CREATE(*this);
; 2719 :         _Proxy._Release();

	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release
	npad	1

; 2720 :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	npad	1
$LN1@Construct:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Construct
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN12@Construct:
	DD	4
	DD	$LN11@Construct
$LN11@Construct:
	DD	-65					; ffffffbfH
	DD	1
	DD	$LN6@Construct
	DD	-84					; ffffffacH
	DD	8
	DD	$LN7@Construct
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN8@Construct
	DD	-108					; ffffff94H
	DD	4
	DD	$LN9@Construct
$LN9@Construct:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN8@Construct:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	0
$LN7@Construct:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
$LN6@Construct:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	49					; 00000031H
	DB	53					; 00000035H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z$0:
	lea	ecx, DWORD PTR __Proxy$[ebp]
	jmp	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-308]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<2,char const *>
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
$T2 = -321						; size = 1
$T3 = -309						; size = 1
__New_ptr$ = -108					; size = 4
__New_capacity$ = -96					; size = 4
__Proxy$ = -84						; size = 8
_$S14$ = -65						; size = 1
__Alproxy$ = -56					; size = 4
__Al$ = -44						; size = 4
__My_data$ = -32					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Arg$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT
; _this$ = ecx

; 2662 :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 316				; 0000013cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-136]
	mov	ecx, 31					; 0000001fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2663 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 2664 :         _STL_INTERNAL_CHECK(!_My_data._Large_mode_engaged());
; 2665 : 
; 2666 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2667 :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 2668 :         } else {
; 2669 :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 2670 :         }
; 2671 : 
; 2672 :         if (_Count > max_size()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	cmp	DWORD PTR __Count$[ebp], eax
	jbe	SHORT $LN2@Construct

; 2673 :             _Xlen_string(); // result too long

	call	?_Xlen_string@std@@YAXXZ		; std::_Xlen_string
	npad	1
$LN2@Construct:

; 2674 :         }
; 2675 : 
; 2676 :         auto& _Al       = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 2677 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	lea	ecx, DWORD PTR _$S14$[ebp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
	lea	ecx, DWORD PTR _$S14$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], ecx

; 2678 :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);

	mov	eax, DWORD PTR __My_data$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Alproxy$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2679 : 
; 2680 :         if (_Count <= _Small_string_capacity) {

	cmp	DWORD PTR __Count$[ebp], 15		; 0000000fH
	ja	SHORT $LN3@Construct

; 2681 :             _My_data._Mysize = _Count;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 2682 :             _My_data._Myres  = _Small_string_capacity;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [eax+24], 15			; 0000000fH

; 2683 : 
; 2684 :             if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2685 :                 _Traits::assign(_My_data._Bx._Buf, _Count, _Arg);
; 2686 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());
; 2687 :             } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2688 :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Arg$[ebp]
	push	ecx
	mov	edx, DWORD PTR __My_data$[ebp]
	add	edx, 4
	push	edx
	call	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::copy
	add	esp, 12					; 0000000cH

; 2689 :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

	mov	BYTE PTR $T3[ebp], 0
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __My_data$[ebp]
	lea	eax, DWORD PTR [edx+ecx+4]
	push	eax
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 2690 :             } else { // _Strat == _Construct_strategy::_From_string
; 2691 : #ifdef _INSERT_STRING_ANNOTATION
; 2692 :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _Count + 1);
; 2693 : #else // ^^^ _INSERT_STRING_ANNOTATION / !_INSERT_STRING_ANNOTATION vvv
; 2694 :                 _Traits::copy(_My_data._Bx._Buf, _Arg, _BUF_SIZE);
; 2695 : #endif // ^^^ !_INSERT_STRING_ANNOTATION ^^^
; 2696 :             }
; 2697 : 
; 2698 :             _Proxy._Release();

	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release
	npad	1

; 2699 :             return;

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	npad	1
	jmp	$LN1@Construct
$LN3@Construct:

; 2700 :         }
; 2701 : 
; 2702 :         size_type _New_capacity = _Calculate_growth(_Count, _Small_string_capacity, max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	push	eax
	push	15					; 0000000fH
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	add	esp, 12					; 0000000cH
	mov	DWORD PTR __New_capacity$[ebp], eax

; 2703 :         const pointer _New_ptr  = _Allocate_for_capacity(_Al, _New_capacity); // throws

	lea	eax, DWORD PTR __New_capacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPADAAV?$allocator@D@1@AAI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Allocate_for_capacity<0>
	add	esp, 8
	mov	DWORD PTR __New_ptr$[ebp], eax

; 2704 :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

	lea	eax, DWORD PTR __New_ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	push	ecx
	call	??$_Construct_in_place@PADABQAD@std@@YAXAAPADABQAD@Z ; std::_Construct_in_place<char *,char * const &>
	add	esp, 8

; 2705 : 
; 2706 :         _My_data._Mysize = _Count;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 2707 :         _My_data._Myres  = _New_capacity;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __New_capacity$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 2708 :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 2709 :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 2710 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 2711 :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 2712 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Arg$[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_ptr$[ebp]
	push	edx
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	push	eax
	call	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::copy
	add	esp, 12					; 0000000cH

; 2713 :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

	mov	BYTE PTR $T2[ebp], 0
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR __New_ptr$[ebp]
	push	ecx
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	add	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 2714 :         } else { // _Strat == _Construct_strategy::_From_string
; 2715 :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 2716 :         }
; 2717 : 
; 2718 :         _ASAN_STRING_CREATE(*this);
; 2719 :         _Proxy._Release();

	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release
	npad	1

; 2720 :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	npad	1
$LN1@Construct:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Construct
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN12@Construct:
	DD	4
	DD	$LN11@Construct
$LN11@Construct:
	DD	-65					; ffffffbfH
	DD	1
	DD	$LN6@Construct
	DD	-84					; ffffffacH
	DD	8
	DD	$LN7@Construct
	DD	-96					; ffffffa0H
	DD	4
	DD	$LN8@Construct
	DD	-108					; ffffff94H
	DD	4
	DD	$LN9@Construct
$LN9@Construct:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN8@Construct:
	DB	95					; 0000005fH
	DB	78					; 0000004eH
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	0
$LN7@Construct:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
$LN6@Construct:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	49					; 00000031H
	DB	52					; 00000034H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z$0:
	lea	ecx, DWORD PTR __Proxy$[ebp]
	jmp	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-332]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$ = ecx

; 1496 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	npad	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >, COMDAT
; _this$ = ecx

; 1501 :         : _Ty1(_STD forward<_Other1>(_Val1)), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Val1$[ebp]
	push	eax
	call	??$forward@V?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::forward<std::allocator<char> >
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z PROC ; std::move<std::allocator<char> &>, COMDAT

; 1547 : _NODISCARD _MSVC_INTRINSIC constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1548 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1549 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ENDP ; std::move<std::allocator<char> &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>, COMDAT
; _this$ = ecx

; 943  :     constexpr allocator(const allocator<_Other>&) noexcept {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Convert_size@II@std@@YAII@Z
_TEXT	SEGMENT
__Len$ = 8						; size = 4
??$_Convert_size@II@std@@YAII@Z PROC			; std::_Convert_size<unsigned int,unsigned int>, COMDAT

; 1085 :     sizeof(_Unsigned_type) <= sizeof(_Size_type)) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1086 :     // convert _Unsigned_type to _Size_type, avoiding truncation
; 1087 :     _STL_INTERNAL_STATIC_ASSERT(_Unsigned_type(-1) > 0);
; 1088 :     _STL_INTERNAL_STATIC_ASSERT(_Size_type(-1) > 0);
; 1089 : 
; 1090 :     if constexpr (sizeof(_Unsigned_type) > sizeof(_Size_type)) {
; 1091 :         if (_Len > (numeric_limits<_Size_type>::max)()) {
; 1092 :             _Xlength_error("size is too long for _Size_type");
; 1093 :         }
; 1094 :     }
; 1095 : 
; 1096 :     return static_cast<_Size_type>(_Len);

	mov	eax, DWORD PTR __Len$[ebp]

; 1097 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Convert_size@II@std@@YAII@Z ENDP			; std::_Convert_size<unsigned int,unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\utility
;	COMDAT ??$min@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
$T1 = -200						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@I@std@@YAABIABI0@Z PROC				; std::min<unsigned int>, COMDAT

; 95   :     (min) (const _Ty& _Left, const _Ty& _Right) noexcept(noexcept(_Right < _Left)) /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi

; 96   :     // return smaller of _Left and _Right
; 97   :     return _Right < _Left ? _Right : _Left;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jae	SHORT $LN3@min
	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR tv65[ebp], eax
	jmp	SHORT $LN4@min
$LN3@min:
	mov	ecx, DWORD PTR __Left$[ebp]
	mov	DWORD PTR tv65[ebp], ecx
$LN4@min:
	mov	edx, DWORD PTR tv65[ebp]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]

; 98   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$min@I@std@@YAABIABI0@Z ENDP				; std::min<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@VCVec@@@std@@V?$_Vector_val@U?$_Simple_types@VCVec@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@VCVec@@@std@@V?$_Vector_val@U?$_Simple_types@VCVec@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<CVec>,std::_Vector_val<std::_Simple_types<CVec> >,1>::_Compressed_pair<std::allocator<CVec>,std::_Vector_val<std::_Simple_types<CVec> >,1><>, COMDAT
; _this$ = ecx

; 1496 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@VCVec@@@std@@QAE@XZ	; std::allocator<CVec>::allocator<CVec>
	npad	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@VCVec@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<CVec> >::_Vector_val<std::_Simple_types<CVec> >
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@VCVec@@@std@@V?$_Vector_val@U?$_Simple_types@VCVec@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<CVec>,std::_Vector_val<std::_Simple_types<CVec> >,1>::_Compressed_pair<std::allocator<CVec>,std::_Vector_val<std::_Simple_types<CVec> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$?0VCVec@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@VCVec@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0VCVec@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@VCVec@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><CVec>, COMDAT
; _this$ = ecx

; 943  :     constexpr allocator(const allocator<_Other>&) noexcept {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0VCVec@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@VCVec@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><CVec>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??$_Emplace_one_at_back@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAVCVec@@ABV2@@Z
_TEXT	SEGMENT
__Mylast$ = -32						; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_one_at_back@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAVCVec@@ABV2@@Z PROC ; std::vector<CVec,std::allocator<CVec> >::_Emplace_one_at_back<CVec const &>, COMDAT
; _this$ = ecx

; 770  :     _CONSTEXPR20 _Ty& _Emplace_one_at_back(_Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 771  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 772  :         auto& _My_data   = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 773  :         pointer& _Mylast = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 774  : 
; 775  :         if (_Mylast != _My_data._Myend) {

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+12]
	je	SHORT $LN2@Emplace_on

; 776  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@ABVCVec@@@std@@YAABVCVec@@ABV1@@Z ; std::forward<CVec const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_back_with_unused_capacity@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAVCVec@@ABV2@@Z ; std::vector<CVec,std::allocator<CVec> >::_Emplace_back_with_unused_capacity<CVec const &>
	jmp	SHORT $LN1@Emplace_on
$LN2@Emplace_on:

; 777  :         }
; 778  : 
; 779  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@ABVCVec@@@std@@YAABVCVec@@ABV1@@Z ; std::forward<CVec const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_reallocate@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@ABV2@@Z ; std::vector<CVec,std::allocator<CVec> >::_Emplace_reallocate<CVec const &>
$LN1@Emplace_on:

; 780  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_one_at_back@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAVCVec@@ABV2@@Z ENDP ; std::vector<CVec,std::allocator<CVec> >::_Emplace_one_at_back<CVec const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??$_Emplace_one_at_back@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAVCVec@@$$QAV2@@Z
_TEXT	SEGMENT
__Mylast$ = -32						; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_one_at_back@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAVCVec@@$$QAV2@@Z PROC ; std::vector<CVec,std::allocator<CVec> >::_Emplace_one_at_back<CVec>, COMDAT
; _this$ = ecx

; 770  :     _CONSTEXPR20 _Ty& _Emplace_one_at_back(_Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 771  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 772  :         auto& _My_data   = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 773  :         pointer& _Mylast = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 774  : 
; 775  :         if (_Mylast != _My_data._Myend) {

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+12]
	je	SHORT $LN2@Emplace_on

; 776  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@VCVec@@@std@@YA$$QAVCVec@@AAV1@@Z ; std::forward<CVec>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_back_with_unused_capacity@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAVCVec@@$$QAV2@@Z ; std::vector<CVec,std::allocator<CVec> >::_Emplace_back_with_unused_capacity<CVec>
	jmp	SHORT $LN1@Emplace_on
$LN2@Emplace_on:

; 777  :         }
; 778  : 
; 779  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@VCVec@@@std@@YA$$QAVCVec@@AAV1@@Z ; std::forward<CVec>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_reallocate@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEPAVCVec@@QAV2@$$QAV2@@Z ; std::vector<CVec,std::allocator<CVec> >::_Emplace_reallocate<CVec>
$LN1@Emplace_on:

; 780  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_one_at_back@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAVCVec@@$$QAV2@@Z ENDP ; std::vector<CVec,std::allocator<CVec> >::_Emplace_one_at_back<CVec>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$move@AAVCVec@@@std@@YA$$QAVCVec@@AAV1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAVCVec@@@std@@YA$$QAVCVec@@AAV1@@Z PROC	; std::move<CVec &>, COMDAT

; 1547 : _NODISCARD _MSVC_INTRINSIC constexpr remove_reference_t<_Ty>&& move(_Ty&& _Arg) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1548 :     return static_cast<remove_reference_t<_Ty>&&>(_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1549 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$move@AAVCVec@@@std@@YA$$QAVCVec@@AAV1@@Z ENDP	; std::move<CVec &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??$_Assign_counted_range@PAVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXPAVCVec@@I@Z
_TEXT	SEGMENT
__Newlast$1 = -140					; size = 4
__Mid$2 = -128						; size = 4
__Copied$3 = -113					; size = 1
__Oldsize$ = -104					; size = 4
__Oldcapacity$ = -92					; size = 4
__Nothrow_construct$ = -77				; size = 1
__Myend$ = -68						; size = 4
__Mylast$ = -56						; size = 4
__Myfirst$ = -44					; size = 4
__My_data$ = -32					; size = 4
__Al$ = -20						; size = 4
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Newsize$ = 12						; size = 4
??$_Assign_counted_range@PAVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXPAVCVec@@I@Z PROC ; std::vector<CVec,std::allocator<CVec> >::_Assign_counted_range<CVec *>, COMDAT
; _this$ = ecx

; 1375 :     _CONSTEXPR20 void _Assign_counted_range(_Iter _First, const size_type _Newsize) {

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-144]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1376 :         // assign elements from counted range _First + [0, _Newsize)
; 1377 :         auto& _Al         = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAV?$allocator@VCVec@@@2@XZ ; std::vector<CVec,std::allocator<CVec> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 1378 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1379 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	mov	DWORD PTR __Myfirst$[ebp], eax

; 1380 :         pointer& _Mylast  = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 1381 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 1382 : 
; 1383 :         constexpr bool _Nothrow_construct = conjunction_v<is_nothrow_constructible<_Ty, _Iter_ref_t<_Iter>>,

	mov	BYTE PTR __Nothrow_construct$[ebp], 1

; 1384 :             _Uses_default_construct<_Alloc, _Ty*, _Iter_ref_t<_Iter>>>;
; 1385 : 
; 1386 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
	npad	1

; 1387 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

	mov	eax, DWORD PTR __Myend$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR __Oldcapacity$[ebp], eax

; 1388 :         if (_Newsize > _Oldcapacity) {

	mov	eax, DWORD PTR __Newsize$[ebp]
	cmp	eax, DWORD PTR __Oldcapacity$[ebp]
	jbe	SHORT $LN5@Assign_cou

; 1389 :             _Clear_and_reserve_geometric(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Clear_and_reserve_geometric@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXI@Z ; std::vector<CVec,std::allocator<CVec> >::_Clear_and_reserve_geometric
	npad	1

; 1390 :             if constexpr (_Nothrow_construct) {
; 1391 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize, _Myfirst, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$move@AAPAVCVec@@@std@@YA$$QAPAVCVec@@AAPAV1@@Z ; std::move<CVec * &>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	??$_Uninitialized_copy_n@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@I0AAV?$allocator@VCVec@@@0@@Z ; std::_Uninitialized_copy_n<CVec *,std::allocator<CVec> >
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [ecx], eax

; 1392 :                 _ASAN_VECTOR_CREATE;
; 1393 :             } else {
; 1394 :                 _ASAN_VECTOR_CREATE_GUARD;
; 1395 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize, _Myfirst, _Al);
; 1396 :             }
; 1397 :             return;

	jmp	$LN1@Assign_cou
$LN5@Assign_cou:

; 1398 :         }
; 1399 : 
; 1400 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR __Oldsize$[ebp], eax

; 1401 :         if (_Newsize > _Oldsize) {

	mov	eax, DWORD PTR __Newsize$[ebp]
	cmp	eax, DWORD PTR __Oldsize$[ebp]
	jbe	$LN6@Assign_cou

; 1402 :             bool _Copied = false;

	mov	BYTE PTR __Copied$3[ebp], 0

; 1403 :             if constexpr (_Iter_copy_cat<_Iter, pointer>::_Bitcopy_assignable) {
; 1404 : #if _HAS_CXX20
; 1405 :                 if (!_STD is_constant_evaluated())
; 1406 : #endif // _HAS_CXX20
; 1407 :                 {
; 1408 :                     _Copy_memmove_n(_First, static_cast<size_t>(_Oldsize), _Myfirst);

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Oldsize$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Copy_memmove_n@PAVCVec@@PAV1@@std@@YAPAVCVec@@PAV1@I0@Z ; std::_Copy_memmove_n<CVec *,CVec *>
	add	esp, 12					; 0000000cH

; 1409 :                     _First += _Oldsize;

	imul	eax, DWORD PTR __Oldsize$[ebp], 24
	add	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __First$[ebp], eax

; 1410 :                     _Copied = true;

	mov	BYTE PTR __Copied$3[ebp], 1

; 1411 :                 }
; 1412 :             }
; 1413 : 
; 1414 :             if (!_Copied) {

	movzx	eax, BYTE PTR __Copied$3[ebp]
	test	eax, eax
	jne	SHORT $LN3@Assign_cou

; 1415 :                 for (auto _Mid = _Myfirst; _Mid != _Mylast; ++_Mid, (void) ++_First) {

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Mid$2[ebp], ecx
	jmp	SHORT $LN4@Assign_cou
$LN2@Assign_cou:
	mov	eax, DWORD PTR __Mid$2[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR __Mid$2[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 24					; 00000018H
	mov	DWORD PTR __First$[ebp], ecx
$LN4@Assign_cou:
	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __Mid$2[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN3@Assign_cou

; 1416 :                     *_Mid = *_First;

	mov	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Mid$2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+20], eax

; 1417 :                 }

	jmp	SHORT $LN2@Assign_cou
$LN3@Assign_cou:

; 1418 :             }
; 1419 : 
; 1420 :             if constexpr (_Nothrow_construct) {
; 1421 :                 _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1422 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize - _Oldsize, _Mylast, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __Newsize$[ebp]
	sub	eax, DWORD PTR __Oldsize$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$move@AAPAVCVec@@@std@@YA$$QAPAVCVec@@AAPAV1@@Z ; std::move<CVec * &>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	??$_Uninitialized_copy_n@PAVCVec@@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@I0AAV?$allocator@VCVec@@@0@@Z ; std::_Uninitialized_copy_n<CVec *,std::allocator<CVec> >
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [ecx], eax

; 1423 :             } else {
; 1424 :                 _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1425 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize - _Oldsize, _Mylast, _Al);
; 1426 :                 _ASAN_VECTOR_RELEASE_GUARD;
; 1427 :             }
; 1428 :         } else {

	jmp	SHORT $LN7@Assign_cou
$LN6@Assign_cou:

; 1429 :             const pointer _Newlast = _Myfirst + _Newsize;

	imul	eax, DWORD PTR __Newsize$[ebp], 24
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR __Newlast$1[ebp], eax

; 1430 :             _STD _Copy_n_unchecked4(_STD move(_First), _Newsize, _Myfirst);

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$move@AAPAVCVec@@@std@@YA$$QAPAVCVec@@AAPAV1@@Z ; std::move<CVec * &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Copy_n_unchecked4@PAVCVec@@IPAV1@@std@@YAPAVCVec@@PAV1@I0@Z ; std::_Copy_n_unchecked4<CVec *,unsigned int,CVec *>
	add	esp, 12					; 0000000cH

; 1431 :             _STD _Destroy_range(_Newlast, _Mylast, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __Newlast$1[ebp]
	push	eax
	call	??$_Destroy_range@V?$allocator@VCVec@@@std@@@std@@YAXPAVCVec@@QAV1@AAV?$allocator@VCVec@@@0@@Z ; std::_Destroy_range<std::allocator<CVec> >
	add	esp, 12					; 0000000cH

; 1432 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1433 :             _Mylast = _Newlast;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __Newlast$1[ebp]
	mov	DWORD PTR [eax], ecx
$LN7@Assign_cou:
$LN1@Assign_cou:

; 1434 :         }
; 1435 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Assign_counted_range@PAVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXPAVCVec@@I@Z ENDP ; std::vector<CVec,std::allocator<CVec> >::_Assign_counted_range<CVec *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Pocca@V?$allocator@VCVec@@@std@@@std@@YAXAAV?$allocator@VCVec@@@0@ABV10@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocca@V?$allocator@VCVec@@@std@@@std@@YAXAAV?$allocator@VCVec@@@0@ABV10@@Z PROC ; std::_Pocca<std::allocator<CVec> >, COMDAT

; 1040 : _CONSTEXPR20 void _Pocca(_Alloc& _Left, const _Alloc& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1041 :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_copy_assignment::value) {
; 1042 :         _Left = _Right;
; 1043 :     }
; 1044 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Pocca@V?$allocator@VCVec@@@std@@@std@@YAXAAV?$allocator@VCVec@@@0@ABV10@@Z ENDP ; std::_Pocca<std::allocator<CVec> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$addressof@$$CBV?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@@std@@YAPBV?$vector@VCVec@@V?$allocator@VCVec@@@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@@std@@YAPBV?$vector@VCVec@@V?$allocator@VCVec@@@std@@@0@ABV10@@Z PROC ; std::addressof<std::vector<CVec,std::allocator<CVec> > const >, COMDAT

; 1559 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1560 :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 1561 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@$$CBV?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@@std@@YAPBV?$vector@VCVec@@V?$allocator@VCVec@@@std@@@0@ABV10@@Z ENDP ; std::addressof<std::vector<CVec,std::allocator<CVec> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??$_Resize@U_Value_init_tag@std@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z
_TEXT	SEGMENT
__Oldlast$1 = -104					; size = 4
__Oldcapacity$2 = -92					; size = 4
__Newlast$3 = -80					; size = 4
__Oldsize$ = -68					; size = 4
__Mylast$ = -56						; size = 4
__Myfirst$ = -44					; size = 4
__My_data$ = -32					; size = 4
__Al$ = -20						; size = 4
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Resize@U_Value_init_tag@std@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z PROC ; std::vector<CVec,std::allocator<CVec> >::_Resize<std::_Value_init_tag>, COMDAT
; _this$ = ecx

; 1545 :     _CONSTEXPR20 void _Resize(const size_type _Newsize, const _Ty2& _Val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 300				; 0000012cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-108]
	mov	ecx, 27					; 0000001bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1546 :         // trim or append elements, provide strong guarantee
; 1547 :         auto& _Al           = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAV?$allocator@VCVec@@@2@XZ ; std::vector<CVec,std::allocator<CVec> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 1548 :         auto& _My_data      = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1549 :         pointer& _Myfirst   = _My_data._Myfirst;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	mov	DWORD PTR __Myfirst$[ebp], eax

; 1550 :         pointer& _Mylast    = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 1551 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR __Oldsize$[ebp], eax

; 1552 :         if (_Newsize < _Oldsize) { // trim

	mov	eax, DWORD PTR __Newsize$[ebp]
	cmp	eax, DWORD PTR __Oldsize$[ebp]
	jae	SHORT $LN2@Resize

; 1553 :             const pointer _Newlast = _Myfirst + _Newsize;

	imul	eax, DWORD PTR __Newsize$[ebp], 24
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	DWORD PTR __Newlast$3[ebp], eax

; 1554 :             _Orphan_range(_Newlast, _Mylast);

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Newlast$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z ; std::vector<CVec,std::allocator<CVec> >::_Orphan_range
	npad	1

; 1555 :             _Destroy_range(_Newlast, _Mylast, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __Newlast$3[ebp]
	push	eax
	call	??$_Destroy_range@V?$allocator@VCVec@@@std@@@std@@YAXPAVCVec@@QAV1@AAV?$allocator@VCVec@@@0@@Z ; std::_Destroy_range<std::allocator<CVec> >
	add	esp, 12					; 0000000cH

; 1556 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1557 :             _Mylast = _Newlast;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __Newlast$3[ebp]
	mov	DWORD PTR [eax], ecx

; 1558 :             return;

	jmp	SHORT $LN1@Resize
$LN2@Resize:

; 1559 :         }
; 1560 : 
; 1561 :         if (_Newsize > _Oldsize) { // append

	mov	eax, DWORD PTR __Newsize$[ebp]
	cmp	eax, DWORD PTR __Oldsize$[ebp]
	jbe	SHORT $LN3@Resize

; 1562 :             const auto _Oldcapacity = static_cast<size_type>(_My_data._Myend - _Myfirst);

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	mov	DWORD PTR __Oldcapacity$2[ebp], eax

; 1563 :             if (_Newsize > _Oldcapacity) { // reallocate

	mov	eax, DWORD PTR __Newsize$[ebp]
	cmp	eax, DWORD PTR __Oldcapacity$2[ebp]
	jbe	SHORT $LN4@Resize

; 1564 :                 _Resize_reallocate(_Newsize, _Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Resize_reallocate@U_Value_init_tag@std@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<CVec,std::allocator<CVec> >::_Resize_reallocate<std::_Value_init_tag>
	npad	1

; 1565 :                 return;

	jmp	SHORT $LN1@Resize
$LN4@Resize:

; 1566 :             }
; 1567 : 
; 1568 :             _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1569 :             const pointer _Oldlast = _Mylast;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Oldlast$1[ebp], ecx

; 1570 :             if constexpr (is_same_v<_Ty2, _Ty>) {
; 1571 :                 _Mylast = _Uninitialized_fill_n(_Oldlast, _Newsize - _Oldsize, _Val, _Al);
; 1572 :             } else {
; 1573 :                 _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Ty2, _Value_init_tag>);
; 1574 :                 _Mylast = _Uninitialized_value_construct_n(_Oldlast, _Newsize - _Oldsize, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	sub	ecx, DWORD PTR __Oldsize$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Oldlast$1[ebp]
	push	edx
	call	??$_Uninitialized_value_construct_n@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@PAV1@IAAV?$allocator@VCVec@@@0@@Z ; std::_Uninitialized_value_construct_n<std::allocator<CVec> >
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [ecx], eax

; 1575 :             }
; 1576 :             _ASAN_VECTOR_RELEASE_GUARD;
; 1577 :             _Orphan_range(_Oldlast, _Oldlast);

	mov	eax, DWORD PTR __Oldlast$1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Oldlast$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z ; std::vector<CVec,std::allocator<CVec> >::_Orphan_range
	npad	1
$LN3@Resize:
$LN1@Resize:

; 1578 :         }
; 1579 : 
; 1580 :         // if _Newsize == _Oldsize, do nothing; avoid invalidating iterators
; 1581 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 300				; 0000012cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Resize@U_Value_init_tag@std@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ENDP ; std::vector<CVec,std::allocator<CVec> >::_Resize<std::_Value_init_tag>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Destroy_range@V?$allocator@VCVec@@@std@@@std@@YAXPAVCVec@@QAV1@AAV?$allocator@VCVec@@@0@@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@VCVec@@@std@@@std@@YAXPAVCVec@@QAV1@AAV?$allocator@VCVec@@@0@@Z PROC ; std::_Destroy_range<std::allocator<CVec> >, COMDAT

; 1063 : _CONSTEXPR20 void _Destroy_range(_Alloc_ptr_t<_Alloc> _First, const _Alloc_ptr_t<_Alloc> _Last, _Alloc& _Al) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$_Destroy_range@V?$allocator@VCVec@@@std@@@std@@YAXPAVCVec@@QAV1@AAV?$allocator@VCVec@@@0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 1064 :     // note that this is an optimization for debug mode codegen; in release mode the BE removes all of this
; 1065 :     using _Ty = typename _Alloc::value_type;
; 1066 :     if constexpr (!conjunction_v<is_trivially_destructible<_Ty>, _Uses_default_destroy<_Alloc, _Ty*>>) {
; 1067 :         for (; _First != _Last; ++_First) {

	jmp	SHORT $LN4@Destroy_ra
$LN2@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR __First$[ebp], eax
$LN4@Destroy_ra:
	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	je	SHORT $LN3@Destroy_ra

; 1068 :             allocator_traits<_Alloc>::destroy(_Al, _STD _Unfancy(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unfancy@VCVec@@@std@@YAPAVCVec@@PAV1@@Z ; std::_Unfancy<CVec>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$destroy@VCVec@@@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAXAAV?$allocator@VCVec@@@1@QAVCVec@@@Z ; std::_Default_allocator_traits<std::allocator<CVec> >::destroy<CVec>
	add	esp, 8

; 1069 :         }

	jmp	SHORT $LN2@Destroy_ra
$LN3@Destroy_ra:

; 1070 :     }
; 1071 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Destroy_range@V?$allocator@VCVec@@@std@@@std@@YAXPAVCVec@@QAV1@AAV?$allocator@VCVec@@@0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??$_Destroy_range@V?$allocator@VCVec@@@std@@@std@@YAXPAVCVec@@QAV1@AAV?$allocator@VCVec@@@0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$_Destroy_range@V?$allocator@VCVec@@@std@@@std@@YAXPAVCVec@@QAV1@AAV?$allocator@VCVec@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<CVec> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z
_TEXT	SEGMENT
$T1 = -224						; size = 4
__New_proxy$ = -20					; size = 4
_this$ = -8						; size = 4
__Al$ = 8						; size = 4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z PROC ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >, COMDAT
; _this$ = ecx

; 1184 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1185 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));

	push	1
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
	push	eax
	call	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
	add	esp, 4
	mov	DWORD PTR __New_proxy$[ebp], eax

; 1186 :         _Construct_in_place(*_New_proxy, this);

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	edx, DWORD PTR __New_proxy$[ebp]
	push	edx
	call	??$_Construct_in_place@U_Container_proxy@std@@PAU_Container_base12@2@@std@@YAXAAU_Container_proxy@0@$$QAPAU_Container_base12@0@@Z ; std::_Construct_in_place<std::_Container_proxy,std::_Container_base12 *>
	add	esp, 8

; 1187 :         _Myproxy            = _New_proxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __New_proxy$[ebp]
	mov	DWORD PTR [eax], ecx

; 1188 :         _New_proxy->_Mycont = this;

	mov	eax, DWORD PTR __New_proxy$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], ecx

; 1189 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ENDP ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$?0$$V@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1><>, COMDAT
; _this$ = ecx

; 1496 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$allocator@M@std@@QAE@XZ		; std::allocator<float>::allocator<float>
	npad	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@M@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<float> >::_Vector_val<std::_Simple_types<float> >
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0$$V@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1><>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\utility
;	COMDAT ??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -8						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Container_proxy *,std::nullptr_t>, COMDAT

; 754  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi

; 755  :     // assign _New_val to _Val, return previous _Val
; 756  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old_val$[ebp], ecx

; 757  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR __New_val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 758  :     return _Old_val;

	mov	eax, DWORD PTR __Old_val$[ebp]

; 759  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Container_proxy *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$?0M@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@M@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0M@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@M@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><float>, COMDAT
; _this$ = ecx

; 943  :     constexpr allocator(const allocator<_Other>&) noexcept {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0M@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@M@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??$_Emplace_one_at_back@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEAAMABM@Z
_TEXT	SEGMENT
__Mylast$ = -32						; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
_<_Val_0>$ = 8						; size = 4
??$_Emplace_one_at_back@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEAAMABM@Z PROC ; std::vector<float,std::allocator<float> >::_Emplace_one_at_back<float const &>, COMDAT
; _this$ = ecx

; 770  :     _CONSTEXPR20 _Ty& _Emplace_one_at_back(_Valty&&... _Val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 771  :         // insert by perfectly forwarding into element at end, provide strong guarantee
; 772  :         auto& _My_data   = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 773  :         pointer& _Mylast = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 774  : 
; 775  :         if (_Mylast != _My_data._Myend) {

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+12]
	je	SHORT $LN2@Emplace_on

; 776  :             return _Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@ABM@std@@YAABMABM@Z		; std::forward<float const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_back_with_unused_capacity@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEAAMABM@Z ; std::vector<float,std::allocator<float> >::_Emplace_back_with_unused_capacity<float const &>
	jmp	SHORT $LN1@Emplace_on
$LN2@Emplace_on:

; 777  :         }
; 778  : 
; 779  :         return *_Emplace_reallocate(_Mylast, _STD forward<_Valty>(_Val)...);

	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	push	eax
	call	??$forward@ABM@std@@YAABMABM@Z		; std::forward<float const &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_reallocate@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEPAMQAMABM@Z ; std::vector<float,std::allocator<float> >::_Emplace_reallocate<float const &>
$LN1@Emplace_on:

; 780  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Emplace_one_at_back@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEAAMABM@Z ENDP ; std::vector<float,std::allocator<float> >::_Emplace_one_at_back<float const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??$_Assign_counted_range@PAM@?$vector@MV?$allocator@M@std@@@std@@AAEXPAMI@Z
_TEXT	SEGMENT
__Newlast$1 = -140					; size = 4
__Mid$2 = -128						; size = 4
__Copied$3 = -113					; size = 1
__Oldsize$ = -104					; size = 4
__Oldcapacity$ = -92					; size = 4
__Nothrow_construct$ = -77				; size = 1
__Myend$ = -68						; size = 4
__Mylast$ = -56						; size = 4
__Myfirst$ = -44					; size = 4
__My_data$ = -32					; size = 4
__Al$ = -20						; size = 4
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Newsize$ = 12						; size = 4
??$_Assign_counted_range@PAM@?$vector@MV?$allocator@M@std@@@std@@AAEXPAMI@Z PROC ; std::vector<float,std::allocator<float> >::_Assign_counted_range<float *>, COMDAT
; _this$ = ecx

; 1375 :     _CONSTEXPR20 void _Assign_counted_range(_Iter _First, const size_type _Newsize) {

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-144]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1376 :         // assign elements from counted range _First + [0, _Newsize)
; 1377 :         auto& _Al         = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@MV?$allocator@M@std@@@std@@AAEAAV?$allocator@M@2@XZ ; std::vector<float,std::allocator<float> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 1378 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1379 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	mov	DWORD PTR __Myfirst$[ebp], eax

; 1380 :         pointer& _Mylast  = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 1381 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 1382 : 
; 1383 :         constexpr bool _Nothrow_construct = conjunction_v<is_nothrow_constructible<_Ty, _Iter_ref_t<_Iter>>,

	mov	BYTE PTR __Nothrow_construct$[ebp], 1

; 1384 :             _Uses_default_construct<_Alloc, _Ty*, _Iter_ref_t<_Iter>>>;
; 1385 : 
; 1386 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
	npad	1

; 1387 :         const auto _Oldcapacity = static_cast<size_type>(_Myend - _Myfirst);

	mov	eax, DWORD PTR __Myend$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 2
	mov	DWORD PTR __Oldcapacity$[ebp], edx

; 1388 :         if (_Newsize > _Oldcapacity) {

	mov	eax, DWORD PTR __Newsize$[ebp]
	cmp	eax, DWORD PTR __Oldcapacity$[ebp]
	jbe	SHORT $LN5@Assign_cou

; 1389 :             _Clear_and_reserve_geometric(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Clear_and_reserve_geometric@?$vector@MV?$allocator@M@std@@@std@@AAEXI@Z ; std::vector<float,std::allocator<float> >::_Clear_and_reserve_geometric
	npad	1

; 1390 :             if constexpr (_Nothrow_construct) {
; 1391 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize, _Myfirst, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$move@AAPAM@std@@YA$$QAPAMAAPAM@Z	; std::move<float * &>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	??$_Uninitialized_copy_n@PAMV?$allocator@M@std@@@std@@YAPAMPAMI0AAV?$allocator@M@0@@Z ; std::_Uninitialized_copy_n<float *,std::allocator<float> >
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [ecx], eax

; 1392 :                 _ASAN_VECTOR_CREATE;
; 1393 :             } else {
; 1394 :                 _ASAN_VECTOR_CREATE_GUARD;
; 1395 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize, _Myfirst, _Al);
; 1396 :             }
; 1397 :             return;

	jmp	$LN1@Assign_cou
$LN5@Assign_cou:

; 1398 :         }
; 1399 : 
; 1400 :         const auto _Oldsize = static_cast<size_type>(_Mylast - _Myfirst);

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 2
	mov	DWORD PTR __Oldsize$[ebp], edx

; 1401 :         if (_Newsize > _Oldsize) {

	mov	eax, DWORD PTR __Newsize$[ebp]
	cmp	eax, DWORD PTR __Oldsize$[ebp]
	jbe	$LN6@Assign_cou

; 1402 :             bool _Copied = false;

	mov	BYTE PTR __Copied$3[ebp], 0

; 1403 :             if constexpr (_Iter_copy_cat<_Iter, pointer>::_Bitcopy_assignable) {
; 1404 : #if _HAS_CXX20
; 1405 :                 if (!_STD is_constant_evaluated())
; 1406 : #endif // _HAS_CXX20
; 1407 :                 {
; 1408 :                     _Copy_memmove_n(_First, static_cast<size_t>(_Oldsize), _Myfirst);

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Oldsize$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Copy_memmove_n@PAMPAM@std@@YAPAMPAMI0@Z ; std::_Copy_memmove_n<float *,float *>
	add	esp, 12					; 0000000cH

; 1409 :                     _First += _Oldsize;

	mov	eax, DWORD PTR __Oldsize$[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR __First$[ebp], edx

; 1410 :                     _Copied = true;

	mov	BYTE PTR __Copied$3[ebp], 1

; 1411 :                 }
; 1412 :             }
; 1413 : 
; 1414 :             if (!_Copied) {

	movzx	eax, BYTE PTR __Copied$3[ebp]
	test	eax, eax
	jne	SHORT $LN3@Assign_cou

; 1415 :                 for (auto _Mid = _Myfirst; _Mid != _Mylast; ++_Mid, (void) ++_First) {

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Mid$2[ebp], ecx
	jmp	SHORT $LN4@Assign_cou
$LN2@Assign_cou:
	mov	eax, DWORD PTR __Mid$2[ebp]
	add	eax, 4
	mov	DWORD PTR __Mid$2[ebp], eax
	mov	ecx, DWORD PTR __First$[ebp]
	add	ecx, 4
	mov	DWORD PTR __First$[ebp], ecx
$LN4@Assign_cou:
	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __Mid$2[ebp]
	cmp	ecx, DWORD PTR [eax]
	je	SHORT $LN3@Assign_cou

; 1416 :                     *_Mid = *_First;

	mov	eax, DWORD PTR __Mid$2[ebp]
	mov	ecx, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 1417 :                 }

	jmp	SHORT $LN2@Assign_cou
$LN3@Assign_cou:

; 1418 :             }
; 1419 : 
; 1420 :             if constexpr (_Nothrow_construct) {
; 1421 :                 _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1422 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize - _Oldsize, _Mylast, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __Newsize$[ebp]
	sub	eax, DWORD PTR __Oldsize$[ebp]
	push	eax
	lea	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$move@AAPAM@std@@YA$$QAPAMAAPAM@Z	; std::move<float * &>
	add	esp, 4
	mov	edx, DWORD PTR [eax]
	push	edx
	call	??$_Uninitialized_copy_n@PAMV?$allocator@M@std@@@std@@YAPAMPAMI0AAV?$allocator@M@0@@Z ; std::_Uninitialized_copy_n<float *,std::allocator<float> >
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [ecx], eax

; 1423 :             } else {
; 1424 :                 _ASAN_VECTOR_EXTEND_GUARD(_Newsize);
; 1425 :                 _Mylast = _STD _Uninitialized_copy_n(_STD move(_First), _Newsize - _Oldsize, _Mylast, _Al);
; 1426 :                 _ASAN_VECTOR_RELEASE_GUARD;
; 1427 :             }
; 1428 :         } else {

	jmp	SHORT $LN7@Assign_cou
$LN6@Assign_cou:

; 1429 :             const pointer _Newlast = _Myfirst + _Newsize;

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Newsize$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR __Newlast$1[ebp], eax

; 1430 :             _STD _Copy_n_unchecked4(_STD move(_First), _Newsize, _Myfirst);

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Newsize$[ebp]
	push	edx
	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$move@AAPAM@std@@YA$$QAPAMAAPAM@Z	; std::move<float * &>
	add	esp, 4
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Copy_n_unchecked4@PAMIPAM@std@@YAPAMPAMI0@Z ; std::_Copy_n_unchecked4<float *,unsigned int,float *>
	add	esp, 12					; 0000000cH

; 1431 :             _STD _Destroy_range(_Newlast, _Mylast, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __Newlast$1[ebp]
	push	eax
	call	??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAMQAMAAV?$allocator@M@0@@Z ; std::_Destroy_range<std::allocator<float> >
	add	esp, 12					; 0000000cH

; 1432 :             _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Newsize - _Oldsize));
; 1433 :             _Mylast = _Newlast;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __Newlast$1[ebp]
	mov	DWORD PTR [eax], ecx
$LN7@Assign_cou:
$LN1@Assign_cou:

; 1434 :         }
; 1435 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 336				; 00000150H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Assign_counted_range@PAM@?$vector@MV?$allocator@M@std@@@std@@AAEXPAMI@Z ENDP ; std::vector<float,std::allocator<float> >::_Assign_counted_range<float *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Pocca@V?$allocator@M@std@@@std@@YAXAAV?$allocator@M@0@ABV10@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocca@V?$allocator@M@std@@@std@@YAXAAV?$allocator@M@0@ABV10@@Z PROC ; std::_Pocca<std::allocator<float> >, COMDAT

; 1040 : _CONSTEXPR20 void _Pocca(_Alloc& _Left, const _Alloc& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1041 :     if constexpr (allocator_traits<_Alloc>::propagate_on_container_copy_assignment::value) {
; 1042 :         _Left = _Right;
; 1043 :     }
; 1044 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Pocca@V?$allocator@M@std@@@std@@YAXAAV?$allocator@M@0@ABV10@@Z ENDP ; std::_Pocca<std::allocator<float> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??$addressof@$$CBV?$vector@MV?$allocator@M@std@@@std@@@std@@YAPBV?$vector@MV?$allocator@M@std@@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$vector@MV?$allocator@M@std@@@std@@@std@@YAPBV?$vector@MV?$allocator@M@std@@@0@ABV10@@Z PROC ; std::addressof<std::vector<float,std::allocator<float> > const >, COMDAT

; 1559 : _NODISCARD constexpr _Ty* addressof(_Ty& _Val) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 1560 :     return __builtin_addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]

; 1561 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$addressof@$$CBV?$vector@MV?$allocator@M@std@@@std@@@std@@YAPBV?$vector@MV?$allocator@M@std@@@0@ABV10@@Z ENDP ; std::addressof<std::vector<float,std::allocator<float> > const >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z PROC ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >, COMDAT

; 1112 : _CONSTEXPR20 void _Delete_plain_internal(_Alloc& _Al, typename _Alloc::value_type* const _Ptr) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1113 :     // destroy *_Ptr in place, then deallocate _Ptr using _Al; used for internal container types the user didn't name
; 1114 :     using _Ty = typename _Alloc::value_type;
; 1115 :     _Ptr->~_Ty();
; 1116 :     _STD _Deallocate_plain(_Al, _Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Deallocate_plain@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Deallocate_plain<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 1117 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ENDP ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??$?0U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??$?0U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >, COMDAT
; _this$ = ecx

; 943  :     constexpr allocator(const allocator<_Other>&) noexcept {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??$?0U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 953  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 954  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 955  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$07@std@@YAII@Z	; std::_Get_size_of_n<8>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits>
	add	esp, 4

; 956  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Al$ = 8						; size = 4
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >, COMDAT
; _this$ = ecx

; 751  :     void _Erase_head(_Alnode& _Al) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 752  :         this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
	npad	1

; 753  :         _Erase_tree(_Al, _Myhead->_Parent);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
	npad	1

; 754  :         _Alnode::value_type::_Freenode0(_Al, _Myhead);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *>::_Freenode0<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
	add	esp, 8

; 755  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Al$ = 8						; size = 4
__Rootnode$ = 12					; size = 4
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >, COMDAT
; _this$ = ecx

; 743  :     void _Erase_tree(_Alnode& _Al, _Nodeptr _Rootnode) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN2@Erase_tree:

; 744  :         while (!_Rootnode->_Isnil) { // free subtrees, then node

	mov	eax, DWORD PTR __Rootnode$[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@Erase_tree

; 745  :             _Erase_tree(_Al, _Rootnode->_Right);

	mov	eax, DWORD PTR __Rootnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
	npad	1

; 746  :             _Alnode::value_type::_Freenode(_Al, _STD exchange(_Rootnode, _Rootnode->_Left));

	mov	eax, DWORD PTR __Rootnode$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Rootnode$[ebp]
	push	ecx
	call	??$exchange@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@AAPAU12@@std@@YAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@0@AAPAU10@0@Z ; std::exchange<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * &>
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR __Al$[ebp]
	push	edx
	call	??$_Freenode@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU01@@Z ; std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *>::_Freenode<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
	add	esp, 8

; 747  :         }

	jmp	SHORT $LN2@Erase_tree
$LN3@Erase_tree:

; 748  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\map
;	COMDAT ??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
tv164 = -328						; size = 4
$T1 = -320						; size = 4
$T2 = -305						; size = 1
$T3 = -296						; size = 4
$T4 = -281						; size = 1
$T5 = -272						; size = 8
$T6 = -253						; size = 1
__Inserted$ = -52					; size = 4
__Scary$ = -40						; size = 4
__Loc$ = -28						; size = 12
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Keyval$ = 12						; size = 4
??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Try_emplace<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>, COMDAT
; _this$ = ecx

; 196  :     pair<_Nodeptr, bool> _Try_emplace(_Keyty&& _Keyval, _Mappedty&&... _Mapval) {

	push	ebp
	mov	ebp, esp
	sub	esp, 328				; 00000148H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-136]
	mov	ecx, 34					; 00000022H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 197  :         const auto _Loc = _Mybase::_Find_lower_bound(_Keyval);

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	lea	ecx, DWORD PTR __Loc$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Find_lower_bound@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBE?AU?$_Tree_find_result@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Find_lower_bound<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
	npad	1

; 198  :         if (_Mybase::_Lower_bound_duplicate(_Loc._Bound, _Keyval)) {

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Loc$[ebp+8]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Lower_bound_duplicate@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBE_NQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Lower_bound_duplicate<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@Try_emplac

; 199  :             return {_Loc._Bound, false};

	mov	BYTE PTR $T6[ebp], 0
	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	lea	ecx, DWORD PTR __Loc$[ebp+8]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0ABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N@std@@QAE@ABQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,bool>::pair<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,bool><std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> * const &,bool,0>
	npad	1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	$LN1@Try_emplac
$LN2@Try_emplac:

; 200  :         }
; 201  : 
; 202  :         _Mybase::_Check_grow_by_1();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Check_grow_by_1
	npad	1

; 203  : 
; 204  :         const auto _Scary    = _Mybase::_Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 205  :         const auto _Inserted = _Tree_temp_node<_Alnode>(_Mybase::_Getal(), _Scary->_Myhead, piecewise_construct,

	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??$forward_as_tuple@$$V@std@@YA?AV?$tuple@$$V@0@XZ ; std::forward_as_tuple<>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Keyval$[ebp]
	push	ecx
	call	??$forward@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::forward<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
	add	esp, 4
	push	eax
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	call	??$forward_as_tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA?AV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@0@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z ; std::forward_as_tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
	add	esp, 8
	push	eax
	push	OFFSET ?piecewise_construct@std@@3Upiecewise_construct_t@1@B
	mov	eax, DWORD PTR __Scary$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Getal
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	call	??$?0ABUpiecewise_construct_t@std@@V?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@V?$tuple@$$V@1@@?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@ABUpiecewise_construct_t@1@$$QAV?$tuple@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAV?$tuple@$$V@1@@Z ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > ><std::piecewise_construct_t const &,std::tuple<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>,std::tuple<> >
	mov	DWORD PTR tv164[ebp], eax
	mov	ecx, DWORD PTR tv164[ebp]
	call	?_Release@?$_Alloc_construct_ptr@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@XZ ; std::_Alloc_construct_ptr<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::_Release
	mov	DWORD PTR __Inserted$[ebp], eax
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$_Tree_temp_node@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@QAE@XZ ; std::_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::~_Tree_temp_node<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
	npad	1

; 206  :             _STD forward_as_tuple(_STD forward<_Keyty>(_Keyval)),
; 207  :             _STD forward_as_tuple(_STD forward<_Mappedty>(_Mapval)...))
; 208  :                                    ._Release();
; 209  : 
; 210  :         // nothrow hereafter
; 211  :         return {_Scary->_Insert_node(_Loc._Location, _Inserted), true};

	mov	eax, DWORD PTR __Inserted$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Loc$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR __Loc$[ebp]
	push	edx
	mov	ecx, DWORD PTR __Scary$[ebp]
	call	?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@QAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Insert_node
	mov	DWORD PTR $T1[ebp], eax
	mov	BYTE PTR $T2[ebp], 1
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??$?0PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N$0A@@?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N@std@@QAE@$$QAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@$$QA_N@Z ; std::pair<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,bool>::pair<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,bool><std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> *,bool,0>
	npad	1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN1@Try_emplac:

; 212  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Try_emplac
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 328				; 00000148H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN7@Try_emplac:
	DD	1
	DD	$LN6@Try_emplac
$LN6@Try_emplac:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN5@Try_emplac
$LN5@Try_emplac:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	0
??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Try_emplace<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xutility
;	COMDAT ?pointer_to@?$pointer_traits@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@SAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@2@AAU32@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@SAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@2@AAU32@@Z PROC ; std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> *>::pointer_to, COMDAT

; 439  :     _NODISCARD static _CONSTEXPR20 pointer pointer_to(_Reftype _Val) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 440  :         return _STD addressof(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$addressof@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@YAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@0@AAU10@@Z ; std::addressof<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >
	add	esp, 4

; 441  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?pointer_to@?$pointer_traits@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@SAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@2@AAU32@@Z ENDP ; std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__FcRandom@?4??ScaledVariance@CIdvBezierSpline@@QBEMM@Z@YAXXZ
text$yd	SEGMENT
??__FcRandom@?4??ScaledVariance@CIdvBezierSpline@@QBEMM@Z@YAXXZ PROC ; `CIdvBezierSpline::ScaledVariance'::`5'::`dynamic atexit destructor for 'cRandom'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?cRandom@?4??ScaledVariance@CIdvBezierSpline@@QBEMM@Z@4VCIdvRandom@@A
	call	??1CIdvRandom@@QAE@XZ			; CIdvRandom::~CIdvRandom
	npad	1
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__FcRandom@?4??ScaledVariance@CIdvBezierSpline@@QBEMM@Z@YAXXZ ENDP ; `CIdvBezierSpline::ScaledVariance'::`5'::`dynamic atexit destructor for 'cRandom''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibSpline_Source\IdvSpline.cpp
;	COMDAT ?NextToken@@YAPBDPBDPAD@Z
_TEXT	SEGMENT
_pInput$ = 8						; size = 4
_pToken$ = 12						; size = 4
?NextToken@@YAPBDPBDPAD@Z PROC				; NextToken, COMDAT

; 128  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@NextToken:

; 129  :     while (isspace(*pInput))

	mov	eax, DWORD PTR _pInput$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	esi, esp
	push	ecx
	call	DWORD PTR __imp__isspace
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	je	SHORT $LN3@NextToken

; 130  :         pInput++;

	mov	eax, DWORD PTR _pInput$[ebp]
	add	eax, 1
	mov	DWORD PTR _pInput$[ebp], eax
	jmp	SHORT $LN2@NextToken
$LN3@NextToken:

; 131  :     sscanf(pInput, "%s", pToken);

	mov	eax, DWORD PTR _pToken$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	mov	ecx, DWORD PTR _pInput$[ebp]
	push	ecx
	call	_sscanf
	add	esp, 12					; 0000000cH

; 132  : 
; 133  :     return pInput + strlen(pToken);

	mov	eax, DWORD PTR _pToken$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _pInput$[ebp]

; 134  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?NextToken@@YAPBDPBDPAD@Z ENDP				; NextToken
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__FcRandom@?4??Evaluate@CIdvBezierSpline@@QBEMM@Z@YAXXZ
text$yd	SEGMENT
??__FcRandom@?4??Evaluate@CIdvBezierSpline@@QBEMM@Z@YAXXZ PROC ; `CIdvBezierSpline::Evaluate'::`5'::`dynamic atexit destructor for 'cRandom'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?cRandom@?4??Evaluate@CIdvBezierSpline@@QBEMM@Z@4VCIdvRandom@@A
	call	??1CIdvRandom@@QAE@XZ			; CIdvRandom::~CIdvRandom
	npad	1
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__FcRandom@?4??Evaluate@CIdvBezierSpline@@QBEMM@Z@YAXXZ ENDP ; `CIdvBezierSpline::Evaluate'::`5'::`dynamic atexit destructor for 'cRandom''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_G?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_G?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@QAEPAXI@Z PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@QAE@XZ
	npad	1
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@QAEPAXI@Z ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@QAE@XZ PROC ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@QAE@XZ ENDP ; std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>::~pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___param0$ = 8						; size = 4
___param1$ = 12						; size = 4
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@1@@Z PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___param1$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___param0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@1@@Z
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@1@@Z ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::~_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAE@XZ
	npad	1
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::~_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator++, COMDAT
; _this$ = ecx

; 281  :     _Tree_iterator& operator++() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 282  :         _Mybase::operator++();

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator++
	npad	1

; 283  :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 284  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator->, COMDAT
; _this$ = ecx

; 277  :     _NODISCARD pointer operator->() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 278  :         return pointer_traits<pointer>::pointer_to(**this);

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator*
	push	eax
	call	?pointer_to@?$pointer_traits@PAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@SAPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@2@AAU32@@Z ; std::pointer_traits<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> *>::pointer_to
	add	esp, 4

; 279  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator->
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@XZ PROC ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator*, COMDAT
; _this$ = ecx

; 273  :     _NODISCARD reference operator*() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 274  :         return const_cast<reference>(_Mybase::operator*());

	mov	ecx, DWORD PTR _this$[ebp]
	call	??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@XZ ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator*

; 275  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@XZ ENDP ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___param0$ = 8						; size = 4
___param1$ = 12						; size = 4
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@1@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___param1$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___param0$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@1@@Z ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,std::_Iterator_base12>
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@1@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
	npad	1
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::~_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv69 = -208						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator!=, COMDAT
; _this$ = ecx

; 236  :     _NODISCARD bool operator!=(const _Tree_const_iterator& _Right) const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-16]
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 237  :         return !(*this == _Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator==
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv69[ebp], 0
$LN4@operator:
	movzx	eax, BYTE PTR tv69[ebp]

; 238  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator!=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
tv136 = -208						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator==, COMDAT
; _this$ = ecx

; 227  :     _NODISCARD bool operator==(const _Tree_const_iterator& _Right) const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-16]
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 228  : #if _ITERATOR_DEBUG_LEVEL == 2
; 229  :         _STL_VERIFY(this->_Getcont() == _Right._Getcont(), "map/set iterators incompatible");

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	esi, eax
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	cmp	esi, eax
	jne	SHORT $LN8@operator
	jmp	SHORT $LN6@operator
$LN8@operator:
	mov	esi, esp
	push	OFFSET ??_C@_0BP@OLDKBHLM@map?1set?5iterators?5incompatible@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	229					; 000000e5H
	push	OFFSET ??_C@_0GA@FLCPNMJP@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
$LN11@operator:
	mov	esi, esp
	push	0
	push	229					; 000000e5H
	push	OFFSET ??_C@_1MA@PBGFLPAL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1EC@JLIDLCDH@?$AA?$CC?$AAm?$AAa?$AAp?$AA?1?$AAs?$AAe?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	xor	eax, eax
	jne	SHORT $LN8@operator
$LN6@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator

; 230  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 231  : 
; 232  :         return this->_Ptr == _Right._Ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN12@operator
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN13@operator
$LN12@operator:
	mov	DWORD PTR tv136[ebp], 0
$LN13@operator:
	movzx	eax, BYTE PTR tv136[ebp]

; 233  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator==
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator++, COMDAT
; _this$ = ecx

; 192  :     _Tree_const_iterator& operator++() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@operator:

; 193  : #if _ITERATOR_DEBUG_LEVEL == 2
; 194  :         _STL_VERIFY(this->_Getcont(), "cannot increment value-initialized map/set iterator");

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	test	eax, eax
	je	SHORT $LN14@operator
	jmp	SHORT $LN6@operator
$LN14@operator:
	mov	esi, esp
	push	OFFSET ??_C@_0DE@DMNPKCGM@cannot?5increment?5value?9initiali@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	194					; 000000c2H
	push	OFFSET ??_C@_0GA@FLCPNMJP@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	mov	esi, esp
	push	0
	push	194					; 000000c2H
	push	OFFSET ??_C@_1MA@PBGFLPAL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1GM@BJMCGEGI@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	xor	eax, eax
	jne	SHORT $LN14@operator
$LN6@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator
$LN3@operator:

; 195  :         _STL_VERIFY(!this->_Ptr->_Isnil, "cannot increment end map/set iterator");

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	jne	SHORT $LN16@operator
	jmp	SHORT $LN12@operator
$LN16@operator:
	mov	esi, esp
	push	OFFSET ??_C@_0CG@NLEHEOHN@cannot?5increment?5end?5map?1set?5it@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	195					; 000000c3H
	push	OFFSET ??_C@_0GA@FLCPNMJP@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	mov	esi, esp
	push	0
	push	195					; 000000c3H
	push	OFFSET ??_C@_1MA@PBGFLPAL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1FA@KLFCDGNE@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	xor	eax, eax
	jne	SHORT $LN16@operator
$LN12@operator:
	xor	eax, eax
	jne	SHORT $LN3@operator

; 196  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 197  : 
; 198  :         _Mybase::operator++();

	mov	ecx, DWORD PTR _this$[ebp]
	call	??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,std::_Iterator_base12>::operator++
	npad	1

; 199  :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 200  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@XZ
_TEXT	SEGMENT
__Mycont$ = -20						; size = 4
_this$ = -8						; size = 4
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@XZ PROC ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator*, COMDAT
; _this$ = ecx

; 178  :     _NODISCARD reference operator*() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 179  : #if _ITERATOR_DEBUG_LEVEL == 2
; 180  :         const auto _Mycont = static_cast<const _Mytree*>(this->_Getcont());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
	mov	DWORD PTR __Mycont$[ebp], eax
$LN4@operator:

; 181  :         _STL_ASSERT(_Mycont, "cannot dereference value-initialized map/set iterator");

	cmp	DWORD PTR __Mycont$[ebp], 0
	je	SHORT $LN14@operator
	jmp	SHORT $LN6@operator
$LN14@operator:
	mov	esi, esp
	push	OFFSET ??_C@_0DG@LCFNIIPB@cannot?5dereference?5value?9initia@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	181					; 000000b5H
	push	OFFSET ??_C@_0GA@FLCPNMJP@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN19@operator
	int	3
$LN19@operator:
	mov	esi, esp
	push	0
	push	181					; 000000b5H
	push	OFFSET ??_C@_1MA@PBGFLPAL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1HA@ILGCNILF@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	xor	eax, eax
	jne	SHORT $LN14@operator
$LN6@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator
$LN3@operator:

; 182  :         _STL_VERIFY(this->_Ptr != _Mycont->_Myhead, "cannot dereference end map/set iterator");

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Mycont$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	je	SHORT $LN16@operator
	jmp	SHORT $LN12@operator
$LN16@operator:
	mov	esi, esp
	push	OFFSET ??_C@_0CI@OKFEHCEB@cannot?5dereference?5end?5map?1set?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	182					; 000000b6H
	push	OFFSET ??_C@_0GA@FLCPNMJP@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN20@operator
	int	3
$LN20@operator:
	mov	esi, esp
	push	0
	push	182					; 000000b6H
	push	OFFSET ??_C@_1MA@PBGFLPAL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1FE@NKHAAGMB@?$AA?$CC?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	xor	eax, eax
	jne	SHORT $LN16@operator
$LN12@operator:
	xor	eax, eax
	jne	SHORT $LN3@operator

; 183  : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 184  : 
; 185  :         return this->_Ptr->_Myval;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	add	eax, 16					; 00000010H

; 186  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@XZ ENDP ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::~_Iterator_base12
	npad	1
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,std::_Iterator_base12>::~_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
__Pnode$1 = -20						; size = 4
_this$ = -8						; size = 4
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,std::_Iterator_base12>::operator++, COMDAT
; _this$ = ecx

; 49   :     _Tree_unchecked_const_iterator& operator++() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 50   :         if (_Ptr->_Right->_Isnil) { // climb looking for right subtree

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	movsx	eax, BYTE PTR [edx+13]
	test	eax, eax
	je	SHORT $LN4@operator
$LN2@operator:

; 51   :             _Nodeptr _Pnode;
; 52   :             while (!(_Pnode = _Ptr->_Parent)->_Isnil && _Ptr == _Pnode->_Right) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Pnode$1[ebp], edx
	mov	eax, DWORD PTR __Pnode$1[ebp]
	movsx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	jne	SHORT $LN3@operator
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$1[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN3@operator

; 53   :                 _Ptr = _Pnode; // ==> parent while right subtree

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$1[ebp]
	mov	DWORD PTR [eax+8], ecx

; 54   :             }

	jmp	SHORT $LN2@operator
$LN3@operator:

; 55   : 
; 56   :             _Ptr = _Pnode; // ==> parent (head if end())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$1[ebp]
	mov	DWORD PTR [eax+8], ecx

; 57   :         } else {

	jmp	SHORT $LN5@operator
$LN4@operator:

; 58   :             _Ptr = _Mytree::_Min(_Ptr->_Right); // ==> smallest of right subtree

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@PAU32@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Min
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN5@operator:

; 59   :         }
; 60   : 
; 61   :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 62   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAEAAV01@XZ ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,std::_Iterator_base12>::operator++
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Pnode$ = 8						; size = 4
__Plist$ = 12						; size = 4
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@1@@Z PROC ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,std::_Iterator_base12>, COMDAT
; _this$ = ecx

; 37   :     _Tree_unchecked_const_iterator(_Nodeptr _Pnode, const _Mytree* _Plist) noexcept : _Ptr(_Pnode) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Iterator_base12@std@@QAE@XZ		; std::_Iterator_base12::_Iterator_base12
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 38   :         this->_Adopt(_Plist);

	mov	eax, DWORD PTR __Plist$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
	npad	1

; 39   :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@1@@Z ENDP ; std::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,std::_Iterator_base12>::_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,std::_Iterator_base12>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Fg_mSplineCache@@YAXXZ
text$yd	SEGMENT
??__Fg_mSplineCache@@YAXXZ PROC				; `dynamic atexit destructor for 'g_mSplineCache'', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?g_mSplineCache@@3V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@A
	call	??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@QAE@XZ
	npad	1
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Fg_mSplineCache@@YAXXZ ENDP				; `dynamic atexit destructor for 'g_mSplineCache''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibSpline_Source\IdvSpline.cpp
;	COMDAT ??__Eg_mSplineCache@@YAXXZ
text$di	SEGMENT
??__Eg_mSplineCache@@YAXXZ PROC				; `dynamic initializer for 'g_mSplineCache'', COMDAT

; 28   : static map<string, CIdvBezierSpline*> g_mSplineCache;

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET ?g_mSplineCache@@3V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@A
	call	??0?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@QAE@XZ ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >
	npad	1
	push	OFFSET ??__Fg_mSplineCache@@YAXXZ	; `dynamic atexit destructor for 'g_mSplineCache''
	call	_atexit
	add	esp, 4
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eg_mSplineCache@@YAXXZ ENDP				; `dynamic initializer for 'g_mSplineCache''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@QAE@XZ PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAE@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::~_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >
	npad	1
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@QAE@XZ ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::~map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\map
;	COMDAT ??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@QAEAAPAVCIdvBezierSpline@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
$T1 = -216						; size = 8
_this$ = -8						; size = 4
__Keyval$ = 8						; size = 4
??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@QAEAAPAVCIdvBezierSpline@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::operator[], COMDAT
; _this$ = ecx

; 345  :     mapped_type& operator[](const key_type& _Keyval) {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-28]
	mov	ecx, 7
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 346  :         return _Try_emplace(_Keyval).first->_Myval.second;

	mov	eax, DWORD PTR __Keyval$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Try_emplace@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$V@?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@AAE?AU?$pair@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@_N@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Try_emplace<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const &>
	mov	eax, DWORD PTR [eax]
	add	eax, 44					; 0000002cH

; 347  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@QAEAAPAVCIdvBezierSpline@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\map
;	COMDAT ??0?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
??0?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@QAE@XZ PROC ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >, COMDAT
; _this$ = ecx

; 106  :     map() : _Mybase(key_compare()) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@QAE@XZ ENDP ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>,1>::_Get_first, COMDAT
; _this$ = ecx

; 1507 :     constexpr const _Ty1& _Get_first() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1508 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1509 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1507 :     constexpr const _Ty1& _Get_first() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1508 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1509 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1503 :     constexpr _Ty1& _Get_first() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1504 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1505 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnextptr$1 = -44					; size = 4
__Pnext$ = -32						; size = 4
__Lock$ = -20						; size = 4
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Orphan_ptr, COMDAT
; _this$ = ecx

; 714  :     void _Orphan_ptr(const _Nodeptr _Ptr) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 715  : #if _ITERATOR_DEBUG_LEVEL == 2
; 716  :         _Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1

; 717  :         _Iterator_base12** _Pnext = &this->_Myproxy->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx
$LN2@Orphan_ptr:

; 718  :         while (*_Pnext) {

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Orphan_ptr

; 719  :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Pnextptr$1[ebp], edx

; 720  :             if (_Pnextptr == _Myhead || (_Ptr != nullptr && _Pnextptr != _Ptr)) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Pnextptr$1[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN6@Orphan_ptr
	cmp	DWORD PTR __Ptr$[ebp], 0
	je	SHORT $LN4@Orphan_ptr
	mov	eax, DWORD PTR __Pnextptr$1[ebp]
	cmp	eax, DWORD PTR __Ptr$[ebp]
	je	SHORT $LN4@Orphan_ptr
$LN6@Orphan_ptr:

; 721  :                 _Pnext = &(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx

; 722  :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ptr
$LN4@Orphan_ptr:

; 723  :                 (*_Pnext)->_Myproxy = nullptr;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], 0

; 724  :                 *_Pnext             = (*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Pnext$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], eax
$LN5@Orphan_ptr:

; 725  :             }
; 726  :         }

	jmp	SHORT $LN2@Orphan_ptr
$LN3@Orphan_ptr:

; 727  : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 / _ITERATOR_DEBUG_LEVEL != 2 vvv
; 728  :         (void) _Ptr;
; 729  : #endif // ^^^ _ITERATOR_DEBUG_LEVEL != 2 ^^^
; 730  :     }

	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@Orphan_ptr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN11@Orphan_ptr:
	DD	1
	DD	$LN10@Orphan_ptr
$LN10@Orphan_ptr:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN9@Orphan_ptr
$LN9@Orphan_ptr:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Orphan_ptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@QAU32@@Z
_TEXT	SEGMENT
__Parent_sibling$1 = -56				; size = 4
__Parent_sibling$2 = -44				; size = 4
__Pnode$3 = -32						; size = 4
__Head$ = -20						; size = 4
_this$ = -8						; size = 4
__Loc$ = 8						; size = 8
__Newnode$ = 16						; size = 4
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@QAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Insert_node, COMDAT
; _this$ = ecx

; 645  :     _Nodeptr _Insert_node(const _Tree_id<_Nodeptr> _Loc, const _Nodeptr _Newnode) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 646  :         ++_Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx

; 647  :         const auto _Head  = _Myhead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Head$[ebp], ecx

; 648  :         _Newnode->_Parent = _Loc._Parent;

	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	ecx, DWORD PTR __Loc$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 649  :         if (_Loc._Parent == _Head) { // first node in tree, just set head values

	mov	eax, DWORD PTR __Loc$[ebp]
	cmp	eax, DWORD PTR __Head$[ebp]
	jne	SHORT $LN5@Insert_nod

; 650  :             _Head->_Left     = _Newnode;

	mov	eax, DWORD PTR __Head$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 651  :             _Head->_Parent   = _Newnode;

	mov	eax, DWORD PTR __Head$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 652  :             _Head->_Right    = _Newnode;

	mov	eax, DWORD PTR __Head$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 653  :             _Newnode->_Color = _Black; // the root is black

	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	BYTE PTR [eax+12], 1

; 654  :             return _Newnode;

	mov	eax, DWORD PTR __Newnode$[ebp]
	jmp	$LN1@Insert_nod
$LN5@Insert_nod:

; 655  :         }
; 656  : 
; 657  :         _STL_INTERNAL_CHECK(_Loc._Child != _Tree_child::_Unused);
; 658  :         if (_Loc._Child == _Tree_child::_Right) { // add to right of _Loc._Parent

	cmp	DWORD PTR __Loc$[ebp+4], 0
	jne	SHORT $LN6@Insert_nod

; 659  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Right->_Isnil);
; 660  :             _Loc._Parent->_Right = _Newnode;

	mov	eax, DWORD PTR __Loc$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 661  :             if (_Loc._Parent == _Head->_Right) { // remember rightmost node

	mov	eax, DWORD PTR __Head$[ebp]
	mov	ecx, DWORD PTR __Loc$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN8@Insert_nod

; 662  :                 _Head->_Right = _Newnode;

	mov	eax, DWORD PTR __Head$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN8@Insert_nod:

; 663  :             }
; 664  :         } else { // add to left of _Loc._Parent

	jmp	SHORT $LN9@Insert_nod
$LN6@Insert_nod:

; 665  :             _STL_INTERNAL_CHECK(_Loc._Parent->_Left->_Isnil);
; 666  :             _Loc._Parent->_Left = _Newnode;

	mov	eax, DWORD PTR __Loc$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx

; 667  :             if (_Loc._Parent == _Head->_Left) { // remember leftmost node

	mov	eax, DWORD PTR __Head$[ebp]
	mov	ecx, DWORD PTR __Loc$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN9@Insert_nod

; 668  :                 _Head->_Left = _Newnode;

	mov	eax, DWORD PTR __Head$[ebp]
	mov	ecx, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR [eax], ecx
$LN9@Insert_nod:

; 669  :             }
; 670  :         }
; 671  : 
; 672  :         for (_Nodeptr _Pnode = _Newnode; _Pnode->_Parent->_Color == _Red;) {

	mov	eax, DWORD PTR __Newnode$[ebp]
	mov	DWORD PTR __Pnode$3[ebp], eax
$LN2@Insert_nod:
	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	movsx	edx, BYTE PTR [ecx+12]
	test	edx, edx
	jne	$LN3@Insert_nod

; 673  :             if (_Pnode->_Parent == _Pnode->_Parent->_Parent->_Left) { // fixup red-red in left subtree

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR [edx]
	jne	$LN10@Insert_nod

; 674  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Right;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR __Parent_sibling$2[ebp], eax

; 675  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

	mov	eax, DWORD PTR __Parent_sibling$2[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN12@Insert_nod

; 676  :                     _Pnode->_Parent->_Color          = _Black;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 1

; 677  :                     _Parent_sibling->_Color          = _Black;

	mov	eax, DWORD PTR __Parent_sibling$2[ebp]
	mov	BYTE PTR [eax+12], 1

; 678  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+12], 0

; 679  :                     _Pnode                           = _Pnode->_Parent->_Parent;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Pnode$3[ebp], edx

; 680  :                 } else { // parent's sibling has red and black children

	jmp	SHORT $LN13@Insert_nod
$LN12@Insert_nod:

; 681  :                     if (_Pnode == _Pnode->_Parent->_Right) { // rotate right child to left

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pnode$3[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN14@Insert_nod

; 682  :                         _Pnode = _Pnode->_Parent;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Pnode$3[ebp], ecx

; 683  :                         _Lrotate(_Pnode);

	mov	eax, DWORD PTR __Pnode$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Lrotate
	npad	1
$LN14@Insert_nod:

; 684  :                     }
; 685  : 
; 686  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 1

; 687  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+12], 0

; 688  :                     _Rrotate(_Pnode->_Parent->_Parent);

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Rrotate
	npad	1
$LN13@Insert_nod:

; 689  :                 }
; 690  :             } else { // fixup red-red in right subtree

	jmp	$LN16@Insert_nod
$LN10@Insert_nod:

; 691  :                 const auto _Parent_sibling = _Pnode->_Parent->_Parent->_Left;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR __Parent_sibling$1[ebp], eax

; 692  :                 if (_Parent_sibling->_Color == _Red) { // parent's sibling has two red children, blacken both

	mov	eax, DWORD PTR __Parent_sibling$1[ebp]
	movsx	ecx, BYTE PTR [eax+12]
	test	ecx, ecx
	jne	SHORT $LN15@Insert_nod

; 693  :                     _Pnode->_Parent->_Color          = _Black;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 1

; 694  :                     _Parent_sibling->_Color          = _Black;

	mov	eax, DWORD PTR __Parent_sibling$1[ebp]
	mov	BYTE PTR [eax+12], 1

; 695  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+12], 0

; 696  :                     _Pnode                           = _Pnode->_Parent->_Parent;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR __Pnode$3[ebp], edx

; 697  :                 } else { // parent's sibling has red and black children

	jmp	SHORT $LN16@Insert_nod
$LN15@Insert_nod:

; 698  :                     if (_Pnode == _Pnode->_Parent->_Left) { // rotate left child to right

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pnode$3[ebp]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN17@Insert_nod

; 699  :                         _Pnode = _Pnode->_Parent;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Pnode$3[ebp], ecx

; 700  :                         _Rrotate(_Pnode);

	mov	eax, DWORD PTR __Pnode$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Rrotate
	npad	1
$LN17@Insert_nod:

; 701  :                     }
; 702  : 
; 703  :                     _Pnode->_Parent->_Color          = _Black; // propagate red up

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 1

; 704  :                     _Pnode->_Parent->_Parent->_Color = _Red;

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	mov	BYTE PTR [edx+12], 0

; 705  :                     _Lrotate(_Pnode->_Parent->_Parent);

	mov	eax, DWORD PTR __Pnode$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Lrotate
	npad	1
$LN16@Insert_nod:

; 706  :                 }
; 707  :             }
; 708  :         }

	jmp	$LN2@Insert_nod
$LN3@Insert_nod:

; 709  : 
; 710  :         _Head->_Parent->_Color = _Black; // root is always black

	mov	eax, DWORD PTR __Head$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	BYTE PTR [ecx+12], 1

; 711  :         return _Newnode;

	mov	eax, DWORD PTR __Newnode$[ebp]
$LN1@Insert_nod:

; 712  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Insert_node@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@U?$_Tree_id@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@QAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Insert_node
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = -20						; size = 4
_this$ = -8						; size = 4
__Wherenode$ = 8					; size = 4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Rrotate, COMDAT
; _this$ = ecx

; 481  :     void _Rrotate(_Nodeptr _Wherenode) noexcept { // promote left node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 482  :         _Nodeptr _Pnode   = _Wherenode->_Left;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 483  :         _Wherenode->_Left = _Pnode->_Right;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax], edx

; 484  : 
; 485  :         if (!_Pnode->_Right->_Isnil) {

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	jne	SHORT $LN2@Rrotate

; 486  :             _Pnode->_Right->_Parent = _Wherenode;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN2@Rrotate:

; 487  :         }
; 488  : 
; 489  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 490  : 
; 491  :         if (_Wherenode == _Myhead->_Parent) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN3@Rrotate

; 492  :             _Myhead->_Parent = _Pnode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx+4], edx
	jmp	SHORT $LN6@Rrotate
$LN3@Rrotate:

; 493  :         } else if (_Wherenode == _Wherenode->_Parent->_Right) {

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN5@Rrotate

; 494  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 495  :         } else {

	jmp	SHORT $LN6@Rrotate
$LN5@Rrotate:

; 496  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx], edx
$LN6@Rrotate:

; 497  :         }
; 498  : 
; 499  :         _Pnode->_Right      = _Wherenode;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 500  :         _Wherenode->_Parent = _Pnode;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 501  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Rrotate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@@Z
_TEXT	SEGMENT
__Pnode$ = -20						; size = 4
_this$ = -8						; size = 4
__Wherenode$ = 8					; size = 4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Lrotate, COMDAT
; _this$ = ecx

; 459  :     void _Lrotate(_Nodeptr _Wherenode) noexcept { // promote right node to root of subtree

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 460  :         _Nodeptr _Pnode    = _Wherenode->_Right;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 461  :         _Wherenode->_Right = _Pnode->_Left;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx

; 462  : 
; 463  :         if (!_Pnode->_Left->_Isnil) {

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	jne	SHORT $LN2@Lrotate

; 464  :             _Pnode->_Left->_Parent = _Wherenode;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN2@Lrotate:

; 465  :         }
; 466  : 
; 467  :         _Pnode->_Parent = _Wherenode->_Parent;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 468  : 
; 469  :         if (_Wherenode == _Myhead->_Parent) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN3@Lrotate

; 470  :             _Myhead->_Parent = _Pnode;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx+4], edx
	jmp	SHORT $LN6@Lrotate
$LN3@Lrotate:

; 471  :         } else if (_Wherenode == _Wherenode->_Parent->_Left) {

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Wherenode$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN5@Lrotate

; 472  :             _Wherenode->_Parent->_Left = _Pnode;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx], edx

; 473  :         } else {

	jmp	SHORT $LN6@Lrotate
$LN5@Lrotate:

; 474  :             _Wherenode->_Parent->_Right = _Pnode;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN6@Lrotate:

; 475  :         }
; 476  : 
; 477  :         _Pnode->_Left       = _Wherenode;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR __Wherenode$[ebp]
	mov	DWORD PTR [eax], ecx

; 478  :         _Wherenode->_Parent = _Pnode;

	mov	eax, DWORD PTR __Wherenode$[ebp]
	mov	ecx, DWORD PTR __Pnode$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 479  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Lrotate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@PAU32@@Z
_TEXT	SEGMENT
__Pnode$ = 8						; size = 4
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@PAU32@@Z PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Min, COMDAT

; 451  :     static _Nodeptr _Min(_Nodeptr _Pnode) noexcept { // return leftmost node in subtree at _Pnode

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
$LN2@Min:

; 452  :         while (!_Pnode->_Left->_Isnil) {

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	movsx	edx, BYTE PTR [ecx+13]
	test	edx, edx
	jne	SHORT $LN3@Min

; 453  :             _Pnode = _Pnode->_Left;

	mov	eax, DWORD PTR __Pnode$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Pnode$[ebp], ecx

; 454  :         }

	jmp	SHORT $LN2@Min
$LN3@Min:

; 455  : 
; 456  :         return _Pnode;

	mov	eax, DWORD PTR __Pnode$[ebp]

; 457  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@SAPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@PAU32@@Z ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Min
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >, COMDAT
; _this$ = ecx

; 436  :     _Tree_val() noexcept : _Myhead(), _Mysize(0) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\type_traits
;	COMDAT ??R?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??R?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z PROC ; std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::operator(), COMDAT
; _this$ = ecx

; 2420 :         noexcept(noexcept(_STD _Fake_copy_init<bool>(_Left < _Right))) /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2421 :         return _Left < _Right;

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Left$[ebp]
	push	ecx
	call	??$?MDU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@0@Z ; std::operator<<char,std::char_traits<char>,std::allocator<char> >
	add	esp, 8

; 2422 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??R?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@QBE_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@0@Z ENDP ; std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >::operator()
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ?_Get_scary@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_scary@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Get_scary, COMDAT
; _this$ = ecx

; 1967 :     const _Scary_val* _Get_scary() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1968 :         return _STD addressof(_Mypair._Myval2._Myval2);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@YAPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@0@ABV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > const >
	add	esp, 4

; 1969 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_scary@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBEPBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Get_scary
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ?_Get_scary@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_scary@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Get_scary, COMDAT
; _this$ = ecx

; 1963 :     _Scary_val* _Get_scary() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1964 :         return _STD addressof(_Mypair._Myval2._Myval2);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@YAPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@0@AAV10@@Z ; std::addressof<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >
	add	esp, 4

; 1965 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_scary@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Get_scary
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1959 :     const _Alnode& _Getal() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1960 :         return _Mypair._Myval2._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@std@@QBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>::_Get_first

; 1961 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ?_Getal@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Getal, COMDAT
; _this$ = ecx

; 1955 :     _Alnode& _Getal() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1956 :         return _Mypair._Myval2._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@std@@QAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ ; std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>::_Get_first

; 1957 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ?_Getcomp@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getcomp@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Getcomp, COMDAT
; _this$ = ecx

; 1951 :     const key_compare& _Getcomp() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1952 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@2@$00@std@@QBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>,1>::_Get_first

; 1953 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcomp@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBEABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Getcomp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
__Proxy$ = -72						; size = 8
_$S8$ = -53						; size = 1
__Alproxy$ = -44					; size = 4
__Scary$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Alloc_sentinel_and_proxy, COMDAT
; _this$ = ecx

; 1934 :     void _Alloc_sentinel_and_proxy() {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 1935 :         const auto _Scary = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 1936 :         auto&& _Alproxy   = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S8$[ebp]
	call	??$?0U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >
	lea	eax, DWORD PTR _$S8$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 1937 :         _Container_proxy_ptr<_Alnode> _Proxy(_Alproxy, *_Scary);

	mov	eax, DWORD PTR __Scary$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Alproxy$[ebp]
	push	ecx
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??0?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAV?$allocator@U_Container_proxy@std@@@1@AAU_Container_base12@1@@Z ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 1938 :         _Scary->_Myhead = _Node::_Buyheadnode(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Getal
	push	eax
	call	??$_Buyheadnode@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@SAPAU01@AAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z ; std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *>::_Buyheadnode<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
	add	esp, 4
	mov	ecx, DWORD PTR __Scary$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1939 :         _Proxy._Release();

	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ; std::_Basic_container_proxy_ptr12::_Release
	npad	1

; 1940 :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR __Proxy$[ebp]
	call	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	npad	1
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Alloc_sent
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@Alloc_sent:
	DD	2
	DD	$LN7@Alloc_sent
$LN7@Alloc_sent:
	DD	-53					; ffffffcbH
	DD	1
	DD	$LN4@Alloc_sent
	DD	-72					; ffffffb8H
	DD	8
	DD	$LN5@Alloc_sent
$LN5@Alloc_sent:
	DB	95					; 0000005fH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	120					; 00000078H
	DB	121					; 00000079H
	DB	0
$LN4@Alloc_sent:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	56					; 00000038H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEXXZ$0:
	lea	ecx, DWORD PTR __Proxy$[ebp]
	jmp	??1?$_Container_proxy_ptr12@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ ; std::_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >::~_Container_proxy_ptr12<std::allocator<std::_Container_proxy> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEXXZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Alloc_sentinel_and_proxy
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEXXZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Check_grow_by_1, COMDAT
; _this$ = ecx

; 1623 :     void _Check_grow_by_1() {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1624 :         if (max_size() == _Get_scary()->_Mysize) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QBEIXZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::max_size
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Get_scary
	cmp	esi, DWORD PTR [eax+8]
	jne	SHORT $LN2@Check_grow

; 1625 :             _Throw_tree_length_error();

	call	?_Throw_tree_length_error@std@@YAXXZ	; std::_Throw_tree_length_error
	npad	1
$LN2@Check_grow:
$LN1@Check_grow:

; 1626 :         }
; 1627 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Check_grow_by_1@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Check_grow_by_1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ?clear@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Head$ = -32						; size = 4
__Scary$ = -20						; size = 4
_this$ = -8						; size = 4
?clear@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAEXXZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::clear, COMDAT
; _this$ = ecx

; 1347 :     void clear() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1348 :         const auto _Scary = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 1349 :         _Scary->_Orphan_ptr(nullptr);

	push	0
	mov	ecx, DWORD PTR __Scary$[ebp]
	call	?_Orphan_ptr@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Orphan_ptr
	npad	1

; 1350 :         auto _Head = _Scary->_Myhead;

	mov	eax, DWORD PTR __Scary$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Head$[ebp], ecx

; 1351 :         _Scary->_Erase_tree(_Getal(), _Head->_Parent);

	mov	eax, DWORD PTR __Head$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Getal
	push	eax
	mov	ecx, DWORD PTR __Scary$[ebp]
	call	??$_Erase_tree@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Erase_tree<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
	npad	1

; 1352 :         _Head->_Parent  = _Head;

	mov	eax, DWORD PTR __Head$[ebp]
	mov	ecx, DWORD PTR __Head$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1353 :         _Head->_Left    = _Head;

	mov	eax, DWORD PTR __Head$[ebp]
	mov	ecx, DWORD PTR __Head$[ebp]
	mov	DWORD PTR [eax], ecx

; 1354 :         _Head->_Right   = _Head;

	mov	eax, DWORD PTR __Head$[ebp]
	mov	ecx, DWORD PTR __Head$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 1355 :         _Scary->_Mysize = 0;

	mov	eax, DWORD PTR __Scary$[ebp]
	mov	DWORD PTR [eax+8], 0

; 1356 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAEXXZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ?max_size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -224						; size = 4
$T2 = -212						; size = 4
_this$ = -8						; size = 4
?max_size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QBEIXZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::max_size, COMDAT
; _this$ = ecx

; 1188 :     _NODISCARD size_type max_size() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1189 :         return (_STD min)(

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IBEABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@@Z ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::max_size
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$min@I@std@@YAABIABI0@Z		; std::min<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 1190 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alnode_traits::max_size(_Getal()));
; 1191 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QBEIXZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__Scary$ = -20						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::end, COMDAT
; _this$ = ecx

; 1126 :     _NODISCARD iterator end() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1127 :         const auto _Scary = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 1128 :         return iterator(_Scary->_Myhead, _Scary);

	mov	eax, DWORD PTR __Scary$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Scary$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@1@@Z
	npad	1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1129 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
__Scary$ = -20						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@2@XZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::begin, COMDAT
; _this$ = ecx

; 1116 :     _NODISCARD iterator begin() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1117 :         const auto _Scary = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 1118 :         return iterator(_Scary->_Myhead->_Left, _Scary);

	mov	eax, DWORD PTR __Scary$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Scary$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAE@PAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@1@PBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@1@@Z
	npad	1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1119 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@2@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_$S1$ = -41						; size = 1
__Alproxy$ = -32					; size = 4
__Scary$ = -20						; size = 4
_this$ = -8						; size = 4
??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAE@XZ PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::~_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >, COMDAT
; _this$ = ecx

; 1071 :     ~_Tree() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1072 :         const auto _Scary = _Get_scary();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_scary@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEPAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Get_scary
	mov	DWORD PTR __Scary$[ebp], eax

; 1073 :         _Scary->_Erase_head(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Getal
	push	eax
	mov	ecx, DWORD PTR __Scary$[ebp]
	call	??$_Erase_head@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@QAEXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z ; std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::_Erase_head<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >
	npad	1

; 1074 : #if _ITERATOR_DEBUG_LEVEL != 0 // TRANSITION, ABI
; 1075 :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alnode, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S1$[ebp]
	call	??$?0U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >
	lea	eax, DWORD PTR _$S1$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 1076 :         _Delete_plain_internal(_Alproxy, _Scary->_Myproxy);

	mov	eax, DWORD PTR __Scary$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 1077 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 1078 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Tree
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@Tree:
	DD	1
	DD	$LN5@Tree
$LN5@Tree:
	DD	-41					; ffffffd7H
	DD	1
	DD	$LN4@Tree
$LN4@Tree:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	49					; 00000031H
	DB	0
??1?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAE@XZ ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::~_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ??0?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z
_TEXT	SEGMENT
$T1 = -221						; size = 1
$T2 = -209						; size = 1
_this$ = -8						; size = 4
__Parg$ = 8						; size = 4
??0?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z PROC ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >, COMDAT
; _this$ = ecx

; 880  :     _Tree(const key_compare& _Parg) : _Mypair(_One_then_variadic_args_t{}, _Parg, _Zero_then_variadic_args_t{}) {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR __Parg$[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@2@$00@2@$00@std@@QAE@U_One_then_variadic_args_t@1@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@$$QAU_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>,1>::_Compressed_pair<std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >,1>,1><std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > > const &,std::_Zero_then_variadic_args_t>
	npad	1

; 881  :         _Alloc_sentinel_and_proxy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Alloc_sentinel_and_proxy@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@IAEXXZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Alloc_sentinel_and_proxy
	npad	1

; 882  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAE@ABU?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@1@@Z ENDP ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::max_size, COMDAT

; 713  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 714  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	eax, 89478485				; 05555555H

; 715  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@SAIABV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
__Count$ = 16						; size = 4
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@I@Z PROC ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::deallocate, COMDAT

; 682  :     static _CONSTEXPR20 void deallocate(_Alloc& _Al, const pointer _Ptr, const size_type _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 683  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 684  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 685  :         if (_STD is_constant_evaluated()) {
; 686  :             _Al.deallocate(_Ptr, _Count);
; 687  :         } else
; 688  : #endif // _HAS_CXX20
; 689  :         {
; 690  :             (void) _Al;
; 691  :             _STD _Deallocate<_New_alignof<value_type>>(_Ptr, sizeof(value_type) * _Count);

	imul	eax, DWORD PTR __Count$[ebp], 48
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07@std@@YAXPAXI@Z	; std::_Deallocate<8>
	add	esp, 8

; 692  :         }
; 693  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@2@QAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@I@Z ENDP ; std::_Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >::allocate, COMDAT
; _this$ = ecx

; 953  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 954  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 955  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$0DA@@std@@YAII@Z	; std::_Get_size_of_n<48>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits>
	add	esp, 4

; 956  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@QAEPAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@I@Z PROC ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >::deallocate, COMDAT
; _this$ = ecx

; 947  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@deallocate:

; 948  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN10@deallocate
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN6@deallocate
$LN8@deallocate:
	mov	esi, esp
	push	OFFSET ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	948					; 000003b4H
	push	OFFSET ??_C@_0GC@GDGMGNBP@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
$LN12@deallocate:
	mov	esi, esp
	push	0
	push	948					; 000003b4H
	push	OFFSET ??_C@_1ME@KJJNLLPL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	xor	eax, eax
	jne	SHORT $LN8@deallocate
$LN6@deallocate:
	xor	eax, eax
	jne	SHORT $LN4@deallocate

; 949  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 950  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	eax, DWORD PTR __Count$[ebp], 48
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07@std@@YAXPAXI@Z	; std::_Deallocate<8>
	add	esp, 8

; 951  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@QAEXQAU?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@2@I@Z ENDP ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??0?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@QAE@XZ PROC ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >, COMDAT
; _this$ = ecx

; 939  :     constexpr allocator() noexcept {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@PAX@std@@@std@@QAE@XZ ENDP ; std::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >::allocator<std::_Tree_node<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *>,void *> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xtree
;	COMDAT ?_Throw_tree_length_error@std@@YAXXZ
_TEXT	SEGMENT
?_Throw_tree_length_error@std@@YAXXZ PROC		; std::_Throw_tree_length_error, COMDAT

; 416  : [[noreturn]] inline void _Throw_tree_length_error() {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 417  :     _Xlength_error("map/set too long");

	push	OFFSET ??_C@_0BB@GCADKGJO@map?1set?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
	npad	1
$LN1@Throw_tree:

; 418  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Throw_tree_length_error@std@@YAXXZ ENDP		; std::_Throw_tree_length_error
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\tuple
;	COMDAT ??0?$tuple@$$V@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
??0?$tuple@$$V@std@@QAE@ABV01@@Z PROC			; std::tuple<>::tuple<>, COMDAT
; _this$ = ecx

; 226  :     constexpr tuple(const tuple&) noexcept /* strengthened */ {} // TRANSITION, ABI: should be defaulted

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$tuple@$$V@std@@QAE@ABV01@@Z ENDP			; std::tuple<>::tuple<>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibGlobals_Source\IdvGlobals.h
;	COMDAT ?IdvFormatString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ
_TEXT	SEGMENT
$T1 = -1644						; size = 4
_szBuffer$ = -1044					; size = 1024
_vlArgs$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_pField$ = 12						; size = 4
?IdvFormatString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ PROC ; IdvFormatString, COMDAT

; 77   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1648				; 00000670H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1072]
	mov	ecx, 268				; 0000010cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR $T1[ebp], 0

; 78   :     va_list vlArgs;
; 79   :     IdvTmpString szBuffer;
; 80   :     
; 81   :     va_start(vlArgs, pField);

	lea	eax, DWORD PTR _pField$[ebp+4]
	mov	DWORD PTR _vlArgs$[ebp], eax

; 82   :     (void) vsprintf(szBuffer, pField, vlArgs);

	mov	eax, DWORD PTR _vlArgs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pField$[ebp]
	push	ecx
	lea	edx, DWORD PTR _szBuffer$[ebp]
	push	edx
	call	_vsprintf
	add	esp, 12					; 0000000cH

; 83   : 
; 84   :     return szBuffer;

	lea	eax, DWORD PTR _szBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	ecx, DWORD PTR $T1[ebp]
	or	ecx, 1
	mov	DWORD PTR $T1[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 85   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@IdvFormatS
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1648				; 00000670H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN7@IdvFormatS:
	DD	1
	DD	$LN6@IdvFormatS
$LN6@IdvFormatS:
	DD	-1044					; fffffbecH
	DD	1024					; 00000400H
	DD	$LN5@IdvFormatS
$LN5@IdvFormatS:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?IdvFormatString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ ENDP ; IdvFormatString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCIdvBezierSpline@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCIdvBezierSpline@@QAEPAXI@Z PROC			; CIdvBezierSpline::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CIdvBezierSpline@@QAE@XZ		; CIdvBezierSpline::~CIdvBezierSpline
	npad	1
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	92					; 0000005cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCIdvBezierSpline@@QAEPAXI@Z ENDP			; CIdvBezierSpline::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4CIdvBezierSpline@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??4CIdvBezierSpline@@QAEAAV0@ABV0@@Z PROC		; CIdvBezierSpline::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??4?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CVec,std::allocator<CVec> >::operator=
	npad	1
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??4?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CVec,std::allocator<CVec> >::operator=
	npad	1
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 44					; 0000002cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??4?$vector@MV?$allocator@M@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<float,std::allocator<float> >::operator=
	npad	1
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??4?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CVec,std::allocator<CVec> >::operator=
	npad	1
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 76					; 0000004cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??4?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAV01@ABV01@@Z ; std::vector<CVec,std::allocator<CVec> >::operator=
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CIdvBezierSpline@@QAEAAV0@ABV0@@Z ENDP		; CIdvBezierSpline::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QBEABV?$allocator@M@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QBEABV?$allocator@M@2@XZ PROC ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1507 :     constexpr const _Ty1& _Get_first() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1508 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1509 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QBEABV?$allocator@M@2@XZ ENDP ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QAEAAV?$allocator@M@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QAEAAV?$allocator@M@2@XZ PROC ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1503 :     constexpr _Ty1& _Get_first() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1504 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1505 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QAEAAV?$allocator@M@2@XZ ENDP ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_Vector_val@U?$_Simple_types@M@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<float> >::_Vector_val<std::_Simple_types<float> >, COMDAT
; _this$ = ecx

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@M@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<float> >::_Vector_val<std::_Simple_types<float> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?_Getal@?$vector@MV?$allocator@M@std@@@std@@ABEABV?$allocator@M@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$vector@MV?$allocator@M@std@@@std@@ABEABV?$allocator@M@2@XZ PROC ; std::vector<float,std::allocator<float> >::_Getal, COMDAT
; _this$ = ecx

; 2188 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2189 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QBEABV?$allocator@M@2@XZ ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Get_first

; 2190 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$vector@MV?$allocator@M@std@@@std@@ABEABV?$allocator@M@2@XZ ENDP ; std::vector<float,std::allocator<float> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?_Getal@?$vector@MV?$allocator@M@std@@@std@@AAEAAV?$allocator@M@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$vector@MV?$allocator@M@std@@@std@@AAEAAV?$allocator@M@2@XZ PROC ; std::vector<float,std::allocator<float> >::_Getal, COMDAT
; _this$ = ecx

; 2184 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2185 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QAEAAV?$allocator@M@2@XZ ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Get_first

; 2186 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$vector@MV?$allocator@M@std@@@std@@AAEAAV?$allocator@M@2@XZ ENDP ; std::vector<float,std::allocator<float> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@ABEXPAM0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@ABEXPAM0@Z PROC ; std::vector<float,std::allocator<float> >::_Orphan_range, COMDAT
; _this$ = ecx

; 2169 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2170 :         // orphan iterators within specified (inclusive) range
; 2171 : #if _HAS_CXX20
; 2172 :         if (_STD is_constant_evaluated()) {
; 2173 :             _Orphan_range_unlocked(_First, _Last);
; 2174 :         } else
; 2175 : #endif // _HAS_CXX20
; 2176 :         {
; 2177 :             _Orphan_range_locked(_First, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@ABEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Orphan_range_locked
	npad	1

; 2178 :         }
; 2179 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range@?$vector@MV?$allocator@M@std@@@std@@ABEXPAM0@Z ENDP ; std::vector<float,std::allocator<float> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@ABEXPAM0@Z
_TEXT	SEGMENT
__Lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@ABEXPAM0@Z PROC ; std::vector<float,std::allocator<float> >::_Orphan_range_locked, COMDAT
; _this$ = ecx

; 2164 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@ABEXPAM0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2165 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2166 :         _Orphan_range_unlocked(_First, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range_unlocked@?$vector@MV?$allocator@M@std@@@std@@ABEXPAM0@Z ; std::vector<float,std::allocator<float> >::_Orphan_range_unlocked
	npad	1

; 2167 :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Orphan_ran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN7@Orphan_ran:
	DD	1
	DD	$LN6@Orphan_ran
$LN6@Orphan_ran:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@Orphan_ran
$LN4@Orphan_ran:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@ABEXPAM0@Z$0:
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@ABEXPAM0@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@ABEXPAM0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range_locked@?$vector@MV?$allocator@M@std@@@std@@ABEXPAM0@Z ENDP ; std::vector<float,std::allocator<float> >::_Orphan_range_locked
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@MV?$allocator@M@std@@@std@@ABEXPAM0@Z
_TEXT	SEGMENT
__Temp$1 = -44						; size = 4
__Pnextptr$2 = -32					; size = 4
__Pnext$ = -20						; size = 4
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range_unlocked@?$vector@MV?$allocator@M@std@@@std@@ABEXPAM0@Z PROC ; std::vector<float,std::allocator<float> >::_Orphan_range_unlocked, COMDAT
; _this$ = ecx

; 2150 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2151 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx
$LN2@Orphan_ran:

; 2152 :         while (*_Pnext) {

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Orphan_ran

; 2153 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Pnextptr$2[ebp], edx

; 2154 :             const auto _Temp     = *_Pnext;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Temp$1[ebp], ecx

; 2155 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	eax, DWORD PTR __Pnextptr$2[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jb	SHORT $LN6@Orphan_ran
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR __Pnextptr$2[ebp]
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 2156 :                 _Pnext = &_Temp->_Mynextiter;

	mov	eax, DWORD PTR __Temp$1[ebp]
	add	eax, 4
	mov	DWORD PTR __Pnext$[ebp], eax

; 2157 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2158 :                 _Temp->_Myproxy = nullptr;

	mov	eax, DWORD PTR __Temp$1[ebp]
	mov	DWORD PTR [eax], 0

; 2159 :                 *_Pnext         = _Temp->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR __Temp$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
$LN5@Orphan_ran:

; 2160 :             }
; 2161 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 2162 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range_unlocked@?$vector@MV?$allocator@M@std@@@std@@ABEXPAM0@Z ENDP ; std::vector<float,std::allocator<float> >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?_Xlength@?$vector@MV?$allocator@M@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@MV?$allocator@M@std@@@std@@CAXXZ PROC ; std::vector<float,std::allocator<float> >::_Xlength, COMDAT

; 2141 :     [[noreturn]] static void _Xlength() {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2142 :         _Xlength_error("vector too long");

	push	OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
	npad	1
$LN1@Xlength:

; 2143 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlength@?$vector@MV?$allocator@M@std@@@std@@CAXXZ ENDP ; std::vector<float,std::allocator<float> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?_Tidy@?$vector@MV?$allocator@M@std@@@std@@AAEXXZ
_TEXT	SEGMENT
__Myend$ = -80						; size = 4
__Mylast$ = -68						; size = 4
__Myfirst$ = -56					; size = 4
__My_data$ = -44					; size = 4
__Al$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@MV?$allocator@M@std@@@std@@AAEXXZ PROC	; std::vector<float,std::allocator<float> >::_Tidy, COMDAT
; _this$ = ecx

; 2039 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Tidy@?$vector@MV?$allocator@M@std@@@std@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2040 :         auto& _Al         = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@MV?$allocator@M@std@@@std@@AAEAAV?$allocator@M@2@XZ ; std::vector<float,std::allocator<float> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 2041 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 2042 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	mov	DWORD PTR __Myfirst$[ebp], eax

; 2043 :         pointer& _Mylast  = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 2044 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 2045 : 
; 2046 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
	npad	1

; 2047 : 
; 2048 :         if (_Myfirst) { // destroy and deallocate old array

	mov	eax, DWORD PTR __Myfirst$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Tidy

; 2049 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAMQAMAAV?$allocator@M@0@@Z ; std::_Destroy_range<std::allocator<float> >
	add	esp, 12					; 0000000cH

; 2050 :             _ASAN_VECTOR_REMOVE;
; 2051 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	eax, DWORD PTR __Myend$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@M@std@@QAEXQAMI@Z ; std::allocator<float>::deallocate
	npad	1

; 2052 : 
; 2053 :             _Myfirst = nullptr;

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	DWORD PTR [eax], 0

; 2054 :             _Mylast  = nullptr;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [eax], 0

; 2055 :             _Myend   = nullptr;

	mov	eax, DWORD PTR __Myend$[ebp]
	mov	DWORD PTR [eax], 0
$LN2@Tidy:

; 2056 :         }
; 2057 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@MV?$allocator@M@std@@@std@@AAEXXZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-280]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@MV?$allocator@M@std@@@std@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@MV?$allocator@M@std@@@std@@AAEXXZ ENDP	; std::vector<float,std::allocator<float> >::_Tidy
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?_Change_array@?$vector@MV?$allocator@M@std@@@std@@AAEXQAMII@Z
_TEXT	SEGMENT
__Myend$ = -68						; size = 4
__Mylast$ = -56						; size = 4
__Myfirst$ = -44					; size = 4
__My_data$ = -32					; size = 4
__Al$ = -20						; size = 4
_this$ = -8						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@MV?$allocator@M@std@@@std@@AAEXQAMII@Z PROC ; std::vector<float,std::allocator<float> >::_Change_array, COMDAT
; _this$ = ecx

; 2017 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2018 :         // orphan all iterators, discard old array, acquire new array
; 2019 :         auto& _Al         = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@MV?$allocator@M@std@@@std@@AAEAAV?$allocator@M@2@XZ ; std::vector<float,std::allocator<float> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 2020 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 2021 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	mov	DWORD PTR __Myfirst$[ebp], eax

; 2022 :         pointer& _Mylast  = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 2023 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 2024 : 
; 2025 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
	npad	1

; 2026 : 
; 2027 :         if (_Myfirst) { // destroy and deallocate old array

	mov	eax, DWORD PTR __Myfirst$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Change_arr

; 2028 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAMQAMAAV?$allocator@M@0@@Z ; std::_Destroy_range<std::allocator<float> >
	add	esp, 12					; 0000000cH

; 2029 :             _ASAN_VECTOR_REMOVE;
; 2030 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	eax, DWORD PTR __Myend$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@M@std@@QAEXQAMI@Z ; std::allocator<float>::deallocate
	npad	1
$LN2@Change_arr:

; 2031 :         }
; 2032 : 
; 2033 :         _Myfirst = _Newvec;

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [eax], ecx

; 2034 :         _Mylast  = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [eax], edx

; 2035 :         _Myend   = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR __Myend$[ebp]
	mov	DWORD PTR [eax], edx

; 2036 :         _ASAN_VECTOR_CREATE;
; 2037 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Change_array@?$vector@MV?$allocator@M@std@@@std@@AAEXQAMII@Z ENDP ; std::vector<float,std::allocator<float> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?_Buy_raw@?$vector@MV?$allocator@M@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Newvec$ = -68						; size = 4
__Myend$ = -56						; size = 4
__Mylast$ = -44						; size = 4
__Myfirst$ = -32					; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy_raw@?$vector@MV?$allocator@M@std@@@std@@AAEXI@Z PROC ; std::vector<float,std::allocator<float> >::_Buy_raw, COMDAT
; _this$ = ecx

; 1983 :     _CONSTEXPR20 void _Buy_raw(size_type _Newcapacity) {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1984 :         // allocate array with _Newcapacity elements
; 1985 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1986 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	mov	DWORD PTR __Myfirst$[ebp], eax

; 1987 :         pointer& _Mylast  = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 1988 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 1989 : 
; 1990 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1991 :         _STL_INTERNAL_CHECK(0 < _Newcapacity && _Newcapacity <= max_size());
; 1992 : 
; 1993 :         const pointer _Newvec = _STD _Allocate_at_least_helper(_Getal(), _Newcapacity);

	lea	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@MV?$allocator@M@std@@@std@@AAEAAV?$allocator@M@2@XZ ; std::vector<float,std::allocator<float> >::_Getal
	push	eax
	call	??$_Allocate_at_least_helper@V?$allocator@M@std@@@std@@YAPAMAAV?$allocator@M@0@AAI@Z ; std::_Allocate_at_least_helper<std::allocator<float> >
	add	esp, 8
	mov	DWORD PTR __Newvec$[ebp], eax

; 1994 :         _Myfirst              = _Newvec;

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [eax], ecx

; 1995 :         _Mylast               = _Newvec;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [eax], ecx

; 1996 :         _Myend                = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR __Myend$[ebp]
	mov	DWORD PTR [eax], edx

; 1997 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy_raw@?$vector@MV?$allocator@M@std@@@std@@AAEXI@Z ENDP ; std::vector<float,std::allocator<float> >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?_Calculate_growth@?$vector@MV?$allocator@M@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -44					; size = 4
__Max$ = -32						; size = 4
__Oldcapacity$ = -20					; size = 4
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@MV?$allocator@M@std@@@std@@ABEII@Z PROC ; std::vector<float,std::allocator<float> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1965 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1966 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1967 :         const size_type _Oldcapacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::capacity
	mov	DWORD PTR __Oldcapacity$[ebp], eax

; 1968 :         const auto _Max              = max_size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::max_size
	mov	DWORD PTR __Max$[ebp], eax

; 1969 : 
; 1970 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	eax, DWORD PTR __Oldcapacity$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR __Max$[ebp]
	sub	ecx, eax
	cmp	DWORD PTR __Oldcapacity$[ebp], ecx
	jbe	SHORT $LN2@Calculate_

; 1971 :             return _Max; // geometric growth would overflow

	mov	eax, DWORD PTR __Max$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1972 :         }
; 1973 : 
; 1974 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	mov	eax, DWORD PTR __Oldcapacity$[ebp]
	shr	eax, 1
	add	eax, DWORD PTR __Oldcapacity$[ebp]
	mov	DWORD PTR __Geometric$[ebp], eax

; 1975 : 
; 1976 :         if (_Geometric < _Newsize) {

	mov	eax, DWORD PTR __Geometric$[ebp]
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@Calculate_

; 1977 :             return _Newsize; // geometric growth would be insufficient

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1978 :         }
; 1979 : 
; 1980 :         return _Geometric; // geometric growth is sufficient

	mov	eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1981 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Calculate_growth@?$vector@MV?$allocator@M@std@@@std@@ABEII@Z ENDP ; std::vector<float,std::allocator<float> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??A?$vector@MV?$allocator@M@std@@@std@@QBEABMI@Z
_TEXT	SEGMENT
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@MV?$allocator@M@std@@@std@@QBEABMI@Z PROC	; std::vector<float,std::allocator<float> >::operator[], COMDAT
; _this$ = ecx

; 1896 :     _NODISCARD _CONSTEXPR20 const _Ty& operator[](const size_type _Pos) const noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1897 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax
$LN4@operator:

; 1898 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1899 :         _STL_VERIFY(

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	cmp	DWORD PTR __Pos$[ebp], edx
	jae	SHORT $LN8@operator
	jmp	SHORT $LN6@operator
$LN8@operator:
	mov	esi, esp
	push	OFFSET ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1900					; 0000076cH
	push	OFFSET ??_C@_0GB@FNOFBLAA@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
$LN11@operator:
	mov	esi, esp
	push	0
	push	1900					; 0000076cH
	push	OFFSET ??_C@_1MC@PMNMOCLC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	xor	eax, eax
	jne	SHORT $LN8@operator
$LN6@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator

; 1900 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1901 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1902 : 
; 1903 :         return _My_data._Myfirst[_Pos];

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 1904 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@MV?$allocator@M@std@@@std@@QBEABMI@Z ENDP	; std::vector<float,std::allocator<float> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??A?$vector@MV?$allocator@M@std@@@std@@QAEAAMI@Z
_TEXT	SEGMENT
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@MV?$allocator@M@std@@@std@@QAEAAMI@Z PROC	; std::vector<float,std::allocator<float> >::operator[], COMDAT
; _this$ = ecx

; 1886 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1887 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax
$LN4@operator:

; 1888 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1889 :         _STL_VERIFY(

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	cmp	DWORD PTR __Pos$[ebp], edx
	jae	SHORT $LN8@operator
	jmp	SHORT $LN6@operator
$LN8@operator:
	mov	esi, esp
	push	OFFSET ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1890					; 00000762H
	push	OFFSET ??_C@_0GB@FNOFBLAA@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
$LN11@operator:
	mov	esi, esp
	push	0
	push	1890					; 00000762H
	push	OFFSET ??_C@_1MC@PMNMOCLC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	xor	eax, eax
	jne	SHORT $LN8@operator
$LN6@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator

; 1890 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1891 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1892 : 
; 1893 :         return _My_data._Myfirst[_Pos];

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]

; 1894 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@MV?$allocator@M@std@@@std@@QAEAAMI@Z ENDP	; std::vector<float,std::allocator<float> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?capacity@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
?capacity@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ PROC ; std::vector<float,std::allocator<float> >::capacity, COMDAT
; _this$ = ecx

; 1881 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1882 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1883 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	sar	eax, 2

; 1884 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ENDP ; std::vector<float,std::allocator<float> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -224						; size = 4
$T2 = -212						; size = 4
_this$ = -8						; size = 4
?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ PROC ; std::vector<float,std::allocator<float> >::max_size, COMDAT
; _this$ = ecx

; 1876 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1877 :         return (_STD min)(

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@MV?$allocator@M@std@@@std@@ABEABV?$allocator@M@2@XZ ; std::vector<float,std::allocator<float> >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAIABV?$allocator@M@2@@Z ; std::_Default_allocator_traits<std::allocator<float> >::max_size
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$min@I@std@@YAABIABI0@Z		; std::min<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 1878 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1879 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ENDP ; std::vector<float,std::allocator<float> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?_Clear_and_reserve_geometric@?$vector@MV?$allocator@M@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Newcapacity$ = -80					; size = 4
__Myend$ = -68						; size = 4
__Mylast$ = -56						; size = 4
__Myfirst$ = -44					; size = 4
__My_data$ = -32					; size = 4
__Al$ = -20						; size = 4
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
?_Clear_and_reserve_geometric@?$vector@MV?$allocator@M@std@@@std@@AAEXI@Z PROC ; std::vector<float,std::allocator<float> >::_Clear_and_reserve_geometric, COMDAT
; _this$ = ecx

; 1649 :     _CONSTEXPR20 void _Clear_and_reserve_geometric(const size_type _Newsize) {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1650 :         auto& _Al         = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@MV?$allocator@M@std@@@std@@AAEAAV?$allocator@M@2@XZ ; std::vector<float,std::allocator<float> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 1651 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1652 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	mov	DWORD PTR __Myfirst$[ebp], eax

; 1653 :         pointer& _Mylast  = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 1654 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 1655 : 
; 1656 : #if _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1657 :         _STL_INTERNAL_CHECK(_Newsize != 0);
; 1658 :         _Check_all_orphaned();
; 1659 : #endif // _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1660 : 
; 1661 :         if (_Newsize > max_size()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@MV?$allocator@M@std@@@std@@QBEIXZ ; std::vector<float,std::allocator<float> >::max_size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jbe	SHORT $LN2@Clear_and_

; 1662 :             _Xlength();

	call	?_Xlength@?$vector@MV?$allocator@M@std@@@std@@CAXXZ ; std::vector<float,std::allocator<float> >::_Xlength
	npad	1
$LN2@Clear_and_:

; 1663 :         }
; 1664 : 
; 1665 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$vector@MV?$allocator@M@std@@@std@@ABEII@Z ; std::vector<float,std::allocator<float> >::_Calculate_growth
	mov	DWORD PTR __Newcapacity$[ebp], eax

; 1666 : 
; 1667 :         if (_Myfirst) { // destroy and deallocate old array

	mov	eax, DWORD PTR __Myfirst$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Clear_and_

; 1668 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Destroy_range@V?$allocator@M@std@@@std@@YAXPAMQAMAAV?$allocator@M@0@@Z ; std::_Destroy_range<std::allocator<float> >
	add	esp, 12					; 0000000cH

; 1669 :             _ASAN_VECTOR_REMOVE;
; 1670 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	eax, DWORD PTR __Myend$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@M@std@@QAEXQAMI@Z ; std::allocator<float>::deallocate
	npad	1

; 1671 : 
; 1672 :             _Myfirst = nullptr;

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	DWORD PTR [eax], 0

; 1673 :             _Mylast  = nullptr;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [eax], 0

; 1674 :             _Myend   = nullptr;

	mov	eax, DWORD PTR __Myend$[ebp]
	mov	DWORD PTR [eax], 0
$LN3@Clear_and_:

; 1675 :         }
; 1676 : 
; 1677 :         _Buy_raw(_Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy_raw@?$vector@MV?$allocator@M@std@@@std@@AAEXI@Z ; std::vector<float,std::allocator<float> >::_Buy_raw
	npad	1
$LN1@Clear_and_:

; 1678 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Clear_and_reserve_geometric@?$vector@MV?$allocator@M@std@@@std@@AAEXI@Z ENDP ; std::vector<float,std::allocator<float> >::_Clear_and_reserve_geometric
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??4?$vector@MV?$allocator@M@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right_data$ = -44					; size = 4
__Right_al$ = -32					; size = 4
__Al$ = -20						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??4?$vector@MV?$allocator@M@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<float,std::allocator<float> >::operator=, COMDAT
; _this$ = ecx

; 1476 :     _CONSTEXPR20 vector& operator=(const vector& _Right) {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1477 :         if (this == _STD addressof(_Right)) {

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$addressof@$$CBV?$vector@MV?$allocator@M@std@@@std@@@std@@YAPBV?$vector@MV?$allocator@M@std@@@0@ABV10@@Z ; std::addressof<std::vector<float,std::allocator<float> > const >
	add	esp, 4
	cmp	DWORD PTR _this$[ebp], eax
	jne	SHORT $LN2@operator

; 1478 :             return *this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN1@operator
$LN2@operator:

; 1479 :         }
; 1480 : 
; 1481 :         auto& _Al       = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@MV?$allocator@M@std@@@std@@AAEAAV?$allocator@M@2@XZ ; std::vector<float,std::allocator<float> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 1482 :         auto& _Right_al = _Right._Getal();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$vector@MV?$allocator@M@std@@@std@@ABEABV?$allocator@M@2@XZ ; std::vector<float,std::allocator<float> >::_Getal
	mov	DWORD PTR __Right_al$[ebp], eax

; 1483 :         if constexpr (_Choose_pocca_v<_Alty>) {
; 1484 :             if (_Al != _Right_al) {
; 1485 :                 _Tidy();
; 1486 :                 _Mypair._Myval2._Reload_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Al), _GET_PROXY_ALLOCATOR(_Alty, _Right_al));
; 1487 :             }
; 1488 :         }
; 1489 : 
; 1490 :         _Pocca(_Al, _Right_al);

	mov	eax, DWORD PTR __Right_al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Pocca@V?$allocator@M@std@@@std@@YAXAAV?$allocator@M@0@ABV10@@Z ; std::_Pocca<std::allocator<float> >
	add	esp, 8

; 1491 :         auto& _Right_data = _Right._Mypair._Myval2;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR __Right_data$[ebp], eax

; 1492 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

	mov	eax, DWORD PTR __Right_data$[ebp]
	mov	ecx, DWORD PTR __Right_data$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	sar	edx, 2
	push	edx
	mov	eax, DWORD PTR __Right_data$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Assign_counted_range@PAM@?$vector@MV?$allocator@M@std@@@std@@AAEXPAMI@Z ; std::vector<float,std::allocator<float> >::_Assign_counted_range<float *>
	npad	1

; 1493 : 
; 1494 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]
$LN1@operator:

; 1495 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@MV?$allocator@M@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<float,std::allocator<float> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?push_back@?$vector@MV?$allocator@M@std@@@std@@QAEXABM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@MV?$allocator@M@std@@@std@@QAEXABM@Z PROC ; std::vector<float,std::allocator<float> >::push_back, COMDAT
; _this$ = ecx

; 866  :     _CONSTEXPR20 void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 867  :         _Emplace_one_at_back(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_one_at_back@ABM@?$vector@MV?$allocator@M@std@@@std@@AAEAAMABM@Z ; std::vector<float,std::allocator<float> >::_Emplace_one_at_back<float const &>
	npad	1

; 868  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@MV?$allocator@M@std@@@std@@QAEXABM@Z ENDP ; std::vector<float,std::allocator<float> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -236						; size = 4
_$S2$ = -29						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -8						; size = 4
??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ PROC	; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 760  :     _CONSTEXPR20 ~vector() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 761  :         _Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@MV?$allocator@M@std@@@std@@AAEXXZ ; std::vector<float,std::allocator<float> >::_Tidy
	npad	1

; 762  : #if _ITERATOR_DEBUG_LEVEL != 0
; 763  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@MV?$allocator@M@std@@@std@@AAEAAV?$allocator@M@2@XZ ; std::vector<float,std::allocator<float> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S2$[ebp]
	call	??$?0M@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@M@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><float>
	lea	eax, DWORD PTR _$S2$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 764  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	DWORD PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 765  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 766  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@vector
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@vector:
	DD	1
	DD	$LN5@vector
$LN5@vector:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@vector
$LN4@vector:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	50					; 00000032H
	DB	0
??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ENDP	; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -233						; size = 1
$T3 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ PROC	; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >, COMDAT
; _this$ = ecx

; 601  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@M@std@@V?$_Vector_val@U?$_Simple_types@M@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1>::_Compressed_pair<std::allocator<float>,std::_Vector_val<std::_Simple_types<float> >,1><>
	npad	1

; 602  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@MV?$allocator@M@std@@@std@@AAEAAV?$allocator@M@2@XZ ; std::vector<float,std::allocator<float> >::_Getal
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??$?0M@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@M@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><float>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
	npad	1

; 603  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ENDP	; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAIABV?$allocator@M@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAIABV?$allocator@M@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<float> >::max_size, COMDAT

; 713  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 714  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	eax, 1073741823				; 3fffffffH

; 715  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@M@std@@@std@@SAIABV?$allocator@M@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<float> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?allocate@?$allocator@M@std@@QAEPAMI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@M@std@@QAEPAMI@Z PROC		; std::allocator<float>::allocate, COMDAT
; _this$ = ecx

; 953  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 954  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 955  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$03@std@@YAII@Z	; std::_Get_size_of_n<4>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits>
	add	esp, 4

; 956  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@M@std@@QAEPAMI@Z ENDP		; std::allocator<float>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?deallocate@?$allocator@M@std@@QAEXQAMI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@M@std@@QAEXQAMI@Z PROC		; std::allocator<float>::deallocate, COMDAT
; _this$ = ecx

; 947  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@deallocate:

; 948  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN10@deallocate
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN6@deallocate
$LN8@deallocate:
	mov	esi, esp
	push	OFFSET ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	948					; 000003b4H
	push	OFFSET ??_C@_0GC@GDGMGNBP@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
$LN12@deallocate:
	mov	esi, esp
	push	0
	push	948					; 000003b4H
	push	OFFSET ??_C@_1ME@KJJNLLPL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	xor	eax, eax
	jne	SHORT $LN8@deallocate
$LN6@deallocate:
	xor	eax, eax
	jne	SHORT $LN4@deallocate

; 949  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 950  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07@std@@YAXPAXI@Z	; std::_Deallocate<8>
	add	esp, 8

; 951  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@M@std@@QAEXQAMI@Z ENDP		; std::allocator<float>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??0?$allocator@M@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@M@std@@QAE@XZ PROC			; std::allocator<float>::allocator<float>, COMDAT
; _this$ = ecx

; 939  :     constexpr allocator() noexcept {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@M@std@@QAE@XZ ENDP			; std::allocator<float>::allocator<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@VCVec@@@std@@V?$_Vector_val@U?$_Simple_types@VCVec@@@std@@@2@$00@std@@QBEABV?$allocator@VCVec@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@VCVec@@@std@@V?$_Vector_val@U?$_Simple_types@VCVec@@@std@@@2@$00@std@@QBEABV?$allocator@VCVec@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<CVec>,std::_Vector_val<std::_Simple_types<CVec> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1507 :     constexpr const _Ty1& _Get_first() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1508 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1509 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@VCVec@@@std@@V?$_Vector_val@U?$_Simple_types@VCVec@@@std@@@2@$00@std@@QBEABV?$allocator@VCVec@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<CVec>,std::_Vector_val<std::_Simple_types<CVec> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@VCVec@@@std@@V?$_Vector_val@U?$_Simple_types@VCVec@@@std@@@2@$00@std@@QAEAAV?$allocator@VCVec@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@VCVec@@@std@@V?$_Vector_val@U?$_Simple_types@VCVec@@@std@@@2@$00@std@@QAEAAV?$allocator@VCVec@@@2@XZ PROC ; std::_Compressed_pair<std::allocator<CVec>,std::_Vector_val<std::_Simple_types<CVec> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1503 :     constexpr _Ty1& _Get_first() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1504 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1505 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@VCVec@@@std@@V?$_Vector_val@U?$_Simple_types@VCVec@@@std@@@2@$00@std@@QAEAAV?$allocator@VCVec@@@2@XZ ENDP ; std::_Compressed_pair<std::allocator<CVec>,std::_Vector_val<std::_Simple_types<CVec> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@VCVec@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_Vector_val@U?$_Simple_types@VCVec@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<CVec> >::_Vector_val<std::_Simple_types<CVec> >, COMDAT
; _this$ = ecx

; 400  :     _CONSTEXPR20 _Vector_val() noexcept : _Myfirst(), _Mylast(), _Myend() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@VCVec@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<CVec> >::_Vector_val<std::_Simple_types<CVec> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?_Getal@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEABV?$allocator@VCVec@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEABV?$allocator@VCVec@@@2@XZ PROC ; std::vector<CVec,std::allocator<CVec> >::_Getal, COMDAT
; _this$ = ecx

; 2188 :     _NODISCARD _CONSTEXPR20 const _Alty& _Getal() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2189 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@VCVec@@@std@@V?$_Vector_val@U?$_Simple_types@VCVec@@@std@@@2@$00@std@@QBEABV?$allocator@VCVec@@@2@XZ ; std::_Compressed_pair<std::allocator<CVec>,std::_Vector_val<std::_Simple_types<CVec> >,1>::_Get_first

; 2190 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEABV?$allocator@VCVec@@@2@XZ ENDP ; std::vector<CVec,std::allocator<CVec> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?_Getal@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAV?$allocator@VCVec@@@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAV?$allocator@VCVec@@@2@XZ PROC ; std::vector<CVec,std::allocator<CVec> >::_Getal, COMDAT
; _this$ = ecx

; 2184 :     _NODISCARD _CONSTEXPR20 _Alty& _Getal() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2185 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@VCVec@@@std@@V?$_Vector_val@U?$_Simple_types@VCVec@@@std@@@2@$00@std@@QAEAAV?$allocator@VCVec@@@2@XZ ; std::_Compressed_pair<std::allocator<CVec>,std::_Vector_val<std::_Simple_types<CVec> >,1>::_Get_first

; 2186 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAV?$allocator@VCVec@@@2@XZ ENDP ; std::vector<CVec,std::allocator<CVec> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?_Orphan_range@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z PROC ; std::vector<CVec,std::allocator<CVec> >::_Orphan_range, COMDAT
; _this$ = ecx

; 2169 :     _CONSTEXPR20 void _Orphan_range(pointer _First, pointer _Last) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2170 :         // orphan iterators within specified (inclusive) range
; 2171 : #if _HAS_CXX20
; 2172 :         if (_STD is_constant_evaluated()) {
; 2173 :             _Orphan_range_unlocked(_First, _Last);
; 2174 :         } else
; 2175 : #endif // _HAS_CXX20
; 2176 :         {
; 2177 :             _Orphan_range_locked(_First, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range_locked@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z ; std::vector<CVec,std::allocator<CVec> >::_Orphan_range_locked
	npad	1

; 2178 :         }
; 2179 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z ENDP ; std::vector<CVec,std::allocator<CVec> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?_Orphan_range_locked@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z
_TEXT	SEGMENT
__Lock$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range_locked@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z PROC ; std::vector<CVec,std::allocator<CVec> >::_Orphan_range_locked, COMDAT
; _this$ = ecx

; 2164 :     void _Orphan_range_locked(pointer _First, pointer _Last) const {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Orphan_range_locked@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2165 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2166 :         _Orphan_range_unlocked(_First, _Last);

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_range_unlocked@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z ; std::vector<CVec,std::allocator<CVec> >::_Orphan_range_unlocked
	npad	1

; 2167 :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Orphan_ran
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN7@Orphan_ran:
	DD	1
	DD	$LN6@Orphan_ran
$LN6@Orphan_ran:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN4@Orphan_ran
$LN4@Orphan_ran:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Orphan_range_locked@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z$0:
	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	jmp	__RTC_CheckEsp
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?_Orphan_range_locked@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Orphan_range_locked@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Orphan_range_locked@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z ENDP ; std::vector<CVec,std::allocator<CVec> >::_Orphan_range_locked
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?_Orphan_range_unlocked@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z
_TEXT	SEGMENT
__Temp$1 = -44						; size = 4
__Pnextptr$2 = -32					; size = 4
__Pnext$ = -20						; size = 4
_this$ = -8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Orphan_range_unlocked@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z PROC ; std::vector<CVec,std::allocator<CVec> >::_Orphan_range_unlocked, COMDAT
; _this$ = ecx

; 2150 :     _CONSTEXPR20 void _Orphan_range_unlocked(pointer _First, pointer _Last) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2151 :         _Iterator_base12** _Pnext = &_Mypair._Myval2._Myproxy->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx
$LN2@Orphan_ran:

; 2152 :         while (*_Pnext) {

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Orphan_ran

; 2153 :             const auto _Pnextptr = static_cast<const_iterator&>(**_Pnext)._Ptr;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR __Pnextptr$2[ebp], edx

; 2154 :             const auto _Temp     = *_Pnext;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Temp$1[ebp], ecx

; 2155 :             if (_Pnextptr < _First || _Last < _Pnextptr) { // skip the iterator

	mov	eax, DWORD PTR __Pnextptr$2[ebp]
	cmp	eax, DWORD PTR __First$[ebp]
	jb	SHORT $LN6@Orphan_ran
	mov	eax, DWORD PTR __Last$[ebp]
	cmp	eax, DWORD PTR __Pnextptr$2[ebp]
	jae	SHORT $LN4@Orphan_ran
$LN6@Orphan_ran:

; 2156 :                 _Pnext = &_Temp->_Mynextiter;

	mov	eax, DWORD PTR __Temp$1[ebp]
	add	eax, 4
	mov	DWORD PTR __Pnext$[ebp], eax

; 2157 :             } else { // orphan the iterator

	jmp	SHORT $LN5@Orphan_ran
$LN4@Orphan_ran:

; 2158 :                 _Temp->_Myproxy = nullptr;

	mov	eax, DWORD PTR __Temp$1[ebp]
	mov	DWORD PTR [eax], 0

; 2159 :                 *_Pnext         = _Temp->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR __Temp$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx
$LN5@Orphan_ran:

; 2160 :             }
; 2161 :         }

	jmp	SHORT $LN2@Orphan_ran
$LN3@Orphan_ran:

; 2162 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
?_Orphan_range_unlocked@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEXPAVCVec@@0@Z ENDP ; std::vector<CVec,std::allocator<CVec> >::_Orphan_range_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?_Xlength@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@CAXXZ PROC ; std::vector<CVec,std::allocator<CVec> >::_Xlength, COMDAT

; 2141 :     [[noreturn]] static void _Xlength() {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2142 :         _Xlength_error("vector too long");

	push	OFFSET ??_C@_0BA@FOIKENOD@vector?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
	npad	1
$LN1@Xlength:

; 2143 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlength@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@CAXXZ ENDP ; std::vector<CVec,std::allocator<CVec> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?_Tidy@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
__Myend$ = -80						; size = 4
__Mylast$ = -68						; size = 4
__Myfirst$ = -56					; size = 4
__My_data$ = -44					; size = 4
__Al$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
?_Tidy@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXXZ PROC ; std::vector<CVec,std::allocator<CVec> >::_Tidy, COMDAT
; _this$ = ecx

; 2039 :     _CONSTEXPR20 void _Tidy() noexcept { // free all storage

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Tidy@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 2040 :         auto& _Al         = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAV?$allocator@VCVec@@@2@XZ ; std::vector<CVec,std::allocator<CVec> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 2041 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 2042 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	mov	DWORD PTR __Myfirst$[ebp], eax

; 2043 :         pointer& _Mylast  = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 2044 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 2045 : 
; 2046 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
	npad	1

; 2047 : 
; 2048 :         if (_Myfirst) { // destroy and deallocate old array

	mov	eax, DWORD PTR __Myfirst$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Tidy

; 2049 :             _STD _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Destroy_range@V?$allocator@VCVec@@@std@@@std@@YAXPAVCVec@@QAV1@AAV?$allocator@VCVec@@@0@@Z ; std::_Destroy_range<std::allocator<CVec> >
	add	esp, 12					; 0000000cH

; 2050 :             _ASAN_VECTOR_REMOVE;
; 2051 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	eax, DWORD PTR __Myend$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@VCVec@@@std@@QAEXQAVCVec@@I@Z ; std::allocator<CVec>::deallocate
	npad	1

; 2052 : 
; 2053 :             _Myfirst = nullptr;

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	DWORD PTR [eax], 0

; 2054 :             _Mylast  = nullptr;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [eax], 0

; 2055 :             _Myend   = nullptr;

	mov	eax, DWORD PTR __Myend$[ebp]
	mov	DWORD PTR [eax], 0
$LN2@Tidy:

; 2056 :         }
; 2057 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Tidy@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXXZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-280]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Tidy@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Tidy@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXXZ ENDP ; std::vector<CVec,std::allocator<CVec> >::_Tidy
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?_Change_array@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXQAVCVec@@II@Z
_TEXT	SEGMENT
__Myend$ = -68						; size = 4
__Mylast$ = -56						; size = 4
__Myfirst$ = -44					; size = 4
__My_data$ = -32					; size = 4
__Al$ = -20						; size = 4
_this$ = -8						; size = 4
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXQAVCVec@@II@Z PROC ; std::vector<CVec,std::allocator<CVec> >::_Change_array, COMDAT
; _this$ = ecx

; 2017 :     _CONSTEXPR20 void _Change_array(const pointer _Newvec, const size_type _Newsize, const size_type _Newcapacity) {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2018 :         // orphan all iterators, discard old array, acquire new array
; 2019 :         auto& _Al         = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAV?$allocator@VCVec@@@2@XZ ; std::vector<CVec,std::allocator<CVec> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 2020 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 2021 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	mov	DWORD PTR __Myfirst$[ebp], eax

; 2022 :         pointer& _Mylast  = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 2023 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 2024 : 
; 2025 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
	npad	1

; 2026 : 
; 2027 :         if (_Myfirst) { // destroy and deallocate old array

	mov	eax, DWORD PTR __Myfirst$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Change_arr

; 2028 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Destroy_range@V?$allocator@VCVec@@@std@@@std@@YAXPAVCVec@@QAV1@AAV?$allocator@VCVec@@@0@@Z ; std::_Destroy_range<std::allocator<CVec> >
	add	esp, 12					; 0000000cH

; 2029 :             _ASAN_VECTOR_REMOVE;
; 2030 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	eax, DWORD PTR __Myend$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@VCVec@@@std@@QAEXQAVCVec@@I@Z ; std::allocator<CVec>::deallocate
	npad	1
$LN2@Change_arr:

; 2031 :         }
; 2032 : 
; 2033 :         _Myfirst = _Newvec;

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [eax], ecx

; 2034 :         _Mylast  = _Newvec + _Newsize;

	imul	eax, DWORD PTR __Newsize$[ebp], 24
	add	eax, DWORD PTR __Newvec$[ebp]
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [ecx], eax

; 2035 :         _Myend   = _Newvec + _Newcapacity;

	imul	eax, DWORD PTR __Newcapacity$[ebp], 24
	add	eax, DWORD PTR __Newvec$[ebp]
	mov	ecx, DWORD PTR __Myend$[ebp]
	mov	DWORD PTR [ecx], eax

; 2036 :         _ASAN_VECTOR_CREATE;
; 2037 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Change_array@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXQAVCVec@@II@Z ENDP ; std::vector<CVec,std::allocator<CVec> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?_Buy_raw@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Newvec$ = -68						; size = 4
__Myend$ = -56						; size = 4
__Mylast$ = -44						; size = 4
__Myfirst$ = -32					; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Newcapacity$ = 8					; size = 4
?_Buy_raw@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXI@Z PROC ; std::vector<CVec,std::allocator<CVec> >::_Buy_raw, COMDAT
; _this$ = ecx

; 1983 :     _CONSTEXPR20 void _Buy_raw(size_type _Newcapacity) {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1984 :         // allocate array with _Newcapacity elements
; 1985 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1986 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	mov	DWORD PTR __Myfirst$[ebp], eax

; 1987 :         pointer& _Mylast  = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 1988 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 1989 : 
; 1990 :         _STL_INTERNAL_CHECK(!_Myfirst && !_Mylast && !_Myend); // check that *this is tidy
; 1991 :         _STL_INTERNAL_CHECK(0 < _Newcapacity && _Newcapacity <= max_size());
; 1992 : 
; 1993 :         const pointer _Newvec = _STD _Allocate_at_least_helper(_Getal(), _Newcapacity);

	lea	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAV?$allocator@VCVec@@@2@XZ ; std::vector<CVec,std::allocator<CVec> >::_Getal
	push	eax
	call	??$_Allocate_at_least_helper@V?$allocator@VCVec@@@std@@@std@@YAPAVCVec@@AAV?$allocator@VCVec@@@0@AAI@Z ; std::_Allocate_at_least_helper<std::allocator<CVec> >
	add	esp, 8
	mov	DWORD PTR __Newvec$[ebp], eax

; 1994 :         _Myfirst              = _Newvec;

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [eax], ecx

; 1995 :         _Mylast               = _Newvec;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	mov	DWORD PTR [eax], ecx

; 1996 :         _Myend                = _Newvec + _Newcapacity;

	imul	eax, DWORD PTR __Newcapacity$[ebp], 24
	add	eax, DWORD PTR __Newvec$[ebp]
	mov	ecx, DWORD PTR __Myend$[ebp]
	mov	DWORD PTR [ecx], eax

; 1997 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy_raw@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXI@Z ENDP ; std::vector<CVec,std::allocator<CVec> >::_Buy_raw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?_Calculate_growth@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Geometric$ = -44					; size = 4
__Max$ = -32						; size = 4
__Oldcapacity$ = -20					; size = 4
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEII@Z PROC ; std::vector<CVec,std::allocator<CVec> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1965 :     _CONSTEXPR20 size_type _Calculate_growth(const size_type _Newsize) const {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1966 :         // given _Oldcapacity and _Newsize, calculate geometric growth
; 1967 :         const size_type _Oldcapacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ ; std::vector<CVec,std::allocator<CVec> >::capacity
	mov	DWORD PTR __Oldcapacity$[ebp], eax

; 1968 :         const auto _Max              = max_size();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ ; std::vector<CVec,std::allocator<CVec> >::max_size
	mov	DWORD PTR __Max$[ebp], eax

; 1969 : 
; 1970 :         if (_Oldcapacity > _Max - _Oldcapacity / 2) {

	mov	eax, DWORD PTR __Oldcapacity$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR __Max$[ebp]
	sub	ecx, eax
	cmp	DWORD PTR __Oldcapacity$[ebp], ecx
	jbe	SHORT $LN2@Calculate_

; 1971 :             return _Max; // geometric growth would overflow

	mov	eax, DWORD PTR __Max$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 1972 :         }
; 1973 : 
; 1974 :         const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	mov	eax, DWORD PTR __Oldcapacity$[ebp]
	shr	eax, 1
	add	eax, DWORD PTR __Oldcapacity$[ebp]
	mov	DWORD PTR __Geometric$[ebp], eax

; 1975 : 
; 1976 :         if (_Geometric < _Newsize) {

	mov	eax, DWORD PTR __Geometric$[ebp]
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN3@Calculate_

; 1977 :             return _Newsize; // geometric growth would be insufficient

	mov	eax, DWORD PTR __Newsize$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 1978 :         }
; 1979 : 
; 1980 :         return _Geometric; // geometric growth is sufficient

	mov	eax, DWORD PTR __Geometric$[ebp]
$LN1@Calculate_:

; 1981 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Calculate_growth@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEII@Z ENDP ; std::vector<CVec,std::allocator<CVec> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEABVCVec@@I@Z
_TEXT	SEGMENT
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEABVCVec@@I@Z PROC ; std::vector<CVec,std::allocator<CVec> >::operator[], COMDAT
; _this$ = ecx

; 1896 :     _NODISCARD _CONSTEXPR20 const _Ty& operator[](const size_type _Pos) const noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1897 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax
$LN4@operator:

; 1898 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1899 :         _STL_VERIFY(

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	cmp	DWORD PTR __Pos$[ebp], eax
	jae	SHORT $LN8@operator
	jmp	SHORT $LN6@operator
$LN8@operator:
	mov	esi, esp
	push	OFFSET ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1900					; 0000076cH
	push	OFFSET ??_C@_0GB@FNOFBLAA@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
$LN11@operator:
	mov	esi, esp
	push	0
	push	1900					; 0000076cH
	push	OFFSET ??_C@_1MC@PMNMOCLC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	xor	eax, eax
	jne	SHORT $LN8@operator
$LN6@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator

; 1900 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1901 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1902 : 
; 1903 :         return _My_data._Myfirst[_Pos];

	imul	eax, DWORD PTR __Pos$[ebp], 24
	mov	ecx, DWORD PTR __My_data$[ebp]
	add	eax, DWORD PTR [ecx+4]

; 1904 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEABVCVec@@I@Z ENDP ; std::vector<CVec,std::allocator<CVec> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z
_TEXT	SEGMENT
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Pos$ = 8						; size = 4
??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z PROC ; std::vector<CVec,std::allocator<CVec> >::operator[], COMDAT
; _this$ = ecx

; 1886 :     _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1887 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax
$LN4@operator:

; 1888 : #if _CONTAINER_DEBUG_LEVEL > 0
; 1889 :         _STL_VERIFY(

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	cmp	DWORD PTR __Pos$[ebp], eax
	jae	SHORT $LN8@operator
	jmp	SHORT $LN6@operator
$LN8@operator:
	mov	esi, esp
	push	OFFSET ??_C@_0BO@PFKOHNJC@vector?5subscript?5out?5of?5range@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1890					; 00000762H
	push	OFFSET ??_C@_0GB@FNOFBLAA@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN11@operator
	int	3
$LN11@operator:
	mov	esi, esp
	push	0
	push	1890					; 00000762H
	push	OFFSET ??_C@_1MC@PMNMOCLC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1EA@LEKOKFNB@?$AA?$CC?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	xor	eax, eax
	jne	SHORT $LN8@operator
$LN6@operator:
	xor	eax, eax
	jne	SHORT $LN4@operator

; 1890 :             _Pos < static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst), "vector subscript out of range");
; 1891 : #endif // _CONTAINER_DEBUG_LEVEL > 0
; 1892 : 
; 1893 :         return _My_data._Myfirst[_Pos];

	imul	eax, DWORD PTR __Pos$[ebp], 24
	mov	ecx, DWORD PTR __My_data$[ebp]
	add	eax, DWORD PTR [ecx+4]

; 1894 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z ENDP ; std::vector<CVec,std::allocator<CVec> >::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?capacity@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
?capacity@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ PROC ; std::vector<CVec,std::allocator<CVec> >::capacity, COMDAT
; _this$ = ecx

; 1881 :     _NODISCARD _CONSTEXPR20 size_type capacity() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1882 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1883 :         return static_cast<size_type>(_My_data._Myend - _My_data._Myfirst);

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [eax+12]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx

; 1884 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ ENDP ; std::vector<CVec,std::allocator<CVec> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?max_size@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -224						; size = 4
$T2 = -212						; size = 4
_this$ = -8						; size = 4
?max_size@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ PROC ; std::vector<CVec,std::allocator<CVec> >::max_size, COMDAT
; _this$ = ecx

; 1876 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1877 :         return (_STD min)(

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEABV?$allocator@VCVec@@@2@XZ ; std::vector<CVec,std::allocator<CVec> >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAIABV?$allocator@VCVec@@@2@@Z ; std::_Default_allocator_traits<std::allocator<CVec> >::max_size
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$min@I@std@@YAABIABI0@Z		; std::min<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 1878 :             static_cast<size_type>((numeric_limits<difference_type>::max)()), _Alty_traits::max_size(_Getal()));
; 1879 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ ENDP ; std::vector<CVec,std::allocator<CVec> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?size@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
?size@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ PROC ; std::vector<CVec,std::allocator<CVec> >::size, COMDAT
; _this$ = ecx

; 1871 :     _NODISCARD _CONSTEXPR20 size_type size() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1872 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1873 :         return static_cast<size_type>(_My_data._Mylast - _My_data._Myfirst);

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx

; 1874 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ ENDP ; std::vector<CVec,std::allocator<CVec> >::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?empty@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv69 = -220						; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
?empty@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBE_NXZ PROC ; std::vector<CVec,std::allocator<CVec> >::empty, COMDAT
; _this$ = ecx

; 1866 :     _NODISCARD_EMPTY_MEMBER _CONSTEXPR20 bool empty() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1867 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1868 :         return _My_data._Myfirst == _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __My_data$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN3@empty
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@empty
$LN3@empty:
	mov	DWORD PTR tv69[ebp], 0
$LN4@empty:
	movzx	eax, BYTE PTR tv69[ebp]

; 1869 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?empty@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBE_NXZ ENDP ; std::vector<CVec,std::allocator<CVec> >::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?clear@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
__Mylast$ = -44						; size = 4
__Myfirst$ = -32					; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
?clear@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEXXZ PROC ; std::vector<CVec,std::allocator<CVec> >::clear, COMDAT
; _this$ = ecx

; 1765 :     _CONSTEXPR20 void clear() noexcept { // erase all

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1766 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1767 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	mov	DWORD PTR __Myfirst$[ebp], eax

; 1768 :         pointer& _Mylast  = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 1769 : 
; 1770 :         if (_Myfirst == _Mylast) { // already empty, nothing to do

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN2@clear

; 1771 :             // This is an optimization for debug mode: we can avoid taking the debug lock to invalidate iterators.
; 1772 :             // Note that when clearing an empty vector, this will preserve past-the-end iterators, which is allowed by
; 1773 :             // N4950 [sequence.reqmts]/54 "a.clear() [...] may invalidate the past-the-end iterator".
; 1774 :             return;

	jmp	SHORT $LN1@clear
$LN2@clear:

; 1775 :         }
; 1776 : 
; 1777 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
	npad	1

; 1778 :         _Destroy_range(_Myfirst, _Mylast, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAV?$allocator@VCVec@@@2@XZ ; std::vector<CVec,std::allocator<CVec> >::_Getal
	push	eax
	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	??$_Destroy_range@V?$allocator@VCVec@@@std@@@std@@YAXPAVCVec@@QAV1@AAV?$allocator@VCVec@@@0@@Z ; std::_Destroy_range<std::allocator<CVec> >
	add	esp, 12					; 0000000cH

; 1779 :         _ASAN_VECTOR_MODIFY(static_cast<difference_type>(_Myfirst - _Mylast)); // negative when destroying elements
; 1780 :         _Mylast = _Myfirst;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN1@clear:

; 1781 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEXXZ ENDP ; std::vector<CVec,std::allocator<CVec> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?_Clear_and_reserve_geometric@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXI@Z
_TEXT	SEGMENT
__Newcapacity$ = -80					; size = 4
__Myend$ = -68						; size = 4
__Mylast$ = -56						; size = 4
__Myfirst$ = -44					; size = 4
__My_data$ = -32					; size = 4
__Al$ = -20						; size = 4
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
?_Clear_and_reserve_geometric@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXI@Z PROC ; std::vector<CVec,std::allocator<CVec> >::_Clear_and_reserve_geometric, COMDAT
; _this$ = ecx

; 1649 :     _CONSTEXPR20 void _Clear_and_reserve_geometric(const size_type _Newsize) {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1650 :         auto& _Al         = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAV?$allocator@VCVec@@@2@XZ ; std::vector<CVec,std::allocator<CVec> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 1651 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 1652 :         pointer& _Myfirst = _My_data._Myfirst;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	mov	DWORD PTR __Myfirst$[ebp], eax

; 1653 :         pointer& _Mylast  = _My_data._Mylast;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 8
	mov	DWORD PTR __Mylast$[ebp], eax

; 1654 :         pointer& _Myend   = _My_data._Myend;

	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 12					; 0000000cH
	mov	DWORD PTR __Myend$[ebp], eax

; 1655 : 
; 1656 : #if _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1657 :         _STL_INTERNAL_CHECK(_Newsize != 0);
; 1658 :         _Check_all_orphaned();
; 1659 : #endif // _ITERATOR_DEBUG_LEVEL != 0 && defined(_ENABLE_STL_INTERNAL_CHECK)
; 1660 : 
; 1661 :         if (_Newsize > max_size()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ ; std::vector<CVec,std::allocator<CVec> >::max_size
	cmp	DWORD PTR __Newsize$[ebp], eax
	jbe	SHORT $LN2@Clear_and_

; 1662 :             _Xlength();

	call	?_Xlength@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@CAXXZ ; std::vector<CVec,std::allocator<CVec> >::_Xlength
	npad	1
$LN2@Clear_and_:

; 1663 :         }
; 1664 : 
; 1665 :         const size_type _Newcapacity = _Calculate_growth(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Calculate_growth@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEII@Z ; std::vector<CVec,std::allocator<CVec> >::_Calculate_growth
	mov	DWORD PTR __Newcapacity$[ebp], eax

; 1666 : 
; 1667 :         if (_Myfirst) { // destroy and deallocate old array

	mov	eax, DWORD PTR __Myfirst$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Clear_and_

; 1668 :             _Destroy_range(_Myfirst, _Mylast, _Al);

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Mylast$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	??$_Destroy_range@V?$allocator@VCVec@@@std@@@std@@YAXPAVCVec@@QAV1@AAV?$allocator@VCVec@@@0@@Z ; std::_Destroy_range<std::allocator<CVec> >
	add	esp, 12					; 0000000cH

; 1669 :             _ASAN_VECTOR_REMOVE;
; 1670 :             _Al.deallocate(_Myfirst, static_cast<size_type>(_Myend - _Myfirst));

	mov	eax, DWORD PTR __Myend$[ebp]
	mov	ecx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [ecx]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR __Myfirst$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@VCVec@@@std@@QAEXQAVCVec@@I@Z ; std::allocator<CVec>::deallocate
	npad	1

; 1671 : 
; 1672 :             _Myfirst = nullptr;

	mov	eax, DWORD PTR __Myfirst$[ebp]
	mov	DWORD PTR [eax], 0

; 1673 :             _Mylast  = nullptr;

	mov	eax, DWORD PTR __Mylast$[ebp]
	mov	DWORD PTR [eax], 0

; 1674 :             _Myend   = nullptr;

	mov	eax, DWORD PTR __Myend$[ebp]
	mov	DWORD PTR [eax], 0
$LN3@Clear_and_:

; 1675 :         }
; 1676 : 
; 1677 :         _Buy_raw(_Newcapacity);

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy_raw@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXI@Z ; std::vector<CVec,std::allocator<CVec> >::_Buy_raw
	npad	1
$LN1@Clear_and_:

; 1678 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Clear_and_reserve_geometric@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXI@Z ENDP ; std::vector<CVec,std::allocator<CVec> >::_Clear_and_reserve_geometric
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?resize@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEXI@Z
_TEXT	SEGMENT
$T1 = -209						; size = 1
_this$ = -8						; size = 4
__Newsize$ = 8						; size = 4
?resize@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEXI@Z PROC ; std::vector<CVec,std::allocator<CVec> >::resize, COMDAT
; _this$ = ecx

; 1584 :     _CONSTEXPR20 void resize(_CRT_GUARDOVERFLOW const size_type _Newsize) {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1585 :         // trim or append value-initialized elements, provide strong guarantee
; 1586 :         _Resize(_Newsize, _Value_init_tag{});

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Newsize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Resize@U_Value_init_tag@std@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXIABU_Value_init_tag@1@@Z ; std::vector<CVec,std::allocator<CVec> >::_Resize<std::_Value_init_tag>
	npad	1

; 1587 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?resize@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEXI@Z ENDP ; std::vector<CVec,std::allocator<CVec> >::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??4?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
__Right_data$ = -44					; size = 4
__Right_al$ = -32					; size = 4
__Al$ = -20						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??4?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAV01@ABV01@@Z PROC ; std::vector<CVec,std::allocator<CVec> >::operator=, COMDAT
; _this$ = ecx

; 1476 :     _CONSTEXPR20 vector& operator=(const vector& _Right) {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1477 :         if (this == _STD addressof(_Right)) {

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$addressof@$$CBV?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@@std@@YAPBV?$vector@VCVec@@V?$allocator@VCVec@@@std@@@0@ABV10@@Z ; std::addressof<std::vector<CVec,std::allocator<CVec> > const >
	add	esp, 4
	cmp	DWORD PTR _this$[ebp], eax
	jne	SHORT $LN2@operator

; 1478 :             return *this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN1@operator
$LN2@operator:

; 1479 :         }
; 1480 : 
; 1481 :         auto& _Al       = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAV?$allocator@VCVec@@@2@XZ ; std::vector<CVec,std::allocator<CVec> >::_Getal
	mov	DWORD PTR __Al$[ebp], eax

; 1482 :         auto& _Right_al = _Right._Getal();

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@ABEABV?$allocator@VCVec@@@2@XZ ; std::vector<CVec,std::allocator<CVec> >::_Getal
	mov	DWORD PTR __Right_al$[ebp], eax

; 1483 :         if constexpr (_Choose_pocca_v<_Alty>) {
; 1484 :             if (_Al != _Right_al) {
; 1485 :                 _Tidy();
; 1486 :                 _Mypair._Myval2._Reload_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Al), _GET_PROXY_ALLOCATOR(_Alty, _Right_al));
; 1487 :             }
; 1488 :         }
; 1489 : 
; 1490 :         _Pocca(_Al, _Right_al);

	mov	eax, DWORD PTR __Right_al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Al$[ebp]
	push	ecx
	call	??$_Pocca@V?$allocator@VCVec@@@std@@@std@@YAXAAV?$allocator@VCVec@@@0@ABV10@@Z ; std::_Pocca<std::allocator<CVec> >
	add	esp, 8

; 1491 :         auto& _Right_data = _Right._Mypair._Myval2;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR __Right_data$[ebp], eax

; 1492 :         _Assign_counted_range(_Right_data._Myfirst, static_cast<size_type>(_Right_data._Mylast - _Right_data._Myfirst));

	mov	eax, DWORD PTR __Right_data$[ebp]
	mov	ecx, DWORD PTR __Right_data$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx+4]
	cdq
	mov	ecx, 24					; 00000018H
	idiv	ecx
	push	eax
	mov	edx, DWORD PTR __Right_data$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Assign_counted_range@PAVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXPAVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::_Assign_counted_range<CVec *>
	npad	1

; 1493 : 
; 1494 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]
$LN1@operator:

; 1495 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAV01@ABV01@@Z ENDP ; std::vector<CVec,std::allocator<CVec> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?push_back@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEX$$QAVCVec@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEX$$QAVCVec@@@Z PROC ; std::vector<CVec,std::allocator<CVec> >::push_back, COMDAT
; _this$ = ecx

; 870  :     _CONSTEXPR20 void push_back(_Ty&& _Val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 871  :         // insert by moving into element at end, provide strong guarantee
; 872  :         _Emplace_one_at_back(_STD move(_Val));

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	call	??$move@AAVCVec@@@std@@YA$$QAVCVec@@AAV1@@Z ; std::move<CVec &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_one_at_back@VCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAVCVec@@$$QAV2@@Z ; std::vector<CVec,std::allocator<CVec> >::_Emplace_one_at_back<CVec>
	npad	1

; 873  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEX$$QAVCVec@@@Z ENDP ; std::vector<CVec,std::allocator<CVec> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ?push_back@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEXABVCVec@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEXABVCVec@@@Z PROC ; std::vector<CVec,std::allocator<CVec> >::push_back, COMDAT
; _this$ = ecx

; 866  :     _CONSTEXPR20 void push_back(const _Ty& _Val) { // insert element at end, provide strong guarantee

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 867  :         _Emplace_one_at_back(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Emplace_one_at_back@ABVCVec@@@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAVCVec@@ABV2@@Z ; std::vector<CVec,std::allocator<CVec> >::_Emplace_one_at_back<CVec const &>
	npad	1

; 868  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?push_back@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEXABVCVec@@@Z ENDP ; std::vector<CVec,std::allocator<CVec> >::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??1?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -236						; size = 4
_$S3$ = -29						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -8						; size = 4
??1?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ PROC ; std::vector<CVec,std::allocator<CVec> >::~vector<CVec,std::allocator<CVec> >, COMDAT
; _this$ = ecx

; 760  :     _CONSTEXPR20 ~vector() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 761  :         _Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEXXZ ; std::vector<CVec,std::allocator<CVec> >::_Tidy
	npad	1

; 762  : #if _ITERATOR_DEBUG_LEVEL != 0
; 763  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAV?$allocator@VCVec@@@2@XZ ; std::vector<CVec,std::allocator<CVec> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S3$[ebp]
	call	??$?0VCVec@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@VCVec@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><CVec>
	lea	eax, DWORD PTR _$S3$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 764  :         _Delete_plain_internal(_Alproxy, _STD exchange(_Mypair._Myval2._Myproxy, nullptr));

	mov	DWORD PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??$exchange@PAU_Container_proxy@std@@$$T@std@@YAPAU_Container_proxy@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Container_proxy *,std::nullptr_t>
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR __Alproxy$[ebp]
	push	edx
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 765  : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 766  :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@vector
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@vector:
	DD	1
	DD	$LN5@vector
$LN5@vector:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@vector
$LN4@vector:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	51					; 00000033H
	DB	0
??1?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ENDP ; std::vector<CVec,std::allocator<CVec> >::~vector<CVec,std::allocator<CVec> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vector
;	COMDAT ??0?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -233						; size = 1
$T3 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ PROC ; std::vector<CVec,std::allocator<CVec> >::vector<CVec,std::allocator<CVec> >, COMDAT
; _this$ = ecx

; 601  :     _CONSTEXPR20 vector() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@VCVec@@@std@@V?$_Vector_val@U?$_Simple_types@VCVec@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<CVec>,std::_Vector_val<std::_Simple_types<CVec> >,1>::_Compressed_pair<std::allocator<CVec>,std::_Vector_val<std::_Simple_types<CVec> >,1><>
	npad	1

; 602  :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@AAEAAV?$allocator@VCVec@@@2@XZ ; std::vector<CVec,std::allocator<CVec> >::_Getal
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??$?0VCVec@@@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@VCVec@@@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><CVec>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
	npad	1

; 603  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ENDP ; std::vector<CVec,std::allocator<CVec> >::vector<CVec,std::allocator<CVec> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAIABV?$allocator@VCVec@@@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAIABV?$allocator@VCVec@@@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<CVec> >::max_size, COMDAT

; 713  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 714  :         return static_cast<size_t>(-1) / sizeof(value_type);

	mov	eax, 178956970				; 0aaaaaaaH

; 715  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@VCVec@@@std@@@std@@SAIABV?$allocator@VCVec@@@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<CVec> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?allocate@?$allocator@VCVec@@@std@@QAEPAVCVec@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@VCVec@@@std@@QAEPAVCVec@@I@Z PROC	; std::allocator<CVec>::allocate, COMDAT
; _this$ = ecx

; 953  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 954  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 955  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$0BI@@std@@YAII@Z	; std::_Get_size_of_n<24>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits>
	add	esp, 4

; 956  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@VCVec@@@std@@QAEPAVCVec@@I@Z ENDP	; std::allocator<CVec>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?deallocate@?$allocator@VCVec@@@std@@QAEXQAVCVec@@I@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@VCVec@@@std@@QAEXQAVCVec@@I@Z PROC ; std::allocator<CVec>::deallocate, COMDAT
; _this$ = ecx

; 947  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@deallocate:

; 948  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN10@deallocate
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN6@deallocate
$LN8@deallocate:
	mov	esi, esp
	push	OFFSET ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	948					; 000003b4H
	push	OFFSET ??_C@_0GC@GDGMGNBP@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
$LN12@deallocate:
	mov	esi, esp
	push	0
	push	948					; 000003b4H
	push	OFFSET ??_C@_1ME@KJJNLLPL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	xor	eax, eax
	jne	SHORT $LN8@deallocate
$LN6@deallocate:
	xor	eax, eax
	jne	SHORT $LN4@deallocate

; 949  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 950  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	imul	eax, DWORD PTR __Count$[ebp], 24
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07@std@@YAXPAXI@Z	; std::_Deallocate<8>
	add	esp, 8

; 951  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@VCVec@@@std@@QAEXQAVCVec@@I@Z ENDP ; std::allocator<CVec>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??0?$allocator@VCVec@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@VCVec@@@std@@QAE@XZ PROC			; std::allocator<CVec>::allocator<CVec>, COMDAT
; _this$ = ecx

; 939  :     constexpr allocator() noexcept {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@VCVec@@@std@@QAE@XZ ENDP			; std::allocator<CVec>::allocator<CVec>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibSpline_Source\IdvSpline.cpp
;	COMDAT ?SplineInterpolate@CIdvBezierSpline@@AAE?AVCVec@@ABV2@000M@Z
_TEXT	SEGMENT
$T1 = -292						; size = 4
_c2334$ = -88						; size = 8
_c1223$ = -72						; size = 8
_c34$ = -56						; size = 8
_c23$ = -40						; size = 8
_c12$ = -24						; size = 8
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
_cVec1$ = 12						; size = 4
_cVec2$ = 16						; size = 4
_cVec3$ = 20						; size = 4
_cVec4$ = 24						; size = 4
_x$ = 28						; size = 4
?SplineInterpolate@CIdvBezierSpline@@AAE?AVCVec@@ABV2@000M@Z PROC ; CIdvBezierSpline::SplineInterpolate, COMDAT
; _this$ = ecx

; 340  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 296				; 00000128H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-104]
	mov	ecx, 26					; 0000001aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 0

; 341  :     float c12[2] = { VecInterpolate(cVec1[0], cVec2[0], x), VecInterpolate(cVec1[1], cVec2[1], x) };

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _cVec2$[ebp]
	call	??BCVec@@QBEPBMXZ			; CVec::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _cVec1$[ebp]
	call	??BCVec@@QBEPBMXZ			; CVec::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	call	?VecInterpolate@@YAMMMM@Z		; VecInterpolate
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _c12$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _cVec2$[ebp]
	call	??BCVec@@QBEPBMXZ			; CVec::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR [eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _cVec1$[ebp]
	call	??BCVec@@QBEPBMXZ			; CVec::operator float const *
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	call	?VecInterpolate@@YAMMMM@Z		; VecInterpolate
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _c12$[ebp+4]

; 342  :     float c23[2] = { VecInterpolate(cVec2[0], cVec3[0], x), VecInterpolate(cVec2[1], cVec3[1], x) };

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _cVec3$[ebp]
	call	??BCVec@@QBEPBMXZ			; CVec::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _cVec2$[ebp]
	call	??BCVec@@QBEPBMXZ			; CVec::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	call	?VecInterpolate@@YAMMMM@Z		; VecInterpolate
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _c23$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _cVec3$[ebp]
	call	??BCVec@@QBEPBMXZ			; CVec::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR [eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _cVec2$[ebp]
	call	??BCVec@@QBEPBMXZ			; CVec::operator float const *
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	call	?VecInterpolate@@YAMMMM@Z		; VecInterpolate
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _c23$[ebp+4]

; 343  :     float c34[2] = { VecInterpolate(cVec3[0], cVec4[0], x), VecInterpolate(cVec3[1], cVec4[1], x) };

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _cVec4$[ebp]
	call	??BCVec@@QBEPBMXZ			; CVec::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _cVec3$[ebp]
	call	??BCVec@@QBEPBMXZ			; CVec::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	call	?VecInterpolate@@YAMMMM@Z		; VecInterpolate
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _c34$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _cVec4$[ebp]
	call	??BCVec@@QBEPBMXZ			; CVec::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR [eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _cVec3$[ebp]
	call	??BCVec@@QBEPBMXZ			; CVec::operator float const *
	mov	edx, 4
	shl	edx, 0
	push	ecx
	movss	xmm0, DWORD PTR [eax+edx]
	movss	DWORD PTR [esp], xmm0
	call	?VecInterpolate@@YAMMMM@Z		; VecInterpolate
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _c34$[ebp+4]

; 344  :     float c1223[2] = { VecInterpolate(c12[0], c23[0], x), VecInterpolate(c12[1], c23[1], x) };

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	ecx, eax, 0
	push	ecx
	movss	xmm0, DWORD PTR _c23$[ebp+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	push	ecx
	movss	xmm0, DWORD PTR _c12$[ebp+eax]
	movss	DWORD PTR [esp], xmm0
	call	?VecInterpolate@@YAMMMM@Z		; VecInterpolate
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _c1223$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR _c23$[ebp+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR _c12$[ebp+ecx]
	movss	DWORD PTR [esp], xmm0
	call	?VecInterpolate@@YAMMMM@Z		; VecInterpolate
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _c1223$[ebp+4]

; 345  :     float c2334[2] = { VecInterpolate(c23[0], c34[0], x), VecInterpolate(c23[1], c34[1], x) };

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	imul	ecx, eax, 0
	push	ecx
	movss	xmm0, DWORD PTR _c34$[ebp+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	push	ecx
	movss	xmm0, DWORD PTR _c23$[ebp+eax]
	movss	DWORD PTR [esp], xmm0
	call	?VecInterpolate@@YAMMMM@Z		; VecInterpolate
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _c2334$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR _c34$[ebp+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR _c23$[ebp+ecx]
	movss	DWORD PTR [esp], xmm0
	call	?VecInterpolate@@YAMMMM@Z		; VecInterpolate
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _c2334$[ebp+4]

; 346  : 
; 347  :     return CVec(VecInterpolate(c1223[0], c2334[0], x), VecInterpolate(c1223[1], c2334[1], x));

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, 4
	shl	eax, 0
	push	ecx
	movss	xmm0, DWORD PTR _c2334$[ebp+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR _c1223$[ebp+ecx]
	movss	DWORD PTR [esp], xmm0
	call	?VecInterpolate@@YAMMMM@Z		; VecInterpolate
	add	esp, 8
	fstp	DWORD PTR [esp]
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	push	ecx
	movss	xmm0, DWORD PTR _c2334$[ebp+eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, 4
	imul	edx, ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR _c1223$[ebp+edx]
	movss	DWORD PTR [esp], xmm0
	call	?VecInterpolate@@YAMMMM@Z		; VecInterpolate
	add	esp, 8
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0CVec@@QAE@MM@Z			; CVec::CVec
	mov	eax, DWORD PTR $T1[ebp]
	or	eax, 1
	mov	DWORD PTR $T1[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 348  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@SplineInte
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 296				; 00000128H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	1
$LN11@SplineInte:
	DD	5
	DD	$LN10@SplineInte
$LN10@SplineInte:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN5@SplineInte
	DD	-40					; ffffffd8H
	DD	8
	DD	$LN6@SplineInte
	DD	-56					; ffffffc8H
	DD	8
	DD	$LN7@SplineInte
	DD	-72					; ffffffb8H
	DD	8
	DD	$LN8@SplineInte
	DD	-88					; ffffffa8H
	DD	8
	DD	$LN9@SplineInte
$LN9@SplineInte:
	DB	99					; 00000063H
	DB	50					; 00000032H
	DB	51					; 00000033H
	DB	51					; 00000033H
	DB	52					; 00000034H
	DB	0
$LN8@SplineInte:
	DB	99					; 00000063H
	DB	49					; 00000031H
	DB	50					; 00000032H
	DB	50					; 00000032H
	DB	51					; 00000033H
	DB	0
$LN7@SplineInte:
	DB	99					; 00000063H
	DB	51					; 00000033H
	DB	52					; 00000034H
	DB	0
$LN6@SplineInte:
	DB	99					; 00000063H
	DB	50					; 00000032H
	DB	51					; 00000033H
	DB	0
$LN5@SplineInte:
	DB	99					; 00000063H
	DB	49					; 00000031H
	DB	50					; 00000032H
	DB	0
?SplineInterpolate@CIdvBezierSpline@@AAE?AVCVec@@ABV2@000M@Z ENDP ; CIdvBezierSpline::SplineInterpolate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibSpline_Source\IdvSpline.cpp
;	COMDAT ?EvaluateRawPoint@CIdvBezierSpline@@AAE?AVCVec@@M@Z
_TEXT	SEGMENT
tv167 = -348						; size = 4
tv75 = -348						; size = 4
tv73 = -348						; size = 4
$T2 = -340						; size = 4
$T3 = -328						; size = 24
_i$4 = -104						; size = 4
_bDetermined$5 = -89					; size = 1
_fFraction$6 = -80					; size = 4
_nSize$ = -68						; size = 4
_cValue$ = -56						; size = 24
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_fPercent$ = 12						; size = 4
?EvaluateRawPoint@CIdvBezierSpline@@AAE?AVCVec@@M@Z PROC ; CIdvBezierSpline::EvaluateRawPoint, COMDAT
; _this$ = ecx

; 297  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?EvaluateRawPoint@CIdvBezierSpline@@AAE?AVCVec@@M@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 336				; 00000150H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-156]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0

; 298  :     CVec cValue(2);

	push	2
	lea	ecx, DWORD PTR _cValue$[ebp]
	call	??0CVec@@QAE@H@Z			; CVec::CVec
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 299  : 
; 300  :     int nSize = m_vControlPoints.size( );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ ; std::vector<CVec,std::allocator<CVec> >::size
	mov	DWORD PTR _nSize$[ebp], eax

; 301  :     if (nSize > 1)

	cmp	DWORD PTR _nSize$[ebp], 1
	jle	$LN3@EvaluateRa

; 302  :     {
; 303  :         // clip domain
; 304  :         fPercent = __max(0.0f, fPercent);

	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR _fPercent$[ebp]
	jbe	SHORT $LN10@EvaluateRa
	xorps	xmm0, xmm0
	movss	DWORD PTR tv73[ebp], xmm0
	jmp	SHORT $LN11@EvaluateRa
$LN10@EvaluateRa:
	movss	xmm0, DWORD PTR _fPercent$[ebp]
	movss	DWORD PTR tv73[ebp], xmm0
$LN11@EvaluateRa:
	movss	xmm0, DWORD PTR tv73[ebp]
	movss	DWORD PTR _fPercent$[ebp], xmm0

; 305  :         fPercent = __min(1.0f, fPercent);

	movss	xmm0, DWORD PTR _fPercent$[ebp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN12@EvaluateRa
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv75[ebp], xmm0
	jmp	SHORT $LN13@EvaluateRa
$LN12@EvaluateRa:
	movss	xmm0, DWORD PTR _fPercent$[ebp]
	movss	DWORD PTR tv75[ebp], xmm0
$LN13@EvaluateRa:
	movss	xmm0, DWORD PTR tv75[ebp]
	movss	DWORD PTR _fPercent$[ebp], xmm0

; 306  : 
; 307  :         // scale percent to span number of control points
; 308  :         fPercent *= nSize - 1;

	mov	eax, DWORD PTR _nSize$[ebp]
	sub	eax, 1
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR _fPercent$[ebp]
	movss	DWORD PTR _fPercent$[ebp], xmm0

; 309  :         // fractional amount between control points
; 310  :         float fFraction = fPercent - float(int(fPercent));

	cvttss2si eax, DWORD PTR _fPercent$[ebp]
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR _fPercent$[ebp]
	subss	xmm1, xmm0
	movss	DWORD PTR _fFraction$6[ebp], xmm1

; 311  : 
; 312  :         bool bDetermined = false;

	mov	BYTE PTR _bDetermined$5[ebp], 0

; 313  :         for (int i = 0; i < nSize && !bDetermined; ++i)

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN4@EvaluateRa
$LN2@EvaluateRa:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN4@EvaluateRa:
	mov	eax, DWORD PTR _i$4[ebp]
	cmp	eax, DWORD PTR _nSize$[ebp]
	jge	$LN3@EvaluateRa
	movzx	eax, BYTE PTR _bDetermined$5[ebp]
	test	eax, eax
	jne	$LN3@EvaluateRa

; 314  :         {   
; 315  :             if (i == nSize - 1)

	mov	eax, DWORD PTR _nSize$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$4[ebp], eax
	jne	SHORT $LN6@EvaluateRa

; 316  :             {
; 317  :                 cValue = m_vControlPoints[i];

	mov	eax, DWORD PTR _i$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cValue$[ebp], ecx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _cValue$[ebp+4], edx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _cValue$[ebp+8], ecx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _cValue$[ebp+12], edx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _cValue$[ebp+16], ecx
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR _cValue$[ebp+20], edx

; 318  :                 bDetermined = true;

	mov	BYTE PTR _bDetermined$5[ebp], 1

; 319  :             }

	jmp	$LN8@EvaluateRa
$LN6@EvaluateRa:

; 320  :             else if (fPercent >= float(i) && fPercent < float(i + 1))

	cvtsi2ss xmm0, DWORD PTR _i$4[ebp]
	movss	xmm1, DWORD PTR _fPercent$[ebp]
	comiss	xmm1, xmm0
	jb	$LN8@EvaluateRa
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR _fPercent$[ebp]
	jbe	$LN8@EvaluateRa

; 321  :             {
; 322  :                 cValue = SplineInterpolate(m_vSplinePoints[i * 3],

	push	ecx
	movss	xmm0, DWORD PTR _fFraction$6[ebp]
	movss	DWORD PTR [esp], xmm0
	imul	eax, DWORD PTR _i$4[ebp], 3
	add	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	push	eax
	imul	ecx, DWORD PTR _i$4[ebp], 3
	add	ecx, 2
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	push	eax
	imul	edx, DWORD PTR _i$4[ebp], 3
	add	edx, 1
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	push	eax
	imul	eax, DWORD PTR _i$4[ebp], 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SplineInterpolate@CIdvBezierSpline@@AAE?AVCVec@@ABV2@000M@Z ; CIdvBezierSpline::SplineInterpolate
	mov	DWORD PTR tv167[ebp], eax
	mov	edx, DWORD PTR tv167[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _cValue$[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _cValue$[ebp+4], ecx
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _cValue$[ebp+8], eax
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _cValue$[ebp+12], ecx
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _cValue$[ebp+16], eax
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR _cValue$[ebp+20], ecx
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1CVec@@QAE@XZ				; CVec::~CVec
	npad	1

; 323  :                                            m_vSplinePoints[i * 3 + 1], 
; 324  :                                            m_vSplinePoints[i * 3 + 2], 
; 325  :                                            m_vSplinePoints[i * 3 + 3], 
; 326  :                                            fFraction);
; 327  :                 bDetermined = true;

	mov	BYTE PTR _bDetermined$5[ebp], 1
$LN8@EvaluateRa:

; 328  :             }
; 329  :         }

	jmp	$LN2@EvaluateRa
$LN3@EvaluateRa:

; 330  :     }
; 331  : 
; 332  :     return cValue;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _cValue$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _cValue$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _cValue$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _cValue$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _cValue$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _cValue$[ebp+20]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR $T2[ebp]
	or	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cValue$[ebp]
	call	??1CVec@@QAE@XZ				; CVec::~CVec
	npad	1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 333  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@EvaluateRa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 348				; 0000015cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN21@EvaluateRa:
	DD	1
	DD	$LN20@EvaluateRa
$LN20@EvaluateRa:
	DD	-56					; ffffffc8H
	DD	24					; 00000018H
	DD	$LN18@EvaluateRa
$LN18@EvaluateRa:
	DB	99					; 00000063H
	DB	86					; 00000056H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?EvaluateRawPoint@CIdvBezierSpline@@AAE?AVCVec@@M@Z$0:
	lea	ecx, DWORD PTR _cValue$[ebp]
	jmp	??1CVec@@QAE@XZ				; CVec::~CVec
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?EvaluateRawPoint@CIdvBezierSpline@@AAE?AVCVec@@M@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-352]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?EvaluateRawPoint@CIdvBezierSpline@@AAE?AVCVec@@M@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?EvaluateRawPoint@CIdvBezierSpline@@AAE?AVCVec@@M@Z ENDP ; CIdvBezierSpline::EvaluateRawPoint
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibSpline_Source\IdvSpline.cpp
;	COMDAT ?CreateEvenlySpacedPoints@CIdvBezierSpline@@AAEXI@Z
_TEXT	SEGMENT
tv224 = -396						; size = 4
tv312 = -392						; size = 8
tv240 = -392						; size = 8
tv308 = -384						; size = 4
tv236 = -384						; size = 4
tv303 = -380						; size = 8
tv231 = -380						; size = 8
tv411 = -372						; size = 4
tv409 = -372						; size = 4
tv299 = -372						; size = 4
tv227 = -372						; size = 4
$T2 = -364						; size = 24
_cOut$3 = -140						; size = 24
_j$4 = -108						; size = 4
_fPercent$5 = -96					; size = 4
_i$6 = -84						; size = 4
_nIndex$ = -72						; size = 4
_i$7 = -60						; size = 4
_vRawPoints$ = -48					; size = 16
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_nNumPoints$ = 8					; size = 4
?CreateEvenlySpacedPoints@CIdvBezierSpline@@AAEXI@Z PROC ; CIdvBezierSpline::CreateEvenlySpacedPoints, COMDAT
; _this$ = ecx

; 258  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateEvenlySpacedPoints@CIdvBezierSpline@@AAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 384				; 00000180H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 259  :     vector<CVec> vRawPoints;

	lea	ecx, DWORD PTR _vRawPoints$[ebp]
	call	??0?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::vector<CVec,std::allocator<CVec> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 260  :     vRawPoints.resize(nNumPoints);

	mov	eax, DWORD PTR _nNumPoints$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vRawPoints$[ebp]
	call	?resize@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEXI@Z ; std::vector<CVec,std::allocator<CVec> >::resize
	npad	1

; 261  : 
; 262  :     for (unsigned int i = 0; i < nNumPoints; ++i)

	mov	DWORD PTR _i$7[ebp], 0
	jmp	SHORT $LN4@CreateEven
$LN2@CreateEven:
	mov	eax, DWORD PTR _i$7[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7[ebp], eax
$LN4@CreateEven:
	mov	eax, DWORD PTR _i$7[ebp]
	cmp	eax, DWORD PTR _nNumPoints$[ebp]
	jae	$LN3@CreateEven

; 263  :         vRawPoints[i] = EvaluateRawPoint(float(i) / float(nNumPoints));

	mov	eax, DWORD PTR _i$7[ebp]
	mov	DWORD PTR tv227[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv227[ebp]
	mov	ecx, DWORD PTR tv227[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv231[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv231[ebp]
	mov	edx, DWORD PTR _nNumPoints$[ebp]
	mov	DWORD PTR tv236[ebp], edx
	cvtsi2sd xmm1, DWORD PTR tv236[ebp]
	mov	eax, DWORD PTR tv236[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv240[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv240[ebp]
	divss	xmm0, xmm1
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EvaluateRawPoint@CIdvBezierSpline@@AAE?AVCVec@@M@Z ; CIdvBezierSpline::EvaluateRawPoint
	mov	DWORD PTR tv224[ebp], eax
	mov	esi, DWORD PTR tv224[ebp]
	mov	edx, DWORD PTR _i$7[ebp]
	push	edx
	lea	ecx, DWORD PTR _vRawPoints$[ebp]
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR [esi+20]
	mov	DWORD PTR [eax+20], edx
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1CVec@@QAE@XZ				; CVec::~CVec
	npad	1
	jmp	$LN2@CreateEven
$LN3@CreateEven:

; 264  : 
; 265  :     m_vEvenlySpacedPoints.clear( );

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	?clear@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEXXZ ; std::vector<CVec,std::allocator<CVec> >::clear
	npad	1

; 266  :     m_vEvenlySpacedPoints.resize(nNumPoints);

	mov	eax, DWORD PTR _nNumPoints$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	?resize@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEXI@Z ; std::vector<CVec,std::allocator<CVec> >::resize
	npad	1

; 267  :     unsigned int nIndex = 0;

	mov	DWORD PTR _nIndex$[ebp], 0

; 268  :     m_vEvenlySpacedPoints[0] = m_vControlPoints[0];

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	esi, eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR [esi+20]
	mov	DWORD PTR [eax+20], edx

; 269  :     //m_vEvenlySpacedPoints.push_back(m_vControlPoints[0]);
; 270  :     for (unsigned int  i = 1; i < nNumPoints - 1; ++i)

	mov	DWORD PTR _i$6[ebp], 1
	jmp	SHORT $LN7@CreateEven
$LN5@CreateEven:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN7@CreateEven:
	mov	eax, DWORD PTR _nNumPoints$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$6[ebp], eax
	jae	$LN6@CreateEven

; 271  :     {
; 272  :         float fPercent = float(i) / float(nNumPoints);

	mov	eax, DWORD PTR _i$6[ebp]
	mov	DWORD PTR tv299[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv299[ebp]
	mov	ecx, DWORD PTR tv299[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv303[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv303[ebp]
	mov	edx, DWORD PTR _nNumPoints$[ebp]
	mov	DWORD PTR tv308[ebp], edx
	cvtsi2sd xmm1, DWORD PTR tv308[ebp]
	mov	eax, DWORD PTR tv308[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv312[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv312[ebp]
	divss	xmm0, xmm1
	movss	DWORD PTR _fPercent$5[ebp], xmm0

; 273  :         for (unsigned int j = nIndex; j < nNumPoints - 1; ++j)

	mov	eax, DWORD PTR _nIndex$[ebp]
	mov	DWORD PTR _j$4[ebp], eax
	jmp	SHORT $LN10@CreateEven
$LN8@CreateEven:
	mov	eax, DWORD PTR _j$4[ebp]
	add	eax, 1
	mov	DWORD PTR _j$4[ebp], eax
$LN10@CreateEven:
	mov	eax, DWORD PTR _nNumPoints$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _j$4[ebp], eax
	jae	SHORT $LN9@CreateEven

; 274  :         {
; 275  :             if (fPercent >= vRawPoints[j][0] &&

	push	0
	mov	eax, DWORD PTR _j$4[ebp]
	push	eax
	lea	ecx, DWORD PTR _vRawPoints$[ebp]
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	ecx, eax
	call	??ACVec@@QAEAAMH@Z			; CVec::operator[]
	movss	xmm0, DWORD PTR _fPercent$5[ebp]
	comiss	xmm0, DWORD PTR [eax]
	jb	SHORT $LN11@CreateEven
	push	0
	mov	eax, DWORD PTR _j$4[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR _vRawPoints$[ebp]
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	ecx, eax
	call	??ACVec@@QAEAAMH@Z			; CVec::operator[]
	movss	xmm0, DWORD PTR [eax]
	comiss	xmm0, DWORD PTR _fPercent$5[ebp]
	jbe	SHORT $LN11@CreateEven

; 276  :                 fPercent < vRawPoints[j + 1][0])
; 277  :             {
; 278  :                 nIndex = j;

	mov	eax, DWORD PTR _j$4[ebp]
	mov	DWORD PTR _nIndex$[ebp], eax

; 279  :                 break;

	jmp	SHORT $LN9@CreateEven
$LN11@CreateEven:

; 280  :             }
; 281  :         }

	jmp	SHORT $LN8@CreateEven
$LN9@CreateEven:

; 282  :         CVec cOut(fPercent, 0.0f, 0.0f, 0.0f, 0.0f);

	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _fPercent$5[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _cOut$3[ebp]
	call	??0CVec@@QAE@MMMMM@Z			; CVec::CVec
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 283  :         fPercent = (fPercent - vRawPoints[nIndex][0]) / (vRawPoints[nIndex + 1][0] - vRawPoints[nIndex][0]);

	push	0
	mov	eax, DWORD PTR _nIndex$[ebp]
	push	eax
	lea	ecx, DWORD PTR _vRawPoints$[ebp]
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	ecx, eax
	call	??ACVec@@QAEAAMH@Z			; CVec::operator[]
	movss	xmm0, DWORD PTR _fPercent$5[ebp]
	subss	xmm0, DWORD PTR [eax]
	push	0
	mov	ecx, DWORD PTR _nIndex$[ebp]
	add	ecx, 1
	push	ecx
	lea	ecx, DWORD PTR _vRawPoints$[ebp]
	movss	DWORD PTR tv409[ebp], xmm0
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	ecx, eax
	call	??ACVec@@QAEAAMH@Z			; CVec::operator[]
	mov	esi, eax
	push	0
	mov	edx, DWORD PTR _nIndex$[ebp]
	push	edx
	lea	ecx, DWORD PTR _vRawPoints$[ebp]
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	ecx, eax
	call	??ACVec@@QAEAAMH@Z			; CVec::operator[]
	movss	xmm0, DWORD PTR [esi]
	subss	xmm0, DWORD PTR [eax]
	movss	xmm1, DWORD PTR tv409[ebp]
	divss	xmm1, xmm0
	movss	DWORD PTR _fPercent$5[ebp], xmm1

; 284  :         cOut[1] = VecInterpolate(vRawPoints[nIndex][1], vRawPoints[nIndex + 1][1], fPercent);

	push	ecx
	movss	xmm0, DWORD PTR _fPercent$5[ebp]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	eax, DWORD PTR _nIndex$[ebp]
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR _vRawPoints$[ebp]
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	ecx, eax
	call	??ACVec@@QAEAAMH@Z			; CVec::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	push	1
	mov	ecx, DWORD PTR _nIndex$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _vRawPoints$[ebp]
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	ecx, eax
	call	??ACVec@@QAEAAMH@Z			; CVec::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	call	?VecInterpolate@@YAMMMM@Z		; VecInterpolate
	add	esp, 12					; 0000000cH
	push	1
	lea	ecx, DWORD PTR _cOut$3[ebp]
	fstp	DWORD PTR tv411[ebp]
	call	??ACVec@@QAEAAMH@Z			; CVec::operator[]
	fld	DWORD PTR tv411[ebp]
	fstp	DWORD PTR [eax]

; 285  :         //m_vEvenlySpacedPoints.push_back(cOut);
; 286  :         m_vEvenlySpacedPoints[i] = cOut;

	mov	eax, DWORD PTR _i$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	ecx, DWORD PTR _cOut$3[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _cOut$3[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _cOut$3[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _cOut$3[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _cOut$3[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _cOut$3[ebp+20]
	mov	DWORD PTR [eax+20], edx

; 287  :     }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _cOut$3[ebp]
	call	??1CVec@@QAE@XZ				; CVec::~CVec
	npad	1
	jmp	$LN5@CreateEven
$LN6@CreateEven:

; 288  :     //m_vEvenlySpacedPoints.push_back(m_vControlPoints[m_vControlPoints.size( ) - 1]);
; 289  :     m_vEvenlySpacedPoints[nNumPoints - 1] = m_vControlPoints[m_vControlPoints.size( ) - 1];

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ ; std::vector<CVec,std::allocator<CVec> >::size
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	esi, eax
	mov	eax, DWORD PTR _nNumPoints$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR [esi+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR [esi+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR [esi+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR [esi+20]
	mov	DWORD PTR [eax+20], edx

; 290  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _vRawPoints$[ebp]
	call	??1?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::~vector<CVec,std::allocator<CVec> >
	npad	1
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@CreateEven
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 396				; 0000018cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN20@CreateEven:
	DD	2
	DD	$LN19@CreateEven
$LN19@CreateEven:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN16@CreateEven
	DD	-140					; ffffff74H
	DD	24					; 00000018H
	DD	$LN17@CreateEven
$LN17@CreateEven:
	DB	99					; 00000063H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$LN16@CreateEven:
	DB	118					; 00000076H
	DB	82					; 00000052H
	DB	97					; 00000061H
	DB	119					; 00000077H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CreateEvenlySpacedPoints@CIdvBezierSpline@@AAEXI@Z$0:
	lea	ecx, DWORD PTR _vRawPoints$[ebp]
	jmp	??1?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::~vector<CVec,std::allocator<CVec> >
__unwindfunclet$?CreateEvenlySpacedPoints@CIdvBezierSpline@@AAEXI@Z$2:
	lea	ecx, DWORD PTR _cOut$3[ebp]
	jmp	??1CVec@@QAE@XZ				; CVec::~CVec
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?CreateEvenlySpacedPoints@CIdvBezierSpline@@AAEXI@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-400]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateEvenlySpacedPoints@CIdvBezierSpline@@AAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateEvenlySpacedPoints@CIdvBezierSpline@@AAEXI@Z ENDP ; CIdvBezierSpline::CreateEvenlySpacedPoints
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibSpline_Source\IdvSpline.cpp
;	COMDAT ?AddControlPoint@CIdvBezierSpline@@AAEXQAM0M@Z
_TEXT	SEGMENT
tv187 = -440						; size = 4
tv183 = -440						; size = 4
tv189 = -436						; size = 4
tv65 = -436						; size = 4
tv185 = -432						; size = 4
tv181 = -432						; size = 4
tv188 = -428						; size = 4
tv74 = -428						; size = 4
$T2 = -420						; size = 24
$T3 = -388						; size = 24
$T4 = -356						; size = 24
$T5 = -324						; size = 24
_nLastEntry$6 = -100					; size = 4
_cTangent$ = -88					; size = 24
_cPoint$ = -56						; size = 24
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_afPoint$ = 8						; size = 4
_afTangent$ = 12					; size = 4
_fTangentLength$ = 16					; size = 4
?AddControlPoint@CIdvBezierSpline@@AAEXQAM0M@Z PROC	; CIdvBezierSpline::AddControlPoint, COMDAT
; _this$ = ecx

; 235  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddControlPoint@CIdvBezierSpline@@AAEXQAM0M@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 428				; 000001acH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-248]
	mov	ecx, 59					; 0000003bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 236  :     CVec cPoint(afPoint[0], afPoint[1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _afPoint$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _afPoint$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _cPoint$[ebp]
	call	??0CVec@@QAE@MM@Z			; CVec::CVec
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 237  :     CVec cTangent(afTangent[0], afTangent[1]);

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _afTangent$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _afTangent$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _cTangent$[ebp]
	call	??0CVec@@QAE@MM@Z			; CVec::CVec
	mov	BYTE PTR __$EHRec$[ebp+8], 1

; 238  :     cTangent.Normalize( );

	lea	ecx, DWORD PTR _cTangent$[ebp]
	call	?Normalize@CVec@@QAEXXZ			; CVec::Normalize
	npad	1

; 239  :     
; 240  :     if (!m_vControlPoints.empty( ))

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?empty@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBE_NXZ ; std::vector<CVec,std::allocator<CVec> >::empty
	movzx	eax, al
	test	eax, eax
	jne	$LN2@AddControl

; 241  :     {
; 242  :         unsigned int nLastEntry = m_vControlPoints.size( ) - 1;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ ; std::vector<CVec,std::allocator<CVec> >::size
	sub	eax, 1
	mov	DWORD PTR _nLastEntry$6[ebp], eax

; 243  :         m_vSplinePoints.push_back(m_vControlPoints[nLastEntry] + (m_vControlPointTangents[nLastEntry] * m_vControlPointTangentLengths[nLastEntry]));

	mov	eax, DWORD PTR _nLastEntry$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??A?$vector@MV?$allocator@M@std@@@std@@QAEAAMI@Z ; std::vector<float,std::allocator<float> >::operator[]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	mov	edx, DWORD PTR _nLastEntry$6[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	ecx, eax
	call	??DCVec@@QBE?AV0@M@Z			; CVec::operator*
	mov	DWORD PTR tv74[ebp], eax
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR tv181[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR tv181[ebp]
	push	ecx
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	mov	eax, DWORD PTR _nLastEntry$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEAAVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	ecx, eax
	call	??HCVec@@QBE?AV0@ABV0@@Z		; CVec::operator+
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv183[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR tv183[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	?push_back@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEX$$QAVCVec@@@Z ; std::vector<CVec,std::allocator<CVec> >::push_back
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1CVec@@QAE@XZ				; CVec::~CVec
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1CVec@@QAE@XZ				; CVec::~CVec
	npad	1

; 244  :         m_vSplinePoints.push_back(cPoint - (cTangent * fTangentLength));

	push	ecx
	movss	xmm0, DWORD PTR _fTangentLength$[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR _cTangent$[ebp]
	call	??DCVec@@QBE?AV0@M@Z			; CVec::operator*
	mov	DWORD PTR tv188[ebp], eax
	mov	ecx, DWORD PTR tv188[ebp]
	mov	DWORD PTR tv185[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR tv185[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	lea	ecx, DWORD PTR _cPoint$[ebp]
	call	??GCVec@@QBE?AV0@ABV0@@Z		; CVec::operator-
	mov	DWORD PTR tv189[ebp], eax
	mov	ecx, DWORD PTR tv189[ebp]
	mov	DWORD PTR tv187[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	edx, DWORD PTR tv187[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	?push_back@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEX$$QAVCVec@@@Z ; std::vector<CVec,std::allocator<CVec> >::push_back
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1CVec@@QAE@XZ				; CVec::~CVec
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1CVec@@QAE@XZ				; CVec::~CVec
	npad	1
$LN2@AddControl:

; 245  :     }
; 246  : 
; 247  :     m_vControlPoints.push_back(cPoint);

	lea	eax, DWORD PTR _cPoint$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?push_back@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEXABVCVec@@@Z ; std::vector<CVec,std::allocator<CVec> >::push_back
	npad	1

; 248  :     m_vSplinePoints.push_back(cPoint);

	lea	eax, DWORD PTR _cPoint$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	?push_back@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEXABVCVec@@@Z ; std::vector<CVec,std::allocator<CVec> >::push_back
	npad	1

; 249  :     m_vControlPointTangents.push_back(cTangent);

	lea	eax, DWORD PTR _cTangent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?push_back@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAEXABVCVec@@@Z ; std::vector<CVec,std::allocator<CVec> >::push_back
	npad	1

; 250  :     m_vControlPointTangentLengths.push_back(fTangentLength);

	lea	eax, DWORD PTR _fTangentLength$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?push_back@?$vector@MV?$allocator@M@std@@@std@@QAEXABM@Z ; std::vector<float,std::allocator<float> >::push_back
	npad	1

; 251  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _cTangent$[ebp]
	call	??1CVec@@QAE@XZ				; CVec::~CVec
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cPoint$[ebp]
	call	??1CVec@@QAE@XZ				; CVec::~CVec
	npad	1
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@AddControl
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 440				; 000001b8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN14@AddControl:
	DD	2
	DD	$LN13@AddControl
$LN13@AddControl:
	DD	-56					; ffffffc8H
	DD	24					; 00000018H
	DD	$LN10@AddControl
	DD	-88					; ffffffa8H
	DD	24					; 00000018H
	DD	$LN11@AddControl
$LN11@AddControl:
	DB	99					; 00000063H
	DB	84					; 00000054H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN10@AddControl:
	DB	99					; 00000063H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddControlPoint@CIdvBezierSpline@@AAEXQAM0M@Z$0:
	lea	ecx, DWORD PTR _cPoint$[ebp]
	jmp	??1CVec@@QAE@XZ				; CVec::~CVec
__unwindfunclet$?AddControlPoint@CIdvBezierSpline@@AAEXQAM0M@Z$1:
	lea	ecx, DWORD PTR _cTangent$[ebp]
	jmp	??1CVec@@QAE@XZ				; CVec::~CVec
__unwindfunclet$?AddControlPoint@CIdvBezierSpline@@AAEXQAM0M@Z$2:
	lea	ecx, DWORD PTR $T5[ebp]
	jmp	??1CVec@@QAE@XZ				; CVec::~CVec
__unwindfunclet$?AddControlPoint@CIdvBezierSpline@@AAEXQAM0M@Z$3:
	lea	ecx, DWORD PTR $T4[ebp]
	jmp	??1CVec@@QAE@XZ				; CVec::~CVec
__unwindfunclet$?AddControlPoint@CIdvBezierSpline@@AAEXQAM0M@Z$4:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1CVec@@QAE@XZ				; CVec::~CVec
__unwindfunclet$?AddControlPoint@CIdvBezierSpline@@AAEXQAM0M@Z$5:
	lea	ecx, DWORD PTR $T2[ebp]
	jmp	??1CVec@@QAE@XZ				; CVec::~CVec
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?AddControlPoint@CIdvBezierSpline@@AAEXQAM0M@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-444]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddControlPoint@CIdvBezierSpline@@AAEXQAM0M@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddControlPoint@CIdvBezierSpline@@AAEXQAM0M@Z ENDP	; CIdvBezierSpline::AddControlPoint
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibSpline_Source\IdvSpline.cpp
;	COMDAT ?ClearCache@CIdvBezierSpline@@SAXXZ
_TEXT	SEGMENT
tv145 = -260						; size = 4
tv134 = -260						; size = 4
$T1 = -252						; size = 4
$T2 = -240						; size = 12
$T3 = -217						; size = 1
_i$4 = -16						; size = 12
?ClearCache@CIdvBezierSpline@@SAXXZ PROC		; CIdvBezierSpline::ClearCache, COMDAT

; 82   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 260				; 00000104H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 83   :     for (map<string, CIdvBezierSpline*>::iterator i = g_mSplineCache.begin( ); i != g_mSplineCache.end( ); ++i)

	lea	eax, DWORD PTR _i$4[ebp]
	push	eax
	mov	ecx, OFFSET ?g_mSplineCache@@3V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@A
	call	?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::begin
	npad	1
	jmp	SHORT $LN4@ClearCache
$LN2@ClearCache:
	lea	ecx, DWORD PTR _i$4[ebp]
	call	??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator++
	npad	1
$LN4@ClearCache:
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, OFFSET ?g_mSplineCache@@3V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@A
	call	?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAE?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@2@XZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::end
	mov	DWORD PTR tv145[ebp], eax
	mov	ecx, DWORD PTR tv145[ebp]
	push	ecx
	lea	ecx, DWORD PTR _i$4[ebp]
	call	??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator!=
	mov	BYTE PTR $T3[ebp], al
	lea	ecx, DWORD PTR $T2[ebp]
	call	??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAE@XZ
	movzx	edx, BYTE PTR $T3[ebp]
	test	edx, edx
	je	SHORT $LN3@ClearCache

; 84   :     {
; 85   :         delete i->second;

	lea	ecx, DWORD PTR _i$4[ebp]
	call	??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator->
	mov	eax, DWORD PTR [eax+28]
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN6@ClearCache
	push	1
	mov	ecx, DWORD PTR $T1[ebp]
	call	??_GCIdvBezierSpline@@QAEPAXI@Z
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN7@ClearCache
$LN6@ClearCache:
	mov	DWORD PTR tv134[ebp], 0
$LN7@ClearCache:

; 86   :         i->second = NULL;

	lea	ecx, DWORD PTR _i$4[ebp]
	call	??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@1@XZ ; std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > > >::operator->
	mov	DWORD PTR [eax+28], 0
	jmp	$LN2@ClearCache
$LN3@ClearCache:

; 87   :     }

	lea	ecx, DWORD PTR _i$4[ebp]
	call	??1?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@std@@@std@@@std@@QAE@XZ
	npad	1

; 88   : 
; 89   :     g_mSplineCache.clear( );

	mov	ecx, OFFSET ?g_mSplineCache@@3V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@A
	call	?clear@?$_Tree@V?$_Tmap_traits@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@$0A@@std@@@std@@QAEXXZ ; std::_Tree<std::_Tmap_traits<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> >,0> >::clear
	npad	1

; 90   : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@ClearCache
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 260				; 00000104H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN12@ClearCache:
	DD	1
	DD	$LN11@ClearCache
$LN11@ClearCache:
	DD	-16					; fffffff0H
	DD	12					; 0000000cH
	DD	$LN10@ClearCache
$LN10@ClearCache:
	DB	105					; 00000069H
	DB	0
?ClearCache@CIdvBezierSpline@@SAXXZ ENDP		; CIdvBezierSpline::ClearCache
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibSpline_Source\IdvSpline.cpp
;	COMDAT ?ScaledVariance@CIdvBezierSpline@@QBEMM@Z
_TEXT	SEGMENT
_nClosest$2 = -44					; size = 4
_fValue$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_fPercent$ = 8						; size = 4
?ScaledVariance@CIdvBezierSpline@@QBEMM@Z PROC		; CIdvBezierSpline::ScaledVariance, COMDAT
; _this$ = ecx

; 215  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ScaledVariance@CIdvBezierSpline@@QBEMM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 216  :     float fValue = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR _fValue$[ebp], xmm0

; 217  : 
; 218  :     if (m_vEvenlySpacedPoints.size( ) == c_nNumEvalPoints)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	?size@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ ; std::vector<CVec,std::allocator<CVec> >::size
	cmp	eax, 500				; 000001f4H
	jne	$LN3@ScaledVari

; 219  :     {
; 220  :         int nClosest = int(fPercent * float(c_nNumEvalPoints - 1) + 0.5f);

	movss	xmm0, DWORD PTR _fPercent$[ebp]
	mulss	xmm0, DWORD PTR __real@43f98000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR _nClosest$2[ebp], eax

; 221  :         fValue = m_vEvenlySpacedPoints[nClosest][1];

	mov	eax, DWORD PTR _nClosest$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEABVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	ecx, eax
	call	??BCVec@@QBEPBMXZ			; CVec::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	movss	DWORD PTR _fValue$[ebp], xmm0

; 222  : 
; 223  :         static CIdvRandom cRandom;

	mov	eax, DWORD PTR __tls_index
	mov	ecx, DWORD PTR fs:__tls_array
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ?$TSS0@?4??ScaledVariance@CIdvBezierSpline@@QBEMM@Z@4HA
	cmp	eax, DWORD PTR __Init_thread_epoch[edx]
	jle	SHORT $LN2@ScaledVari
	push	OFFSET ?$TSS0@?4??ScaledVariance@CIdvBezierSpline@@QBEMM@Z@4HA
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?4??ScaledVariance@CIdvBezierSpline@@QBEMM@Z@4HA, -1
	jne	SHORT $LN2@ScaledVari
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, OFFSET ?cRandom@?4??ScaledVariance@CIdvBezierSpline@@QBEMM@Z@4VCIdvRandom@@A
	call	??0CIdvRandom@@QAE@XZ			; CIdvRandom::CIdvRandom
	npad	1
	push	OFFSET ??__FcRandom@?4??ScaledVariance@CIdvBezierSpline@@QBEMM@Z@YAXXZ ; `CIdvBezierSpline::ScaledVariance'::`5'::`dynamic atexit destructor for 'cRandom''
	call	_atexit
	add	esp, 4
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	push	OFFSET ?$TSS0@?4??ScaledVariance@CIdvBezierSpline@@QBEMM@Z@4HA
	call	__Init_thread_footer
	add	esp, 4
$LN2@ScaledVari:

; 224  :         fValue = static_cast<float>(cRandom.GetUniform(-m_fVariance * fValue, m_fVariance * fValue));

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+8]
	mulss	xmm0, DWORD PTR _fValue$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _fValue$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?cRandom@?4??ScaledVariance@CIdvBezierSpline@@QBEMM@Z@4VCIdvRandom@@A
	call	?GetUniform@CIdvRandom@@QAEMMM@Z	; CIdvRandom::GetUniform
	fstp	DWORD PTR _fValue$[ebp]
$LN3@ScaledVari:

; 225  :     }
; 226  :     
; 227  :     return fValue;

	fld	DWORD PTR _fValue$[ebp]

; 228  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ScaledVariance@CIdvBezierSpline@@QBEMM@Z$0:
	push	OFFSET ?$TSS0@?4??ScaledVariance@CIdvBezierSpline@@QBEMM@Z@4HA
	call	__Init_thread_abort
	pop	ecx
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?ScaledVariance@CIdvBezierSpline@@QBEMM@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ScaledVariance@CIdvBezierSpline@@QBEMM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ScaledVariance@CIdvBezierSpline@@QBEMM@Z ENDP		; CIdvBezierSpline::ScaledVariance
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibSpline_Source\IdvSpline.cpp
;	COMDAT ?Save@CIdvBezierSpline@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
_TEXT	SEGMENT
tv202 = -396						; size = 4
tv200 = -396						; size = 4
tv198 = -396						; size = 4
tv208 = -392						; size = 4
tv193 = -392						; size = 4
tv65 = -392						; size = 4
$T2 = -384						; size = 4
$T3 = -372						; size = 28
$T4 = -336						; size = 28
$T5 = -300						; size = 28
_i$6 = -72						; size = 4
_strOutput$ = -60					; size = 28
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?Save@CIdvBezierSpline@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC ; CIdvBezierSpline::Save, COMDAT
; _this$ = ecx

; 195  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Save@CIdvBezierSpline@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 384				; 00000180H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T2[ebp], 0

; 196  :     string strOutput;

	lea	ecx, DWORD PTR _strOutput$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 197  : 
; 198  :     strOutput = "BezierSpline ";

	push	OFFSET ??_C@_0O@ENIEGKCM@BezierSpline?5@
	lea	ecx, DWORD PTR _strOutput$[ebp]
	call	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
	npad	1

; 199  :     strOutput += IdvFormatString("%g %g %g\n", m_fMin, m_fMax, m_fVariance);

	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [eax+8]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [ecx+4]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_09BNFLLNNI@?$CFg?5?$CFg?5?$CFg?6@
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	call	?IdvFormatString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ ; IdvFormatString
	add	esp, 32					; 00000020H
	mov	DWORD PTR tv65[ebp], eax
	mov	ecx, DWORD PTR tv65[ebp]
	mov	DWORD PTR tv198[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR tv198[ebp]
	push	edx
	lea	ecx, DWORD PTR _strOutput$[ebp]
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T5[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1

; 200  :     strOutput += "{\n";

	push	OFFSET ??_C@_02KCPFEJNG@?$HL?6@
	lea	ecx, DWORD PTR _strOutput$[ebp]
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
	npad	1

; 201  :         strOutput += IdvFormatString("\t%d\n", m_vControlPoints.size( ));

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ ; std::vector<CVec,std::allocator<CVec> >::size
	push	eax
	push	OFFSET ??_C@_04BGBALOOJ@?7?$CFd?6@
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	?IdvFormatString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ ; IdvFormatString
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv193[ebp], eax
	mov	ecx, DWORD PTR tv193[ebp]
	mov	DWORD PTR tv200[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR tv200[ebp]
	push	edx
	lea	ecx, DWORD PTR _strOutput$[ebp]
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T4[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1

; 202  :         for (unsigned int i = 0; i < m_vControlPoints.size( ); ++i)

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN4@Save
$LN2@Save:
	mov	eax, DWORD PTR _i$6[ebp]
	add	eax, 1
	mov	DWORD PTR _i$6[ebp], eax
$LN4@Save:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?size@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ ; std::vector<CVec,std::allocator<CVec> >::size
	cmp	DWORD PTR _i$6[ebp], eax
	jae	$LN3@Save

; 203  :             strOutput += IdvFormatString("\t%g %g %g %g %g\n", m_vControlPoints[i][0], m_vControlPoints[i][1], m_vControlPointTangents[i][0], m_vControlPointTangents[i][1], m_vControlPointTangentLengths[i]);

	mov	eax, DWORD PTR _i$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??A?$vector@MV?$allocator@M@std@@@std@@QBEABMI@Z ; std::vector<float,std::allocator<float> >::operator[]
	cvtss2sd xmm0, DWORD PTR [eax]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$6[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEABVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	ecx, eax
	call	??BCVec@@QBEPBMXZ			; CVec::operator float const *
	mov	edx, 4
	shl	edx, 0
	cvtss2sd xmm0, DWORD PTR [eax+edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEABVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	ecx, eax
	call	??BCVec@@QBEPBMXZ			; CVec::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	cvtss2sd xmm0, DWORD PTR [eax+edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _i$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEABVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	ecx, eax
	call	??BCVec@@QBEPBMXZ			; CVec::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	cvtss2sd xmm0, DWORD PTR [eax+ecx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _i$6[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEABVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	ecx, eax
	call	??BCVec@@QBEPBMXZ			; CVec::operator float const *
	mov	ecx, 4
	imul	edx, ecx, 0
	cvtss2sd xmm0, DWORD PTR [eax+edx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BB@FLLCMGDC@?7?$CFg?5?$CFg?5?$CFg?5?$CFg?5?$CFg?6@
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	?IdvFormatString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PBDZZ ; IdvFormatString
	add	esp, 48					; 00000030H
	mov	DWORD PTR tv208[ebp], eax
	mov	ecx, DWORD PTR tv208[ebp]
	mov	DWORD PTR tv202[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR tv202[ebp]
	push	edx
	lea	ecx, DWORD PTR _strOutput$[ebp]
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T3[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	jmp	$LN2@Save
$LN3@Save:

; 204  :         strOutput += "\n";

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	lea	ecx, DWORD PTR _strOutput$[ebp]
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
	npad	1

; 205  :     strOutput += "}\n";

	push	OFFSET ??_C@_02KGHIDFGE@?$HN?6@
	lea	ecx, DWORD PTR _strOutput$[ebp]
	call	??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
	npad	1

; 206  : 
; 207  :     return strOutput;

	lea	eax, DWORD PTR _strOutput$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
	mov	ecx, DWORD PTR $T2[ebp]
	or	ecx, 1
	mov	DWORD PTR $T2[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _strOutput$[ebp]
	call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	npad	1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 208  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@Save
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 396				; 0000018cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN15@Save:
	DD	1
	DD	$LN14@Save
$LN14@Save:
	DD	-60					; ffffffc4H
	DD	28					; 0000001cH
	DD	$LN12@Save
$LN12@Save:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	112					; 00000070H
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Save@CIdvBezierSpline@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$0:
	lea	ecx, DWORD PTR _strOutput$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Save@CIdvBezierSpline@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$1:
	lea	ecx, DWORD PTR $T5[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Save@CIdvBezierSpline@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$2:
	lea	ecx, DWORD PTR $T4[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?Save@CIdvBezierSpline@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ$3:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?Save@CIdvBezierSpline@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-400]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Save@CIdvBezierSpline@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Save@CIdvBezierSpline@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ ENDP ; CIdvBezierSpline::Save
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibSpline_Source\IdvSpline.cpp
;	COMDAT ?Parse@CIdvBezierSpline@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
tv269 = -556						; size = 4
tv259 = -556						; size = 4
tv249 = -556						; size = 4
tv239 = -556						; size = 4
_fTangentLength$1 = -356				; size = 4
_afTangent$2 = -344					; size = 8
_afControlPoint$3 = -328				; size = 8
_i$4 = -312						; size = 4
_nNumControlPoints$5 = -300				; size = 4
_szToken$ = -288					; size = 256
_pInput$ = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_strInput$ = 8						; size = 4
?Parse@CIdvBezierSpline@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CIdvBezierSpline::Parse, COMDAT
; _this$ = ecx

; 141  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 556				; 0000022cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-364]
	mov	ecx, 91					; 0000005bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 142  :     const char* pInput = strInput.c_str( );

	mov	ecx, DWORD PTR _strInput$[ebp]
	call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
	mov	DWORD PTR _pInput$[ebp], eax

; 143  : 
; 144  :     char szToken[256];
; 145  :     pInput = NextToken(pInput, szToken);

	lea	eax, DWORD PTR _szToken$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInput$[ebp]
	push	ecx
	call	?NextToken@@YAPBDPBDPAD@Z		; NextToken
	add	esp, 8
	mov	DWORD PTR _pInput$[ebp], eax

; 146  : 
; 147  :     if (strcmp(szToken, "BezierSpline") == 0)

	push	OFFSET ??_C@_0N@NGFFEKI@BezierSpline@
	lea	eax, DWORD PTR _szToken$[ebp]
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	$LN3@Parse

; 148  :     {
; 149  :         // get min, max, variance
; 150  :         pInput = NextToken(pInput, szToken);

	lea	eax, DWORD PTR _szToken$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInput$[ebp]
	push	ecx
	call	?NextToken@@YAPBDPBDPAD@Z		; NextToken
	add	esp, 8
	mov	DWORD PTR _pInput$[ebp], eax

; 151  :         m_fMin = static_cast<float>(atof(szToken));

	mov	esi, esp
	lea	eax, DWORD PTR _szToken$[ebp]
	push	eax
	call	DWORD PTR __imp__atof
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx]

; 152  :         pInput = NextToken(pInput, szToken);

	lea	eax, DWORD PTR _szToken$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInput$[ebp]
	push	ecx
	call	?NextToken@@YAPBDPBDPAD@Z		; NextToken
	add	esp, 8
	mov	DWORD PTR _pInput$[ebp], eax

; 153  :         m_fMax = static_cast<float>(atof(szToken));

	mov	esi, esp
	lea	eax, DWORD PTR _szToken$[ebp]
	push	eax
	call	DWORD PTR __imp__atof
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+4]

; 154  :         pInput = NextToken(pInput, szToken);

	lea	eax, DWORD PTR _szToken$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInput$[ebp]
	push	ecx
	call	?NextToken@@YAPBDPBDPAD@Z		; NextToken
	add	esp, 8
	mov	DWORD PTR _pInput$[ebp], eax

; 155  :         m_fVariance = static_cast<float>(atof(szToken));

	mov	esi, esp
	lea	eax, DWORD PTR _szToken$[ebp]
	push	eax
	call	DWORD PTR __imp__atof
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+8]

; 156  : 
; 157  :         // match '{'
; 158  :         pInput = NextToken(pInput, szToken);

	lea	eax, DWORD PTR _szToken$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInput$[ebp]
	push	ecx
	call	?NextToken@@YAPBDPBDPAD@Z		; NextToken
	add	esp, 8
	mov	DWORD PTR _pInput$[ebp], eax

; 159  :         if (szToken[0] == '{')

	mov	eax, 1
	imul	ecx, eax, 0
	movsx	edx, BYTE PTR _szToken$[ebp+ecx]
	cmp	edx, 123				; 0000007bH
	jne	$LN3@Parse

; 160  :         {
; 161  :             // for each control point, get x,y control point, x,y tangent, and
; 162  :             // tangent length
; 163  :             pInput = NextToken(pInput, szToken);

	lea	eax, DWORD PTR _szToken$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInput$[ebp]
	push	ecx
	call	?NextToken@@YAPBDPBDPAD@Z		; NextToken
	add	esp, 8
	mov	DWORD PTR _pInput$[ebp], eax

; 164  :             int nNumControlPoints = atoi(szToken);

	mov	esi, esp
	lea	eax, DWORD PTR _szToken$[ebp]
	push	eax
	call	DWORD PTR __imp__atoi
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _nNumControlPoints$5[ebp], eax

; 165  :             for (int i = 0; i < nNumControlPoints; ++i)

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN4@Parse
$LN2@Parse:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN4@Parse:
	mov	eax, DWORD PTR _i$4[ebp]
	cmp	eax, DWORD PTR _nNumControlPoints$5[ebp]
	jge	$LN3@Parse

; 166  :             {
; 167  :                 float afControlPoint[2];
; 168  :                 pInput = NextToken(pInput, szToken);

	lea	eax, DWORD PTR _szToken$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInput$[ebp]
	push	ecx
	call	?NextToken@@YAPBDPBDPAD@Z		; NextToken
	add	esp, 8
	mov	DWORD PTR _pInput$[ebp], eax

; 169  :                 afControlPoint[0] = static_cast<float>(atof(szToken));

	mov	esi, esp
	lea	eax, DWORD PTR _szToken$[ebp]
	push	eax
	call	DWORD PTR __imp__atof
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR tv239[ebp]
	fld	DWORD PTR tv239[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	fstp	DWORD PTR _afControlPoint$3[ebp+edx]

; 170  :                 pInput = NextToken(pInput, szToken);

	lea	eax, DWORD PTR _szToken$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInput$[ebp]
	push	ecx
	call	?NextToken@@YAPBDPBDPAD@Z		; NextToken
	add	esp, 8
	mov	DWORD PTR _pInput$[ebp], eax

; 171  :                 afControlPoint[1] = static_cast<float>(atof(szToken));

	mov	esi, esp
	lea	eax, DWORD PTR _szToken$[ebp]
	push	eax
	call	DWORD PTR __imp__atof
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR tv249[ebp]
	fld	DWORD PTR tv249[ebp]
	mov	ecx, 4
	shl	ecx, 0
	fstp	DWORD PTR _afControlPoint$3[ebp+ecx]

; 172  : 
; 173  :                 float afTangent[2];
; 174  :                 pInput = NextToken(pInput, szToken);

	lea	eax, DWORD PTR _szToken$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInput$[ebp]
	push	ecx
	call	?NextToken@@YAPBDPBDPAD@Z		; NextToken
	add	esp, 8
	mov	DWORD PTR _pInput$[ebp], eax

; 175  :                 afTangent[0] = static_cast<float>(atof(szToken));

	mov	esi, esp
	lea	eax, DWORD PTR _szToken$[ebp]
	push	eax
	call	DWORD PTR __imp__atof
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR tv259[ebp]
	fld	DWORD PTR tv259[ebp]
	mov	ecx, 4
	imul	edx, ecx, 0
	fstp	DWORD PTR _afTangent$2[ebp+edx]

; 176  :                 pInput = NextToken(pInput, szToken);

	lea	eax, DWORD PTR _szToken$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInput$[ebp]
	push	ecx
	call	?NextToken@@YAPBDPBDPAD@Z		; NextToken
	add	esp, 8
	mov	DWORD PTR _pInput$[ebp], eax

; 177  :                 afTangent[1] = static_cast<float>(atof(szToken));

	mov	esi, esp
	lea	eax, DWORD PTR _szToken$[ebp]
	push	eax
	call	DWORD PTR __imp__atof
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR tv269[ebp]
	fld	DWORD PTR tv269[ebp]
	mov	ecx, 4
	shl	ecx, 0
	fstp	DWORD PTR _afTangent$2[ebp+ecx]

; 178  : 
; 179  :                 float fTangentLength;
; 180  :                 pInput = NextToken(pInput, szToken);

	lea	eax, DWORD PTR _szToken$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pInput$[ebp]
	push	ecx
	call	?NextToken@@YAPBDPBDPAD@Z		; NextToken
	add	esp, 8
	mov	DWORD PTR _pInput$[ebp], eax

; 181  :                 fTangentLength = static_cast<float>(atof(szToken));

	mov	esi, esp
	lea	eax, DWORD PTR _szToken$[ebp]
	push	eax
	call	DWORD PTR __imp__atof
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _fTangentLength$1[ebp]

; 182  : 
; 183  :                 AddControlPoint(afControlPoint, afTangent, fTangentLength);

	push	ecx
	movss	xmm0, DWORD PTR _fTangentLength$1[ebp]
	movss	DWORD PTR [esp], xmm0
	lea	eax, DWORD PTR _afTangent$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _afControlPoint$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddControlPoint@CIdvBezierSpline@@AAEXQAM0M@Z ; CIdvBezierSpline::AddControlPoint
	npad	1

; 184  :             }

	jmp	$LN2@Parse
$LN3@Parse:

; 185  :             // the last token should be '}', but we ignore it
; 186  :         }
; 187  :     }
; 188  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@Parse
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 556				; 0000022cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN12@Parse:
	DD	3
	DD	$LN11@Parse
$LN11@Parse:
	DD	-288					; fffffee0H
	DD	256					; 00000100H
	DD	$LN8@Parse
	DD	-328					; fffffeb8H
	DD	8
	DD	$LN9@Parse
	DD	-344					; fffffea8H
	DD	8
	DD	$LN10@Parse
$LN10@Parse:
	DB	97					; 00000061H
	DB	102					; 00000066H
	DB	84					; 00000054H
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN9@Parse:
	DB	97					; 00000061H
	DB	102					; 00000066H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	0
$LN8@Parse:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	84					; 00000054H
	DB	111					; 0000006fH
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
?Parse@CIdvBezierSpline@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CIdvBezierSpline::Parse
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibSpline_Source\IdvSpline.cpp
;	COMDAT ?Evaluate@CIdvBezierSpline@@QBEMM@Z
_TEXT	SEGMENT
tv208 = -256						; size = 4
_fInterpPercent$2 = -56					; size = 4
_nClosest$3 = -44					; size = 4
_fValue$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_fPercent$ = 8						; size = 4
?Evaluate@CIdvBezierSpline@@QBEMM@Z PROC		; CIdvBezierSpline::Evaluate, COMDAT
; _this$ = ecx

; 97   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Evaluate@CIdvBezierSpline@@QBEMM@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 244				; 000000f4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx

; 98   :     float fValue = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR _fValue$[ebp], xmm0

; 99   : 
; 100  :     if (m_vEvenlySpacedPoints.size( ) == c_nNumEvalPoints)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	?size@?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEIXZ ; std::vector<CVec,std::allocator<CVec> >::size
	cmp	eax, 500				; 000001f4H
	jne	$LN3@Evaluate

; 101  :     {
; 102  :         // new way, interpolated
; 103  :         int nClosest = int(fPercent * float(c_nNumEvalPoints - 1));

	movss	xmm0, DWORD PTR _fPercent$[ebp]
	mulss	xmm0, DWORD PTR __real@43f98000
	cvttss2si eax, xmm0
	mov	DWORD PTR _nClosest$3[ebp], eax

; 104  :         if (nClosest == c_nNumEvalPoints - 1)

	cmp	DWORD PTR _nClosest$3[ebp], 499		; 000001f3H
	jne	SHORT $LN4@Evaluate

; 105  :         {
; 106  :             fValue = m_vEvenlySpacedPoints[nClosest][1];

	mov	eax, DWORD PTR _nClosest$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEABVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	ecx, eax
	call	??BCVec@@QBEPBMXZ			; CVec::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	movss	xmm0, DWORD PTR [eax+ecx]
	movss	DWORD PTR _fValue$[ebp], xmm0

; 107  :         }

	jmp	$LN5@Evaluate
$LN4@Evaluate:

; 108  :         else
; 109  :         {
; 110  :             float fInterpPercent = (fPercent - (nClosest * c_fEvalPointSpacing)) / c_fEvalPointSpacing;

	cvtsi2ss xmm0, DWORD PTR _nClosest$3[ebp]
	mulss	xmm0, DWORD PTR __real@3b0355ad
	movss	xmm1, DWORD PTR _fPercent$[ebp]
	subss	xmm1, xmm0
	divss	xmm1, DWORD PTR __real@3b0355ad
	movss	DWORD PTR _fInterpPercent$2[ebp], xmm1

; 111  :             fValue = VecInterpolate(m_vEvenlySpacedPoints[nClosest][1], m_vEvenlySpacedPoints[nClosest + 1][1], fInterpPercent);

	push	ecx
	movss	xmm0, DWORD PTR _fInterpPercent$2[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _nClosest$3[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEABVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	ecx, eax
	call	??BCVec@@QBEPBMXZ			; CVec::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR [eax+ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _nClosest$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??A?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QBEABVCVec@@I@Z ; std::vector<CVec,std::allocator<CVec> >::operator[]
	mov	ecx, eax
	call	??BCVec@@QBEPBMXZ			; CVec::operator float const *
	mov	ecx, 4
	shl	ecx, 0
	push	ecx
	movss	xmm0, DWORD PTR [eax+ecx]
	movss	DWORD PTR [esp], xmm0
	call	?VecInterpolate@@YAMMMM@Z		; VecInterpolate
	add	esp, 12					; 0000000cH
	fstp	DWORD PTR _fValue$[ebp]
$LN5@Evaluate:

; 112  :         }
; 113  : 
; 114  :         fValue = fValue * (m_fMax - m_fMin) + m_fMin;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	subss	xmm0, DWORD PTR [ecx]
	mulss	xmm0, DWORD PTR _fValue$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [edx]
	movss	DWORD PTR _fValue$[ebp], xmm0

; 115  : 
; 116  :         static CIdvRandom cRandom;

	mov	eax, DWORD PTR __tls_index
	mov	ecx, DWORD PTR fs:__tls_array
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	eax, DWORD PTR ?$TSS0@?4??Evaluate@CIdvBezierSpline@@QBEMM@Z@4HA
	cmp	eax, DWORD PTR __Init_thread_epoch[edx]
	jle	SHORT $LN2@Evaluate
	push	OFFSET ?$TSS0@?4??Evaluate@CIdvBezierSpline@@QBEMM@Z@4HA
	call	__Init_thread_header
	add	esp, 4
	cmp	DWORD PTR ?$TSS0@?4??Evaluate@CIdvBezierSpline@@QBEMM@Z@4HA, -1
	jne	SHORT $LN2@Evaluate
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, OFFSET ?cRandom@?4??Evaluate@CIdvBezierSpline@@QBEMM@Z@4VCIdvRandom@@A
	call	??0CIdvRandom@@QAE@XZ			; CIdvRandom::CIdvRandom
	npad	1
	push	OFFSET ??__FcRandom@?4??Evaluate@CIdvBezierSpline@@QBEMM@Z@YAXXZ ; `CIdvBezierSpline::Evaluate'::`5'::`dynamic atexit destructor for 'cRandom''
	call	_atexit
	add	esp, 4
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	push	OFFSET ?$TSS0@?4??Evaluate@CIdvBezierSpline@@QBEMM@Z@4HA
	call	__Init_thread_footer
	add	esp, 4
$LN2@Evaluate:

; 117  :         fValue += static_cast<float>(cRandom.GetUniform(-m_fVariance, m_fVariance));

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+8]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, OFFSET ?cRandom@?4??Evaluate@CIdvBezierSpline@@QBEMM@Z@4VCIdvRandom@@A
	call	?GetUniform@CIdvRandom@@QAEMMM@Z	; CIdvRandom::GetUniform
	fstp	DWORD PTR tv208[ebp]
	movss	xmm0, DWORD PTR tv208[ebp]
	addss	xmm0, DWORD PTR _fValue$[ebp]
	movss	DWORD PTR _fValue$[ebp], xmm0
$LN3@Evaluate:

; 118  :     }
; 119  :     
; 120  :     return fValue;

	fld	DWORD PTR _fValue$[ebp]

; 121  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 256				; 00000100H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Evaluate@CIdvBezierSpline@@QBEMM@Z$0:
	push	OFFSET ?$TSS0@?4??Evaluate@CIdvBezierSpline@@QBEMM@Z@4HA
	call	__Init_thread_abort
	pop	ecx
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$?Evaluate@CIdvBezierSpline@@QBEMM@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-260]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Evaluate@CIdvBezierSpline@@QBEMM@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Evaluate@CIdvBezierSpline@@QBEMM@Z ENDP		; CIdvBezierSpline::Evaluate
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibSpline_Source\IdvSpline.cpp
;	COMDAT ??1CIdvBezierSpline@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1CIdvBezierSpline@@QAE@XZ PROC			; CIdvBezierSpline::~CIdvBezierSpline, COMDAT
; _this$ = ecx

; 74   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 75   : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??1?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::~vector<CVec,std::allocator<CVec> >
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??1?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::~vector<CVec,std::allocator<CVec> >
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::~vector<CVec,std::allocator<CVec> >
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::~vector<CVec,std::allocator<CVec> >
	npad	1
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CIdvBezierSpline@@QAE@XZ ENDP			; CIdvBezierSpline::~CIdvBezierSpline
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibSpline_Source\IdvSpline.cpp
;	COMDAT ??0CIdvBezierSpline@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_cRight$ = 8						; size = 4
??0CIdvBezierSpline@@QAE@ABV0@@Z PROC			; CIdvBezierSpline::CIdvBezierSpline, COMDAT
; _this$ = ecx

; 65   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CIdvBezierSpline@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::vector<CVec,std::allocator<CVec> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::vector<CVec,std::allocator<CVec> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::vector<CVec,std::allocator<CVec> >
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??0?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::vector<CVec,std::allocator<CVec> >
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 66   :     *this = cRight;

	mov	eax, DWORD PTR _cRight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4CIdvBezierSpline@@QAEAAV0@ABV0@@Z
	npad	1

; 67   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CIdvBezierSpline@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::~vector<CVec,std::allocator<CVec> >
__unwindfunclet$??0CIdvBezierSpline@@QAE@ABV0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::~vector<CVec,std::allocator<CVec> >
__unwindfunclet$??0CIdvBezierSpline@@QAE@ABV0@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
__unwindfunclet$??0CIdvBezierSpline@@QAE@ABV0@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::~vector<CVec,std::allocator<CVec> >
__unwindfunclet$??0CIdvBezierSpline@@QAE@ABV0@@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	jmp	??1?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::~vector<CVec,std::allocator<CVec> >
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0CIdvBezierSpline@@QAE@ABV0@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CIdvBezierSpline@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CIdvBezierSpline@@QAE@ABV0@@Z ENDP			; CIdvBezierSpline::CIdvBezierSpline
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibSpline_Source\IdvSpline.cpp
;	COMDAT ??0CIdvBezierSpline@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
_TEXT	SEGMENT
tv141 = -268						; size = 4
$T2 = -260						; size = 4
$T3 = -248						; size = 4
_pCachedCopy$4 = -44					; size = 4
_pLookup$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
_strInput$ = 8						; size = 4
??0CIdvBezierSpline@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC ; CIdvBezierSpline::CIdvBezierSpline, COMDAT
; _this$ = ecx

; 46   : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CIdvBezierSpline@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::vector<CVec,std::allocator<CVec> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::vector<CVec,std::allocator<CVec> >
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::vector<CVec,std::allocator<CVec> >
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??0?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::vector<CVec,std::allocator<CVec> >
	mov	BYTE PTR __$EHRec$[ebp+8], 4

; 47   :     CIdvBezierSpline* pLookup = g_mSplineCache[strInput];

	mov	eax, DWORD PTR _strInput$[ebp]
	push	eax
	mov	ecx, OFFSET ?g_mSplineCache@@3V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@A
	call	??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@QAEAAPAVCIdvBezierSpline@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pLookup$[ebp], ecx

; 48   :     if (!pLookup)

	cmp	DWORD PTR _pLookup$[ebp], 0
	jne	$LN2@CIdvBezier

; 49   :     {
; 50   :         Parse(strInput);

	mov	eax, DWORD PTR _strInput$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Parse@CIdvBezierSpline@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ; CIdvBezierSpline::Parse
	npad	1

; 51   :         CreateEvenlySpacedPoints(c_nNumEvalPoints);

	push	500					; 000001f4H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CreateEvenlySpacedPoints@CIdvBezierSpline@@AAEXI@Z ; CIdvBezierSpline::CreateEvenlySpacedPoints
	npad	1

; 52   : 
; 53   :         CIdvBezierSpline* pCachedCopy = new CIdvBezierSpline(*this);

	push	92					; 0000005cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN5@CIdvBezier
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T2[ebp]
	call	??0CIdvBezierSpline@@QAE@ABV0@@Z	; CIdvBezierSpline::CIdvBezierSpline
	mov	DWORD PTR tv141[ebp], eax
	jmp	SHORT $LN6@CIdvBezier
$LN5@CIdvBezier:
	mov	DWORD PTR tv141[ebp], 0
$LN6@CIdvBezier:
	mov	ecx, DWORD PTR tv141[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR _pCachedCopy$4[ebp], edx

; 54   :         g_mSplineCache[strInput] = pCachedCopy;

	mov	eax, DWORD PTR _strInput$[ebp]
	push	eax
	mov	ecx, OFFSET ?g_mSplineCache@@3V?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@A
	call	??A?$map@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@U?$less@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PAVCIdvBezierSpline@@@std@@@2@@std@@QAEAAPAVCIdvBezierSpline@@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::map<std::basic_string<char,std::char_traits<char>,std::allocator<char> >,CIdvBezierSpline *,std::less<std::basic_string<char,std::char_traits<char>,std::allocator<char> > >,std::allocator<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const ,CIdvBezierSpline *> > >::operator[]
	mov	ecx, DWORD PTR _pCachedCopy$4[ebp]
	mov	DWORD PTR [eax], ecx

; 55   :     }

	jmp	SHORT $LN3@CIdvBezier
$LN2@CIdvBezier:

; 56   :     else
; 57   :         *this = *pLookup;

	mov	eax, DWORD PTR _pLookup$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4CIdvBezierSpline@@QAEAAV0@ABV0@@Z
	npad	1
$LN3@CIdvBezier:

; 58   : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CIdvBezierSpline@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::~vector<CVec,std::allocator<CVec> >
__unwindfunclet$??0CIdvBezierSpline@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	jmp	??1?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::~vector<CVec,std::allocator<CVec> >
__unwindfunclet$??0CIdvBezierSpline@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ; std::vector<float,std::allocator<float> >::~vector<float,std::allocator<float> >
__unwindfunclet$??0CIdvBezierSpline@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::~vector<CVec,std::allocator<CVec> >
__unwindfunclet$??0CIdvBezierSpline@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	jmp	??1?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::~vector<CVec,std::allocator<CVec> >
__unwindfunclet$??0CIdvBezierSpline@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z$5:
	push	92					; 0000005cH
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0CIdvBezierSpline@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CIdvBezierSpline@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CIdvBezierSpline@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z ENDP ; CIdvBezierSpline::CIdvBezierSpline
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibSpline_Source\IdvSpline.cpp
;	COMDAT ??0CIdvBezierSpline@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0CIdvBezierSpline@@QAE@XZ PROC			; CIdvBezierSpline::CIdvBezierSpline, COMDAT
; _this$ = ecx

; 38   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 35   :     m_fMin(0.0f),

	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax], xmm0

; 36   :     m_fMax(1.0f),

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+4], xmm0

; 37   :     m_fVariance(0.0f)

	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+8], xmm0

; 38   : {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::vector<CVec,std::allocator<CVec> >
	npad	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::vector<CVec,std::allocator<CVec> >
	npad	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ ; std::vector<float,std::allocator<float> >::vector<float,std::allocator<float> >
	npad	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::vector<CVec,std::allocator<CVec> >
	npad	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 76					; 0000004cH
	call	??0?$vector@VCVec@@V?$allocator@VCVec@@@std@@@std@@QAE@XZ ; std::vector<CVec,std::allocator<CVec> >::vector<CVec,std::allocator<CVec> >
	npad	1

; 39   : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CIdvBezierSpline@@QAE@XZ ENDP			; CIdvBezierSpline::CIdvBezierSpline
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibVector_Source\IdvVector.h
;	COMDAT ?VecInterpolate@@YAMMMM@Z
_TEXT	SEGMENT
tv70 = -196						; size = 4
_fStart$ = 8						; size = 4
_fEnd$ = 12						; size = 4
_fPercent$ = 16						; size = 4
?VecInterpolate@@YAMMMM@Z PROC				; VecInterpolate, COMDAT

; 1177 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi

; 1178 :     return fStart + (fEnd - fStart) * fPercent;

	movss	xmm0, DWORD PTR _fEnd$[ebp]
	subss	xmm0, DWORD PTR _fStart$[ebp]
	mulss	xmm0, DWORD PTR _fPercent$[ebp]
	addss	xmm0, DWORD PTR _fStart$[ebp]
	movss	DWORD PTR tv70[ebp], xmm0
	fld	DWORD PTR tv70[ebp]

; 1179 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?VecInterpolate@@YAMMMM@Z ENDP				; VecInterpolate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCVec@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCVec@@QAEPAXI@Z PROC				; CVec::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CVec@@QAE@XZ				; CVec::~CVec
	npad	1
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCVec@@QAEPAXI@Z ENDP				; CVec::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibVector_Source\IdvVector.h
;	COMDAT ??ACVec@@QAEAAMH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_nIndex$ = 8						; size = 4
??ACVec@@QAEAAMH@Z PROC					; CVec::operator[], COMDAT
; _this$ = ecx

; 276  :         float&          operator[](int nIndex)                                  { return m_afData[nIndex]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _nIndex$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??ACVec@@QAEAAMH@Z ENDP					; CVec::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibVector_Source\IdvVector.h
;	COMDAT ??BCVec@@QBEPBMXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??BCVec@@QBEPBMXZ PROC					; CVec::operator float const *, COMDAT
; _this$ = ecx

; 274  :                         operator const float*( ) const                          { return &m_afData[0]; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 4
	imul	eax, eax, 0
	add	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??BCVec@@QBEPBMXZ ENDP					; CVec::operator float const *
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
	npad	1
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1507 :     constexpr const _Ty1& _Get_first() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1508 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1509 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ PROC ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 1503 :     constexpr _Ty1& _Get_first() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1504 :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 1505 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ENDP ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 4895 :     _CONSTEXPR20 const _Alty& _Getal() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4896 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4897 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal, COMDAT
; _this$ = ecx

; 4891 :     _CONSTEXPR20 _Alty& _Getal() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4892 :         return _Mypair._Get_first();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$allocator@D@2@XZ ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Get_first

; 4893 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators, COMDAT
; _this$ = ecx

; 4887 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(basic_string& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4888 :         _Mypair._Myval2._Swap_proxy_and_iterators(_Right._Mypair._Myval2);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators
	npad	1

; 4889 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -233						; size = 1
__Al$2 = -32						; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 4865 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4866 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 4867 :         _My_data._Orphan_all();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
	npad	1

; 4868 :         if (_My_data._Large_mode_engaged()) {

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_mode_engaged
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Tidy_deall

; 4869 :             _ASAN_STRING_REMOVE(*this);
; 4870 :             auto& _Al = _Getal();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	mov	DWORD PTR __Al$2[ebp], eax

; 4871 :             _Deallocate_for_capacity(_Al, _My_data._Bx._Ptr, _My_data._Myres);

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR __My_data$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR __Al$2[ebp]
	push	ecx
	call	?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAAV?$allocator@D@2@QADI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Deallocate_for_capacity
	add	esp, 12					; 0000000cH

; 4872 :             _My_data._Bx._Switch_to_buf();

	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	call	?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Switch_to_buf
	npad	1
$LN2@Tidy_deall:

; 4873 :         }
; 4874 : 
; 4875 :         _My_data._Mysize = 0;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [eax+20], 0

; 4876 :         _My_data._Myres  = _Small_string_capacity;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [eax+24], 15			; 0000000fH

; 4877 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 4878 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR __My_data$[ebp]
	lea	ecx, DWORD PTR [eax+edx+4]
	push	ecx
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 4879 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Requested$ = 8					; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 4775 :     _NODISCARD _CONSTEXPR20 size_type _Calculate_growth(const size_type _Requested) const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4776 :         return _Calculate_growth(_Requested, _Mypair._Myval2._Myres, max_size());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR __Requested$[ebp]
	push	edx
	call	?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
	add	esp, 12					; 0000000cH

; 4777 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z
_TEXT	SEGMENT
$T1 = -212						; size = 4
__Masked$ = -8						; size = 4
__Requested$ = 8					; size = 4
__Old$ = 12						; size = 4
__Max$ = 16						; size = 4
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth, COMDAT

; 4762 :         const size_type _Requested, const size_type _Old, const size_type _Max) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 4763 :         const size_type _Masked = _Requested | _Alloc_mask;

	mov	eax, DWORD PTR __Requested$[ebp]
	or	eax, 15					; 0000000fH
	mov	DWORD PTR __Masked$[ebp], eax

; 4764 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

	mov	eax, DWORD PTR __Masked$[ebp]
	cmp	eax, DWORD PTR __Max$[ebp]
	jbe	SHORT $LN2@Calculate_

; 4765 :             return _Max;

	mov	eax, DWORD PTR __Max$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN2@Calculate_:

; 4766 :         }
; 4767 : 
; 4768 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

	mov	eax, DWORD PTR __Old$[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR __Max$[ebp]
	sub	ecx, eax
	cmp	DWORD PTR __Old$[ebp], ecx
	jbe	SHORT $LN3@Calculate_

; 4769 :             return _Max;

	mov	eax, DWORD PTR __Max$[ebp]
	jmp	SHORT $LN1@Calculate_
$LN3@Calculate_:

; 4770 :         }
; 4771 : 
; 4772 :         return (_STD max)(_Masked, _Old + _Old / 2);

	mov	eax, DWORD PTR __Old$[ebp]
	shr	eax, 1
	add	eax, DWORD PTR __Old$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	lea	edx, DWORD PTR __Masked$[ebp]
	push	edx
	call	??$max@I@std@@YAABIABI0@Z		; std::max<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]
$LN1@Calculate_:

; 4773 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@Calculate_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@Calculate_:
	DD	1
	DD	$LN7@Calculate_
$LN7@Calculate_:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN6@Calculate_
$LN6@Calculate_:
	DB	95					; 0000005fH
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAIIII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare, COMDAT
; _this$ = ecx

; 4673 :     _NODISCARD _CONSTEXPR20 int compare(const basic_string& _Right) const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4674 :         // compare [0, size()) with _Right
; 4675 :         return _Traits_compare<_Traits>(_Mypair._Myval2._Myptr(), _Mypair._Myval2._Mysize,

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	call	??$_Traits_compare@U?$char_traits@D@std@@@std@@YAHQBDI0I@Z ; std::_Traits_compare<std::char_traits<char> >
	add	esp, 16					; 00000010H

; 4676 :             _Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);
; 4677 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::compare
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
$T1 = -260						; size = 4
$T2 = -248						; size = 4
$T3 = -236						; size = 4
__Storage_max$ = -32					; size = 4
__Alloc_max$ = -20					; size = 4
_this$ = -8						; size = 4
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 4170 :     _NODISCARD _CONSTEXPR20 size_type max_size() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4171 :         const size_type _Alloc_max   = _Alty_traits::max_size(_Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	push	eax
	call	?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::_Default_allocator_traits<std::allocator<char> >::max_size
	add	esp, 4
	mov	DWORD PTR __Alloc_max$[ebp], eax

; 4172 :         const size_type _Storage_max = // can always store small string

	mov	DWORD PTR $T3[ebp], 16			; 00000010H
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	lea	ecx, DWORD PTR __Alloc_max$[ebp]
	push	ecx
	call	??$max@I@std@@YAABIABI0@Z		; std::max<unsigned int>
	add	esp, 8
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR __Storage_max$[ebp], edx

; 4173 :             (_STD max)(_Alloc_max, static_cast<size_type>(_BUF_SIZE));
; 4174 :         return (_STD min)(static_cast<size_type>((numeric_limits<difference_type>::max)()),

	mov	eax, DWORD PTR __Storage_max$[ebp]
	sub	eax, 1
	mov	DWORD PTR $T2[ebp], eax
	call	?max@?$numeric_limits@H@std@@SAHXZ	; std::numeric_limits<int>::max
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??$min@I@std@@YAABIABI0@Z		; std::min<unsigned int>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 4175 :             _Storage_max - 1 // -1 is for null terminator and/or npos
; 4176 :         );
; 4177 :     }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@max_size
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 264				; 00000108H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@max_size:
	DD	1
	DD	$LN5@max_size
$LN5@max_size:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@max_size
$LN4@max_size:
	DB	95					; 0000005fH
	DB	65					; 00000041H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 4148 :     _NODISCARD _CONSTEXPR20 _Ret_z_ const _Elem* c_str() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 4149 :         return _Mypair._Myval2._Myptr();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr

; 4150 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3434 :     _CONSTEXPR20 basic_string& assign(_In_z_ const _Elem* const _Ptr) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3435 :         return assign(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
	add	esp, 4
	push	eax
	call	??$_Convert_size@II@std@@YAII@Z		; std::_Convert_size<unsigned int,unsigned int>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 3436 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -233						; size = 1
$T2 = -221						; size = 1
__Old_ptr$3 = -20					; size = 4
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 3413 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3414 :         // assign [_Ptr, _Ptr + _Count)
; 3415 :         if (_Count <= _Mypair._Myval2._Myres) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Count$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	ja	SHORT $LN2@assign

; 3416 :             _ASAN_STRING_REMOVE(*this);
; 3417 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	DWORD PTR __Old_ptr$3[ebp], eax

; 3418 :             _Mypair._Myval2._Mysize = _Count;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 3419 :             _Traits::move(_Old_ptr, _Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Old_ptr$3[ebp]
	push	edx
	call	?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::move
	add	esp, 12					; 0000000cH

; 3420 :             _Traits::assign(_Old_ptr[_Count], _Elem());

	mov	BYTE PTR $T2[ebp], 0
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR __Old_ptr$3[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 3421 :             _ASAN_STRING_CREATE(*this);
; 3422 :             return *this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN1@assign
$LN2@assign:

; 3423 :         }
; 3424 : 
; 3425 :         return _Reallocate_for(

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Reallocate_for@V<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_9366063389c5f42a00a5088cf24e69de>@@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_for<<lambda_9366063389c5f42a00a5088cf24e69de>,char const *>
$LN1@assign:

; 3426 :             _Count,
; 3427 :             [](_Elem* const _New_ptr, const size_type _Count, const _Elem* const _Ptr) _STATIC_CALL_OPERATOR {
; 3428 :                 _Traits::copy(_New_ptr, _Ptr, _Count);
; 3429 :                 _Traits::assign(_New_ptr[_Count], _Elem());
; 3430 :             },
; 3431 :             _Ptr);
; 3432 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 3330 :     _CONSTEXPR20 basic_string& append(_In_z_ const _Elem* const _Ptr) { // append [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3331 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
	add	esp, 4
	push	eax
	call	??$_Convert_size@II@std@@YAII@Z		; std::_Convert_size<unsigned int,unsigned int>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 3332 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
$T1 = -245						; size = 1
$T2 = -233						; size = 1
__Old_ptr$3 = -32					; size = 4
__Old_size$ = -20					; size = 4
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 3307 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3308 :         // append [_Ptr, _Ptr + _Count)
; 3309 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR __Old_size$[ebp], ecx

; 3310 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	sub	ecx, DWORD PTR __Old_size$[ebp]
	cmp	DWORD PTR __Count$[ebp], ecx
	ja	SHORT $LN2@append

; 3311 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 3312 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

	mov	eax, DWORD PTR __Old_size$[ebp]
	add	eax, DWORD PTR __Count$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 3313 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	mov	DWORD PTR __Old_ptr$3[ebp], eax

; 3314 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Old_ptr$3[ebp]
	add	edx, DWORD PTR __Old_size$[ebp]
	push	edx
	call	?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::move
	add	esp, 12					; 0000000cH

; 3315 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

	mov	BYTE PTR $T2[ebp], 0
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR __Old_size$[ebp]
	add	ecx, DWORD PTR __Count$[ebp]
	add	ecx, DWORD PTR __Old_ptr$3[ebp]
	push	ecx
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 3316 :             return *this;

	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN1@append
$LN2@append:

; 3317 :         }
; 3318 : 
; 3319 :         return _Reallocate_grow_by(

	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	movzx	eax, BYTE PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Reallocate_grow_by@V<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV01@IV<lambda_ab246b20b9526e2ef7792587e4298a77>@@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Reallocate_grow_by<<lambda_ab246b20b9526e2ef7792587e4298a77>,char const *,unsigned int>
$LN1@append:

; 3320 :             _Count,
; 3321 :             [](_Elem* const _New_ptr, const _Elem* const _Old_ptr, const size_type _Old_size, const _Elem* const _Ptr,
; 3322 :                 const size_type _Count) _STATIC_CALL_OPERATOR {
; 3323 :                 _Traits::copy(_New_ptr, _Old_ptr, _Old_size);
; 3324 :                 _Traits::copy(_New_ptr + _Old_size, _Ptr, _Count);
; 3325 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());
; 3326 :             },
; 3327 :             _Ptr, _Count);
; 3328 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 3279 :     _CONSTEXPR20 basic_string& append(const basic_string& _Right) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3280 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 3281 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 3270 :     _CONSTEXPR20 basic_string& operator+=(_In_z_ const _Elem* const _Ptr) { // append [_Ptr, <null>)

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3271 :         return append(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 3272 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=, COMDAT
; _this$ = ecx

; 3259 :     _CONSTEXPR20 basic_string& operator+=(const basic_string& _Right) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3260 :         return append(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 3261 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??Y?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 3242 :     _CONSTEXPR20 basic_string& operator=(_In_z_ const _Elem* const _Ptr) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3243 :         return assign(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 3244 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
__To_delete$ = -44					; size = 4
_$S7$ = -29						; size = 1
__Alproxy$ = -20					; size = 4
_this$ = -8						; size = 4
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3179 :     _CONSTEXPR20 ~basic_string() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3180 :         _Tidy_deallocate();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
	npad	1

; 3181 : #if _ITERATOR_DEBUG_LEVEL != 0
; 3182 :         auto&& _Alproxy          = _GET_PROXY_ALLOCATOR(_Alty, _Getal());

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	push	eax
	lea	ecx, DWORD PTR _$S7$[ebp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
	lea	eax, DWORD PTR _$S7$[ebp]
	mov	DWORD PTR __Alproxy$[ebp], eax

; 3183 :         const auto _To_delete    = _Mypair._Myval2._Myproxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __To_delete$[ebp], ecx

; 3184 :         _Mypair._Myval2._Myproxy = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 3185 :         _Delete_plain_internal(_Alproxy, _To_delete);

	mov	eax, DWORD PTR __To_delete$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Alproxy$[ebp]
	push	ecx
	call	??$_Delete_plain_internal@V?$allocator@U_Container_proxy@std@@@std@@@std@@YAXAAV?$allocator@U_Container_proxy@std@@@0@QAU_Container_proxy@0@@Z ; std::_Delete_plain_internal<std::allocator<std::_Container_proxy> >
	add	esp, 8

; 3186 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 3187 :     }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
	npad	1
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@basic_stri
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@basic_stri:
	DD	1
	DD	$LN5@basic_stri
$LN5@basic_stri:
	DD	-29					; ffffffe3H
	DD	1
	DD	$LN4@basic_stri
$LN4@basic_stri:
	DB	36					; 00000024H
	DB	83					; 00000053H
	DB	55					; 00000037H
	DB	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z
_TEXT	SEGMENT
$T1 = -269						; size = 1
$T2 = -257						; size = 1
__Right_data_mem$3 = -56				; size = 4
__My_data_mem$4 = -44					; size = 4
__Right_data$ = -32					; size = 4
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents, COMDAT
; _this$ = ecx

; 3055 :     _CONSTEXPR20 void _Take_contents(basic_string& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 3056 :         // assign by stealing _Right's buffer
; 3057 :         // pre: this != &_Right
; 3058 :         // pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 3059 :         // pre: *this owns no memory, iterators orphaned
; 3060 :         // (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 3061 :         auto& _My_data    = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 3062 :         auto& _Right_data = _Right._Mypair._Myval2;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR __Right_data$[ebp], eax

; 3063 : 
; 3064 : #if !defined(_INSERT_STRING_ANNOTATION)
; 3065 :         if constexpr (_Can_memcpy_val) {
; 3066 : #if _HAS_CXX20
; 3067 :             if (!_STD is_constant_evaluated())
; 3068 : #endif // _HAS_CXX20
; 3069 :             {
; 3070 : #if _ITERATOR_DEBUG_LEVEL != 0
; 3071 :                 if (_Right_data._Large_mode_engaged()) {

	mov	ecx, DWORD PTR __Right_data$[ebp]
	call	?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_mode_engaged
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Take_conte

; 3072 :                     // take ownership of _Right's iterators along with its buffer
; 3073 :                     _Swap_proxy_and_iterators(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators
	npad	1

; 3074 :                 } else {

	jmp	SHORT $LN3@Take_conte
$LN2@Take_conte:

; 3075 :                     _Right_data._Orphan_all();

	mov	ecx, DWORD PTR __Right_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
	npad	1
$LN3@Take_conte:

; 3076 :                 }
; 3077 : #endif // _ITERATOR_DEBUG_LEVEL != 0
; 3078 : 
; 3079 :                 const auto _My_data_mem =

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
	add	esp, 4
	add	eax, 4
	mov	DWORD PTR __My_data_mem$4[ebp], eax

; 3080 :                     reinterpret_cast<unsigned char*>(_STD addressof(_Mypair._Myval2)) + _Memcpy_val_offset;
; 3081 :                 const auto _Right_data_mem =

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	call	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
	add	esp, 4
	add	eax, 4
	mov	DWORD PTR __Right_data_mem$3[ebp], eax

; 3082 :                     reinterpret_cast<const unsigned char*>(_STD addressof(_Right._Mypair._Myval2)) + _Memcpy_val_offset;
; 3083 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

	push	24					; 00000018H
	mov	eax, DWORD PTR __Right_data_mem$3[ebp]
	push	eax
	mov	ecx, DWORD PTR __My_data_mem$4[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 3084 : 
; 3085 :                 _Right_data._Mysize = 0;

	mov	eax, DWORD PTR __Right_data$[ebp]
	mov	DWORD PTR [eax+20], 0

; 3086 :                 _Right_data._Myres  = _Small_string_capacity;

	mov	eax, DWORD PTR __Right_data$[ebp]
	mov	DWORD PTR [eax+24], 15			; 0000000fH

; 3087 :                 _Right_data._Activate_SSO_buffer();

	mov	ecx, DWORD PTR __Right_data$[ebp]
	call	?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer
	npad	1

; 3088 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR $T2[ebp], 0
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR __Right_data$[ebp]
	lea	ecx, DWORD PTR [eax+edx+4]
	push	ecx
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 3089 :                 return;

	jmp	$LN1@Take_conte

; 3090 :             }
; 3091 :         }
; 3092 : #endif // !defined(_INSERT_STRING_ANNOTATION)
; 3093 : 
; 3094 :         if (_Right_data._Large_mode_engaged()) { // steal buffer

	mov	ecx, DWORD PTR __Right_data$[ebp]
	call	?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_mode_engaged
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@Take_conte

; 3095 :             _Swap_proxy_and_iterators(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Swap_proxy_and_iterators@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Swap_proxy_and_iterators
	npad	1

; 3096 : 
; 3097 :             _Construct_in_place(_My_data._Bx._Ptr, _Right_data._Bx._Ptr);

	mov	eax, DWORD PTR __Right_data$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __My_data$[ebp]
	add	ecx, 4
	push	ecx
	call	??$_Construct_in_place@PADAAPAD@std@@YAXAAPAD0@Z ; std::_Construct_in_place<char *,char * &>
	add	esp, 8

; 3098 :             _Right_data._Bx._Switch_to_buf();

	mov	ecx, DWORD PTR __Right_data$[ebp]
	add	ecx, 4
	call	?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Switch_to_buf
	npad	1

; 3099 :         } else { // copy small string buffer

	jmp	SHORT $LN5@Take_conte
$LN4@Take_conte:

; 3100 :             _Right_data._Orphan_all();

	mov	ecx, DWORD PTR __Right_data$[ebp]
	call	?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all
	npad	1

; 3101 : 
; 3102 :             _My_data._Activate_SSO_buffer();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer
	npad	1

; 3103 :             _Traits::copy(_My_data._Bx._Buf, _Right_data._Bx._Buf, _Right_data._Mysize + 1);

	mov	eax, DWORD PTR __Right_data$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR __Right_data$[ebp]
	add	edx, 4
	push	edx
	mov	eax, DWORD PTR __My_data$[ebp]
	add	eax, 4
	push	eax
	call	?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ; std::_Char_traits<char,int>::copy
	add	esp, 12					; 0000000cH
$LN5@Take_conte:

; 3104 :         }
; 3105 : 
; 3106 :         _My_data._Myres  = _Right_data._Myres;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __Right_data$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+24], edx

; 3107 :         _My_data._Mysize = _Right_data._Mysize;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	ecx, DWORD PTR __Right_data$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], edx

; 3108 : 
; 3109 :         _Right_data._Mysize = 0;

	mov	eax, DWORD PTR __Right_data$[ebp]
	mov	DWORD PTR [eax+20], 0

; 3110 :         _Right_data._Myres  = _Small_string_capacity;

	mov	eax, DWORD PTR __Right_data$[ebp]
	mov	DWORD PTR [eax+24], 15			; 0000000fH

; 3111 :         _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR __Right_data$[ebp]
	lea	ecx, DWORD PTR [eax+edx+4]
	push	ecx
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8
$LN1@Take_conte:

; 3112 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
$T2 = -233						; size = 1
$T3 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2819 :         : _Mypair(_One_then_variadic_args_t{}, _STD move(_Right._Getal())) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	push	eax
	call	??$move@AAV?$allocator@D@std@@@std@@YA$$QAV?$allocator@D@0@AAV10@@Z ; std::move<std::allocator<char> &>
	add	esp, 4
	push	eax
	movzx	eax, BYTE PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
	npad	1

; 2820 :         _Mypair._Myval2._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
	npad	1

; 2821 :         _Take_contents(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Take_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXAAV12@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Take_contents
	npad	1

; 2822 :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -233						; size = 1
$T2 = -221						; size = 1
__My_data$ = -20					; size = 4
_this$ = -8						; size = 4
?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_empty, COMDAT
; _this$ = ecx

; 2646 :     _CONSTEXPR20 void _Construct_empty() {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2647 :         auto& _My_data = _Mypair._Myval2;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR __My_data$[ebp], eax

; 2648 :         _My_data._Alloc_proxy(_GET_PROXY_ALLOCATOR(_Alty, _Getal()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEAAV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	??$?0D@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><char>
	push	eax
	mov	ecx, DWORD PTR __My_data$[ebp]
	call	??$_Alloc_proxy@V?$allocator@U_Container_proxy@std@@@std@@@_Container_base12@std@@QAEX$$QAV?$allocator@U_Container_proxy@std@@@1@@Z ; std::_Container_base12::_Alloc_proxy<std::allocator<std::_Container_proxy> >
	npad	1

; 2649 : 
; 2650 :         // initialize basic_string data members
; 2651 :         _My_data._Mysize = 0;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [eax+20], 0

; 2652 :         _My_data._Myres  = _Small_string_capacity;

	mov	eax, DWORD PTR __My_data$[ebp]
	mov	DWORD PTR [eax+24], 15			; 0000000fH

; 2653 :         _My_data._Activate_SSO_buffer();

	mov	ecx, DWORD PTR __My_data$[ebp]
	call	?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer
	npad	1

; 2654 : 
; 2655 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 2656 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

	mov	BYTE PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR __My_data$[ebp]
	lea	ecx, DWORD PTR [eax+edx+4]
	push	ecx
	call	?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ; std::_Narrow_char_traits<char,int>::assign
	add	esp, 8

; 2657 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAAV?$allocator@D@2@QADI@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__Al$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Capacity$ = 16					; size = 4
?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAAV?$allocator@D@2@QADI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Deallocate_for_capacity, COMDAT

; 2641 :         _Alty& _Al, const pointer _Old_ptr, const size_type _Capacity) noexcept {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAAV?$allocator@D@2@QADI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax

; 2642 :         _STL_INTERNAL_CHECK(_Capacity > _Small_string_capacity);
; 2643 :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

	mov	eax, DWORD PTR __Capacity$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR __Old_ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR __Al$[ebp]
	call	?deallocate@?$allocator@D@std@@QAEXQADI@Z ; std::allocator<char>::deallocate
	npad	1

; 2644 :     }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAAV?$allocator@D@2@QADI@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-208]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAAV?$allocator@D@2@QADI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Deallocate_for_capacity@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAXAAV?$allocator@D@2@QADI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Deallocate_for_capacity
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
$T2 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2559 :     _CONSTEXPR20 basic_string(_In_z_ const _Elem* const _Ptr) : _Mypair(_Zero_then_variadic_args_t{}) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2560 :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	call	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
	add	esp, 4
	push	eax
	call	??$_Convert_size@II@std@@YAII@Z		; std::_Convert_size<unsigned int,unsigned int>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
	npad	1

; 2561 :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
$T2 = -233						; size = 1
$T3 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2508 :         : _Mypair(_One_then_variadic_args_t{}, _Alty_traits::select_on_container_copy_construction(_Right._Getal())) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Getal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@ABEABV?$allocator@D@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Getal
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
	add	esp, 8
	push	eax
	movzx	ecx, BYTE PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAV?$allocator@D@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><std::allocator<char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2509 :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	ecx, DWORD PTR __Right$[ebp]
	call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Construct@$01PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<2,char const *>
	npad	1

; 2510 :     }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-244]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
$T2 = -221						; size = 1
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2499 :     basic_string() noexcept(is_nothrow_default_constructible_v<_Alty>) : _Mypair(_Zero_then_variadic_args_t{}) {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char> >,1><>
	npad	1

; 2500 :         _Construct_empty();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct_empty
	npad	1

; 2501 :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	int	3
	int	3
	int	3
	int	3
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
	npad	1
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Switch_to_buf, COMDAT
; _this$ = ecx

; 2291 :         _CONSTEXPR20 void _Switch_to_buf() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2292 :             _STD _Destroy_in_place(_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??$_Destroy_in_place@PAD@std@@YAXAAPAD@Z ; std::_Destroy_in_place<char *>
	add	esp, 4

; 2293 : 
; 2294 : #if _HAS_CXX20
; 2295 :             // start the lifetime of the array elements
; 2296 :             if (_STD is_constant_evaluated()) {
; 2297 :                 for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2298 :                     _Buf[_Idx] = value_type();
; 2299 :                 }
; 2300 :             }
; 2301 : #endif // _HAS_CXX20
; 2302 :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Switch_to_buf@_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Switch_to_buf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 2285 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer, COMDAT
; _this$ = ecx

; 2247 :     _CONSTEXPR20 void _Activate_SSO_buffer() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2248 :         // start the lifetime of the array elements
; 2249 : #if _HAS_CXX20
; 2250 :         if (_STD is_constant_evaluated()) {
; 2251 :             for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2252 :                 _Bx._Buf[_Idx] = value_type();
; 2253 :             }
; 2254 :         }
; 2255 : #endif // _HAS_CXX20
; 2256 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Activate_SSO_buffer@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Activate_SSO_buffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_mode_engaged, COMDAT
; _this$ = ecx

; 2243 :     _NODISCARD _CONSTEXPR20 bool _Large_mode_engaged() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 2244 :         return _Myres > _Small_string_capacity;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 15			; 0000000fH
	jbe	SHORT $LN3@Large_mode
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@Large_mode
$LN3@Large_mode:
	mov	DWORD PTR tv66[ebp], 0
$LN4@Large_mode:
	movzx	eax, BYTE PTR tv66[ebp]

; 2245 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_mode_engaged
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
__Result$ = -20						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2234 :     _NODISCARD _CONSTEXPR20 const value_type* _Myptr() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2235 :         const value_type* _Result = _Bx._Buf;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR __Result$[ebp], eax

; 2236 :         if (_Large_mode_engaged()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_mode_engaged
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Myptr

; 2237 :             _Result = _Unfancy(_Bx._Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	mov	DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 2238 :         }
; 2239 : 
; 2240 :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2241 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
__Result$ = -20						; size = 4
_this$ = -8						; size = 4
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 2225 :     _NODISCARD _CONSTEXPR20 value_type* _Myptr() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 2226 :         value_type* _Result = _Bx._Buf;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	mov	DWORD PTR __Result$[ebp], eax

; 2227 :         if (_Large_mode_engaged()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Large_mode_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_mode_engaged
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Myptr

; 2228 :             _Result = _Unfancy(_Bx._Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	??$_Unfancy@D@std@@YAPADPAD@Z		; std::_Unfancy<char>
	add	esp, 4
	mov	DWORD PTR __Result$[ebp], eax
$LN2@Myptr:

; 2229 :         }
; 2230 : 
; 2231 :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2232 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 2212 :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0_Container_base12@std@@QAE@XZ	; std::_Container_base12::_Container_base12
	npad	1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
	npad	1

; 2213 : 
; 2214 :     // length of internal buffer, [1, 16] (NB: used by the debugger visualizer)
; 2215 :     static constexpr size_type _BUF_SIZE = 16 / sizeof(value_type) < 1 ? 1 : 16 / sizeof(value_type);
; 2216 :     // roundup mask for allocated buffers, [0, 15]
; 2217 :     static constexpr size_type _Alloc_mask = sizeof(value_type) <= 1 ? 15
; 2218 :                                            : sizeof(value_type) <= 2 ? 7
; 2219 :                                            : sizeof(value_type) <= 4 ? 3
; 2220 :                                            : sizeof(value_type) <= 8 ? 1
; 2221 :                                                                      : 0;
; 2222 :     // capacity in small mode
; 2223 :     static constexpr size_type _Small_string_capacity = _BUF_SIZE - 1;
; 2224 : 
; 2225 :     _NODISCARD _CONSTEXPR20 value_type* _Myptr() noexcept {
; 2226 :         value_type* _Result = _Bx._Buf;
; 2227 :         if (_Large_mode_engaged()) {
; 2228 :             _Result = _Unfancy(_Bx._Ptr);
; 2229 :         }
; 2230 : 
; 2231 :         return _Result;
; 2232 :     }
; 2233 : 
; 2234 :     _NODISCARD _CONSTEXPR20 const value_type* _Myptr() const noexcept {
; 2235 :         const value_type* _Result = _Bx._Buf;
; 2236 :         if (_Large_mode_engaged()) {
; 2237 :             _Result = _Unfancy(_Bx._Ptr);
; 2238 :         }
; 2239 : 
; 2240 :         return _Result;
; 2241 :     }
; 2242 : 
; 2243 :     _NODISCARD _CONSTEXPR20 bool _Large_mode_engaged() const noexcept {
; 2244 :         return _Myres > _Small_string_capacity;
; 2245 :     }
; 2246 : 
; 2247 :     _CONSTEXPR20 void _Activate_SSO_buffer() noexcept {
; 2248 :         // start the lifetime of the array elements
; 2249 : #if _HAS_CXX20
; 2250 :         if (_STD is_constant_evaluated()) {
; 2251 :             for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2252 :                 _Bx._Buf[_Idx] = value_type();
; 2253 :             }
; 2254 :         }
; 2255 : #endif // _HAS_CXX20
; 2256 :     }
; 2257 : 
; 2258 :     _CONSTEXPR20 void _Check_offset(const size_type _Off) const {
; 2259 :         // checks whether _Off is in the bounds of [0, size()]
; 2260 :         if (_Mysize < _Off) {
; 2261 :             _Xran();
; 2262 :         }
; 2263 :     }
; 2264 : 
; 2265 :     _CONSTEXPR20 void _Check_offset_exclusive(const size_type _Off) const {
; 2266 :         // checks whether _Off is in the bounds of [0, size())
; 2267 :         if (_Mysize <= _Off) {
; 2268 :             _Xran();
; 2269 :         }
; 2270 :     }
; 2271 : 
; 2272 :     [[noreturn]] static void _Xran() {
; 2273 :         _Xout_of_range("invalid string position");
; 2274 :     }
; 2275 : 
; 2276 :     _NODISCARD _CONSTEXPR20 size_type _Clamp_suffix_size(const size_type _Off, const size_type _Size) const noexcept {
; 2277 :         // trims _Size to the longest it can be assuming a string at/after _Off
; 2278 :         return (_STD min)(_Size, _Mysize - _Off);
; 2279 :     }
; 2280 : 
; 2281 :     union _Bxty { // storage for small buffer or pointer to larger one
; 2282 :         // This constructor previously initialized _Ptr. Don't rely on the new behavior without
; 2283 :         // renaming `_String_val` (and fixing the visualizer).
; 2284 :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers
; 2285 :         _CONSTEXPR20 ~_Bxty() noexcept {} // user-provided, for fancy pointers
; 2286 : 
; 2287 :         value_type _Buf[_BUF_SIZE];
; 2288 :         pointer _Ptr;
; 2289 :         char _Alias[_BUF_SIZE]; // TRANSITION, ABI: _Alias is preserved for binary compatibility (especially /clr)
; 2290 : 
; 2291 :         _CONSTEXPR20 void _Switch_to_buf() noexcept {
; 2292 :             _STD _Destroy_in_place(_Ptr);
; 2293 : 
; 2294 : #if _HAS_CXX20
; 2295 :             // start the lifetime of the array elements
; 2296 :             if (_STD is_constant_evaluated()) {
; 2297 :                 for (size_type _Idx = 0; _Idx < _BUF_SIZE; ++_Idx) {
; 2298 :                     _Buf[_Idx] = value_type();
; 2299 :                 }
; 2300 :             }
; 2301 : #endif // _HAS_CXX20
; 2302 :         }
; 2303 :     };
; 2304 :     _Bxty _Bx;
; 2305 : 
; 2306 :     // invariant: _Myres >= _Mysize, and _Myres >= _Small_string_capacity (after string's construction)
; 2307 :     // neither _Mysize nor _Myres takes account of the extra null terminator
; 2308 :     size_type _Mysize = 0; // current length of string (size)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0

; 2309 :     size_type _Myres  = 0; // current storage reserved for string (capacity)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0

; 2212 :     _CONSTEXPR20 _String_val() noexcept : _Bx() {}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction, COMDAT

; 717  :     _NODISCARD static _CONSTEXPR20 _Alloc select_on_container_copy_construction(const _Alloc& _Al) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 718  :         return _Al;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 719  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SA?AV?$allocator@D@2@ABV32@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::_Default_allocator_traits<std::allocator<char> >::max_size, COMDAT

; 713  :     _NODISCARD static _CONSTEXPR20 size_type max_size(const _Alloc&) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 714  :         return static_cast<size_t>(-1) / sizeof(value_type);

	or	eax, -1

; 715  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::_Default_allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 953  :     _NODISCARD_RAW_PTR_ALLOC _CONSTEXPR20 __declspec(allocator) _Ty* allocate(_CRT_GUARDOVERFLOW const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 954  :         static_assert(sizeof(value_type) > 0, "value_type must be complete before calling allocate.");
; 955  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	call	??$_Get_size_of_n@$00@std@@YAII@Z	; std::_Get_size_of_n<1>
	add	esp, 4
	push	eax
	call	??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits>
	add	esp, 4

; 956  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXQADI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXQADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 947  :     _CONSTEXPR20 void deallocate(_Ty* const _Ptr, const size_t _Count) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
$LN4@deallocate:

; 948  :         _STL_ASSERT(_Ptr != nullptr || _Count == 0, "null pointer cannot point to a block of non-zero size");

	cmp	DWORD PTR __Ptr$[ebp], 0
	jne	SHORT $LN10@deallocate
	cmp	DWORD PTR __Count$[ebp], 0
	jne	SHORT $LN8@deallocate
$LN10@deallocate:
	jmp	SHORT $LN6@deallocate
$LN8@deallocate:
	mov	esi, esp
	push	OFFSET ??_C@_0DG@KGHKKGBC@null?5pointer?5cannot?5point?5to?5a?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	948					; 000003b4H
	push	OFFSET ??_C@_0GC@GDGMGNBP@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN12@deallocate
	int	3
$LN12@deallocate:
	mov	esi, esp
	push	0
	push	948					; 000003b4H
	push	OFFSET ??_C@_1ME@KJJNLLPL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1HA@FACCKGGH@?$AA?$CC?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?5?$AAc@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	xor	eax, eax
	jne	SHORT $LN8@deallocate
$LN6@deallocate:
	xor	eax, eax
	jne	SHORT $LN4@deallocate

; 949  :         // no overflow check on the following multiply; we assume _Allocate did that check
; 950  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Ptr$[ebp]
	push	ecx
	call	??$_Deallocate@$07@std@@YAXPAXI@Z	; std::_Deallocate<8>
	add	esp, 8

; 951  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXQADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 939  :     constexpr allocator() noexcept {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 2326 : [[noreturn]] inline void _Xlen_string() {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2327 :     _Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
	npad	1
$LN1@Xlen_strin:

; 2328 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z PROC	; std::_Narrow_char_traits<char,int>::assign, COMDAT

; 438  :     static _CONSTEXPR17 void assign(_Elem& _Left, const _Elem& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 439  : #if _HAS_CXX20
; 440  :         if (_STD is_constant_evaluated()) {
; 441  :             return _Primary_char_traits::assign(_Left, _Right);
; 442  :         }
; 443  : #endif // _HAS_CXX20
; 444  :         _Left = _Right;

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl

; 445  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?assign@?$_Narrow_char_traits@DH@std@@SAXAADABD@Z ENDP	; std::_Narrow_char_traits<char,int>::assign
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 385  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 386  :         // find length of null-terminated string
; 387  : #if _HAS_CXX17
; 388  : #ifdef __cpp_char8_t
; 389  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 390  : #if _HAS_U8_INTRINSICS
; 391  :             return __builtin_u8strlen(_First);
; 392  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 393  :             return _Primary_char_traits::length(_First);
; 394  : #endif // ^^^ no u8 intrinsics ^^^
; 395  :         } else
; 396  : #endif // defined(__cpp_char8_t)
; 397  :         {
; 398  :             return __builtin_strlen(_First);
; 399  :         }
; 400  : #else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
; 401  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	_strlen
	add	esp, 4

; 402  : #endif // ^^^ !_HAS_CXX17 ^^^
; 403  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?compare@?$_Narrow_char_traits@DH@std@@SAHQBD0I@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$_Narrow_char_traits@DH@std@@SAHQBD0I@Z PROC	; std::_Narrow_char_traits<char,int>::compare, COMDAT

; 376  :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 377  :         // compare [_First1, _First1 + _Count) with [_First2, ...)
; 378  : #if _HAS_CXX17
; 379  :         return __builtin_memcmp(_First1, _First2, _Count);
; 380  : #else // ^^^ _HAS_CXX17 / !_HAS_CXX17 vvv
; 381  :         return _CSTD memcmp(_First1, _First2, _Count);

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First1$[ebp]
	push	edx
	call	_memcmp
	add	esp, 12					; 0000000cH

; 382  : #endif // ^^^ !_HAS_CXX17 ^^^
; 383  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?compare@?$_Narrow_char_traits@DH@std@@SAHQBD0I@Z ENDP	; std::_Narrow_char_traits<char,int>::compare
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z PROC	; std::_Char_traits<char,int>::move, COMDAT

; 79   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 80   :         // copy [_First2, _First2 + _Count) to [_First1, ...), allowing overlap
; 81   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 82   :         __builtin_memmove(_First1, _First2, _Count * sizeof(_Elem));
; 83   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS / !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 84   : #if _HAS_CXX20
; 85   :         if (_STD is_constant_evaluated()) {
; 86   :             // dest: [_First1, _First1 + _Count)
; 87   :             // src: [_First2, _First2 + _Count)
; 88   :             // We need to handle overlapping ranges.
; 89   :             // If _First1 is in the src range, we need a backward loop.
; 90   :             // Otherwise, the forward loop works (even if the back of dest overlaps the front of src).
; 91   : 
; 92   :             // Usually, we would compare pointers with less-than, even though they could belong to different arrays.
; 93   :             // However, we're not allowed to do that during constant evaluation, so we need a linear scan for equality.
; 94   :             bool _Loop_forward = true;
; 95   : 
; 96   :             for (const _Elem* _Src = _First2; _Src != _First2 + _Count; ++_Src) {
; 97   :                 if (_First1 == _Src) {
; 98   :                     _Loop_forward = false;
; 99   :                     break;
; 100  :                 }
; 101  :             }
; 102  : 
; 103  :             if (_Loop_forward) {
; 104  :                 for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 105  :                     _First1[_Idx] = _First2[_Idx];
; 106  :                 }
; 107  :             } else {
; 108  :                 for (size_t _Idx = _Count; _Idx != 0; --_Idx) {
; 109  :                     _First1[_Idx - 1] = _First2[_Idx - 1];
; 110  :                 }
; 111  :             }
; 112  : 
; 113  :             return _First1;
; 114  :         }
; 115  : #endif // _HAS_CXX20
; 116  : 
; 117  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First1$[ebp]
	push	edx
	call	_memmove
	add	esp, 12					; 0000000cH

; 118  : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 119  : 
; 120  :         return _First1;

	mov	eax, DWORD PTR __First1$[ebp]

; 121  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?move@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ENDP	; std::_Char_traits<char,int>::move
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xstring
;	COMDAT ?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z PROC	; std::_Char_traits<char,int>::copy, COMDAT

; 48   :         _In_reads_(_Count) const _Elem* const _First2, const size_t _Count) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 49   :         // copy [_First2, _First2 + _Count) to [_First1, ...)
; 50   : #if _HAS_MEMCPY_MEMMOVE_INTRINSICS
; 51   :         __builtin_memcpy(_First1, _First2, _Count * sizeof(_Elem));
; 52   : #else // ^^^ _HAS_MEMCPY_MEMMOVE_INTRINSICS / !_HAS_MEMCPY_MEMMOVE_INTRINSICS vvv
; 53   : #if _HAS_CXX20
; 54   :         if (_STD is_constant_evaluated()) {
; 55   :             // pre: [_First1, _First1 + _Count) and [_First2, _First2 + _Count) do not overlap
; 56   :             for (size_t _Idx = 0; _Idx != _Count; ++_Idx) {
; 57   :                 _First1[_Idx] = _First2[_Idx];
; 58   :             }
; 59   : 
; 60   :             return _First1;
; 61   :         }
; 62   : #endif // _HAS_CXX20
; 63   : 
; 64   :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

	mov	eax, DWORD PTR __Count$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First1$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 65   : #endif // ^^^ !_HAS_MEMCPY_MEMMOVE_INTRINSICS ^^^
; 66   : 
; 67   :         return _First1;

	mov	eax, DWORD PTR __First1$[ebp]

; 68   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?copy@?$_Char_traits@DH@std@@SAPADQADQBDI@Z ENDP	; std::_Char_traits<char,int>::copy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??0_Basic_container_proxy_ptr12@std@@IAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Basic_container_proxy_ptr12@std@@IAE@XZ PROC	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12, COMDAT
; _this$ = ecx

; 1430 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1423 :     _Container_proxy* _Ptr = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1430 :     _CONSTEXPR20 _Basic_container_proxy_ptr12()                       = default;

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Basic_container_proxy_ptr12@std@@IAE@XZ ENDP	; std::_Basic_container_proxy_ptr12::_Basic_container_proxy_ptr12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ PROC	; std::_Basic_container_proxy_ptr12::_Release, COMDAT
; _this$ = ecx

; 1425 :     constexpr void _Release() noexcept { // disengage this _Basic_container_proxy_ptr12

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1426 :         _Ptr = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1427 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Release@_Basic_container_proxy_ptr12@std@@QAEXXZ ENDP	; std::_Basic_container_proxy_ptr12::_Release
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\utility
;	COMDAT ??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z
_TEXT	SEGMENT
__Old_val$ = -8						; size = 4
__Val$ = 8						; size = 4
__New_val$ = 12						; size = 4
??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z PROC ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>, COMDAT

; 754  :     conjunction_v<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty&, _Other>>) {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi

; 755  :     // assign _New_val to _Val, return previous _Val
; 756  :     _Ty _Old_val = static_cast<_Ty&&>(_Val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old_val$[ebp], ecx

; 757  :     _Val         = static_cast<_Other&&>(_New_val);

	mov	eax, DWORD PTR __Val$[ebp]
	mov	ecx, DWORD PTR __New_val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 758  :     return _Old_val;

	mov	eax, DWORD PTR __Old_val$[ebp]

; 759  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z ENDP ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Lock$ = -20						; size = 4
_this$ = -8						; size = 4
?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ PROC	; std::_Iterator_base12::_Orphan_me_locked_v3, COMDAT
; _this$ = ecx

; 1339 :     void _Orphan_me_locked_v3() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1340 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1

; 1341 :         _Orphan_me_unlocked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked_v3
	npad	1

; 1342 :     }

	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Orphan_me_
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@Orphan_me_:
	DD	1
	DD	$LN5@Orphan_me_
$LN5@Orphan_me_:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@Orphan_me_
$LN4@Orphan_me_:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ ENDP	; std::_Iterator_base12::_Orphan_me_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Pnext$ = -20						; size = 4
_this$ = -8						; size = 4
?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ PROC ; std::_Iterator_base12::_Orphan_me_unlocked_v3, COMDAT
; _this$ = ecx

; 1323 :     _CONSTEXPR20 void _Orphan_me_unlocked_v3() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1324 :         if (!_Myproxy) { // already orphaned

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN10@Orphan_me_

; 1325 :             return;

	jmp	$LN1@Orphan_me_
$LN10@Orphan_me_:

; 1326 :         }
; 1327 : 
; 1328 :         // adopted, remove self from list
; 1329 :         _Iterator_base12** _Pnext = &_Myproxy->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx
$LN2@Orphan_me_:

; 1330 :         while (*_Pnext && *_Pnext != this) {

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Orphan_me_
	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _this$[ebp]
	je	SHORT $LN3@Orphan_me_

; 1331 :             _Pnext = &(*_Pnext)->_Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 4
	mov	DWORD PTR __Pnext$[ebp], ecx

; 1332 :         }

	jmp	SHORT $LN2@Orphan_me_
$LN3@Orphan_me_:

; 1333 : 
; 1334 :         _STL_VERIFY(*_Pnext, "ITERATOR LIST CORRUPTED!");

	mov	eax, DWORD PTR __Pnext$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN11@Orphan_me_
	jmp	SHORT $LN8@Orphan_me_
$LN11@Orphan_me_:
	mov	esi, esp
	push	OFFSET ??_C@_0BJ@LFDBABJJ@ITERATOR?5LIST?5CORRUPTED?$CB@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	1334					; 00000536H
	push	OFFSET ??_C@_0GC@GDGMGNBP@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN14@Orphan_me_
	int	3
$LN14@Orphan_me_:
	mov	esi, esp
	push	0
	push	1334					; 00000536H
	push	OFFSET ??_C@_1ME@KJJNLLPL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1DG@PLBPCAEM@?$AA?$CC?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	xor	eax, eax
	jne	SHORT $LN11@Orphan_me_
$LN8@Orphan_me_:
	xor	eax, eax
	jne	SHORT $LN3@Orphan_me_

; 1335 :         *_Pnext  = _Mynextiter;

	mov	eax, DWORD PTR __Pnext$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], edx

; 1336 :         _Myproxy = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN1@Orphan_me_:

; 1337 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ENDP ; std::_Iterator_base12::_Orphan_me_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Lock$ = -20						; size = 4
_this$ = -8						; size = 4
__Parent$ = 8						; size = 4
?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt_locked, COMDAT
; _this$ = ecx

; 1318 :     void _Adopt_locked(const _Container_base12* _Parent) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1319 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1

; 1320 :         _Adopt_unlocked(_Parent);

	mov	eax, DWORD PTR __Parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt_unlocked
	npad	1

; 1321 :     }

	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Adopt_lock
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN6@Adopt_lock:
	DD	1
	DD	$LN5@Adopt_lock
$LN5@Adopt_lock:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@Adopt_lock
$LN4@Adopt_lock:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Parent_proxy$ = -20					; size = 4
_this$ = -8						; size = 4
__Parent$ = 8						; size = 4
?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt_unlocked, COMDAT
; _this$ = ecx

; 1301 :     _CONSTEXPR20 void _Adopt_unlocked(const _Container_base12* _Parent) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1302 :         if (!_Parent) {

	cmp	DWORD PTR __Parent$[ebp], 0
	jne	SHORT $LN2@Adopt_unlo

; 1303 :             _Orphan_me_unlocked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked_v3
	npad	1

; 1304 :             return;

	jmp	SHORT $LN1@Adopt_unlo
$LN2@Adopt_unlo:

; 1305 :         }
; 1306 : 
; 1307 :         _Container_proxy* _Parent_proxy = _Parent->_Myproxy;

	mov	eax, DWORD PTR __Parent$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Parent_proxy$[ebp], ecx

; 1308 :         if (_Myproxy != _Parent_proxy) { // change parentage

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR __Parent_proxy$[ebp]
	je	SHORT $LN3@Adopt_unlo

; 1309 :             if (_Myproxy) { // adopted, remove self from list

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN4@Adopt_unlo

; 1310 :                 _Orphan_me_unlocked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_unlocked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_unlocked_v3
	npad	1
$LN4@Adopt_unlo:

; 1311 :             }
; 1312 :             _Mynextiter                 = _Parent_proxy->_Myfirstiter;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent_proxy$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 1313 :             _Parent_proxy->_Myfirstiter = this;

	mov	eax, DWORD PTR __Parent_proxy$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 1314 :             _Myproxy                    = _Parent_proxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parent_proxy$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@Adopt_unlo:
$LN1@Adopt_unlo:

; 1315 :         }
; 1316 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Adopt_unlocked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 1273 :     _CONSTEXPR20 const _Container_base12* _Getcont() const noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1274 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Getcont
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN4@Getcont
$LN3@Getcont:
	mov	DWORD PTR tv68[ebp], 0
$LN4@Getcont:
	mov	eax, DWORD PTR tv68[ebp]

; 1275 :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 1253 :     _CONSTEXPR20 void _Adopt(const _Container_base12* _Parent) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1254 : #if _HAS_CXX20
; 1255 :         if (_STD is_constant_evaluated()) {
; 1256 :             _Adopt_unlocked(_Parent);
; 1257 :         } else
; 1258 : #endif // _HAS_CXX20
; 1259 :         {
; 1260 :             _Adopt_locked(_Parent);

	mov	eax, DWORD PTR __Parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt_locked@_Iterator_base12@std@@AAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt_locked
	npad	1

; 1261 :         }
; 1262 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 1242 :     _CONSTEXPR20 ~_Iterator_base12() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1243 : #if _HAS_CXX20
; 1244 :         if (_STD is_constant_evaluated()) {
; 1245 :             _Orphan_me_unlocked_v3();
; 1246 :         } else
; 1247 : #endif // _HAS_CXX20
; 1248 :         {
; 1249 :             _Orphan_me_locked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_me_locked_v3@_Iterator_base12@std@@AAEXXZ ; std::_Iterator_base12::_Orphan_me_locked_v3
	npad	1

; 1250 :         }
; 1251 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 1219 :     _CONSTEXPR20 _Iterator_base12() noexcept = default; // construct orphaned iterator

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1220 : 
; 1221 :     _CONSTEXPR20 _Iterator_base12(const _Iterator_base12& _Right) noexcept {
; 1222 :         *this = _Right;
; 1223 :     }
; 1224 : 
; 1225 :     _CONSTEXPR20 _Iterator_base12& operator=(const _Iterator_base12& _Right) noexcept {
; 1226 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1227 : #if _HAS_CXX20
; 1228 :         if (_STD is_constant_evaluated()) {
; 1229 :             _Assign_unlocked(_Right);
; 1230 :         } else
; 1231 : #endif // _HAS_CXX20
; 1232 :         {
; 1233 :             _Assign_locked(_Right);
; 1234 :         }
; 1235 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 / _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1236 :         _Myproxy = _Right._Myproxy;
; 1237 : #endif // ^^^ _ITERATOR_DEBUG_LEVEL != 2 ^^^
; 1238 :         return *this;
; 1239 :     }
; 1240 : 
; 1241 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1242 :     _CONSTEXPR20 ~_Iterator_base12() noexcept {
; 1243 : #if _HAS_CXX20
; 1244 :         if (_STD is_constant_evaluated()) {
; 1245 :             _Orphan_me_unlocked_v3();
; 1246 :         } else
; 1247 : #endif // _HAS_CXX20
; 1248 :         {
; 1249 :             _Orphan_me_locked_v3();
; 1250 :         }
; 1251 :     }
; 1252 : 
; 1253 :     _CONSTEXPR20 void _Adopt(const _Container_base12* _Parent) noexcept {
; 1254 : #if _HAS_CXX20
; 1255 :         if (_STD is_constant_evaluated()) {
; 1256 :             _Adopt_unlocked(_Parent);
; 1257 :         } else
; 1258 : #endif // _HAS_CXX20
; 1259 :         {
; 1260 :             _Adopt_locked(_Parent);
; 1261 :         }
; 1262 :     }
; 1263 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 / _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1264 :     _CONSTEXPR20 void _Adopt(const _Container_base12* _Parent) noexcept {
; 1265 :         if (_Parent) { // have a parent, do adoption
; 1266 :             _Myproxy = _Parent->_Myproxy;
; 1267 :         } else { // no future parent, just disown current parent
; 1268 :             _Myproxy = nullptr;
; 1269 :         }
; 1270 :     }
; 1271 : #endif // ^^^ _ITERATOR_DEBUG_LEVEL != 2 ^^^
; 1272 : 
; 1273 :     _CONSTEXPR20 const _Container_base12* _Getcont() const noexcept {
; 1274 :         return _Myproxy ? _Myproxy->_Mycont : nullptr;
; 1275 :     }
; 1276 : 
; 1277 :     static constexpr bool _Unwrap_when_unverified = _ITERATOR_DEBUG_LEVEL == 0;
; 1278 : 
; 1279 :     mutable _Container_proxy* _Myproxy    = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1280 :     mutable _Iterator_base12* _Mynextiter = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1219 :     _CONSTEXPR20 _Iterator_base12() noexcept = default; // construct orphaned iterator

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AAEXAAU12@@Z
_TEXT	SEGMENT
__Lock$ = -20						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AAEXAAU12@@Z PROC ; std::_Container_base12::_Swap_proxy_and_iterators_locked, COMDAT
; _this$ = ecx

; 1211 :     void _Swap_proxy_and_iterators_locked(_Container_base12& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1212 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1

; 1213 :         _Swap_proxy_and_iterators_unlocked(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Swap_proxy_and_iterators_unlocked@_Container_base12@std@@AAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators_unlocked
	npad	1

; 1214 :     }

	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Swap_proxy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN6@Swap_proxy:
	DD	1
	DD	$LN5@Swap_proxy
$LN5@Swap_proxy:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@Swap_proxy
$LN4@Swap_proxy:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AAEXAAU12@@Z ENDP ; std::_Container_base12::_Swap_proxy_and_iterators_locked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ
_TEXT	SEGMENT
__Lock$ = -20						; size = 4
_this$ = -8						; size = 4
?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ PROC ; std::_Container_base12::_Orphan_all_locked_v3, COMDAT
; _this$ = ecx

; 1206 :     void _Orphan_all_locked_v3() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1207 :         _Lockit _Lock(_LOCK_DEBUG);

	mov	esi, esp
	push	3
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1

; 1208 :         _Orphan_all_unlocked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_unlocked_v3
	npad	1

; 1209 :     }

	mov	esi, esp
	lea	ecx, DWORD PTR __Lock$[ebp]
	call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Orphan_all
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN6@Orphan_all:
	DD	1
	DD	$LN5@Orphan_all
$LN5@Orphan_all:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN4@Orphan_all
$LN4@Orphan_all:
	DB	95					; 0000005fH
	DB	76					; 0000004cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ENDP ; std::_Container_base12::_Orphan_all_locked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Swap_proxy_and_iterators_unlocked@_Container_base12@std@@AAEXAAU12@@Z
_TEXT	SEGMENT
__Temp$ = -20						; size = 4
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
?_Swap_proxy_and_iterators_unlocked@_Container_base12@std@@AAEXAAU12@@Z PROC ; std::_Container_base12::_Swap_proxy_and_iterators_unlocked, COMDAT
; _this$ = ecx

; 1370 : _CONSTEXPR20 void _Container_base12::_Swap_proxy_and_iterators_unlocked(_Container_base12& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1371 :     _Container_proxy* _Temp = _Myproxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Temp$[ebp], ecx

; 1372 :     _Myproxy                = _Right._Myproxy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 1373 :     _Right._Myproxy         = _Temp;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR __Temp$[ebp]
	mov	DWORD PTR [eax], ecx

; 1374 : 
; 1375 :     if (_Myproxy) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Swap_proxy

; 1376 :         _Myproxy->_Mycont = this;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], edx
$LN2@Swap_proxy:

; 1377 :     }
; 1378 : 
; 1379 :     if (_Right._Myproxy) {

	mov	eax, DWORD PTR __Right$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Swap_proxy

; 1380 :         _Right._Myproxy->_Mycont = &_Right;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [ecx], edx
$LN3@Swap_proxy:

; 1381 :     }
; 1382 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?_Swap_proxy_and_iterators_unlocked@_Container_base12@std@@AAEXAAU12@@Z ENDP ; std::_Container_base12::_Swap_proxy_and_iterators_unlocked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -224						; size = 4
__Pnext$2 = -20						; size = 4
_this$ = -8						; size = 4
?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ PROC ; std::_Container_base12::_Orphan_all_unlocked_v3, COMDAT
; _this$ = ecx

; 1346 : _CONSTEXPR20 void _Container_base12::_Orphan_all_unlocked_v3() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1347 :     if (!_Myproxy) { // no proxy, already done

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN5@Orphan_all

; 1348 :         return;

	jmp	SHORT $LN1@Orphan_all
$LN5@Orphan_all:

; 1349 :     }
; 1350 : 
; 1351 :     // proxy allocated, drain it
; 1352 :     for (auto _Pnext = _STD exchange(_Myproxy->_Myfirstiter, nullptr); _Pnext; _Pnext = _Pnext->_Mynextiter) {

	mov	DWORD PTR $T1[ebp], 0
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 4
	push	edx
	call	??$exchange@PAU_Iterator_base12@std@@$$T@std@@YAPAU_Iterator_base12@0@AAPAU10@$$QA$$T@Z ; std::exchange<std::_Iterator_base12 *,std::nullptr_t>
	add	esp, 8
	mov	DWORD PTR __Pnext$2[ebp], eax
	jmp	SHORT $LN4@Orphan_all
$LN2@Orphan_all:
	mov	eax, DWORD PTR __Pnext$2[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR __Pnext$2[ebp], ecx
$LN4@Orphan_all:
	cmp	DWORD PTR __Pnext$2[ebp], 0
	je	SHORT $LN3@Orphan_all

; 1353 :         _Pnext->_Myproxy = nullptr;

	mov	eax, DWORD PTR __Pnext$2[ebp]
	mov	DWORD PTR [eax], 0

; 1354 :     }

	jmp	SHORT $LN2@Orphan_all
$LN3@Orphan_all:
$LN1@Orphan_all:

; 1355 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all_unlocked_v3@_Container_base12@std@@AAEXXZ ENDP ; std::_Container_base12::_Orphan_all_unlocked_v3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Right$ = 8						; size = 4
?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z PROC ; std::_Container_base12::_Swap_proxy_and_iterators, COMDAT
; _this$ = ecx

; 1384 : _CONSTEXPR20 void _Container_base12::_Swap_proxy_and_iterators(_Container_base12& _Right) noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1385 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1386 : #if _HAS_CXX20
; 1387 :     if (_STD is_constant_evaluated()) {
; 1388 :         _Swap_proxy_and_iterators_unlocked(_Right);
; 1389 :     } else
; 1390 : #endif // _HAS_CXX20
; 1391 :     {
; 1392 :         _Swap_proxy_and_iterators_locked(_Right);

	mov	eax, DWORD PTR __Right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Swap_proxy_and_iterators_locked@_Container_base12@std@@AAEXAAU12@@Z ; std::_Container_base12::_Swap_proxy_and_iterators_locked
	npad	1

; 1393 :     }
; 1394 : #else // ^^^ _ITERATOR_DEBUG_LEVEL == 2 / _ITERATOR_DEBUG_LEVEL != 2 vvv
; 1395 :     _Swap_proxy_and_iterators_unlocked(_Right);
; 1396 : #endif // ^^^ _ITERATOR_DEBUG_LEVEL != 2 ^^^
; 1397 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?_Swap_proxy_and_iterators@_Container_base12@std@@QAEXAAU12@@Z ENDP ; std::_Container_base12::_Swap_proxy_and_iterators
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 1357 : _CONSTEXPR20 void _Container_base12::_Orphan_all() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1358 : #if _ITERATOR_DEBUG_LEVEL == 2
; 1359 : #if _HAS_CXX20
; 1360 :     if (_STD is_constant_evaluated()) {
; 1361 :         _Orphan_all_unlocked_v3();
; 1362 :     } else
; 1363 : #endif // _HAS_CXX20
; 1364 :     {
; 1365 :         _Orphan_all_locked_v3();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all_locked_v3@_Container_base12@std@@AAEXXZ ; std::_Container_base12::_Orphan_all_locked_v3
	npad	1

; 1366 :     }
; 1367 : #endif // _ITERATOR_DEBUG_LEVEL == 2
; 1368 : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 1175 :     _CONSTEXPR20 _Container_base12() noexcept = default;

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 1176 : 
; 1177 :     _Container_base12(const _Container_base12&)            = delete;
; 1178 :     _Container_base12& operator=(const _Container_base12&) = delete;
; 1179 : 
; 1180 :     _CONSTEXPR20 void _Orphan_all() noexcept;
; 1181 :     _CONSTEXPR20 void _Swap_proxy_and_iterators(_Container_base12&) noexcept;
; 1182 : 
; 1183 :     template <class _Alloc>
; 1184 :     _CONSTEXPR20 void _Alloc_proxy(_Alloc&& _Al) {
; 1185 :         _Container_proxy* const _New_proxy = _Unfancy(_Al.allocate(1));
; 1186 :         _Construct_in_place(*_New_proxy, this);
; 1187 :         _Myproxy            = _New_proxy;
; 1188 :         _New_proxy->_Mycont = this;
; 1189 :     }
; 1190 : 
; 1191 :     template <class _Alloc>
; 1192 :     _CONSTEXPR20 void _Reload_proxy(_Alloc&& _Old_alloc, _Alloc&& _New_alloc) {
; 1193 :         // pre: no iterators refer to the existing proxy
; 1194 :         _Container_proxy* const _New_proxy = _Unfancy(_New_alloc.allocate(1));
; 1195 :         _Construct_in_place(*_New_proxy, this);
; 1196 :         _New_proxy->_Mycont = this;
; 1197 :         _Delete_plain_internal(_Old_alloc, _STD exchange(_Myproxy, _New_proxy));
; 1198 :     }
; 1199 : 
; 1200 :     _Container_proxy* _Myproxy = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1175 :     _CONSTEXPR20 _Container_base12() noexcept = default;

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Mycont_$ = 8						; size = 4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z PROC ; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 1167 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Mycont_$[ebp]
	mov	DWORD PTR [eax], ecx

; 1168 : 
; 1169 :     const _Container_base12* _Mycont       = nullptr;
; 1170 :     mutable _Iterator_base12* _Myfirstiter = nullptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1167 :     _CONSTEXPR20 _Container_proxy(_Container_base12* _Mycont_) noexcept : _Mycont(_Mycont_) {}

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0_Container_proxy@std@@QAE@PAU_Container_base12@1@@Z ENDP ; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z
_TEXT	SEGMENT
__Back_shift$ = -44					; size = 4
__Min_back_shift$ = -32					; size = 4
__Ptr_container$ = -20					; size = 4
__Ptr_user$ = -8					; size = 4
__Ptr$ = 8						; size = 4
__Bytes$ = 12						; size = 4
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z PROC ; std::_Adjust_manually_vector_aligned, COMDAT

; 169  : inline void _Adjust_manually_vector_aligned(void*& _Ptr, size_t& _Bytes) {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 170  :     // adjust parameters from _Allocate_manually_vector_aligned to pass to operator delete
; 171  :     _Bytes += _Non_user_size;

	mov	eax, DWORD PTR __Bytes$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 39					; 00000027H
	mov	edx, DWORD PTR __Bytes$[ebp]
	mov	DWORD PTR [edx], ecx

; 172  : 
; 173  :     const uintptr_t* const _Ptr_user = static_cast<uintptr_t*>(_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Ptr_user$[ebp], ecx

; 174  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

	mov	eax, 4
	imul	ecx, eax, -1
	mov	edx, DWORD PTR __Ptr_user$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR __Ptr_container$[ebp], eax
$LN4@Adjust_man:

; 175  : 
; 176  :     // If the following asserts, it likely means that we are performing
; 177  :     // an aligned delete on memory coming from an unaligned allocation.
; 178  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");

	mov	eax, 4
	imul	ecx, eax, -2
	mov	edx, DWORD PTR __Ptr_user$[ebp]
	cmp	DWORD PTR [edx+ecx], -84215046		; fafafafaH
	jne	SHORT $LN14@Adjust_man
	jmp	SHORT $LN6@Adjust_man
$LN14@Adjust_man:
	mov	esi, esp
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_0GC@GDGMGNBP@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN19@Adjust_man
	int	3
$LN19@Adjust_man:
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
	add	eax, 9
	push	eax
	push	OFFSET ??_C@_1ME@KJJNLLPL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	xor	eax, eax
	jne	SHORT $LN14@Adjust_man
$LN6@Adjust_man:
	xor	eax, eax
	jne	SHORT $LN4@Adjust_man

; 179  : 
; 180  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 181  :     // in range [_Min_back_shift, _Non_user_size]
; 182  : #ifdef _DEBUG
; 183  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);

	mov	DWORD PTR __Min_back_shift$[ebp], 8

; 184  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 185  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 186  : #endif // ^^^ !defined(_DEBUG) ^^^
; 187  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR __Back_shift$[ebp], ecx
$LN10@Adjust_man:

; 188  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

	cmp	DWORD PTR __Back_shift$[ebp], 8
	jb	SHORT $LN16@Adjust_man
	cmp	DWORD PTR __Back_shift$[ebp], 39	; 00000027H
	ja	SHORT $LN16@Adjust_man
	jmp	SHORT $LN12@Adjust_man
$LN16@Adjust_man:
	mov	esi, esp
	push	OFFSET ??_C@_0BB@FCMFBGOM@invalid?5argument@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
	add	eax, 19					; 00000013H
	push	eax
	push	OFFSET ??_C@_0GC@GDGMGNBP@C?3?2Program?5Files?2Microsoft?5Visu@
	push	2
	call	DWORD PTR __imp___CrtDbgReport
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 1
	jne	SHORT $LN20@Adjust_man
	int	3
$LN20@Adjust_man:
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR ?__LINE__Var@?0??_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z@4JA
	add	eax, 19					; 00000013H
	push	eax
	push	OFFSET ??_C@_1ME@KJJNLLPL@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe@
	push	OFFSET ??_C@_11LOCGONAA@@
	push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe@
	call	DWORD PTR __imp___invalid_parameter
	add	esp, 20					; 00000014H
	cmp	esi, esp
	call	__RTC_CheckEsp
	npad	1
	xor	eax, eax
	jne	SHORT $LN16@Adjust_man
$LN12@Adjust_man:
	xor	eax, eax
	jne	SHORT $LN10@Adjust_man

; 189  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	ecx, DWORD PTR __Ptr_container$[ebp]
	mov	DWORD PTR [eax], ecx

; 190  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Adjust_manually_vector_aligned@std@@YAXAAPAXAAI@Z ENDP ; std::_Adjust_manually_vector_aligned
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z PROC	; std::_Default_allocate_traits::_Allocate, COMDAT

; 100  :         void* _Allocate(const size_t _Bytes) {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 101  :         return ::operator new(_Bytes);

	mov	eax, DWORD PTR __Bytes$[ebp]
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 102  :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Allocate@_Default_allocate_traits@std@@SAPAXI@Z ENDP	; std::_Default_allocate_traits::_Allocate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -208						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 74   : [[noreturn]] inline void _Throw_bad_array_new_length() {

	push	ebp
	mov	ebp, esp
	sub	esp, 212				; 000000d4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-20]
	mov	ecx, 5
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 75   :     _THROW(bad_array_new_length{});

	lea	ecx, DWORD PTR $T1[ebp]
	call	??0bad_array_new_length@std@@QAE@XZ	; std::bad_array_new_length::bad_array_new_length
	push	OFFSET __TI3?AVbad_array_new_length@std@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
	npad	1
$LN1@Throw_bad_:

; 76   : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 212				; 000000d4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\limits
;	COMDAT ?max@?$numeric_limits@H@std@@SAHXZ
_TEXT	SEGMENT
?max@?$numeric_limits@H@std@@SAHXZ PROC			; std::numeric_limits<int>::max, COMDAT

; 546  :     _NODISCARD static constexpr int(max)() noexcept {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 547  :         return INT_MAX;

	mov	eax, 2147483647				; 7fffffffH

; 548  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?max@?$numeric_limits@H@std@@SAHXZ ENDP			; std::numeric_limits<int>::max
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_array_new_length@std@@UAE@XZ
	npad	1
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0bad_alloc@std@@QAE@ABV01@@Z
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ
	npad	1
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 143  :         : bad_alloc("bad array new length")

	push	OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0bad_alloc@std@@AAE@QBD@Z		; std::bad_alloc::bad_alloc
	npad	1

; 144  :     {

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1bad_alloc@std@@UAE@XZ
	npad	1
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1bad_alloc@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1bad_alloc@std@@UAE@XZ PROC				; std::bad_alloc::~bad_alloc, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	npad	1
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1bad_alloc@std@@UAE@XZ ENDP				; std::bad_alloc::~bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@AAE@QBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
??0bad_alloc@std@@AAE@QBD@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx

; 133  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 132  :         : exception(_Message, 1)

	push	1
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@QBDH@Z		; std::exception::exception
	npad	1

; 133  :     {

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7bad_alloc@std@@6B@

; 134  :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0bad_alloc@std@@AAE@QBD@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	npad	1
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -208						; size = 4
_this$ = -8						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@what
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv69[ebp], edx
	jmp	SHORT $LN4@what
$LN3@what:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
	mov	eax, DWORD PTR tv69[ebp]

; 97   :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 91   :         __std_exception_destroy(&_Data);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	___std_exception_destroy
	add	esp, 4

; 92   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 72   :         : _Data()

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Other$[ebp]
	add	ecx, 4
	push	ecx
	call	___std_exception_copy
	add	esp, 8

; 75   :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
___formal$ = 12						; size = 4
??0exception@std@@QAE@QBDH@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 67   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 66   :         : _Data()

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax

; 68   :         _Data._What = _Message;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Message$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 69   :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	8
??0exception@std@@QAE@QBDH@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT _sscanf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sscanf	PROC						; COMDAT

; 2247 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2248 :         int _Result;
; 2249 :         va_list _ArgList;
; 2250 :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 2251 :         _Result = _vsscanf_l(_Buffer, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Buffer$[ebp]
	push	edx
	call	__vsscanf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax

; 2252 :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 2253 :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 2254 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __vsscanf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsscanf_l PROC					; COMDAT

; 2152 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2153 :         return __stdio_common_vsscanf(

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	-1
	mov	eax, DWORD PTR __Buffer$[ebp]
	push	eax
	call	___local_stdio_scanf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	DWORD PTR __imp____stdio_common_vsscanf
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2154 :             _CRT_INTERNAL_LOCAL_SCANF_OPTIONS,
; 2155 :             _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
; 2156 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT _vsprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__ArgList$ = 16						; size = 4
_vsprintf PROC						; COMDAT

; 1473 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1474 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, NULL, _ArgList);

	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	push	-1
	mov	edx, DWORD PTR __Buffer$[ebp]
	push	edx
	call	__vsnprintf_l
	add	esp, 20					; 00000014H

; 1475 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_vsprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -208						; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1391 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-16]
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1392 :         int const _Result = __stdio_common_vsprintf(

	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __BufferCount$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Buffer$[ebp]
	push	ecx
	call	___local_stdio_printf_options
	mov	edx, DWORD PTR [eax]
	or	edx, 1
	mov	eax, DWORD PTR [eax+4]
	push	eax
	push	edx
	call	DWORD PTR __imp____stdio_common_vsprintf
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Result$[ebp], eax

; 1393 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1394 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1395 : 
; 1396 :         return _Result < 0 ? -1 : _Result;

	cmp	DWORD PTR __Result$[ebp], 0
	jge	SHORT $LN3@vsnprintf_
	mov	DWORD PTR tv74[ebp], -1
	jmp	SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
	mov	eax, DWORD PTR __Result$[ebp]
	mov	DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
	mov	eax, DWORD PTR tv74[ebp]

; 1397 :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_scanf_options
_TEXT	SEGMENT
___local_stdio_scanf_options PROC			; COMDAT

; 100  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 101  :         static unsigned __int64 _OptionsStorage;
; 102  :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage

; 103  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 90   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 164  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 165  :         (void)_Size;
; 166  :         return _Where;

	mov	eax, DWORD PTR __Where$[ebp]

; 167  :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibSpline_Source\IdvSpline.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibSpline_Source\IdvSpline.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
