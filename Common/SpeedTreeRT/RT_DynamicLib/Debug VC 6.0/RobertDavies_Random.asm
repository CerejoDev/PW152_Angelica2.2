; Listing generated by Microsoft (R) Optimizing Compiler Version 19.40.33813.0 

	TITLE	D:\pw152\Common\SpeedTreeRT\RT_DynamicLib\Debug VC 6.0\RobertDavies_Random.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?seed@Random@@0NA				; Random::seed
PUBLIC	?Buffer@Random@@0PAMA				; Random::Buffer
PUBLIC	?Nxi@Normal@@0MA				; Normal::Nxi
PUBLIC	?Nsx@Normal@@0PAMA				; Normal::Nsx
PUBLIC	?Nsfx@Normal@@0PAMA				; Normal::Nsfx
PUBLIC	?count@Normal@@0JA				; Normal::count
_BSS	SEGMENT
?seed@Random@@0NA DQ 01H DUP (?)			; Random::seed
?Buffer@Random@@0PAMA DD 080H DUP (?)			; Random::Buffer
?Nxi@Normal@@0MA DD 01H DUP (?)				; Normal::Nxi
?Nsx@Normal@@0PAMA DD 01H DUP (?)			; Normal::Nsx
?Nsfx@Normal@@0PAMA DD 01H DUP (?)			; Normal::Nsfx
?count@Normal@@0JA DD 01H DUP (?)			; Normal::count
_BSS	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	_expf
PUBLIC	_fabsf
PUBLIC	_logf
PUBLIC	_sinf
PUBLIC	?exp@@YAMM@Z					; exp
PUBLIC	?fabs@@YAMM@Z					; fabs
PUBLIC	?log@@YAMM@Z					; log
PUBLIC	?sin@@YAMM@Z					; sin
PUBLIC	??0exception@std@@QAE@QBD@Z			; std::exception::exception
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0logic_error@std@@QAE@PBD@Z			; std::logic_error::logic_error
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
PUBLIC	??0runtime_error@std@@QAE@PBD@Z			; std::runtime_error::runtime_error
PUBLIC	??1runtime_error@std@@UAE@XZ			; std::runtime_error::~runtime_error
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
PUBLIC	??_Gruntime_error@std@@UAEPAXI@Z		; std::runtime_error::`scalar deleting destructor'
PUBLIC	??0ExtReal@@QAE@M@Z				; ExtReal::ExtReal
PUBLIC	??0ExtReal@@QAE@ABW4EXT_REAL_CODE@@@Z		; ExtReal::ExtReal
PUBLIC	??0Random@@QAE@XZ				; Random::Random
PUBLIC	??1Random@@UAE@XZ				; Random::~Random
PUBLIC	?Set@Random@@SAXN@Z				; Random::Set
PUBLIC	?Get@Random@@SANXZ				; Random::Get
PUBLIC	?SetLong@Random@@SAXJ@Z				; Random::SetLong
PUBLIC	?GetSeed@Random@@SAJXZ				; Random::GetSeed
PUBLIC	?Next@Random@@UAEMXZ				; Random::Next
PUBLIC	?Name@Random@@UAEPADXZ				; Random::Name
PUBLIC	?Density@Random@@UBEMM@Z			; Random::Density
PUBLIC	?Mean@Random@@UBE?AVExtReal@@XZ			; Random::Mean
PUBLIC	?Variance@Random@@UBE?AVExtReal@@XZ		; Random::Variance
PUBLIC	?nelems@Random@@UBEHXZ				; Random::nelems
PUBLIC	?tDelete@Random@@UAEXXZ				; Random::tDelete
PUBLIC	?load@Random@@UAEXPAHPAMPAPAV1@@Z		; Random::load
PUBLIC	?Raw@Random@@CAMXZ				; Random::Raw
PUBLIC	??_GRandom@@UAEPAXI@Z				; Random::`scalar deleting destructor'
PUBLIC	?Name@Uniform@@UAEPADXZ				; Uniform::Name
PUBLIC	??0PosGen@@QAE@XZ				; PosGen::PosGen
PUBLIC	??1PosGen@@UAE@XZ				; PosGen::~PosGen
PUBLIC	?Name@PosGen@@UAEPADXZ				; PosGen::Name
PUBLIC	?Next@PosGen@@UAEMXZ				; PosGen::Next
PUBLIC	?Mean@PosGen@@UBE?AVExtReal@@XZ			; PosGen::Mean
PUBLIC	?Variance@PosGen@@UBE?AVExtReal@@XZ		; PosGen::Variance
PUBLIC	?Build@PosGen@@IAEX_N@Z				; PosGen::Build
PUBLIC	??_GPosGen@@UAEPAXI@Z				; PosGen::`scalar deleting destructor'
PUBLIC	?Name@SymGen@@UAEPADXZ				; SymGen::Name
PUBLIC	?Next@SymGen@@UAEMXZ				; SymGen::Next
PUBLIC	??0SymGen@@QAE@XZ				; SymGen::SymGen
PUBLIC	??1SymGen@@UAE@XZ				; SymGen::~SymGen
PUBLIC	??_GSymGen@@UAEPAXI@Z				; SymGen::`scalar deleting destructor'
PUBLIC	??0Normal@@QAE@XZ				; Normal::Normal
PUBLIC	??1Normal@@UAE@XZ				; Normal::~Normal
PUBLIC	?Name@Normal@@UAEPADXZ				; Normal::Name
PUBLIC	?Density@Normal@@UBEMM@Z			; Normal::Density
PUBLIC	?Mean@Normal@@UBE?AVExtReal@@XZ			; Normal::Mean
PUBLIC	?Variance@Normal@@UBE?AVExtReal@@XZ		; Normal::Variance
PUBLIC	??_GNormal@@UAEPAXI@Z				; Normal::`scalar deleting destructor'
PUBLIC	?ln_gamma@@YAMM@Z				; ln_gamma
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
PUBLIC	??_7Random@@6B@					; Random::`vftable'
PUBLIC	??_7PosGen@@6B@					; PosGen::`vftable'
PUBLIC	??_7SymGen@@6B@					; SymGen::`vftable'
PUBLIC	??_7Normal@@6B@					; Normal::`vftable'
PUBLIC	__TI2?AVlogic_error@std@@
PUBLIC	__CTA2?AVlogic_error@std@@
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0CI@EEHDCIKK@Random?5number?5generator?5not?5ini@ ; `string'
PUBLIC	??_C@_0BM@IGIHGNLE@Newran?3?5illegal?5combination@ ; `string'
PUBLIC	??_C@_0BK@PIOKIGDI@Newran?3?5seed?5out?5of?5range@ ; `string'
PUBLIC	__TI2?AVruntime_error@std@@
PUBLIC	__CTA2?AVruntime_error@std@@
PUBLIC	??_C@_0BH@FFMMNPKK@Newran?3?5area?5too?5large@	; `string'
PUBLIC	??_C@_0BH@PNIHCODM@Newran?3?5area?5too?5small@	; `string'
PUBLIC	??_C@_06BEOPDEGP@Random@			; `string'
PUBLIC	??_C@_07IBHIHIHC@Uniform@			; `string'
PUBLIC	??_C@_06EFAGIKOH@Normal@			; `string'
PUBLIC	??_C@_06LFDHMBMA@PosGen@			; `string'
PUBLIC	??_C@_06IOIABDDI@SymGen@			; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4logic_error@std@@6B@			; std::logic_error::`RTTI Complete Object Locator'
PUBLIC	??_R3logic_error@std@@8				; std::logic_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2logic_error@std@@8				; std::logic_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@logic_error@std@@8		; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Random@@6B@				; Random::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVRandom@@@8				; Random `RTTI Type Descriptor'
PUBLIC	??_R3Random@@8					; Random::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Random@@8					; Random::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Random@@8				; Random::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4PosGen@@6B@				; PosGen::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVPosGen@@@8				; PosGen `RTTI Type Descriptor'
PUBLIC	??_R3PosGen@@8					; PosGen::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2PosGen@@8					; PosGen::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@PosGen@@8				; PosGen::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SymGen@@6B@				; SymGen::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVSymGen@@@8				; SymGen `RTTI Type Descriptor'
PUBLIC	??_R3SymGen@@8					; SymGen::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SymGen@@8					; SymGen::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@SymGen@@8				; SymGen::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Normal@@6B@				; Normal::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVNormal@@@8				; Normal `RTTI Type Descriptor'
PUBLIC	??_R3Normal@@8					; Normal::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Normal@@8					; Normal::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Normal@@8				; Normal::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@30000000
PUBLIC	__real@3c23d70a
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3daaaaab
PUBLIC	__real@3ecc422a
PUBLIC	__real@3f000000
PUBLIC	__real@3f800000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@40040d9320000000
PUBLIC	__real@4016000000000000
PUBLIC	__real@40490fdb
PUBLIC	__real@41000000
PUBLIC	__real@41e0000000000000
PUBLIC	__real@43000000
PUBLIC	__real@bf800000
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_exp:PROC
EXTRN	_fabs:PROC
EXTRN	_log:PROC
EXTRN	_sin:PROC
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:PROC		; std::logic_error::`vector deleting destructor'
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	??_ERandom@@UAEPAXI@Z:PROC			; Random::`vector deleting destructor'
EXTRN	??_EPosGen@@UAEPAXI@Z:PROC			; PosGen::`vector deleting destructor'
EXTRN	??_ESymGen@@UAEPAXI@Z:PROC			; SymGen::`vector deleting destructor'
EXTRN	??_ENormal@@UAEPAXI@Z:PROC			; Normal::`vector deleting destructor'
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@41e0000000000000
CONST	SEGMENT
__real@41e0000000000000 DQ 041e0000000000000r	; 2.14748e+09
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@4016000000000000
CONST	SEGMENT
__real@4016000000000000 DQ 04016000000000000r	; 5.5
CONST	ENDS
;	COMDAT __real@40040d9320000000
CONST	SEGMENT
__real@40040d9320000000 DQ 040040d9320000000r	; 2.50663
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ecc422a
CONST	SEGMENT
__real@3ecc422a DD 03ecc422ar			; 0.398942
CONST	ENDS
;	COMDAT __real@3daaaaab
CONST	SEGMENT
__real@3daaaaab DD 03daaaaabr			; 0.0833333
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@30000000
CONST	SEGMENT
__real@30000000 DD 030000000r			; 4.65661e-10
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_R1A@?0A@EA@Normal@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Normal@@8 DD FLAT:??_R0?AVNormal@@@8	; Normal::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Normal@@8
rdata$r	ENDS
;	COMDAT ??_R2Normal@@8
rdata$r	SEGMENT
??_R2Normal@@8 DD FLAT:??_R1A@?0A@EA@Normal@@8		; Normal::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SymGen@@8
	DD	FLAT:??_R1A@?0A@EA@PosGen@@8
	DD	FLAT:??_R1A@?0A@EA@Random@@8
rdata$r	ENDS
;	COMDAT ??_R3Normal@@8
rdata$r	SEGMENT
??_R3Normal@@8 DD 00H					; Normal::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2Normal@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVNormal@@@8
data$rs	SEGMENT
??_R0?AVNormal@@@8 DD FLAT:??_7type_info@@6B@		; Normal `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVNormal@@', 00H
data$rs	ENDS
;	COMDAT ??_R4Normal@@6B@
rdata$r	SEGMENT
??_R4Normal@@6B@ DD 00H					; Normal::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVNormal@@@8
	DD	FLAT:??_R3Normal@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SymGen@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SymGen@@8 DD FLAT:??_R0?AVSymGen@@@8	; SymGen::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SymGen@@8
rdata$r	ENDS
;	COMDAT ??_R2SymGen@@8
rdata$r	SEGMENT
??_R2SymGen@@8 DD FLAT:??_R1A@?0A@EA@SymGen@@8		; SymGen::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@PosGen@@8
	DD	FLAT:??_R1A@?0A@EA@Random@@8
rdata$r	ENDS
;	COMDAT ??_R3SymGen@@8
rdata$r	SEGMENT
??_R3SymGen@@8 DD 00H					; SymGen::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2SymGen@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSymGen@@@8
data$rs	SEGMENT
??_R0?AVSymGen@@@8 DD FLAT:??_7type_info@@6B@		; SymGen `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSymGen@@', 00H
data$rs	ENDS
;	COMDAT ??_R4SymGen@@6B@
rdata$r	SEGMENT
??_R4SymGen@@6B@ DD 00H					; SymGen::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSymGen@@@8
	DD	FLAT:??_R3SymGen@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@PosGen@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@PosGen@@8 DD FLAT:??_R0?AVPosGen@@@8	; PosGen::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3PosGen@@8
rdata$r	ENDS
;	COMDAT ??_R2PosGen@@8
rdata$r	SEGMENT
??_R2PosGen@@8 DD FLAT:??_R1A@?0A@EA@PosGen@@8		; PosGen::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Random@@8
rdata$r	ENDS
;	COMDAT ??_R3PosGen@@8
rdata$r	SEGMENT
??_R3PosGen@@8 DD 00H					; PosGen::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2PosGen@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVPosGen@@@8
data$rs	SEGMENT
??_R0?AVPosGen@@@8 DD FLAT:??_7type_info@@6B@		; PosGen `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVPosGen@@', 00H
data$rs	ENDS
;	COMDAT ??_R4PosGen@@6B@
rdata$r	SEGMENT
??_R4PosGen@@6B@ DD 00H					; PosGen::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVPosGen@@@8
	DD	FLAT:??_R3PosGen@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Random@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Random@@8 DD FLAT:??_R0?AVRandom@@@8	; Random::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Random@@8
rdata$r	ENDS
;	COMDAT ??_R2Random@@8
rdata$r	SEGMENT
??_R2Random@@8 DD FLAT:??_R1A@?0A@EA@Random@@8		; Random::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3Random@@8
rdata$r	SEGMENT
??_R3Random@@8 DD 00H					; Random::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Random@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRandom@@@8
data$rs	SEGMENT
??_R0?AVRandom@@@8 DD FLAT:??_7type_info@@6B@		; Random `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRandom@@', 00H
data$rs	ENDS
;	COMDAT ??_R4Random@@6B@
rdata$r	SEGMENT
??_R4Random@@6B@ DD 00H					; Random::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVRandom@@@8
	DD	FLAT:??_R3Random@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@logic_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@logic_error@std@@8 DD FLAT:??_R0?AVlogic_error@std@@@8 ; std::logic_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2logic_error@std@@8
rdata$r	SEGMENT
??_R2logic_error@std@@8 DD FLAT:??_R1A@?0A@EA@logic_error@std@@8 ; std::logic_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3logic_error@std@@8
rdata$r	SEGMENT
??_R3logic_error@std@@8 DD 00H				; std::logic_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4logic_error@std@@6B@
rdata$r	SEGMENT
??_R4logic_error@std@@6B@ DD 00H			; std::logic_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	FLAT:??_R3logic_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_06IOIABDDI@SymGen@
CONST	SEGMENT
??_C@_06IOIABDDI@SymGen@ DB 'SymGen', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LFDHMBMA@PosGen@
CONST	SEGMENT
??_C@_06LFDHMBMA@PosGen@ DB 'PosGen', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EFAGIKOH@Normal@
CONST	SEGMENT
??_C@_06EFAGIKOH@Normal@ DB 'Normal', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07IBHIHIHC@Uniform@
CONST	SEGMENT
??_C@_07IBHIHIHC@Uniform@ DB 'Uniform', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BEOPDEGP@Random@
CONST	SEGMENT
??_C@_06BEOPDEGP@Random@ DB 'Random', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
?cof@?6??ln_gamma@@YAMM@Z@4PANA DQ 040530b869f76a853r ; 76.1801 ; `ln_gamma'::`7'::cof
	DQ	0c055a0572b14d6a7r		; -86.5053
	DQ	04038039bf0e1d4f2r		; 24.0141
	DQ	0bff3b5347ea692ebr		; -1.23174
	DQ	03f53cd26ed054db1r		; 0.00120858
	DQ	0bed67f5b9d652131r		; -5.36382e-06
_DATA	ENDS
;	COMDAT ??_C@_0BH@PNIHCODM@Newran?3?5area?5too?5small@
CONST	SEGMENT
??_C@_0BH@PNIHCODM@Newran?3?5area?5too?5small@ DB 'Newran: area too small'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FFMMNPKK@Newran?3?5area?5too?5large@
CONST	SEGMENT
??_C@_0BH@FFMMNPKK@Newran?3?5area?5too?5large@ DB 'Newran: area too large'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT __CTA2?AVruntime_error@std@@
xdata$x	SEGMENT
__CTA2?AVruntime_error@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVruntime_error@std@@
xdata$x	SEGMENT
__TI2?AVruntime_error@std@@ DD 00H
	DD	FLAT:??1runtime_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVruntime_error@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BK@PIOKIGDI@Newran?3?5seed?5out?5of?5range@
CONST	SEGMENT
??_C@_0BK@PIOKIGDI@Newran?3?5seed?5out?5of?5range@ DB 'Newran: seed out o'
	DB	'f range', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@IGIHGNLE@Newran?3?5illegal?5combination@
CONST	SEGMENT
??_C@_0BM@IGIHGNLE@Newran?3?5illegal?5combination@ DB 'Newran: illegal co'
	DB	'mbination', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EEHDCIKK@Random?5number?5generator?5not?5ini@
CONST	SEGMENT
??_C@_0CI@EEHDCIKK@Random?5number?5generator?5not?5ini@ DB 'Random number'
	DB	' generator not initialised', 00H		; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
data$r	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVlogic_error@std@@
xdata$x	SEGMENT
__CTA2?AVlogic_error@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVlogic_error@std@@
xdata$x	SEGMENT
__TI2?AVlogic_error@std@@ DD 00H
	DD	FLAT:??1logic_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVlogic_error@std@@
xdata$x	ENDS
;	COMDAT ??_7Normal@@6B@
CONST	SEGMENT
??_7Normal@@6B@ DD FLAT:??_R4Normal@@6B@		; Normal::`vftable'
	DD	FLAT:??_ENormal@@UAEPAXI@Z
	DD	FLAT:?Next@SymGen@@UAEMXZ
	DD	FLAT:?Name@Normal@@UAEPADXZ
	DD	FLAT:?Density@Normal@@UBEMM@Z
	DD	FLAT:?Mean@Normal@@UBE?AVExtReal@@XZ
	DD	FLAT:?Variance@Normal@@UBE?AVExtReal@@XZ
	DD	FLAT:?nelems@Random@@UBEHXZ
	DD	FLAT:?tDelete@Random@@UAEXXZ
	DD	FLAT:?load@Random@@UAEXPAHPAMPAPAV1@@Z
CONST	ENDS
;	COMDAT ??_7SymGen@@6B@
CONST	SEGMENT
??_7SymGen@@6B@ DD FLAT:??_R4SymGen@@6B@		; SymGen::`vftable'
	DD	FLAT:??_ESymGen@@UAEPAXI@Z
	DD	FLAT:?Next@SymGen@@UAEMXZ
	DD	FLAT:?Name@SymGen@@UAEPADXZ
	DD	FLAT:?Density@Random@@UBEMM@Z
	DD	FLAT:?Mean@PosGen@@UBE?AVExtReal@@XZ
	DD	FLAT:?Variance@PosGen@@UBE?AVExtReal@@XZ
	DD	FLAT:?nelems@Random@@UBEHXZ
	DD	FLAT:?tDelete@Random@@UAEXXZ
	DD	FLAT:?load@Random@@UAEXPAHPAMPAPAV1@@Z
CONST	ENDS
;	COMDAT ??_7PosGen@@6B@
CONST	SEGMENT
??_7PosGen@@6B@ DD FLAT:??_R4PosGen@@6B@		; PosGen::`vftable'
	DD	FLAT:??_EPosGen@@UAEPAXI@Z
	DD	FLAT:?Next@PosGen@@UAEMXZ
	DD	FLAT:?Name@PosGen@@UAEPADXZ
	DD	FLAT:?Density@Random@@UBEMM@Z
	DD	FLAT:?Mean@PosGen@@UBE?AVExtReal@@XZ
	DD	FLAT:?Variance@PosGen@@UBE?AVExtReal@@XZ
	DD	FLAT:?nelems@Random@@UBEHXZ
	DD	FLAT:?tDelete@Random@@UAEXXZ
	DD	FLAT:?load@Random@@UAEXPAHPAMPAPAV1@@Z
CONST	ENDS
;	COMDAT ??_7Random@@6B@
CONST	SEGMENT
??_7Random@@6B@ DD FLAT:??_R4Random@@6B@		; Random::`vftable'
	DD	FLAT:??_ERandom@@UAEPAXI@Z
	DD	FLAT:?Next@Random@@UAEMXZ
	DD	FLAT:?Name@Random@@UAEPADXZ
	DD	FLAT:?Density@Random@@UBEMM@Z
	DD	FLAT:?Mean@Random@@UBE?AVExtReal@@XZ
	DD	FLAT:?Variance@Random@@UBE?AVExtReal@@XZ
	DD	FLAT:?nelems@Random@@UBEHXZ
	DD	FLAT:?tDelete@Random@@UAEXXZ
	DD	FLAT:?load@Random@@UAEXPAHPAMPAPAV1@@Z
CONST	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
data$r	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
data$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_R4logic_error@std@@6B@ ; std::logic_error::`vftable'
	DD	FLAT:??_Elogic_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	016H
voltbl	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0Normal@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0Normal@@QAE@XZ$0
__ehfuncinfo$??0Normal@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0Normal@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ?ln_gamma@@YAMM@Z
_TEXT	SEGMENT
tv183 = -284						; size = 4
tv158 = -284						; size = 4
tv181 = -280						; size = 8
tv167 = -280						; size = 8
tv156 = -280						; size = 4
tv186 = -276						; size = 4
tv190 = -272						; size = 8
tv188 = -272						; size = 8
tv150 = -272						; size = 4
tv144 = -268						; size = 4
_j$1 = -68						; size = 4
_ser$2 = -56						; size = 8
_tmp$3 = -40						; size = 8
_x$4 = -24						; size = 8
_piz$5 = -8						; size = 4
_xx$ = 8						; size = 4
?ln_gamma@@YAMM@Z PROC					; ln_gamma, COMDAT

; 328  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 329  :    // log gamma function adapted from numerical recipes in C
; 330  : 
; 331  :    if (xx < 1.0)                           // Use reflection formula

	cvtss2sd xmm0, DWORD PTR _xx$[ebp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	comisd	xmm1, xmm0
	jbe	$LN5@ln_gamma

; 332  :    {
; 333  :       float piz = 3.14159265359f * (1.0f - xx);

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _xx$[ebp]
	mulss	xmm0, DWORD PTR __real@40490fdb
	movss	DWORD PTR _piz$5[ebp], xmm0

; 334  :       return float(log(piz / float(sin(float(piz)))) - ln_gamma(2.0f - xx));

	push	ecx
	movss	xmm0, DWORD PTR _piz$5[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?sin@@YAMM@Z				; sin
	add	esp, 4
	fstp	DWORD PTR tv144[ebp]
	movss	xmm0, DWORD PTR _piz$5[ebp]
	divss	xmm0, DWORD PTR tv144[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?log@@YAMM@Z				; log
	add	esp, 4
	fstp	DWORD PTR tv150[ebp]
	movss	xmm0, DWORD PTR tv150[ebp]
	movss	xmm1, DWORD PTR __real@40000000
	subss	xmm1, DWORD PTR _xx$[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm1
	movss	DWORD PTR tv186[ebp], xmm0
	call	?ln_gamma@@YAMM@Z			; ln_gamma
	add	esp, 4
	fstp	DWORD PTR tv156[ebp]
	movss	xmm0, DWORD PTR tv186[ebp]
	subss	xmm0, DWORD PTR tv156[ebp]
	movss	DWORD PTR tv158[ebp], xmm0
	fld	DWORD PTR tv158[ebp]
	jmp	$LN6@ln_gamma

; 335  :    }

	jmp	$LN6@ln_gamma
$LN5@ln_gamma:

; 336  :    else
; 337  :    {
; 338  :         static double cof[6] = 
; 339  :         {
; 340  :             76.18009173,
; 341  :             -86.50532033,
; 342  :             24.01409822,
; 343  :             -1.231739516,
; 344  :             0.120858003e-2,
; 345  :             -0.536382e-5
; 346  :         };
; 347  : 
; 348  :         double x = xx-1.0;

	cvtss2sd xmm0, DWORD PTR _xx$[ebp]
	subsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _x$4[ebp], xmm0

; 349  :         double tmp = x + 5.5;

	movsd	xmm0, QWORD PTR _x$4[ebp]
	addsd	xmm0, QWORD PTR __real@4016000000000000
	movsd	QWORD PTR _tmp$3[ebp], xmm0

; 350  : 
; 351  :         tmp -= (x + 0.5) * log(tmp);

	movsd	xmm0, QWORD PTR _x$4[ebp]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	sub	esp, 8
	movsd	xmm1, QWORD PTR _tmp$3[ebp]
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv188[ebp], xmm0
	call	_log
	add	esp, 8
	fstp	QWORD PTR tv167[ebp]
	movsd	xmm0, QWORD PTR tv188[ebp]
	mulsd	xmm0, QWORD PTR tv167[ebp]
	movsd	xmm1, QWORD PTR _tmp$3[ebp]
	subsd	xmm1, xmm0
	movsd	QWORD PTR _tmp$3[ebp], xmm1

; 352  :         double ser=1.0;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _ser$2[ebp], xmm0

; 353  : 
; 354  :         for (int j = 0; j <= 5; j++)

	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN4@ln_gamma
$LN2@ln_gamma:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN4@ln_gamma:
	cmp	DWORD PTR _j$1[ebp], 5
	jg	SHORT $LN3@ln_gamma

; 355  :         {
; 356  :             x += 1.0; ser += cof[j] / x;

	movsd	xmm0, QWORD PTR _x$4[ebp]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _x$4[ebp], xmm0
	mov	eax, DWORD PTR _j$1[ebp]
	movsd	xmm0, QWORD PTR ?cof@?6??ln_gamma@@YAMM@Z@4PANA[eax*8]
	divsd	xmm0, QWORD PTR _x$4[ebp]
	addsd	xmm0, QWORD PTR _ser$2[ebp]
	movsd	QWORD PTR _ser$2[ebp], xmm0

; 357  :         }

	jmp	SHORT $LN2@ln_gamma
$LN3@ln_gamma:

; 358  : 
; 359  :         return float(-tmp + log(2.50662827465f * ser));

	movsd	xmm0, QWORD PTR _tmp$3[ebp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	xmm1, QWORD PTR __real@40040d9320000000
	mulsd	xmm1, QWORD PTR _ser$2[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm1
	movsd	QWORD PTR tv190[ebp], xmm0
	call	_log
	add	esp, 8
	fstp	QWORD PTR tv181[ebp]
	movsd	xmm0, QWORD PTR tv190[ebp]
	addsd	xmm0, QWORD PTR tv181[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR tv183[ebp], xmm0
	fld	DWORD PTR tv183[ebp]
$LN6@ln_gamma:

; 360  :    }
; 361  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ln_gamma@@YAMM@Z ENDP					; ln_gamma
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ?DoNothing@@YAXH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?DoNothing@@YAXH@Z PROC					; DoNothing, COMDAT

; 79   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 80   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DoNothing@@YAXH@Z ENDP					; DoNothing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GNormal@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GNormal@@UAEPAXI@Z PROC				; Normal::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Normal@@UAE@XZ			; Normal::~Normal
	npad	1
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GNormal@@UAEPAXI@Z ENDP				; Normal::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.h
;	COMDAT ?Variance@Normal@@UBE?AVExtReal@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Variance@Normal@@UBE?AVExtReal@@XZ PROC		; Normal::Variance, COMDAT
; _this$ = ecx

; 143  :         ExtReal         Variance() const        { return 1.0f; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0ExtReal@@QAE@M@Z			; ExtReal::ExtReal
	npad	1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Variance@Normal@@UBE?AVExtReal@@XZ ENDP		; Normal::Variance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.h
;	COMDAT ?Mean@Normal@@UBE?AVExtReal@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Mean@Normal@@UBE?AVExtReal@@XZ PROC			; Normal::Mean, COMDAT
; _this$ = ecx

; 142  :         ExtReal         Mean() const            { return 0.0f; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	xorps	xmm0, xmm0
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0ExtReal@@QAE@M@Z			; ExtReal::ExtReal
	npad	1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Mean@Normal@@UBE?AVExtReal@@XZ ENDP			; Normal::Mean
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ?Density@Normal@@UBEMM@Z
_TEXT	SEGMENT
tv88 = -216						; size = 4
tv73 = -212						; size = 4
tv81 = -208						; size = 4
_this$ = -8						; size = 4
_x$ = 8							; size = 4
?Density@Normal@@UBEMM@Z PROC				; Normal::Density, COMDAT
; _this$ = ecx

; 318  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 319  :     return (fabs(x) > 8.0f) ? 0.0f : 0.398942280f * float(exp(-x * x / 2.0f));

	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?fabs@@YAMM@Z				; fabs
	add	esp, 4
	fstp	DWORD PTR tv81[ebp]
	movss	xmm0, DWORD PTR tv81[ebp]
	comiss	xmm0, DWORD PTR __real@41000000
	jbe	SHORT $LN3@Density
	xorps	xmm0, xmm0
	movss	DWORD PTR tv73[ebp], xmm0
	jmp	SHORT $LN4@Density
$LN3@Density:
	movss	xmm0, DWORD PTR _x$[ebp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR _x$[ebp]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	call	?exp@@YAMM@Z				; exp
	add	esp, 4
	fstp	DWORD PTR tv88[ebp]
	movss	xmm0, DWORD PTR tv88[ebp]
	mulss	xmm0, DWORD PTR __real@3ecc422a
	movss	DWORD PTR tv73[ebp], xmm0
$LN4@Density:
	fld	DWORD PTR tv73[ebp]

; 320  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Density@Normal@@UBEMM@Z ENDP				; Normal::Density
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ?Name@Normal@@UAEPADXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Name@Normal@@UAEPADXZ PROC				; Normal::Name, COMDAT
; _this$ = ecx

; 369  : char* Normal::Name()            { return "Normal"; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ??_C@_06EFAGIKOH@Normal@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Name@Normal@@UAEPADXZ ENDP				; Normal::Name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ??1Normal@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1Normal@@UAE@XZ PROC					; Normal::~Normal, COMDAT
; _this$ = ecx

; 307  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Normal@@6B@

; 308  :    count--;

	mov	eax, DWORD PTR ?count@Normal@@0JA	; Normal::count
	sub	eax, 1
	mov	DWORD PTR ?count@Normal@@0JA, eax	; Normal::count

; 309  :    if (count)

	je	SHORT $LN2@Normal

; 310  :        NotReady = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
$LN2@Normal:

; 311  : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SymGen@@UAE@XZ
	npad	1
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1Normal@@UAE@XZ ENDP					; Normal::~Normal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ??0Normal@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0Normal@@QAE@XZ PROC					; Normal::Normal, COMDAT
; _this$ = ecx

; 281  : {

	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0Normal@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0SymGen@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Normal@@6B@

; 282  :    //lint -save -e423
; 283  :    if (count)

	cmp	DWORD PTR ?count@Normal@@0JA, 0		; Normal::count
	je	SHORT $LN2@Normal

; 284  :    {
; 285  :        NotReady = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 0

; 286  :        xi = Nxi;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR ?Nxi@Normal@@0MA
	movss	DWORD PTR [eax+4], xmm0

; 287  :        sx = Nsx;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?Nsx@Normal@@0PAMA	; Normal::Nsx
	mov	DWORD PTR [eax+8], ecx

; 288  :        sfx = Nsfx;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ?Nsfx@Normal@@0PAMA	; Normal::Nsfx
	mov	DWORD PTR [eax+12], ecx

; 289  :    }

	jmp	SHORT $LN3@Normal
$LN2@Normal:

; 290  :    else
; 291  :    {
; 292  :        Build(true);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Build@PosGen@@IAEX_N@Z			; PosGen::Build
	npad	1

; 293  :        Nxi = xi;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR ?Nxi@Normal@@0MA, xmm0

; 294  :        Nsx = sx;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR ?Nsx@Normal@@0PAMA, ecx	; Normal::Nsx

; 295  :        Nsfx = sfx;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR ?Nsfx@Normal@@0PAMA, ecx	; Normal::Nsfx
$LN3@Normal:

; 296  :    }
; 297  :    count++;

	mov	eax, DWORD PTR ?count@Normal@@0JA	; Normal::count
	add	eax, 1
	mov	DWORD PTR ?count@Normal@@0JA, eax	; Normal::count

; 298  :    //lint -restore
; 299  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0Normal@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1SymGen@@UAE@XZ
	int	3
	int	3
	int	3
	int	3
	int	3
__ehhandler$??0Normal@@QAE@XZ:
	npad	1
	npad	1
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0Normal@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0Normal@@QAE@XZ ENDP					; Normal::Normal
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GSymGen@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GSymGen@@UAEPAXI@Z PROC				; SymGen::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SymGen@@UAE@XZ
	npad	1
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GSymGen@@UAEPAXI@Z ENDP				; SymGen::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1SymGen@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1SymGen@@UAE@XZ PROC					; SymGen::~SymGen, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PosGen@@UAE@XZ			; PosGen::~PosGen
	npad	1
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1SymGen@@UAE@XZ ENDP					; SymGen::~SymGen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0SymGen@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0SymGen@@QAE@XZ PROC					; SymGen::SymGen, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0PosGen@@QAE@XZ			; PosGen::PosGen
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7SymGen@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0SymGen@@QAE@XZ ENDP					; SymGen::SymGen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ?Next@SymGen@@UAEMXZ
_TEXT	SEGMENT
tv209 = -284						; size = 4
tv238 = -280						; size = 4
tv234 = -280						; size = 4
tv230 = -280						; size = 4
tv215 = -280						; size = 4
_sxi$1 = -80						; size = 4
_r1$2 = -68						; size = 4
_ir$ = -56						; size = 4
_y$ = -44						; size = 4
_ak$ = -32						; size = 4
_s$ = -20						; size = 4
_this$ = -8						; size = 4
?Next@SymGen@@UAEMXZ PROC				; SymGen::Next, COMDAT
; _this$ = ecx

; 251  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 284				; 0000011cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 252  :     Real s,ak,y;
; 253  :     int ir;
; 254  : 
; 255  :     if (NotReady)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN5@Next

; 256  :         Build(true);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Build@PosGen@@IAEX_N@Z			; PosGen::Build
	npad	1
$LN5@Next:

; 257  :     do
; 258  :     {
; 259  :         s = 1.0;

	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _s$[ebp], xmm0

; 260  :         Real r1 = Random::Next();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Next@Random@@UAEMXZ			; Random::Next
	fstp	DWORD PTR _r1$2[ebp]

; 261  :         if (r1 > 0.5)

	cvtss2sd xmm0, DWORD PTR _r1$2[ebp]
	comisd	xmm0, QWORD PTR __real@3fe0000000000000
	jbe	SHORT $LN6@Next

; 262  :         {
; 263  :             s = -1.0f;

	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR _s$[ebp], xmm0

; 264  :             r1 = 1.0f - r1;

	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _r1$2[ebp]
	movss	DWORD PTR _r1$2[ebp], xmm0
$LN6@Next:

; 265  :         }
; 266  :         ir = (int)(r1 * xi);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _r1$2[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	cvttss2si ecx, xmm0
	mov	DWORD PTR _ir$[ebp], ecx

; 267  :         Real sxi = sx[ir];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _ir$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx*4]
	movss	DWORD PTR _sxi$1[ebp], xmm0

; 268  :         ak = sxi + (sx[ir + 1] - sxi) * Random::Next();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _ir$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx*4+4]
	subss	xmm0, DWORD PTR _sxi$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv238[ebp], xmm0
	call	?Next@Random@@UAEMXZ			; Random::Next
	fstp	DWORD PTR tv209[ebp]
	movss	xmm0, DWORD PTR tv238[ebp]
	mulss	xmm0, DWORD PTR tv209[ebp]
	addss	xmm0, DWORD PTR _sxi$1[ebp]
	movss	DWORD PTR _ak$[ebp], xmm0

; 269  :         y = sfx[ir] * Random::Next();

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Next@Random@@UAEMXZ			; Random::Next
	fstp	DWORD PTR tv215[ebp]
	mov	ecx, DWORD PTR _ir$[ebp]
	movss	xmm0, DWORD PTR tv215[ebp]
	mulss	xmm0, DWORD PTR [esi+ecx*4]
	movss	DWORD PTR _y$[ebp], xmm0

; 270  :     }
; 271  :     while (y >= sfx[ir + 1] && y >= Density(ak));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _ir$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	comiss	xmm0, DWORD PTR [ecx+edx*4+4]
	jb	SHORT $LN7@Next
	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR _ak$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR tv230[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	comiss	xmm0, DWORD PTR tv230[ebp]
	jae	$LN5@Next
$LN7@Next:

; 272  : 
; 273  :     return s * ak;

	movss	xmm0, DWORD PTR _s$[ebp]
	mulss	xmm0, DWORD PTR _ak$[ebp]
	movss	DWORD PTR tv234[ebp], xmm0
	fld	DWORD PTR tv234[ebp]

; 274  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 284				; 0000011cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Next@SymGen@@UAEMXZ ENDP				; SymGen::Next
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ?Name@SymGen@@UAEPADXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Name@SymGen@@UAEPADXZ PROC				; SymGen::Name, COMDAT
; _this$ = ecx

; 371  : char* SymGen::Name()            { return "SymGen"; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ??_C@_06IOIABDDI@SymGen@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Name@SymGen@@UAEPADXZ ENDP				; SymGen::Name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GPosGen@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GPosGen@@UAEPAXI@Z PROC				; PosGen::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1PosGen@@UAE@XZ			; PosGen::~PosGen
	npad	1
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GPosGen@@UAEPAXI@Z ENDP				; PosGen::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ?Build@PosGen@@IAEX_N@Z
_TEXT	SEGMENT
tv148 = -320						; size = 4
tv79 = -320						; size = 4
$T1 = -312						; size = 12
$T2 = -292						; size = 12
$T3 = -272						; size = 4
$T4 = -260						; size = 4
_f1$5 = -56						; size = 4
_i$ = -44						; size = 4
_inc$ = -32						; size = 4
_sxi$ = -20						; size = 4
_this$ = -8						; size = 4
_sym$ = 8						; size = 1
?Build@PosGen@@IAEX_N@Z PROC				; PosGen::Build, COMDAT
; _this$ = ecx

; 193  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-128]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 194  :     NotReady = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 0

; 195  :     sx = new Real[60];

	push	240					; 000000f0H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR [eax+8], ecx

; 196  :     sfx = new Real[60];

	push	240					; 000000f0H
	call	??_U@YAPAXI@Z				; operator new[]
	add	esp, 4
	mov	DWORD PTR $T3[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	DWORD PTR [eax+12], ecx

; 197  : 
; 198  :     Real sxi = 0.0f;

	xorps	xmm0, xmm0
	movss	DWORD PTR _sxi$[ebp], xmm0

; 199  :     Real inc = sym ? 0.01f : 0.02f;

	movzx	eax, BYTE PTR _sym$[ebp]
	test	eax, eax
	je	SHORT $LN9@Build
	movss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR tv79[ebp], xmm0
	jmp	SHORT $LN10@Build
$LN9@Build:
	movss	xmm0, DWORD PTR __real@3ca3d70a
	movss	DWORD PTR tv79[ebp], xmm0
$LN10@Build:
	movss	xmm0, DWORD PTR tv79[ebp]
	movss	DWORD PTR _inc$[ebp], xmm0

; 200  : 	int i;
; 201  :     for (i = 0; i < 60; i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@Build
$LN2@Build:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@Build:
	cmp	DWORD PTR _i$[ebp], 60			; 0000003cH
	jge	SHORT $LN3@Build

; 202  :     {
; 203  :       sx[i] = sxi;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _sxi$[ebp]
	movss	DWORD PTR [ecx+edx*4], xmm0

; 204  :       Real f1 = Density(sxi);

	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR _sxi$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR _f1$5[ebp]

; 205  :       sfx[i] = f1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR _f1$5[ebp]
	movss	DWORD PTR [ecx+edx*4], xmm0

; 206  :       if (f1 <= 0.0)

	cvtss2sd xmm0, DWORD PTR _f1$5[ebp]
	xorps	xmm1, xmm1
	comisd	xmm1, xmm0
	jb	SHORT $LN5@Build

; 207  :           goto L20;

	jmp	SHORT $LN6@Build
	jmp	SHORT $L20$13
$LN5@Build:

; 208  :       sxi += inc / f1;

	movss	xmm0, DWORD PTR _inc$[ebp]
	divss	xmm0, DWORD PTR _f1$5[ebp]
	addss	xmm0, DWORD PTR _sxi$[ebp]
	movss	DWORD PTR _sxi$[ebp], xmm0

; 209  :     }

	jmp	$LN2@Build
$LN3@Build:

; 210  :     throw(runtime_error("Newran: area too large"));

	push	OFFSET ??_C@_0BH@FFMMNPKK@Newran?3?5area?5too?5large@
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0runtime_error@std@@QAE@PBD@Z		; std::runtime_error::runtime_error
	push	OFFSET __TI2?AVruntime_error@std@@
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	__CxxThrowException@8
	npad	1
$LN6@Build:
$L20$13:

; 211  : 
; 212  : L20:
; 213  :     if (i < 50)

	cmp	DWORD PTR _i$[ebp], 50			; 00000032H
	jge	SHORT $LN7@Build

; 214  :        throw(runtime_error("Newran: area too small"));

	push	OFFSET ??_C@_0BH@PNIHCODM@Newran?3?5area?5too?5small@
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0runtime_error@std@@QAE@PBD@Z		; std::runtime_error::runtime_error
	push	OFFSET __TI2?AVruntime_error@std@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
	npad	1
$LN7@Build:

; 215  :     xi = sym ? 2.0f * i : i;

	movzx	eax, BYTE PTR _sym$[ebp]
	test	eax, eax
	je	SHORT $LN11@Build
	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv148[ebp], xmm0
	jmp	SHORT $LN12@Build
$LN11@Build:
	cvtsi2ss xmm0, DWORD PTR _i$[ebp]
	movss	DWORD PTR tv148[ebp], xmm0
$LN12@Build:
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR tv148[ebp]
	movss	DWORD PTR [ecx+4], xmm0
$LN1@Build:

; 216  : 
; 217  :     return;
; 218  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 320				; 00000140H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Build@PosGen@@IAEX_N@Z ENDP				; PosGen::Build
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.h
;	COMDAT ?Variance@PosGen@@UBE?AVExtReal@@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Variance@PosGen@@UBE?AVExtReal@@XZ PROC		; PosGen::Variance, COMDAT
; _this$ = ecx

; 103  :         ExtReal         Variance( ) const       { return (ExtReal)Missing; }

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 4
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0ExtReal@@QAE@ABW4EXT_REAL_CODE@@@Z	; ExtReal::ExtReal
	npad	1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Variance@PosGen@@UBE?AVExtReal@@XZ ENDP		; PosGen::Variance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.h
;	COMDAT ?Mean@PosGen@@UBE?AVExtReal@@XZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Mean@PosGen@@UBE?AVExtReal@@XZ PROC			; PosGen::Mean, COMDAT
; _this$ = ecx

; 102  :         ExtReal         Mean( ) const           { return (ExtReal)Missing; }

	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-24]
	mov	ecx, 6
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T1[ebp], 4
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0ExtReal@@QAE@ABW4EXT_REAL_CODE@@@Z	; ExtReal::ExtReal
	npad	1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Mean@PosGen@@UBE?AVExtReal@@XZ ENDP			; PosGen::Mean
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ?Next@PosGen@@UAEMXZ
_TEXT	SEGMENT
tv173 = -272						; size = 4
tv199 = -268						; size = 4
tv194 = -268						; size = 4
tv179 = -268						; size = 4
_sxi$1 = -68						; size = 4
_r1$2 = -56						; size = 4
_ir$ = -44						; size = 4
_y$ = -32						; size = 4
_ak$ = -20						; size = 4
_this$ = -8						; size = 4
?Next@PosGen@@UAEMXZ PROC				; PosGen::Next, COMDAT
; _this$ = ecx

; 226  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 272				; 00000110H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 227  :     Real ak,y;
; 228  :     int ir;
; 229  : 
; 230  :     if (NotReady)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	SHORT $LN5@Next

; 231  :         Build(false);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Build@PosGen@@IAEX_N@Z			; PosGen::Build
	npad	1
$LN5@Next:

; 232  :     do
; 233  :     {
; 234  :         Real r1 = Random::Next( );

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Next@Random@@UAEMXZ			; Random::Next
	fstp	DWORD PTR _r1$2[ebp]

; 235  :         ir = (int)(r1 * xi);

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _r1$2[ebp]
	mulss	xmm0, DWORD PTR [eax+4]
	cvttss2si ecx, xmm0
	mov	DWORD PTR _ir$[ebp], ecx

; 236  :         Real sxi = sx[ir];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _ir$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx*4]
	movss	DWORD PTR _sxi$1[ebp], xmm0

; 237  : 
; 238  :         ak = sxi + (sx[ir + 1] - sxi) * Random::Next( );

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _ir$[ebp]
	movss	xmm0, DWORD PTR [ecx+edx*4+4]
	subss	xmm0, DWORD PTR _sxi$1[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR tv199[ebp], xmm0
	call	?Next@Random@@UAEMXZ			; Random::Next
	fstp	DWORD PTR tv173[ebp]
	movss	xmm0, DWORD PTR tv199[ebp]
	mulss	xmm0, DWORD PTR tv173[ebp]
	addss	xmm0, DWORD PTR _sxi$1[ebp]
	movss	DWORD PTR _ak$[ebp], xmm0

; 239  :         y = sfx[ir] * Random::Next();

	mov	eax, DWORD PTR _this$[ebp]
	mov	esi, DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Next@Random@@UAEMXZ			; Random::Next
	fstp	DWORD PTR tv179[ebp]
	mov	ecx, DWORD PTR _ir$[ebp]
	movss	xmm0, DWORD PTR tv179[ebp]
	mulss	xmm0, DWORD PTR [esi+ecx*4]
	movss	DWORD PTR _y$[ebp], xmm0

; 240  :     }
; 241  :     while (y >= sfx[ir + 1] && y >= Density(ak));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _ir$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	comiss	xmm0, DWORD PTR [ecx+edx*4+4]
	jb	SHORT $LN6@Next
	mov	esi, esp
	push	ecx
	movss	xmm0, DWORD PTR _ak$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	fstp	DWORD PTR tv194[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	comiss	xmm0, DWORD PTR tv194[ebp]
	jae	$LN5@Next
$LN6@Next:

; 242  : 
; 243  :     return ak;

	fld	DWORD PTR _ak$[ebp]

; 244  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Next@PosGen@@UAEMXZ ENDP				; PosGen::Next
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ?Name@PosGen@@UAEPADXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Name@PosGen@@UAEPADXZ PROC				; PosGen::Name, COMDAT
; _this$ = ecx

; 370  : char* PosGen::Name()            { return "PosGen"; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ??_C@_06LFDHMBMA@PosGen@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Name@PosGen@@UAEPADXZ ENDP				; PosGen::Name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ??1PosGen@@UAE@XZ
_TEXT	SEGMENT
$T1 = -224						; size = 4
$T2 = -212						; size = 4
_this$ = -8						; size = 4
??1PosGen@@UAE@XZ PROC					; PosGen::~PosGen, COMDAT
; _this$ = ecx

; 180  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-36]
	mov	ecx, 9
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PosGen@@6B@

; 181  :    if (!NotReady)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN2@PosGen

; 182  :    {
; 183  :         delete[] sx;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T2[ebp], ecx
	mov	edx, DWORD PTR $T2[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 184  :         delete[] sfx;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	push	edx
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4
$LN2@PosGen:

; 185  :    }
; 186  : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Random@@UAE@XZ			; Random::~Random
	npad	1
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1PosGen@@UAE@XZ ENDP					; PosGen::~PosGen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ??0PosGen@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0PosGen@@QAE@XZ PROC					; PosGen::PosGen, COMDAT
; _this$ = ecx

; 166  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Random@@QAE@XZ			; Random::Random
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7PosGen@@6B@

; 167  :    NotReady = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1

; 168  :    xi = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax+4], xmm0

; 169  :    sx = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0

; 170  :    sfx = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0

; 171  :    //lint -esym(613,PosGen::sx)
; 172  :    //lint -esym(613,PosGen::sfx)
; 173  : }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0PosGen@@QAE@XZ ENDP					; PosGen::PosGen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ?Name@Uniform@@UAEPADXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Name@Uniform@@UAEPADXZ PROC				; Uniform::Name, COMDAT
; _this$ = ecx

; 368  : char* Uniform::Name()           { return "Uniform"; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ??_C@_07IBHIHIHC@Uniform@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Name@Uniform@@UAEPADXZ ENDP				; Uniform::Name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GRandom@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GRandom@@UAEPAXI@Z PROC				; Random::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Random@@UAE@XZ			; Random::~Random
	npad	1
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GRandom@@UAEPAXI@Z ENDP				; Random::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ?Raw@Random@@CAMXZ
_TEXT	SEGMENT
tv84 = -232						; size = 4
_lo$ = -32						; size = 4
_hi$ = -20						; size = 4
_iseed$ = -8						; size = 4
?Raw@Random@@CAMXZ PROC					; Random::Raw, COMDAT

; 50   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	ebx
	push	esi
	push	edi

; 51   :    long iseed = (long) seed;

	cvttsd2si eax, QWORD PTR ?seed@Random@@0NA
	mov	DWORD PTR _iseed$[ebp], eax

; 52   :    long hi = iseed / 127773L;                 // integer division

	mov	eax, DWORD PTR _iseed$[ebp]
	cdq
	mov	ecx, 127773				; 0001f31dH
	idiv	ecx
	mov	DWORD PTR _hi$[ebp], eax

; 53   :    long lo = iseed - hi * 127773L;            // modulo

	imul	eax, DWORD PTR _hi$[ebp], 127773
	mov	ecx, DWORD PTR _iseed$[ebp]
	sub	ecx, eax
	mov	DWORD PTR _lo$[ebp], ecx

; 54   :    iseed = 16807 * lo - 2836 * hi;

	imul	eax, DWORD PTR _lo$[ebp], 16807
	imul	ecx, DWORD PTR _hi$[ebp], 2836
	sub	eax, ecx
	mov	DWORD PTR _iseed$[ebp], eax

; 55   :    if (iseed <= 0)

	cmp	DWORD PTR _iseed$[ebp], 0
	jg	SHORT $LN2@Raw

; 56   :        iseed += 2147483647L;

	mov	eax, DWORD PTR _iseed$[ebp]
	add	eax, 2147483647				; 7fffffffH
	mov	DWORD PTR _iseed$[ebp], eax
$LN2@Raw:

; 57   :    seed = (double)iseed;

	cvtsi2sd xmm0, DWORD PTR _iseed$[ebp]
	movsd	QWORD PTR ?seed@Random@@0NA, xmm0

; 58   :    
; 59   :    return float(seed) * 4.656612875e-10f;

	cvtsd2ss xmm0, QWORD PTR ?seed@Random@@0NA
	mulss	xmm0, DWORD PTR __real@30000000
	movss	DWORD PTR tv84[ebp], xmm0
	fld	DWORD PTR tv84[ebp]

; 60   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Raw@Random@@CAMXZ ENDP					; Random::Raw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ?load@Random@@UAEXPAHPAMPAPAV1@@Z
_TEXT	SEGMENT
$T1 = -220						; size = 12
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
?load@Random@@UAEXPAHPAMPAPAV1@@Z PROC			; Random::load, COMDAT
; _this$ = ecx

; 129  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 130  :     throw(logic_error("Newran: illegal combination"));

	push	OFFSET ??_C@_0BM@IGIHGNLE@Newran?3?5illegal?5combination@
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0logic_error@std@@QAE@PBD@Z		; std::logic_error::logic_error
	push	OFFSET __TI2?AVlogic_error@std@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
	npad	1
$LN1@load:

; 131  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?load@Random@@UAEXPAHPAMPAPAV1@@Z ENDP			; Random::load
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.h
;	COMDAT ?tDelete@Random@@UAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?tDelete@Random@@UAEXXZ PROC				; Random::tDelete, COMDAT
; _this$ = ecx

; 59   : virtual void            tDelete( ) { }          // delete components of sum

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?tDelete@Random@@UAEXXZ ENDP				; Random::tDelete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.h
;	COMDAT ?nelems@Random@@UBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?nelems@Random@@UBEHXZ PROC				; Random::nelems, COMDAT
; _this$ = ecx

; 58   : virtual int             nelems( ) const     { return 1; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?nelems@Random@@UBEHXZ ENDP				; Random::nelems
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.h
;	COMDAT ?Variance@Random@@UBE?AVExtReal@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Variance@Random@@UBE?AVExtReal@@XZ PROC		; Random::Variance, COMDAT
; _this$ = ecx

; 57   : virtual ExtReal         Variance( ) const   { return 1.0f / 12.0f; }    // variance of distribution

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@3daaaaab
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0ExtReal@@QAE@M@Z			; ExtReal::ExtReal
	npad	1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Variance@Random@@UBE?AVExtReal@@XZ ENDP		; Random::Variance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.h
;	COMDAT ?Mean@Random@@UBE?AVExtReal@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?Mean@Random@@UBE?AVExtReal@@XZ PROC			; Random::Mean, COMDAT
; _this$ = ecx

; 56   : virtual ExtReal         Mean( ) const       { return 0.5f; }            // mean of distribution

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0ExtReal@@QAE@M@Z			; ExtReal::ExtReal
	npad	1
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Mean@Random@@UBE?AVExtReal@@XZ ENDP			; Random::Mean
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ?Density@Random@@UBEMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___formal$ = 8						; size = 4
?Density@Random@@UBEMM@Z PROC				; Random::Density, COMDAT
; _this$ = ecx

; 68   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 69   :     return 0.0;

	fldz

; 70   : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?Density@Random@@UBEMM@Z ENDP				; Random::Density
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ?Name@Random@@UAEPADXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?Name@Random@@UAEPADXZ PROC				; Random::Name, COMDAT
; _this$ = ecx

; 367  : char* Random::Name()            { return "Random"; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ??_C@_06BEOPDEGP@Random@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Name@Random@@UAEPADXZ ENDP				; Random::Name
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ?Next@Random@@UAEMXZ
_TEXT	SEGMENT
tv87 = -252						; size = 4
$T1 = -244						; size = 12
_f$ = -32						; size = 4
_i$ = -20						; size = 4
_this$ = -8						; size = 4
?Next@Random@@UAEMXZ PROC				; Random::Next, COMDAT
; _this$ = ecx

; 89   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 252				; 000000fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 90   :    if (!seed)

	movsd	xmm0, QWORD PTR ?seed@Random@@0NA
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@Next

; 91   :       throw(logic_error("Random number generator not initialised"));

	push	OFFSET ??_C@_0CI@EEHDCIKK@Random?5number?5generator?5not?5ini@
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0logic_error@std@@QAE@PBD@Z		; std::logic_error::logic_error
	push	OFFSET __TI2?AVlogic_error@std@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
	npad	1
$LN2@Next:

; 92   : 
; 93   :    int i = (int) (Raw( ) * 128);               // 0 <= i < 128

	call	?Raw@Random@@CAMXZ			; Random::Raw
	fstp	DWORD PTR tv87[ebp]
	movss	xmm0, DWORD PTR tv87[ebp]
	mulss	xmm0, DWORD PTR __real@43000000
	cvttss2si eax, xmm0
	mov	DWORD PTR _i$[ebp], eax

; 94   : #ifdef _MSC_VER
; 95   :    DoNothing(i);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	?DoNothing@@YAXH@Z			; DoNothing
	add	esp, 4

; 96   :    DoNothing(i);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	call	?DoNothing@@YAXH@Z			; DoNothing
	add	esp, 4

; 97   : #endif
; 98   :    Real f = Buffer[i]; Buffer[i] = Raw();  // Microsoft release gets this wrong

	mov	eax, DWORD PTR _i$[ebp]
	movss	xmm0, DWORD PTR ?Buffer@Random@@0PAMA[eax*4]
	movss	DWORD PTR _f$[ebp], xmm0
	call	?Raw@Random@@CAMXZ			; Random::Raw
	mov	eax, DWORD PTR _i$[ebp]
	fstp	DWORD PTR ?Buffer@Random@@0PAMA[eax*4]

; 99   : 
; 100  :    return f;

	fld	DWORD PTR _f$[ebp]
$LN1@Next:

; 101  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 252				; 000000fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Next@Random@@UAEMXZ ENDP				; Random::Next
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ?GetSeed@Random@@SAJXZ
_TEXT	SEGMENT
?GetSeed@Random@@SAJXZ PROC				; Random::GetSeed, COMDAT

; 119  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi

; 120  :     return static_cast<long>(seed);

	cvttsd2si eax, QWORD PTR ?seed@Random@@0NA

; 121  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSeed@Random@@SAJXZ ENDP				; Random::GetSeed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ?SetLong@Random@@SAXJ@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_s$ = 8							; size = 4
?SetLong@Random@@SAXJ@Z PROC				; Random::SetLong, COMDAT

; 154  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 155  :     seed = s;

	cvtsi2sd xmm0, DWORD PTR _s$[ebp]
	movsd	QWORD PTR ?seed@Random@@0NA, xmm0

; 156  :     for (int i = 0; i < 128; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@SetLong
$LN2@SetLong:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@SetLong:
	cmp	DWORD PTR _i$1[ebp], 128		; 00000080H
	jge	SHORT $LN3@SetLong

; 157  :         Buffer[i] = Raw();

	call	?Raw@Random@@CAMXZ			; Random::Raw
	mov	eax, DWORD PTR _i$1[ebp]
	fstp	DWORD PTR ?Buffer@Random@@0PAMA[eax*4]
	jmp	SHORT $LN2@SetLong
$LN3@SetLong:

; 158  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SetLong@Random@@SAXJ@Z ENDP				; Random::SetLong
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ?Get@Random@@SANXZ
_TEXT	SEGMENT
tv67 = -200						; size = 8
?Get@Random@@SANXZ PROC					; Random::Get, COMDAT

; 109  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 200				; 000000c8H
	push	ebx
	push	esi
	push	edi

; 110  :     return seed/2147483648L;

	movsd	xmm0, QWORD PTR ?seed@Random@@0NA
	divsd	xmm0, QWORD PTR __real@41e0000000000000
	movsd	QWORD PTR tv67[ebp], xmm0
	fld	QWORD PTR tv67[ebp]

; 111  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?Get@Random@@SANXZ ENDP					; Random::Get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ?Set@Random@@SAXN@Z
_TEXT	SEGMENT
$T1 = -220						; size = 12
_i$2 = -8						; size = 4
_s$ = 8							; size = 8
?Set@Random@@SAXN@Z PROC				; Random::Set, COMDAT

; 139  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 224				; 000000e0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-32]
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 140  :    if (s >= 1.0 || s <= 0.0)

	movsd	xmm0, QWORD PTR _s$[ebp]
	comisd	xmm0, QWORD PTR __real@3ff0000000000000
	jae	SHORT $LN6@Set
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR _s$[ebp]
	jb	SHORT $LN5@Set
$LN6@Set:

; 141  :       throw(logic_error("Newran: seed out of range"));

	push	OFFSET ??_C@_0BK@PIOKIGDI@Newran?3?5seed?5out?5of?5range@
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0logic_error@std@@QAE@PBD@Z		; std::logic_error::logic_error
	push	OFFSET __TI2?AVlogic_error@std@@
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	__CxxThrowException@8
	npad	1
$LN5@Set:

; 142  : 
; 143  :    seed = (long)(s*2147483648L);

	movsd	xmm0, QWORD PTR _s$[ebp]
	mulsd	xmm0, QWORD PTR __real@41e0000000000000
	cvttsd2si eax, xmm0
	cvtsi2sd xmm0, eax
	movsd	QWORD PTR ?seed@Random@@0NA, xmm0

; 144  :    for (int i = 0; i < 128; i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@Set
$LN2@Set:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@Set:
	cmp	DWORD PTR _i$2[ebp], 128		; 00000080H
	jge	SHORT $LN3@Set

; 145  :        Buffer[i] = Raw();

	call	?Raw@Random@@CAMXZ			; Random::Raw
	mov	eax, DWORD PTR _i$2[ebp]
	fstp	DWORD PTR ?Buffer@Random@@0PAMA[eax*4]
	jmp	SHORT $LN2@Set
$LN3@Set:
$LN1@Set:

; 146  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Set@Random@@SAXN@Z ENDP				; Random::Set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.h
;	COMDAT ??1Random@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1Random@@UAE@XZ PROC					; Random::~Random, COMDAT
; _this$ = ecx

; 47   : virtual ~Random() { }                           // make destructors virtual

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Random@@6B@
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??1Random@@UAE@XZ ENDP					; Random::~Random
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.h
;	COMDAT ??0Random@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0Random@@QAE@XZ PROC					; Random::Random, COMDAT
; _this$ = ecx

; 46   :         Random() { }                            // do nothing

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Random@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0Random@@QAE@XZ ENDP					; Random::Random
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\ExtendedReal.h
;	COMDAT ??0ExtReal@@QAE@ABW4EXT_REAL_CODE@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_cx$ = 8						; size = 4
??0ExtReal@@QAE@ABW4EXT_REAL_CODE@@@Z PROC		; ExtReal::ExtReal, COMDAT
; _this$ = ecx

; 43   :         ExtReal(const EXT_REAL_CODE& cx)    { c = cx; value = 0.0f; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cx$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ExtReal@@QAE@ABW4EXT_REAL_CODE@@@Z ENDP		; ExtReal::ExtReal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\ExtendedReal.h
;	COMDAT ??0ExtReal@@QAE@M@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??0ExtReal@@QAE@M@Z PROC				; ExtReal::ExtReal, COMDAT
; _this$ = ecx

; 42   :         ExtReal(Real v)                     { c = Finite; value = v; }

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR [eax], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0ExtReal@@QAE@M@Z ENDP				; ExtReal::ExtReal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1runtime_error@std@@UAE@XZ
	npad	1
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7runtime_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1runtime_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1runtime_error@std@@UAE@XZ PROC			; std::runtime_error::~runtime_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	npad	1
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1runtime_error@std@@UAE@XZ ENDP			; std::runtime_error::~runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\stdexcept
;	COMDAT ??0runtime_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
??0runtime_error@std@@QAE@PBD@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx

; 106  :     explicit runtime_error(const char* _Message) : _Mybase(_Message) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@QBD@Z		; std::exception::exception
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7runtime_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0runtime_error@std@@QAE@PBD@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC			; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1logic_error@std@@UAE@XZ
	npad	1
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@ABV01@@Z		; std::exception::exception
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1logic_error@std@@UAE@XZ PROC				; std::logic_error::~logic_error, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	npad	1
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\stdexcept
;	COMDAT ??0logic_error@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@PBD@Z PROC			; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 26   :     explicit logic_error(const char* _Message) : _Mybase(_Message) {}

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0exception@std@@QAE@QBD@Z		; std::exception::exception
	npad	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7logic_error@std@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0logic_error@std@@QAE@PBD@Z ENDP			; std::logic_error::logic_error
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1exception@std@@UAE@XZ		; std::exception::~exception
	npad	1
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN2@scalar
	push	12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN2@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
tv69 = -208						; size = 4
_this$ = -8						; size = 4
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 95   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@what
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv69[ebp], edx
	jmp	SHORT $LN4@what
$LN3@what:
	mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
$LN4@what:
	mov	eax, DWORD PTR tv69[ebp]

; 97   :     }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 90   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 91   :         __std_exception_destroy(&_Data);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	___std_exception_destroy
	add	esp, 4

; 92   :     }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-12]
	mov	ecx, 3
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 72   :         : _Data()

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR __Other$[ebp]
	add	ecx, 4
	push	ecx
	call	___std_exception_copy
	add	esp, 8

; 75   :     }

	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@QBD@Z
_TEXT	SEGMENT
__InitData$ = -24					; size = 8
_this$ = -8						; size = 4
__Message$ = 8						; size = 4
??0exception@std@@QAE@QBD@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 60   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 220				; 000000dcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-28]
	mov	ecx, 7
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7exception@std@@6B@

; 59   :         : _Data()

	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax

; 61   :         __std_exception_data _InitData = { _Message, true };

	mov	eax, DWORD PTR __Message$[ebp]
	mov	DWORD PTR __InitData$[ebp], eax
	mov	BYTE PTR __InitData$[ebp+4], 1

; 62   :         __std_exception_copy(&_InitData, &_Data);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	lea	ecx, DWORD PTR __InitData$[ebp]
	push	ecx
	call	___std_exception_copy
	add	esp, 8

; 63   :     }

	mov	eax, DWORD PTR _this$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@exception
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 220				; 000000dcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN6@exception:
	DD	1
	DD	$LN5@exception
$LN5@exception:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN4@exception
$LN4@exception:
	DB	95					; 0000005fH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
??0exception@std@@QAE@QBD@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\cmath
;	COMDAT ?sin@@YAMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?sin@@YAMM@Z PROC					; sin, COMDAT

; 257  : _NODISCARD _Check_return_ inline float sin(_In_ float _Xx) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 258  :     return _CSTD sinf(_Xx);

	push	ecx
	movss	xmm0, DWORD PTR __Xx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_sinf
	add	esp, 4

; 259  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?sin@@YAMM@Z ENDP					; sin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\cmath
;	COMDAT ?log@@YAMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?log@@YAMM@Z PROC					; log, COMDAT

; 179  : _NODISCARD _Check_return_ inline float log(_In_ float _Xx) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 180  :     return _CSTD logf(_Xx);

	push	ecx
	movss	xmm0, DWORD PTR __Xx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_logf
	add	esp, 4

; 181  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?log@@YAMM@Z ENDP					; log
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\cmath
;	COMDAT ?fabs@@YAMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?fabs@@YAMM@Z PROC					; fabs, COMDAT

; 117  : _NODISCARD _Check_return_ inline float fabs(_In_ float _Xx) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 118  :     return _CSTD fabsf(_Xx);

	push	ecx
	movss	xmm0, DWORD PTR __Xx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_fabsf
	add	esp, 4

; 119  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?fabs@@YAMM@Z ENDP					; fabs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.40.33807\include\cmath
;	COMDAT ?exp@@YAMM@Z
_TEXT	SEGMENT
__Xx$ = 8						; size = 4
?exp@@YAMM@Z PROC					; exp, COMDAT

; 105  : _NODISCARD _Check_return_ inline float exp(_In_ float _Xx) noexcept /* strengthened */ {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	mov	edi, ebp
	xor	ecx, ecx
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 106  :     return _CSTD expf(_Xx);

	push	ecx
	movss	xmm0, DWORD PTR __Xx$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_expf
	add	esp, 4

; 107  : }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?exp@@YAMM@Z ENDP					; exp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv71 = -196						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 757  :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-4]
	mov	ecx, 1
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 758  :             return (float)sin(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_sin
	add	esp, 8
	fstp	DWORD PTR tv71[ebp]
	fld	DWORD PTR tv71[ebp]

; 759  :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
;	COMDAT _logf
_TEXT	SEGMENT
tv71 = -196						; size = 4
__X$ = 8						; size = 4
_logf	PROC						; COMDAT

; 739  :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-4]
	mov	ecx, 1
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 740  :             return (float)log(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_log
	add	esp, 8
	fstp	DWORD PTR tv71[ebp]
	fld	DWORD PTR tv71[ebp]

; 741  :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_logf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
;	COMDAT _fabsf
_TEXT	SEGMENT
tv71 = -196						; size = 4
__X$ = 8						; size = 4
_fabsf	PROC						; COMDAT

; 679  :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-4]
	mov	ecx, 1
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 680  :             return (float)fabs(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_fabs
	add	esp, 8
	fstp	DWORD PTR tv71[ebp]
	fld	DWORD PTR tv71[ebp]

; 681  :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
;	COMDAT _expf
_TEXT	SEGMENT
tv71 = -196						; size = 4
__X$ = 8						; size = 4
_expf	PROC						; COMDAT

; 662  :         {

	push	ebp
	mov	ebp, esp
	sub	esp, 196				; 000000c4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-4]
	mov	ecx, 1
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 663  :             return (float)exp(_X);

	cvtss2sd xmm0, DWORD PTR __X$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_exp
	add	esp, 8
	fstp	DWORD PTR tv71[ebp]
	fld	DWORD PTR tv71[ebp]

; 664  :         }

	pop	edi
	pop	esi
	pop	ebx
	add	esp, 196				; 000000c4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_expf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\pw152\Common\SpeedTreeRT\SourceCode\LibRandom_Source\RobertDavies_Random.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
